
BoucingBall.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011810  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c14  08011ab0  08011ab0  00021ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080146c4  080146c4  000246c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080146cc  080146cc  000246cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080146d0  080146d0  000246d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  080146d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005ab8  240000c4  08014798  000300c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005b7c  08014798  00035b7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300f2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003ab09  00000000  00000000  00030135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006db1  00000000  00000000  0006ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b90  00000000  00000000  000719f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021e2  00000000  00000000  00074580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004361d  00000000  00000000  00076762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b048  00000000  00000000  000b9d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ac5b2  00000000  00000000  000f4dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c544  00000000  00000000  002a137c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  002ad8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c4 	.word	0x240000c4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011a98 	.word	0x08011a98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c8 	.word	0x240000c8
 80002dc:	08011a98 	.word	0x08011a98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <Init_TIM3>:
/*
 * Init and start TIM3 in Interrupt mode
 *
 * */

HAL_StatusTypeDef Init_TIM3(TIM_HandleTypeDef* TIMHandle) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b092      	sub	sp, #72	; 0x48
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	RCC_ClkInitTypeDef    clkconfig;
	volatile uint32_t uwTimclock = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t uwPrescalerValue = 0U;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
	volatile uint32_t uwAPB1Prescaler = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
	volatile uint32_t HCLKFreq;
	volatile uint32_t APB1Freq;
	volatile uint32_t APB2Freq;

	/*Configure the TIM3 IRQ priority */
	HAL_NVIC_SetPriority(TIM3_IRQn, TICK_INT_PRIORITY, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	210f      	movs	r1, #15
 8000694:	201d      	movs	r0, #29
 8000696:	f004 fa3a 	bl	8004b0e <HAL_NVIC_SetPriority>
	/* Enable the TIM3 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800069a:	201d      	movs	r0, #29
 800069c:	f004 fa51 	bl	8004b42 <HAL_NVIC_EnableIRQ>
	/* Enable TIM6 clock */
	__HAL_RCC_TIM3_CLK_ENABLE();
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <Init_TIM3+0xc4>)
 80006a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <Init_TIM3+0xc4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <Init_TIM3+0xc4>)
 80006b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]

	// Find out the TIM3 CLK frequency:
    SysClockFreq = HAL_RCC_GetSysClockFreq();
 80006be:	f008 feef 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 80006c2:	4603      	mov	r3, r0
 80006c4:	61bb      	str	r3, [r7, #24]
	HCLKFreq = HAL_RCC_GetHCLKFreq();
 80006c6:	f009 f865 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 80006ca:	4603      	mov	r3, r0
 80006cc:	617b      	str	r3, [r7, #20]
	APB1Freq = HAL_RCC_GetPCLK1Freq();
 80006ce:	f009 f891 	bl	80097f4 <HAL_RCC_GetPCLK1Freq>
 80006d2:	4603      	mov	r3, r0
 80006d4:	613b      	str	r3, [r7, #16]
	//APB2Freq = HAL_RCC_GetPCLK2Freq();
	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d8:	61fb      	str	r3, [r7, #28]
	/* Compute TIMERs clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <Init_TIM3+0x6a>
	{
		uwTimclock = APB1Freq; // if PPRE1 bits in RCC_CFGR are 0XX (APB1 Prescaler = 1), then TIMs run at APB1 clk)
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
 80006e4:	e002      	b.n	80006ec <Init_TIM3+0x70>
	}
	else
	{
	  uwTimclock = 2*APB1Freq; // if PPRE1 bits in RCC_CFGR are 1XX (APB1 Prescaler > 1), then TIMs run at 2*APB1 clk)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Compute the prescaler value to have TIM3 counter clock equal to 1 MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <Init_TIM3+0xc8>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0c9b      	lsrs	r3, r3, #18
 80006f6:	3b01      	subs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
	/* Initialize TIM3 */
	TIMHandle->Instance = TIM3;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <Init_TIM3+0xcc>)
 80006fe:	601a      	str	r2, [r3, #0]
	TIMHandle->Init.Period = 65535U;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	60da      	str	r2, [r3, #12]
	TIMHandle->Init.Prescaler = uwPrescalerValue;
 8000708:	6a3a      	ldr	r2, [r7, #32]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	605a      	str	r2, [r3, #4]
	TIMHandle->Init.ClockDivision = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	TIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	TIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(TIMHandle) == HAL_OK)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f00a ff62 	bl	800b5ea <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <Init_TIM3+0xba>
	{
		/* Start the TIM time Base generation in interrupt mode */
		//return HAL_TIM_Base_Start_IT(TIMHandle);
		return HAL_TIM_Base_Start(TIMHandle);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f00a ffbd 	bl	800b6ac <HAL_TIM_Base_Start>
 8000732:	4603      	mov	r3, r0
 8000734:	e000      	b.n	8000738 <Init_TIM3+0xbc>
	}
	/* Return function status */
	return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3748      	adds	r7, #72	; 0x48
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024400 	.word	0x58024400
 8000744:	431bde83 	.word	0x431bde83
 8000748:	40000400 	.word	0x40000400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 8000750:	f004 f830 	bl	80047b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8000754:	f000 fa94 	bl	8000c80 <SystemClock_Config>
  //MX_ADC3_Init();

  /* USER CODE BEGIN 2 */

  /* Configure the User push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000758:	2101      	movs	r1, #1
 800075a:	2000      	movs	r0, #0
 800075c:	f002 f866 	bl	800282c <BSP_PB_Init>

  /* Configure TIM3 timebase */
  Init_TIM3(&TIM3Handle);
 8000760:	4850      	ldr	r0, [pc, #320]	; (80008a4 <main+0x158>)
 8000762:	f7ff ff8b 	bl	800067c <Init_TIM3>

  /* Init UART3*/
  if (USART3_Init(&UART3Handle) != HAL_OK){
 8000766:	4850      	ldr	r0, [pc, #320]	; (80008a8 <main+0x15c>)
 8000768:	f001 fb64 	bl	8001e34 <USART3_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <main+0x2a>
	  Error_Handler();
 8000772:	f000 fb2c 	bl	8000dce <Error_Handler>
  }
  RetargetInit(&UART3Handle);
 8000776:	484c      	ldr	r0, [pc, #304]	; (80008a8 <main+0x15c>)
 8000778:	f000 fb32 	bl	8000de0 <RetargetInit>

  //Drawing content
  Init_LCD_TS();
 800077c:	f000 f8ba 	bl	80008f4 <Init_LCD_TS>
  Display_InitialContent();
 8000780:	f000 f8e6 	bl	8000950 <Display_InitialContent>
  DrawBall(true);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f929 	bl	80009dc <DrawBall>
  while (1){

	  /* Get Touch screen position */
	  BSP_TS_GetState(0, &TS_State);
 800078a:	4948      	ldr	r1, [pc, #288]	; (80008ac <main+0x160>)
 800078c:	2000      	movs	r0, #0
 800078e:	f003 fe99 	bl	80044c4 <BSP_TS_GetState>

	  /* Get the x & y coords */
	  x = TS_State.TouchX;
 8000792:	4b46      	ldr	r3, [pc, #280]	; (80008ac <main+0x160>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <main+0x164>)
 800079a:	801a      	strh	r2, [r3, #0]
	  y = TS_State.TouchY;
 800079c:	4b43      	ldr	r3, [pc, #268]	; (80008ac <main+0x160>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <main+0x168>)
 80007a4:	801a      	strh	r2, [r3, #0]

	  if ((y >= ball.y-10 && y <= ball.y+10) && (x >= ball.x-10 && x <= ball.x+10)) {
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <main+0x168>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <main+0x16c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	3b0a      	subs	r3, #10
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dbe9      	blt.n	800078a <main+0x3e>
 80007b6:	4b3f      	ldr	r3, [pc, #252]	; (80008b4 <main+0x168>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <main+0x16c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	330a      	adds	r3, #10
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dce1      	bgt.n	800078a <main+0x3e>
 80007c6:	4b3a      	ldr	r3, [pc, #232]	; (80008b0 <main+0x164>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <main+0x16c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b0a      	subs	r3, #10
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbd9      	blt.n	800078a <main+0x3e>
 80007d6:	4b36      	ldr	r3, [pc, #216]	; (80008b0 <main+0x164>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <main+0x16c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	330a      	adds	r3, #10
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dcd1      	bgt.n	800078a <main+0x3e>
		  UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 80007e6:	4835      	ldr	r0, [pc, #212]	; (80008bc <main+0x170>)
 80007e8:	f000 fcd8 	bl	800119c <UTIL_LCD_Clear>
		  /* Start the game timer */
		  start_time = HAL_GetTick(); // Get the current tick count
 80007ec:	f004 f868 	bl	80048c0 <HAL_GetTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <main+0x174>)
 80007f4:	6013      	str	r3, [r2, #0]

		  PlayGame();
 80007f6:	f000 f927 	bl	8000a48 <PlayGame>

		  /* Time played */
		  time_elapsed = HAL_GetTick() - start_time;
 80007fa:	f004 f861 	bl	80048c0 <HAL_GetTick>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <main+0x174>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	4a2f      	ldr	r2, [pc, #188]	; (80008c4 <main+0x178>)
 8000808:	6013      	str	r3, [r2, #0]
		  break;
 800080a:	bf00      	nop
	  }
  }


  /* Game score displayed */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 800080c:	482b      	ldr	r0, [pc, #172]	; (80008bc <main+0x170>)
 800080e:	f000 fcc5 	bl	800119c <UTIL_LCD_Clear>

  sprintf((char*)time_str, "Score: %d", counter);
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <main+0x17c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	492c      	ldr	r1, [pc, #176]	; (80008cc <main+0x180>)
 800081a:	482d      	ldr	r0, [pc, #180]	; (80008d0 <main+0x184>)
 800081c:	f010 f84a 	bl	80108b4 <siprintf>
  UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)time_str, CENTER_MODE);
 8000820:	2301      	movs	r3, #1
 8000822:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <main+0x184>)
 8000824:	210f      	movs	r1, #15
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fd04 	bl	8001234 <UTIL_LCD_DisplayStringAt>

  sprintf((char *)time_str, "Time: %lu.%lu s", (time_elapsed / 1000), (time_elapsed % 1000)/100);
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <main+0x178>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <main+0x188>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	0999      	lsrs	r1, r3, #6
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <main+0x178>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <main+0x188>)
 800083e:	fba3 0302 	umull	r0, r3, r3, r2
 8000842:	099b      	lsrs	r3, r3, #6
 8000844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000848:	fb00 f303 	mul.w	r3, r0, r3
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <main+0x18c>)
 8000850:	fba2 2303 	umull	r2, r3, r2, r3
 8000854:	095b      	lsrs	r3, r3, #5
 8000856:	460a      	mov	r2, r1
 8000858:	4920      	ldr	r1, [pc, #128]	; (80008dc <main+0x190>)
 800085a:	481d      	ldr	r0, [pc, #116]	; (80008d0 <main+0x184>)
 800085c:	f010 f82a 	bl	80108b4 <siprintf>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)time_str, CENTER_MODE);
 8000860:	2301      	movs	r3, #1
 8000862:	4a1b      	ldr	r2, [pc, #108]	; (80008d0 <main+0x184>)
 8000864:	212d      	movs	r1, #45	; 0x2d
 8000866:	2000      	movs	r0, #0
 8000868:	f000 fce4 	bl	8001234 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, 75, (uint8_t *)"To play again click on", CENTER_MODE);
 800086c:	2301      	movs	r3, #1
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <main+0x194>)
 8000870:	214b      	movs	r1, #75	; 0x4b
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fcde 	bl	8001234 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 95, (uint8_t *)"the reset button", CENTER_MODE);
 8000878:	2301      	movs	r3, #1
 800087a:	4a1a      	ldr	r2, [pc, #104]	; (80008e4 <main+0x198>)
 800087c:	215f      	movs	r1, #95	; 0x5f
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fcd8 	bl	8001234 <UTIL_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000884:	f00d f8ea 	bl	800da5c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000888:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <main+0x19c>)
 800088a:	2100      	movs	r1, #0
 800088c:	4817      	ldr	r0, [pc, #92]	; (80008ec <main+0x1a0>)
 800088e:	f00d f92f 	bl	800daf0 <osThreadNew>
 8000892:	4603      	mov	r3, r0
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <main+0x1a4>)
 8000896:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000898:	f00d f904 	bl	800daa4 <osKernelStart>
 800089c:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	240001b8 	.word	0x240001b8
 80008a8:	24000124 	.word	0x24000124
 80008ac:	24000118 	.word	0x24000118
 80008b0:	240000f0 	.word	0x240000f0
 80008b4:	240000f2 	.word	0x240000f2
 80008b8:	24000204 	.word	0x24000204
 80008bc:	ff8080ff 	.word	0xff8080ff
 80008c0:	240000f8 	.word	0x240000f8
 80008c4:	240000fc 	.word	0x240000fc
 80008c8:	24000114 	.word	0x24000114
 80008cc:	08011abc 	.word	0x08011abc
 80008d0:	24000100 	.word	0x24000100
 80008d4:	10624dd3 	.word	0x10624dd3
 80008d8:	51eb851f 	.word	0x51eb851f
 80008dc:	08011ac8 	.word	0x08011ac8
 80008e0:	08011ad8 	.word	0x08011ad8
 80008e4:	08011af0 	.word	0x08011af0
 80008e8:	08011b4c 	.word	0x08011b4c
 80008ec:	08000dad 	.word	0x08000dad
 80008f0:	240000e0 	.word	0x240000e0

080008f4 <Init_LCD_TS>:


static void Init_LCD_TS(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	/*LCD Init*/
	BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80008fa:	2101      	movs	r1, #1
 80008fc:	2000      	movs	r0, #0
 80008fe:	f002 fca3 	bl	8003248 <BSP_LCD_Init>
	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8000902:	4810      	ldr	r0, [pc, #64]	; (8000944 <Init_LCD_TS+0x50>)
 8000904:	f000 fb32 	bl	8000f6c <UTIL_LCD_SetFuncDriver>
	BSP_LCD_GetXSize(0, &x_size);
 8000908:	490f      	ldr	r1, [pc, #60]	; (8000948 <Init_LCD_TS+0x54>)
 800090a:	2000      	movs	r0, #0
 800090c:	f002 fe78 	bl	8003600 <BSP_LCD_GetXSize>
	BSP_LCD_GetYSize(0, &y_size);
 8000910:	490e      	ldr	r1, [pc, #56]	; (800094c <Init_LCD_TS+0x58>)
 8000912:	2000      	movs	r0, #0
 8000914:	f002 fe92 	bl	800363c <BSP_LCD_GetYSize>

	/*TS Init*/
	TS_Init_t *TS_Init;
	TS_Init->Width = x_size;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <Init_LCD_TS+0x54>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
	TS_Init->Height = y_size;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <Init_LCD_TS+0x58>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	605a      	str	r2, [r3, #4]
	TS_Init->Orientation = TS_SWAP_XY;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2208      	movs	r2, #8
 800092c:	609a      	str	r2, [r3, #8]
	TS_Init->Accuracy = 3;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2203      	movs	r2, #3
 8000932:	60da      	str	r2, [r3, #12]
	BSP_TS_Init(0, TS_Init);
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	2000      	movs	r0, #0
 8000938:	f003 fd1e 	bl	8004378 <BSP_TS_Init>
}
 800093c:	bf00      	nop
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080145a0 	.word	0x080145a0
 8000948:	240000e8 	.word	0x240000e8
 800094c:	240000ec 	.word	0x240000ec

08000950 <Display_InitialContent>:

static void Display_InitialContent(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af02      	add	r7, sp, #8
	/*Get width & height*/
	BSP_LCD_GetXSize(0, &x_size);
 8000956:	491a      	ldr	r1, [pc, #104]	; (80009c0 <Display_InitialContent+0x70>)
 8000958:	2000      	movs	r0, #0
 800095a:	f002 fe51 	bl	8003600 <BSP_LCD_GetXSize>
	BSP_LCD_GetYSize(0, &y_size);
 800095e:	4919      	ldr	r1, [pc, #100]	; (80009c4 <Display_InitialContent+0x74>)
 8000960:	2000      	movs	r0, #0
 8000962:	f002 fe6b 	bl	800363c <BSP_LCD_GetYSize>

	/* Clear the LCD */
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_LIGHTBLUE);
 8000966:	4818      	ldr	r0, [pc, #96]	; (80009c8 <Display_InitialContent+0x78>)
 8000968:	f000 fb6a 	bl	8001040 <UTIL_LCD_SetBackColor>
	UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 800096c:	4816      	ldr	r0, [pc, #88]	; (80009c8 <Display_InitialContent+0x78>)
 800096e:	f000 fc15 	bl	800119c <UTIL_LCD_Clear>
	BSP_LCD_FillRect(0, 0, 0, x_size, y_size, UTIL_LCD_COLOR_LIGHTBLUE);
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <Display_InitialContent+0x70>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <Display_InitialContent+0x74>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4913      	ldr	r1, [pc, #76]	; (80009c8 <Display_InitialContent+0x78>)
 800097c:	9101      	str	r1, [sp, #4]
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	4613      	mov	r3, r2
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2000      	movs	r0, #0
 8000988:	f003 f826 	bl	80039d8 <BSP_LCD_FillRect>

	/* Set the LCD Text Color */
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 fb42 	bl	8001018 <UTIL_LCD_SetTextColor>

	/* Display LCD messages */
	UTIL_LCD_SetFont(&Font24);
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <Display_InitialContent+0x7c>)
 8000996:	f000 fb67 	bl	8001068 <UTIL_LCD_SetFont>
	UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)"BOUNCING BALL", CENTER_MODE);
 800099a:	2301      	movs	r3, #1
 800099c:	4a0c      	ldr	r2, [pc, #48]	; (80009d0 <Display_InitialContent+0x80>)
 800099e:	210f      	movs	r1, #15
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fc47 	bl	8001234 <UTIL_LCD_DisplayStringAt>

	UTIL_LCD_SetFont(&Font20);
 80009a6:	480b      	ldr	r0, [pc, #44]	; (80009d4 <Display_InitialContent+0x84>)
 80009a8:	f000 fb5e 	bl	8001068 <UTIL_LCD_SetFont>
	UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"Click on the ball to start", CENTER_MODE);
 80009ac:	2301      	movs	r3, #1
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <Display_InitialContent+0x88>)
 80009b0:	212d      	movs	r1, #45	; 0x2d
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 fc3e 	bl	8001234 <UTIL_LCD_DisplayStringAt>

}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	240000e8 	.word	0x240000e8
 80009c4:	240000ec 	.word	0x240000ec
 80009c8:	ff8080ff 	.word	0xff8080ff
 80009cc:	24000000 	.word	0x24000000
 80009d0:	08011b04 	.word	0x08011b04
 80009d4:	24000008 	.word	0x24000008
 80009d8:	08011b14 	.word	0x08011b14

080009dc <DrawBall>:

static void DrawBall(bool b)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	if (b){
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d015      	beq.n	8000a18 <DrawBall+0x3c>
		/*Create ball object*/
		ball.radius = 22;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <DrawBall+0x60>)
 80009ee:	2216      	movs	r2, #22
 80009f0:	611a      	str	r2, [r3, #16]
		ball.x = x_size/2;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <DrawBall+0x64>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	085b      	lsrs	r3, r3, #1
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <DrawBall+0x60>)
 80009fc:	601a      	str	r2, [r3, #0]
		ball.y = y_size/2+50;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <DrawBall+0x68>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	085b      	lsrs	r3, r3, #1
 8000a04:	3332      	adds	r3, #50	; 0x32
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <DrawBall+0x60>)
 8000a0a:	605a      	str	r2, [r3, #4]
		ball.vx = 0;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <DrawBall+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
		ball.vy = 0;
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <DrawBall+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
	}

	/*Draw ball*/
	UTIL_LCD_FillCircle(ball.x, ball.y, ball.radius, UTIL_LCD_COLOR_WHITE);
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <DrawBall+0x60>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <DrawBall+0x60>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <DrawBall+0x60>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	f000 fdf3 	bl	8001618 <UTIL_LCD_FillCircle>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	24000204 	.word	0x24000204
 8000a40:	240000e8 	.word	0x240000e8
 8000a44:	240000ec 	.word	0x240000ec

08000a48 <PlayGame>:

static void PlayGame(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
	srand(time(0));
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f00f ff9c 	bl	801098c <time>
 8000a54:	4602      	mov	r2, r0
 8000a56:	460b      	mov	r3, r1
 8000a58:	4613      	mov	r3, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00f fd4e 	bl	80104fc <srand>
	int lower = -5, upper = 5;
 8000a60:	f06f 0304 	mvn.w	r3, #4
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	2305      	movs	r3, #5
 8000a68:	60bb      	str	r3, [r7, #8]
	int random_number;
	while(1){
		/* Get Touch screen position */
		BSP_TS_GetState(0, &TS_State);
 8000a6a:	496f      	ldr	r1, [pc, #444]	; (8000c28 <PlayGame+0x1e0>)
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f003 fd29 	bl	80044c4 <BSP_TS_GetState>

		/*Get the x & y coords*/
		x = TS_State.TouchX;
 8000a72:	4b6d      	ldr	r3, [pc, #436]	; (8000c28 <PlayGame+0x1e0>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	4b6c      	ldr	r3, [pc, #432]	; (8000c2c <PlayGame+0x1e4>)
 8000a7a:	801a      	strh	r2, [r3, #0]
		y = TS_State.TouchY;
 8000a7c:	4b6a      	ldr	r3, [pc, #424]	; (8000c28 <PlayGame+0x1e0>)
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4b6b      	ldr	r3, [pc, #428]	; (8000c30 <PlayGame+0x1e8>)
 8000a84:	801a      	strh	r2, [r3, #0]

		/* Update the ball's position */
		ball.vy += 1; // gravity
 8000a86:	4b6b      	ldr	r3, [pc, #428]	; (8000c34 <PlayGame+0x1ec>)
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a69      	ldr	r2, [pc, #420]	; (8000c34 <PlayGame+0x1ec>)
 8000a8e:	60d3      	str	r3, [r2, #12]
		ball.x += ball.vx;
 8000a90:	4b68      	ldr	r3, [pc, #416]	; (8000c34 <PlayGame+0x1ec>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b67      	ldr	r3, [pc, #412]	; (8000c34 <PlayGame+0x1ec>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a66      	ldr	r2, [pc, #408]	; (8000c34 <PlayGame+0x1ec>)
 8000a9c:	6013      	str	r3, [r2, #0]
		ball.y += ball.vy;
 8000a9e:	4b65      	ldr	r3, [pc, #404]	; (8000c34 <PlayGame+0x1ec>)
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	4b64      	ldr	r3, [pc, #400]	; (8000c34 <PlayGame+0x1ec>)
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	4a62      	ldr	r2, [pc, #392]	; (8000c34 <PlayGame+0x1ec>)
 8000aaa:	6053      	str	r3, [r2, #4]

		UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 8000aac:	4862      	ldr	r0, [pc, #392]	; (8000c38 <PlayGame+0x1f0>)
 8000aae:	f000 fb75 	bl	800119c <UTIL_LCD_Clear>

		/*Draw ball and score*/
		sprintf((char*)time_str, "%d", counter);
 8000ab2:	4b62      	ldr	r3, [pc, #392]	; (8000c3c <PlayGame+0x1f4>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4961      	ldr	r1, [pc, #388]	; (8000c40 <PlayGame+0x1f8>)
 8000aba:	4862      	ldr	r0, [pc, #392]	; (8000c44 <PlayGame+0x1fc>)
 8000abc:	f00f fefa 	bl	80108b4 <siprintf>
		UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)time_str, CENTER_MODE);
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	4a60      	ldr	r2, [pc, #384]	; (8000c44 <PlayGame+0x1fc>)
 8000ac4:	210f      	movs	r1, #15
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f000 fbb4 	bl	8001234 <UTIL_LCD_DisplayStringAt>
		DrawBall(false);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff ff85 	bl	80009dc <DrawBall>

		/*Check if the ball is touched*/
		if ((y >= ball.y-ball.radius/2 && y <= ball.y+ball.radius/2) && (x >= ball.x-ball.radius/2 && x <= ball.x+ball.radius/2)) {
 8000ad2:	4b57      	ldr	r3, [pc, #348]	; (8000c30 <PlayGame+0x1e8>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4b56      	ldr	r3, [pc, #344]	; (8000c34 <PlayGame+0x1ec>)
 8000ada:	685a      	ldr	r2, [r3, #4]
 8000adc:	4b55      	ldr	r3, [pc, #340]	; (8000c34 <PlayGame+0x1ec>)
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	da00      	bge.n	8000ae6 <PlayGame+0x9e>
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	105b      	asrs	r3, r3, #1
 8000ae8:	425b      	negs	r3, r3
 8000aea:	4413      	add	r3, r2
 8000aec:	4299      	cmp	r1, r3
 8000aee:	db5d      	blt.n	8000bac <PlayGame+0x164>
 8000af0:	4b4f      	ldr	r3, [pc, #316]	; (8000c30 <PlayGame+0x1e8>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <PlayGame+0x1ec>)
 8000af8:	685a      	ldr	r2, [r3, #4]
 8000afa:	4b4e      	ldr	r3, [pc, #312]	; (8000c34 <PlayGame+0x1ec>)
 8000afc:	691b      	ldr	r3, [r3, #16]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	da00      	bge.n	8000b04 <PlayGame+0xbc>
 8000b02:	3301      	adds	r3, #1
 8000b04:	105b      	asrs	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	dc4f      	bgt.n	8000bac <PlayGame+0x164>
 8000b0c:	4b47      	ldr	r3, [pc, #284]	; (8000c2c <PlayGame+0x1e4>)
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <PlayGame+0x1ec>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b47      	ldr	r3, [pc, #284]	; (8000c34 <PlayGame+0x1ec>)
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da00      	bge.n	8000b20 <PlayGame+0xd8>
 8000b1e:	3301      	adds	r3, #1
 8000b20:	105b      	asrs	r3, r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	4299      	cmp	r1, r3
 8000b28:	db40      	blt.n	8000bac <PlayGame+0x164>
 8000b2a:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <PlayGame+0x1e4>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <PlayGame+0x1ec>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <PlayGame+0x1ec>)
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	da00      	bge.n	8000b3e <PlayGame+0xf6>
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	105b      	asrs	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	4299      	cmp	r1, r3
 8000b44:	dc32      	bgt.n	8000bac <PlayGame+0x164>
			/*Random generator for horizontal bounce*/
			random_number = (rand() % (upper - lower + 1)) + lower;
 8000b46:	f00f fd07 	bl	8010558 <rand>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	1acb      	subs	r3, r1, r3
 8000b52:	3301      	adds	r3, #1
 8000b54:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	4413      	add	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]

			ball.vy += -10; // kick the ball up
 8000b64:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <PlayGame+0x1ec>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	3b0a      	subs	r3, #10
 8000b6a:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <PlayGame+0x1ec>)
 8000b6c:	60d3      	str	r3, [r2, #12]
			ball.vx += random_number; // kick the ball sideways
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <PlayGame+0x1ec>)
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <PlayGame+0x1ec>)
 8000b78:	6093      	str	r3, [r2, #8]
			if(x != px && y != py){
 8000b7a:	4b2c      	ldr	r3, [pc, #176]	; (8000c2c <PlayGame+0x1e4>)
 8000b7c:	881a      	ldrh	r2, [r3, #0]
 8000b7e:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <PlayGame+0x200>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d012      	beq.n	8000bac <PlayGame+0x164>
 8000b86:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <PlayGame+0x1e8>)
 8000b88:	881a      	ldrh	r2, [r3, #0]
 8000b8a:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <PlayGame+0x204>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d00c      	beq.n	8000bac <PlayGame+0x164>
				counter += 1; // count the bounces
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <PlayGame+0x1f4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <PlayGame+0x1f4>)
 8000b9a:	6013      	str	r3, [r2, #0]
				px = x;
 8000b9c:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <PlayGame+0x1e4>)
 8000b9e:	881a      	ldrh	r2, [r3, #0]
 8000ba0:	4b29      	ldr	r3, [pc, #164]	; (8000c48 <PlayGame+0x200>)
 8000ba2:	801a      	strh	r2, [r3, #0]
				py = y;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <PlayGame+0x1e8>)
 8000ba6:	881a      	ldrh	r2, [r3, #0]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <PlayGame+0x204>)
 8000baa:	801a      	strh	r2, [r3, #0]
			}
		}
		/* Check for collisions with screen boundaries*/
		if (ball.x - ball.radius < 0) {
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <PlayGame+0x1ec>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <PlayGame+0x1ec>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	da04      	bge.n	8000bc4 <PlayGame+0x17c>
			ball.vx += 4; // bounce horizontally
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <PlayGame+0x1ec>)
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	3304      	adds	r3, #4
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <PlayGame+0x1ec>)
 8000bc2:	6093      	str	r3, [r2, #8]
		}
		if (ball.x + ball.radius > x_size) {
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <PlayGame+0x1ec>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <PlayGame+0x1ec>)
 8000bca:	691b      	ldr	r3, [r3, #16]
 8000bcc:	4413      	add	r3, r2
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <PlayGame+0x208>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d904      	bls.n	8000be2 <PlayGame+0x19a>
			ball.vx += -4; // bounce horizontally
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <PlayGame+0x1ec>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	3b04      	subs	r3, #4
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <PlayGame+0x1ec>)
 8000be0:	6093      	str	r3, [r2, #8]
		}
		if (ball.y - ball.radius < 0) {
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <PlayGame+0x1ec>)
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <PlayGame+0x1ec>)
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da02      	bge.n	8000bf6 <PlayGame+0x1ae>
			ball.vy = 4; // bounce vertically
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <PlayGame+0x1ec>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	60da      	str	r2, [r3, #12]
		}
		if (ball.y + ball.radius/2 > y_size+20) {
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <PlayGame+0x1ec>)
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <PlayGame+0x1ec>)
 8000bfc:	691b      	ldr	r3, [r3, #16]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da00      	bge.n	8000c04 <PlayGame+0x1bc>
 8000c02:	3301      	adds	r3, #1
 8000c04:	105b      	asrs	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <PlayGame+0x20c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3314      	adds	r3, #20
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d803      	bhi.n	8000c1c <PlayGame+0x1d4>
			break; //game over
		}
		HAL_Delay(26); // control frame rate
 8000c14:	201a      	movs	r0, #26
 8000c16:	f003 fe5f 	bl	80048d8 <HAL_Delay>
		BSP_TS_GetState(0, &TS_State);
 8000c1a:	e726      	b.n	8000a6a <PlayGame+0x22>
			break; //game over
 8000c1c:	bf00      	nop
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3710      	adds	r7, #16
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	24000118 	.word	0x24000118
 8000c2c:	240000f0 	.word	0x240000f0
 8000c30:	240000f2 	.word	0x240000f2
 8000c34:	24000204 	.word	0x24000204
 8000c38:	ff8080ff 	.word	0xff8080ff
 8000c3c:	24000114 	.word	0x24000114
 8000c40:	08011b30 	.word	0x08011b30
 8000c44:	24000100 	.word	0x24000100
 8000c48:	240000f4 	.word	0x240000f4
 8000c4c:	240000f6 	.word	0x240000f6
 8000c50:	240000e8 	.word	0x240000e8
 8000c54:	240000ec 	.word	0x240000ec

08000c58 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <BSP_PB_Callback+0x24>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	601a      	str	r2, [r3, #0]
  }
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	240000e4 	.word	0x240000e4

08000c80 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09e      	sub	sp, #120	; 0x78
 8000c84:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f007 fdbd 	bl	800880c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b42      	ldr	r3, [pc, #264]	; (8000da0 <SystemClock_Config+0x120>)
 8000c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9a:	4a41      	ldr	r2, [pc, #260]	; (8000da0 <SystemClock_Config+0x120>)
 8000c9c:	f023 0301 	bic.w	r3, r3, #1
 8000ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ca2:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <SystemClock_Config+0x120>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	4b3d      	ldr	r3, [pc, #244]	; (8000da4 <SystemClock_Config+0x124>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a3c      	ldr	r2, [pc, #240]	; (8000da4 <SystemClock_Config+0x124>)
 8000cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <SystemClock_Config+0x124>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cc4:	bf00      	nop
 8000cc6:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <SystemClock_Config+0x124>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cd2:	d1f8      	bne.n	8000cc6 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cdc:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cea:	2302      	movs	r3, #2
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000cf2:	23a0      	movs	r3, #160	; 0xa0
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d02:	2304      	movs	r3, #4
 8000d04:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f007 fdb4 	bl	8008880 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000d1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d26:	f000 f852 	bl	8000dce <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000d2a:	233f      	movs	r3, #63	; 0x3f
 8000d2c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d36:	2308      	movs	r3, #8
 8000d38:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d3a:	2340      	movs	r3, #64	; 0x40
 8000d3c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d3e:	2340      	movs	r3, #64	; 0x40
 8000d40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d48:	2340      	movs	r3, #64	; 0x40
 8000d4a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d50:	2104      	movs	r1, #4
 8000d52:	4618      	mov	r0, r3
 8000d54:	f008 f9ee 	bl	8009134 <HAL_RCC_ClockConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000d5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d66:	f000 f832 	bl	8000dce <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <SystemClock_Config+0x128>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <SystemClock_Config+0x128>)
 8000d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d74:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <SystemClock_Config+0x128>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SystemClock_Config+0x128>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <SystemClock_Config+0x128>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000d94:	f003 fdd0 	bl	8004938 <HAL_EnableCompensationCell>
}
 8000d98:	bf00      	nop
 8000d9a:	3778      	adds	r7, #120	; 0x78
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	58000400 	.word	0x58000400
 8000da4:	58024800 	.word	0x58024800
 8000da8:	58024400 	.word	0x58024400

08000dac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000db4:	20c8      	movs	r0, #200	; 0xc8
 8000db6:	f00c ff2d 	bl	800dc14 <osDelay>
    //HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
    BSP_LED_On(LED_GREEN);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f001 fcfa 	bl	80027b4 <BSP_LED_On>
    osDelay(200);
 8000dc0:	20c8      	movs	r0, #200	; 0xc8
 8000dc2:	f00c ff27 	bl	800dc14 <osDelay>
    //HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
    BSP_LED_Off(LED_GREEN);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f001 fd12 	bl	80027f0 <BSP_LED_Off>
    osDelay(200);
 8000dcc:	e7f2      	b.n	8000db4 <StartDefaultTask+0x8>

08000dce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd2:	b672      	cpsid	i
}
 8000dd4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f001 fcec 	bl	80027b4 <BSP_LED_On>
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0xe>
	...

08000de0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000de8:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <RetargetInit+0x28>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <RetargetInit+0x2c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6898      	ldr	r0, [r3, #8]
 8000df4:	2300      	movs	r3, #0
 8000df6:	2202      	movs	r2, #2
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f00f fcad 	bl	8010758 <setvbuf>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24000218 	.word	0x24000218
 8000e0c:	240000c0 	.word	0x240000c0

08000e10 <_isatty>:

int _isatty(int fd) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db04      	blt.n	8000e28 <_isatty+0x18>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	dc01      	bgt.n	8000e28 <_isatty+0x18>
    return 1;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e005      	b.n	8000e34 <_isatty+0x24>

  errno = EBADF;
 8000e28:	f00f fe22 	bl	8010a70 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2209      	movs	r2, #9
 8000e30:	601a      	str	r2, [r3, #0]
  return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <_close>:

int _close(int fd) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db04      	blt.n	8000e54 <_close+0x18>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	dc01      	bgt.n	8000e54 <_close+0x18>
    return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e006      	b.n	8000e62 <_close+0x26>

  errno = EBADF;
 8000e54:	f00f fe0c 	bl	8010a70 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2209      	movs	r2, #9
 8000e5c:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e76:	f00f fdfb 	bl	8010a70 <__errno>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2209      	movs	r2, #9
 8000e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db08      	blt.n	8000eae <_fstat+0x22>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	dc05      	bgt.n	8000eae <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea8:	605a      	str	r2, [r3, #4]
    return 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e005      	b.n	8000eba <_fstat+0x2e>
  }

  errno = EBADF;
 8000eae:	f00f fddf 	bl	8010a70 <__errno>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2209      	movs	r2, #9
 8000eb6:	601a      	str	r2, [r3, #0]
  return 0;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <_read>:


int _read(int fd, char* ptr, int len) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d110      	bne.n	8000ef8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <_read+0x4c>)
 8000ed8:	6818      	ldr	r0, [r3, #0]
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	2201      	movs	r2, #1
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	f00b f801 	bl	800bee8 <HAL_UART_Receive>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d101      	bne.n	8000ef4 <_read+0x30>
      return 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e008      	b.n	8000f06 <_read+0x42>
    else
      return EIO;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e006      	b.n	8000f06 <_read+0x42>
  }
  errno = EBADF;
 8000ef8:	f00f fdba 	bl	8010a70 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2209      	movs	r2, #9
 8000f00:	601a      	str	r2, [r3, #0]
  return -1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000218 	.word	0x24000218

08000f14 <_write>:

int _write(int fd, char* ptr, int len) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d002      	beq.n	8000f2c <_write+0x18>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d111      	bne.n	8000f50 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <_write+0x54>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	f00a ff47 	bl	800bdcc <HAL_UART_Transmit>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f42:	7dfb      	ldrb	r3, [r7, #23]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d101      	bne.n	8000f4c <_write+0x38>
      return len;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	e008      	b.n	8000f5e <_write+0x4a>
    else
      return EIO;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	e006      	b.n	8000f5e <_write+0x4a>
  }
  errno = EBADF;
 8000f50:	f00f fd8e 	bl	8010a70 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2209      	movs	r2, #9
 8000f58:	601a      	str	r2, [r3, #0]
  return -1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	24000218 	.word	0x24000218

08000f6c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f7a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a20      	ldr	r2, [pc, #128]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f82:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	4a1e      	ldr	r2, [pc, #120]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f8a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f92:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f9a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	4a18      	ldr	r2, [pc, #96]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fa2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000faa:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fb2:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a12      	ldr	r2, [pc, #72]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fba:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fc2:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fca:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <UTIL_LCD_SetFuncDriver+0xa0>)
 8000fde:	4611      	mov	r1, r2
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4a09      	ldr	r2, [pc, #36]	; (8001010 <UTIL_LCD_SetFuncDriver+0xa4>)
 8000fea:	4611      	mov	r1, r2
 8000fec:	2000      	movs	r0, #0
 8000fee:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <UTIL_LCD_SetFuncDriver+0x98>)
 8000ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	4798      	blx	r3
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2400025c 	.word	0x2400025c
 8001008:	2400021c 	.word	0x2400021c
 800100c:	24000230 	.word	0x24000230
 8001010:	24000234 	.word	0x24000234
 8001014:	24000238 	.word	0x24000238

08001018 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <UTIL_LCD_SetTextColor+0x24>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	4a05      	ldr	r2, [pc, #20]	; (800103c <UTIL_LCD_SetTextColor+0x24>)
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	4413      	add	r3, r2
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2400021c 	.word	0x2400021c

08001040 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <UTIL_LCD_SetBackColor+0x24>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <UTIL_LCD_SetBackColor+0x24>)
 800104e:	015b      	lsls	r3, r3, #5
 8001050:	4413      	add	r3, r2
 8001052:	3304      	adds	r3, #4
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	2400021c 	.word	0x2400021c

08001068 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <UTIL_LCD_SetFont+0x24>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <UTIL_LCD_SetFont+0x24>)
 8001076:	015b      	lsls	r3, r3, #5
 8001078:	4413      	add	r3, r2
 800107a:	3308      	adds	r3, #8
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	2400021c 	.word	0x2400021c

08001090 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b087      	sub	sp, #28
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <UTIL_LCD_FillRGBRect+0x30>)
 80010a0:	685c      	ldr	r4, [r3, #4]
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <UTIL_LCD_FillRGBRect+0x34>)
 80010a4:	6918      	ldr	r0, [r3, #16]
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	68f9      	ldr	r1, [r7, #12]
 80010b4:	47a0      	blx	r4
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	2400025c 	.word	0x2400025c
 80010c4:	2400021c 	.word	0x2400021c

080010c8 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <UTIL_LCD_DrawHLine+0x64>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d118      	bne.n	8001110 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <UTIL_LCD_DrawHLine+0x68>)
 80010e0:	689c      	ldr	r4, [r3, #8]
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <UTIL_LCD_DrawHLine+0x64>)
 80010e4:	6918      	ldr	r0, [r3, #16]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	08db      	lsrs	r3, r3, #3
 80010ea:	f003 021f 	and.w	r2, r3, #31
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	0a9b      	lsrs	r3, r3, #10
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80010f8:	431a      	orrs	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	0cdb      	lsrs	r3, r3, #19
 80010fe:	02db      	lsls	r3, r3, #11
 8001100:	b29b      	uxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 800110e:	e009      	b.n	8001124 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <UTIL_LCD_DrawHLine+0x68>)
 8001112:	689c      	ldr	r4, [r3, #8]
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <UTIL_LCD_DrawHLine+0x64>)
 8001116:	6918      	ldr	r0, [r3, #16]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	47a0      	blx	r4
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	2400021c 	.word	0x2400021c
 8001130:	2400025c 	.word	0x2400025c

08001134 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001134:	b5b0      	push	{r4, r5, r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	603a      	str	r2, [r7, #0]
 800113e:	80fb      	strh	r3, [r7, #6]
 8001140:	460b      	mov	r3, r1
 8001142:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <UTIL_LCD_SetPixel+0x60>)
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d117      	bne.n	800117c <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <UTIL_LCD_SetPixel+0x64>)
 800114e:	699c      	ldr	r4, [r3, #24]
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <UTIL_LCD_SetPixel+0x60>)
 8001152:	6918      	ldr	r0, [r3, #16]
 8001154:	88f9      	ldrh	r1, [r7, #6]
 8001156:	88bd      	ldrh	r5, [r7, #4]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	0a9b      	lsrs	r3, r3, #10
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800116a:	431a      	orrs	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	0cdb      	lsrs	r3, r3, #19
 8001170:	02db      	lsls	r3, r3, #11
 8001172:	b29b      	uxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	462a      	mov	r2, r5
 8001178:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 800117a:	e007      	b.n	800118c <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <UTIL_LCD_SetPixel+0x64>)
 800117e:	699c      	ldr	r4, [r3, #24]
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <UTIL_LCD_SetPixel+0x60>)
 8001182:	6918      	ldr	r0, [r3, #16]
 8001184:	88f9      	ldrh	r1, [r7, #6]
 8001186:	88ba      	ldrh	r2, [r7, #4]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	47a0      	blx	r4
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	2400021c 	.word	0x2400021c
 8001198:	2400025c 	.word	0x2400025c

0800119c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <UTIL_LCD_Clear+0x28>)
 80011a6:	695a      	ldr	r2, [r3, #20]
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <UTIL_LCD_Clear+0x28>)
 80011aa:	6999      	ldr	r1, [r3, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	460b      	mov	r3, r1
 80011b2:	2100      	movs	r1, #0
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f9f5 	bl	80015a4 <UTIL_LCD_FillRect>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2400021c 	.word	0x2400021c

080011c8 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <UTIL_LCD_DisplayChar+0x68>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <UTIL_LCD_DisplayChar+0x68>)
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4413      	add	r3, r2
 80011e0:	3308      	adds	r3, #8
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80011ea:	4911      	ldr	r1, [pc, #68]	; (8001230 <UTIL_LCD_DisplayChar+0x68>)
 80011ec:	68c9      	ldr	r1, [r1, #12]
 80011ee:	4810      	ldr	r0, [pc, #64]	; (8001230 <UTIL_LCD_DisplayChar+0x68>)
 80011f0:	0149      	lsls	r1, r1, #5
 80011f2:	4401      	add	r1, r0
 80011f4:	3108      	adds	r1, #8
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80011fa:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <UTIL_LCD_DisplayChar+0x68>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	480b      	ldr	r0, [pc, #44]	; (8001230 <UTIL_LCD_DisplayChar+0x68>)
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	4403      	add	r3, r0
 8001208:	3308      	adds	r3, #8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	3307      	adds	r3, #7
 8001210:	2b00      	cmp	r3, #0
 8001212:	da00      	bge.n	8001216 <UTIL_LCD_DisplayChar+0x4e>
 8001214:	3307      	adds	r3, #7
 8001216:	10db      	asrs	r3, r3, #3
 8001218:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800121c:	4413      	add	r3, r2
 800121e:	461a      	mov	r2, r3
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 faa4 	bl	8001770 <DrawChar>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2400021c 	.word	0x2400021c

08001234 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8001242:	2301      	movs	r3, #1
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001256:	e002      	b.n	800125e <UTIL_LCD_DisplayStringAt+0x2a>
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3301      	adds	r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	61ba      	str	r2, [r7, #24]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f6      	bne.n	8001258 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a47      	ldr	r2, [pc, #284]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001270:	68d2      	ldr	r2, [r2, #12]
 8001272:	4946      	ldr	r1, [pc, #280]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001274:	0152      	lsls	r2, r2, #5
 8001276:	440a      	add	r2, r1
 8001278:	3208      	adds	r2, #8
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	8892      	ldrh	r2, [r2, #4]
 800127e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001282:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d018      	beq.n	80012bc <UTIL_LCD_DisplayStringAt+0x88>
 800128a:	2b03      	cmp	r3, #3
 800128c:	dc2a      	bgt.n	80012e4 <UTIL_LCD_DisplayStringAt+0xb0>
 800128e:	2b01      	cmp	r3, #1
 8001290:	d002      	beq.n	8001298 <UTIL_LCD_DisplayStringAt+0x64>
 8001292:	2b02      	cmp	r3, #2
 8001294:	d015      	beq.n	80012c2 <UTIL_LCD_DisplayStringAt+0x8e>
 8001296:	e025      	b.n	80012e4 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	4a3b      	ldr	r2, [pc, #236]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 80012a0:	68d2      	ldr	r2, [r2, #12]
 80012a2:	493a      	ldr	r1, [pc, #232]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 80012a4:	0152      	lsls	r2, r2, #5
 80012a6:	440a      	add	r2, r1
 80012a8:	3208      	adds	r2, #8
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	8892      	ldrh	r2, [r2, #4]
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	085b      	lsrs	r3, r3, #1
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012ba:	e016      	b.n	80012ea <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012c0:	e013      	b.n	80012ea <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	4a30      	ldr	r2, [pc, #192]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 80012ca:	68d2      	ldr	r2, [r2, #12]
 80012cc:	492f      	ldr	r1, [pc, #188]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 80012ce:	0152      	lsls	r2, r2, #5
 80012d0:	440a      	add	r2, r1
 80012d2:	3208      	adds	r2, #8
 80012d4:	6812      	ldr	r2, [r2, #0]
 80012d6:	8892      	ldrh	r2, [r2, #4]
 80012d8:	fb03 f202 	mul.w	r2, r3, r2
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012e2:	e002      	b.n	80012ea <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012e8:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <UTIL_LCD_DisplayStringAt+0xc4>
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012f6:	d31b      	bcc.n	8001330 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80012fc:	e018      	b.n	8001330 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001308:	f7ff ff5e 	bl	80011c8 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	4413      	add	r3, r2
 8001316:	3308      	adds	r3, #8
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	4413      	add	r3, r2
 8001322:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
    i++;
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	3301      	adds	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001340:	6959      	ldr	r1, [r3, #20]
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	4811      	ldr	r0, [pc, #68]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001348:	015b      	lsls	r3, r3, #5
 800134a:	4403      	add	r3, r0
 800134c:	3308      	adds	r3, #8
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	889b      	ldrh	r3, [r3, #4]
 8001352:	4618      	mov	r0, r3
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	fb00 f303 	mul.w	r3, r0, r3
 800135a:	1acb      	subs	r3, r1, r3
 800135c:	b29b      	uxth	r3, r3
 800135e:	490b      	ldr	r1, [pc, #44]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001360:	68c9      	ldr	r1, [r1, #12]
 8001362:	480a      	ldr	r0, [pc, #40]	; (800138c <UTIL_LCD_DisplayStringAt+0x158>)
 8001364:	0149      	lsls	r1, r1, #5
 8001366:	4401      	add	r1, r0
 8001368:	3108      	adds	r1, #8
 800136a:	6809      	ldr	r1, [r1, #0]
 800136c:	8889      	ldrh	r1, [r1, #4]
 800136e:	428b      	cmp	r3, r1
 8001370:	bf2c      	ite	cs
 8001372:	2301      	movcs	r3, #1
 8001374:	2300      	movcc	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4013      	ands	r3, r2
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1be      	bne.n	80012fe <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400021c 	.word	0x2400021c

08001390 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	f1c3 0303 	rsb	r3, r3, #3
 80013a6:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 80013b0:	e0eb      	b.n	800158a <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	1ad2      	subs	r2, r2, r3
 80013b8:	4b79      	ldr	r3, [pc, #484]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d22d      	bcs.n	800141c <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	441a      	add	r2, r3
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d20f      	bcs.n	80013ee <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	b298      	uxth	r0, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fea3 	bl	8001134 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	1ad2      	subs	r2, r2, r3
 80013f4:	4b6a      	ldr	r3, [pc, #424]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d20f      	bcs.n	800141c <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	b29b      	uxth	r3, r3
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	b298      	uxth	r0, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	b29a      	uxth	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	b29b      	uxth	r3, r3
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	f7ff fe8c 	bl	8001134 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	1ad2      	subs	r2, r2, r3
 8001422:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	429a      	cmp	r2, r3
 8001428:	d22d      	bcs.n	8001486 <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	441a      	add	r2, r3
 8001430:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	d20f      	bcs.n	8001458 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	b29a      	uxth	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b298      	uxth	r0, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	b29a      	uxth	r2, r3
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	b29b      	uxth	r3, r3
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fe6e 	bl	8001134 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	1ad2      	subs	r2, r2, r3
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	429a      	cmp	r2, r3
 8001464:	d20f      	bcs.n	8001486 <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	b29a      	uxth	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	b29b      	uxth	r3, r3
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	b298      	uxth	r0, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	b29a      	uxth	r2, r3
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	b29b      	uxth	r3, r3
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fe57 	bl	8001134 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	441a      	add	r2, r3
 800148c:	4b44      	ldr	r3, [pc, #272]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	429a      	cmp	r2, r3
 8001492:	d22d      	bcs.n	80014f0 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	441a      	add	r2, r3
 800149a:	4b41      	ldr	r3, [pc, #260]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d20f      	bcs.n	80014c2 <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	b298      	uxth	r0, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fe39 	bl	8001134 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	1ad2      	subs	r2, r2, r3
 80014c8:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d20f      	bcs.n	80014f0 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	b298      	uxth	r0, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	f7ff fe22 	bl	8001134 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d22d      	bcs.n	800155a <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	441a      	add	r2, r3
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	d20f      	bcs.n	800152c <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	b29a      	uxth	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b298      	uxth	r0, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	b29a      	uxth	r2, r3
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff fe04 	bl	8001134 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <UTIL_LCD_DrawCircle+0x210>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	429a      	cmp	r2, r3
 8001538:	d20f      	bcs.n	800155a <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	b29a      	uxth	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	b29b      	uxth	r3, r3
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	b298      	uxth	r0, r3
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	b29a      	uxth	r2, r3
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b29b      	uxth	r3, r3
 800154e:	4413      	add	r3, r2
 8001550:	b29b      	uxth	r3, r3
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fded 	bl	8001134 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2b00      	cmp	r3, #0
 800155e:	da06      	bge.n	800156e <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	009a      	lsls	r2, r3, #2
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	4413      	add	r3, r2
 8001568:	3306      	adds	r3, #6
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	e00a      	b.n	8001584 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	009a      	lsls	r2, r3, #2
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	330a      	adds	r3, #10
 800157c:	61fb      	str	r3, [r7, #28]
      current_y--;
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3b01      	subs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	3301      	adds	r3, #1
 8001588:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	429a      	cmp	r2, r3
 8001590:	f67f af0f 	bls.w	80013b2 <UTIL_LCD_DrawCircle+0x22>
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3720      	adds	r7, #32
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2400021c 	.word	0x2400021c

080015a4 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <UTIL_LCD_FillRect+0x6c>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d11a      	bne.n	80015f0 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <UTIL_LCD_FillRect+0x70>)
 80015bc:	691c      	ldr	r4, [r3, #16]
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <UTIL_LCD_FillRect+0x6c>)
 80015c0:	6918      	ldr	r0, [r3, #16]
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	f003 021f 	and.w	r2, r3, #31
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	0a9b      	lsrs	r3, r3, #10
 80015ce:	015b      	lsls	r3, r3, #5
 80015d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80015d4:	431a      	orrs	r2, r3
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	0cdb      	lsrs	r3, r3, #19
 80015da:	02db      	lsls	r3, r3, #11
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	68f9      	ldr	r1, [r7, #12]
 80015ec:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80015ee:	e00b      	b.n	8001608 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <UTIL_LCD_FillRect+0x70>)
 80015f2:	691c      	ldr	r4, [r3, #16]
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <UTIL_LCD_FillRect+0x6c>)
 80015f6:	6918      	ldr	r0, [r3, #16]
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	68f9      	ldr	r1, [r7, #12]
 8001606:	47a0      	blx	r4
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	bd90      	pop	{r4, r7, pc}
 8001610:	2400021c 	.word	0x2400021c
 8001614:	2400025c 	.word	0x2400025c

08001618 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	f1c3 0303 	rsb	r3, r3, #3
 800162e:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001638:	e08b      	b.n	8001752 <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d036      	beq.n	80016ae <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d31c      	bcc.n	8001682 <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	18d0      	adds	r0, r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005a      	lsls	r2, r3, #1
 8001652:	68f9      	ldr	r1, [r7, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1acb      	subs	r3, r1, r3
 8001658:	441a      	add	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	4601      	mov	r1, r0
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fd32 	bl	80010c8 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad0      	subs	r0, r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005a      	lsls	r2, r3, #1
 800166e:	68f9      	ldr	r1, [r7, #12]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	441a      	add	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	4601      	mov	r1, r0
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fd24 	bl	80010c8 <UTIL_LCD_DrawHLine>
 8001680:	e015      	b.n	80016ae <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	1ad0      	subs	r0, r2, r3
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	18d1      	adds	r1, r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005a      	lsls	r2, r3, #1
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f7ff fd18 	bl	80010c8 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1ad0      	subs	r0, r2, r3
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	1ad1      	subs	r1, r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005a      	lsls	r2, r3, #1
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f7ff fd0d 	bl	80010c8 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d036      	beq.n	8001722 <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d31c      	bcc.n	80016f6 <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad0      	subs	r0, r2, r3
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	005a      	lsls	r2, r3, #1
 80016c6:	68f9      	ldr	r1, [r7, #12]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1acb      	subs	r3, r1, r3
 80016cc:	441a      	add	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	4601      	mov	r1, r0
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff fcf8 	bl	80010c8 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	18d0      	adds	r0, r2, r3
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	005a      	lsls	r2, r3, #1
 80016e2:	68f9      	ldr	r1, [r7, #12]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	1acb      	subs	r3, r1, r3
 80016e8:	441a      	add	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	4601      	mov	r1, r0
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fcea 	bl	80010c8 <UTIL_LCD_DrawHLine>
 80016f4:	e015      	b.n	8001722 <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad0      	subs	r0, r2, r3
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad1      	subs	r1, r2, r3
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	005a      	lsls	r2, r3, #1
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f7ff fcde 	bl	80010c8 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	1ad0      	subs	r0, r2, r3
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	18d1      	adds	r1, r2, r3
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	005a      	lsls	r2, r3, #1
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	f7ff fcd3 	bl	80010c8 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da06      	bge.n	8001736 <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	009a      	lsls	r2, r3, #2
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	4413      	add	r3, r2
 8001730:	3306      	adds	r3, #6
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e00a      	b.n	800174c <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	009a      	lsls	r2, r3, #2
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	330a      	adds	r3, #10
 8001744:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3b01      	subs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	3301      	adds	r3, #1
 8001750:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	429a      	cmp	r2, r3
 8001758:	f67f af6f 	bls.w	800163a <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fe14 	bl	8001390 <UTIL_LCD_DrawCircle>
}
 8001768:	bf00      	nop
 800176a:	3720      	adds	r7, #32
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0b2      	sub	sp, #200	; 0xc8
 8001774:	af02      	add	r7, sp, #8
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001788:	4ba5      	ldr	r3, [pc, #660]	; (8001a20 <DrawChar+0x2b0>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4aa4      	ldr	r2, [pc, #656]	; (8001a20 <DrawChar+0x2b0>)
 800178e:	015b      	lsls	r3, r3, #5
 8001790:	4413      	add	r3, r2
 8001792:	3308      	adds	r3, #8
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	88db      	ldrh	r3, [r3, #6]
 8001798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 800179c:	4ba0      	ldr	r3, [pc, #640]	; (8001a20 <DrawChar+0x2b0>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4a9f      	ldr	r2, [pc, #636]	; (8001a20 <DrawChar+0x2b0>)
 80017a2:	015b      	lsls	r3, r3, #5
 80017a4:	4413      	add	r3, r2
 80017a6:	3308      	adds	r3, #8
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 80017b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b4:	3307      	adds	r3, #7
 80017b6:	f023 0207 	bic.w	r2, r3, #7
 80017ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017ca:	e11c      	b.n	8001a06 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80017cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d0:	3307      	adds	r3, #7
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 80017e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017e8:	3307      	adds	r3, #7
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d002      	beq.n	80017f6 <DrawChar+0x86>
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d006      	beq.n	8001802 <DrawChar+0x92>
 80017f4:	e011      	b.n	800181a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80017f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001800:	e01d      	b.n	800183e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800180e:	3201      	adds	r2, #1
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001818:	e011      	b.n	800183e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800181a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	041a      	lsls	r2, r3, #16
 8001822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001826:	3301      	adds	r3, #1
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	4313      	orrs	r3, r2
 800182e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001832:	3202      	adds	r2, #2
 8001834:	7812      	ldrb	r2, [r2, #0]
 8001836:	4313      	orrs	r3, r2
 8001838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 800183c:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <DrawChar+0x2b0>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	4a77      	ldr	r2, [pc, #476]	; (8001a20 <DrawChar+0x2b0>)
 8001844:	015b      	lsls	r3, r3, #5
 8001846:	4413      	add	r3, r2
 8001848:	331c      	adds	r3, #28
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b02      	cmp	r3, #2
 800184e:	f040 808c 	bne.w	800196a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001858:	e074      	b.n	8001944 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 800185a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800185e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001868:	4413      	add	r3, r2
 800186a:	3b01      	subs	r3, #1
 800186c:	2201      	movs	r2, #1
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	461a      	mov	r2, r3
 8001874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d02d      	beq.n	80018da <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800187e:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <DrawChar+0x2b0>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	4a67      	ldr	r2, [pc, #412]	; (8001a20 <DrawChar+0x2b0>)
 8001884:	015b      	lsls	r3, r3, #5
 8001886:	4413      	add	r3, r2
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	b29b      	uxth	r3, r3
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <DrawChar+0x2b0>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4961      	ldr	r1, [pc, #388]	; (8001a20 <DrawChar+0x2b0>)
 800189a:	015b      	lsls	r3, r3, #5
 800189c:	440b      	add	r3, r1
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0a9b      	lsrs	r3, r3, #10
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	015b      	lsls	r3, r3, #5
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b5b      	ldr	r3, [pc, #364]	; (8001a20 <DrawChar+0x2b0>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	495a      	ldr	r1, [pc, #360]	; (8001a20 <DrawChar+0x2b0>)
 80018b8:	015b      	lsls	r3, r3, #5
 80018ba:	440b      	add	r3, r1
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	0cdb      	lsrs	r3, r3, #19
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	02db      	lsls	r3, r3, #11
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	33c0      	adds	r3, #192	; 0xc0
 80018d2:	443b      	add	r3, r7
 80018d4:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80018d8:	e02f      	b.n	800193a <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80018da:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <DrawChar+0x2b0>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <DrawChar+0x2b0>)
 80018e0:	015b      	lsls	r3, r3, #5
 80018e2:	4413      	add	r3, r2
 80018e4:	3304      	adds	r3, #4
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <DrawChar+0x2b0>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	494a      	ldr	r1, [pc, #296]	; (8001a20 <DrawChar+0x2b0>)
 80018f8:	015b      	lsls	r3, r3, #5
 80018fa:	440b      	add	r3, r1
 80018fc:	3304      	adds	r3, #4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0a9b      	lsrs	r3, r3, #10
 8001902:	b29b      	uxth	r3, r3
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	b29b      	uxth	r3, r3
 8001908:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800190c:	b29b      	uxth	r3, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <DrawChar+0x2b0>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4942      	ldr	r1, [pc, #264]	; (8001a20 <DrawChar+0x2b0>)
 8001918:	015b      	lsls	r3, r3, #5
 800191a:	440b      	add	r3, r1
 800191c:	3304      	adds	r3, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0cdb      	lsrs	r3, r3, #19
 8001922:	b29b      	uxth	r3, r3
 8001924:	02db      	lsls	r3, r3, #11
 8001926:	b29b      	uxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b29a      	uxth	r2, r3
 800192c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	33c0      	adds	r3, #192	; 0xc0
 8001934:	443b      	add	r3, r7
 8001936:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 800193a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800193e:	3301      	adds	r3, #1
 8001940:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001944:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800194c:	429a      	cmp	r2, r3
 800194e:	d384      	bcc.n	800185a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	1c4b      	adds	r3, r1, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800195a:	2301      	movs	r3, #1
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f7ff fb94 	bl	8001090 <UTIL_LCD_FillRGBRect>
 8001968:	e048      	b.n	80019fc <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001970:	e032      	b.n	80019d8 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001972:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800197a:	1ad2      	subs	r2, r2, r3
 800197c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001980:	4413      	add	r3, r2
 8001982:	3b01      	subs	r3, #1
 8001984:	2201      	movs	r2, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	461a      	mov	r2, r3
 800198c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00d      	beq.n	80019b2 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <DrawChar+0x2b0>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <DrawChar+0x2b0>)
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	4413      	add	r3, r2
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	33c0      	adds	r3, #192	; 0xc0
 80019aa:	443b      	add	r3, r7
 80019ac:	f843 2cac 	str.w	r2, [r3, #-172]
 80019b0:	e00d      	b.n	80019ce <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <DrawChar+0x2b0>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	4a1a      	ldr	r2, [pc, #104]	; (8001a20 <DrawChar+0x2b0>)
 80019b8:	015b      	lsls	r3, r3, #5
 80019ba:	4413      	add	r3, r2
 80019bc:	3304      	adds	r3, #4
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	33c0      	adds	r3, #192	; 0xc0
 80019c8:	443b      	add	r3, r7
 80019ca:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80019ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019d2:	3301      	adds	r3, #1
 80019d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80019dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3c6      	bcc.n	8001972 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	1c4b      	adds	r3, r1, #1
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	f107 0214 	add.w	r2, r7, #20
 80019ee:	2301      	movs	r3, #1
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fb4a 	bl	8001090 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80019fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a00:	3301      	adds	r3, #1
 8001a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001a06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f4ff aedc 	bcc.w	80017cc <DrawChar+0x5c>
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	37c0      	adds	r7, #192	; 0xc0
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2400021c 	.word	0x2400021c

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_MspInit+0x74>)
 8001a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_MspInit+0x74>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_MspInit+0x74>)
 8001a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f06f 0001 	mvn.w	r0, #1
 8001a50:	f003 f85d 	bl	8004b0e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_MspInit+0x74>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_MspInit+0x74>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_MspInit+0x74>)
 8001a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a72:	2308      	movs	r3, #8
 8001a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	4619      	mov	r1, r3
 8001a88:	4804      	ldr	r0, [pc, #16]	; (8001a9c <HAL_MspInit+0x78>)
 8001a8a:	f005 f83d 	bl	8006b08 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	58021000 	.word	0x58021000

08001aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0ba      	sub	sp, #232	; 0xe8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	22c0      	movs	r2, #192	; 0xc0
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00e ff5a 	bl	801097a <memset>
  if(huart->Instance==USART3)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_UART_MspInit+0x104>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d164      	bne.n	8001b9a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ad0:	f04f 0202 	mov.w	r2, #2
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f007 feb0 	bl	800984c <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001af2:	f7ff f96c 	bl	8000dce <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001af6:	4b2c      	ldr	r3, [pc, #176]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_UART_MspInit+0x108>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA11     ------> USART3_RX
    PA10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4814      	ldr	r0, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b5a:	f004 ffd5 	bl	8006b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_UART_MspInit+0x10c>)
 8001b86:	f004 ffbf 	bl	8006b08 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2027      	movs	r0, #39	; 0x27
 8001b90:	f002 ffbd 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b94:	2027      	movs	r0, #39	; 0x27
 8001b96:	f002 ffd4 	bl	8004b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	37e8      	adds	r7, #232	; 0xe8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40004800 	.word	0x40004800
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58020400 	.word	0x58020400

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f002 fe5a 	bl	8004898 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001be4:	f00d fc24 	bl	800f430 <xTaskGetSchedulerState>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d001      	beq.n	8001bf2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bee:	f00e fa0b 	bl	8010008 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 fe88 	bl	8002910 <BSP_PB_IRQHandler>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM3_IRQHandler+0x10>)
 8001c0a:	f009 fe86 	bl	800b91a <HAL_TIM_IRQHandler>
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240001b8 	.word	0x240001b8

08001c18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USART3_IRQHandler+0x10>)
 8001c1e:	f00a fa2b 	bl	800c078 <HAL_UART_IRQHandler>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	24000124 	.word	0x24000124

08001c2c <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 fe87 	bl	8002944 <BSP_AUDIO_OUT_IRQHandler>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <DMA2_Stream4_IRQHandler+0x14>)
 8001c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fcfa 	bl	8005640 <HAL_DMA_IRQHandler>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2400033c 	.word	0x2400033c

08001c54 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001c58:	2130      	movs	r1, #48	; 0x30
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 fe86 	bl	800296c <BSP_AUDIO_IN_IRQHandler>

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f002 fa71 	bl	8004150 <BSP_SDRAM_IRQHandler>

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_kill>:

int _kill(int pid, int sig)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c8c:	f00e fef0 	bl	8010a70 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2216      	movs	r2, #22
 8001c94:	601a      	str	r2, [r3, #0]
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_exit>:

void _exit (int status)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001caa:	f04f 31ff 	mov.w	r1, #4294967295
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffe7 	bl	8001c82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb4:	e7fe      	b.n	8001cb4 <_exit+0x12>
	...

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f00e fec2 	bl	8010a70 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	24080000 	.word	0x24080000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	24000288 	.word	0x24000288
 8001d20:	24005b80 	.word	0x24005b80

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <SystemInit+0xe4>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a36      	ldr	r2, [pc, #216]	; (8001e08 <SystemInit+0xe4>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <SystemInit+0xe8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d807      	bhi.n	8001d54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <SystemInit+0xe8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 030f 	bic.w	r3, r3, #15
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <SystemInit+0xe8>)
 8001d4e:	f043 0307 	orr.w	r3, r3, #7
 8001d52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <SystemInit+0xec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <SystemInit+0xec>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <SystemInit+0xec>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <SystemInit+0xec>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4929      	ldr	r1, [pc, #164]	; (8001e10 <SystemInit+0xec>)
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <SystemInit+0xf0>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <SystemInit+0xe8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <SystemInit+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 030f 	bic.w	r3, r3, #15
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <SystemInit+0xe8>)
 8001d88:	f043 0307 	orr.w	r3, r3, #7
 8001d8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <SystemInit+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <SystemInit+0xec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <SystemInit+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <SystemInit+0xec>)
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <SystemInit+0xf4>)
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <SystemInit+0xec>)
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <SystemInit+0xf8>)
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <SystemInit+0xec>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <SystemInit+0xfc>)
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <SystemInit+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <SystemInit+0xec>)
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <SystemInit+0xfc>)
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <SystemInit+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <SystemInit+0xec>)
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <SystemInit+0xfc>)
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <SystemInit+0xec>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <SystemInit+0xec>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <SystemInit+0xec>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <SystemInit+0xec>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <SystemInit+0x100>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <SystemInit+0x104>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dee:	d202      	bcs.n	8001df6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <SystemInit+0x108>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <SystemInit+0x10c>)
 8001df8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	52002000 	.word	0x52002000
 8001e10:	58024400 	.word	0x58024400
 8001e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e18:	02020200 	.word	0x02020200
 8001e1c:	01ff0000 	.word	0x01ff0000
 8001e20:	01010280 	.word	0x01010280
 8001e24:	5c001000 	.word	0x5c001000
 8001e28:	ffff0000 	.word	0xffff0000
 8001e2c:	51008108 	.word	0x51008108
 8001e30:	52004000 	.word	0x52004000

08001e34 <USART3_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

HAL_StatusTypeDef USART3_Init(UART_HandleTypeDef* huart3)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  huart3->Instance = USART3;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a11      	ldr	r2, [pc, #68]	; (8001e84 <USART3_Init+0x50>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  //huart1->Init.OverSampling = UART_OVERSAMPLING_16;
  //huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  //huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(huart3) != HAL_OK)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f009 ff5f 	bl	800bd2c <HAL_UART_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <USART3_Init+0x44>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <USART3_Init+0x46>
  }

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40004800 	.word	0x40004800

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e8c:	f7ff ff4a 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f00e fde1 	bl	8010a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7fe fc47 	bl	800074c <main>
  bx  lr
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ec4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ec8:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 8001ecc:	080146d4 	.word	0x080146d4
  ldr r2, =_sbss
 8001ed0:	240000c4 	.word	0x240000c4
  ldr r4, =_ebss
 8001ed4:	24005b7c 	.word	0x24005b7c

08001ed8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC3_IRQHandler>
	...

08001edc <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d103      	bne.n	8001ef4 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	e02c      	b.n	8001f4e <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	891a      	ldrh	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <FT5336_RegisterBusIO+0x7c>)
 8001f28:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <FT5336_RegisterBusIO+0x80>)
 8001f2e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4798      	blx	r3
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	e002      	b.n	8001f4e <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	08002355 	.word	0x08002355
 8001f5c:	08002389 	.word	0x08002389

08001f60 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	2205      	movs	r2, #5
 8001f7a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f82:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001f8a:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f987 	bl	80022ca <FT5336_DisableIT>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d103      	bne.n	8002000 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8002000:	68fb      	ldr	r3, [r7, #12]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b084      	sub	sp, #16
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f103 0218 	add.w	r2, r3, #24
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f000 fa25 	bl	8002476 <ft5336_radian_value>
 800202c:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f103 0218 	add.w	r2, r3, #24
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f000 fa2b 	bl	8002498 <ft5336_offset_left_right>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f103 0218 	add.w	r2, r3, #24
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f000 fa2e 	bl	80024ba <ft5336_offset_up_down>
 800205e:	4602      	mov	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f103 0218 	add.w	r2, r3, #24
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f000 fa31 	bl	80024dc <ft5336_disatnce_left_right>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4413      	add	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 0218 	add.w	r2, r3, #24
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4619      	mov	r1, r3
 8002090:	4610      	mov	r0, r2
 8002092:	f000 fa34 	bl	80024fe <ft5336_distance_up_down>
 8002096:	4602      	mov	r2, r0
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f103 0218 	add.w	r2, r3, #24
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f000 fa37 	bl	8002520 <ft5336_distance_zoom>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 80020c0:	f04f 33ff 	mov.w	r3, #4294967295
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3318      	adds	r3, #24
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fa3f 	bl	8002564 <ft5336_chip_id>
 80020e6:	4603      	mov	r3, r0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f908 	bl	8002314 <FT5336_DetectTouch>
 8002104:	4603      	mov	r3, r0
 8002106:	461a      	mov	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f103 0018 	add.w	r0, r3, #24
 8002112:	f107 0208 	add.w	r2, r7, #8
 8002116:	2304      	movs	r3, #4
 8002118:	2103      	movs	r1, #3
 800211a:	f000 f94f 	bl	80023bc <ft5336_read_reg>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e00f      	b.n	800214c <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800212c:	7a3b      	ldrb	r3, [r7, #8]
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002134:	7a7a      	ldrb	r2, [r7, #9]
 8002136:	431a      	orrs	r2, r3
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800213c:	7abb      	ldrb	r3, [r7, #10]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002144:	7afa      	ldrb	r2, [r7, #11]
 8002146:	431a      	orrs	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800214c:	68fb      	ldr	r3, [r7, #12]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08c      	sub	sp, #48	; 0x30
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f8d5 	bl	8002314 <FT5336_DetectTouch>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 0018 	add.w	r0, r3, #24
 8002178:	f107 0208 	add.w	r2, r7, #8
 800217c:	231e      	movs	r3, #30
 800217e:	2103      	movs	r1, #3
 8002180:	f000 f91c 	bl	80023bc <ft5336_read_reg>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	e077      	b.n	8002282 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
 8002196:	e071      	b.n	800227c <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800219a:	4613      	mov	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	3330      	adds	r3, #48	; 0x30
 80021a4:	443b      	add	r3, r7
 80021a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80021b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	3301      	adds	r3, #1
 80021bc:	3330      	adds	r3, #48	; 0x30
 80021be:	443b      	add	r3, r7
 80021c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021c4:	ea41 0203 	orr.w	r2, r1, r3
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80021d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	3302      	adds	r3, #2
 80021de:	3330      	adds	r3, #48	; 0x30
 80021e0:	443b      	add	r3, r7
 80021e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80021ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	3303      	adds	r3, #3
 80021f8:	3330      	adds	r3, #48	; 0x30
 80021fa:	443b      	add	r3, r7
 80021fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002200:	4319      	orrs	r1, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002206:	3206      	adds	r2, #6
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800220c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220e:	4613      	mov	r3, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	3330      	adds	r3, #48	; 0x30
 8002218:	443b      	add	r3, r7
 800221a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002228:	3210      	adds	r2, #16
 800222a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800222e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002230:	4613      	mov	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	4413      	add	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	3304      	adds	r3, #4
 800223a:	3330      	adds	r3, #48	; 0x30
 800223c:	443b      	add	r3, r7
 800223e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002242:	4619      	mov	r1, r3
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	330a      	adds	r3, #10
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8002250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	3305      	adds	r3, #5
 800225c:	3330      	adds	r3, #48	; 0x30
 800225e:	443b      	add	r3, r7
 8002260:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	b2db      	uxtb	r3, r3
 8002268:	4619      	mov	r1, r3
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226e:	3314      	adds	r3, #20
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002278:	3301      	adds	r3, #1
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	2b04      	cmp	r3, #4
 8002280:	d98a      	bls.n	8002198 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002284:	4618      	mov	r0, r3
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3318      	adds	r3, #24
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 f8bb 	bl	8002418 <ft5336_gest_id>
 80022a2:	4603      	mov	r3, r0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3318      	adds	r3, #24
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f941 	bl	8002542 <ft5336_g_mode>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3318      	adds	r3, #24
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f932 	bl	8002542 <ft5336_g_mode>
 80022de:	4603      	mov	r3, r0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3318      	adds	r3, #24
 8002320:	f107 020b 	add.w	r2, r7, #11
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f886 	bl	8002438 <ft5336_td_status>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	e007      	b.n	800234a <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d902      	bls.n	8002346 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	e001      	b.n	800234a <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	607a      	str	r2, [r7, #4]
 800235e:	461a      	mov	r2, r3
 8002360:	460b      	mov	r3, r1
 8002362:	72fb      	strb	r3, [r7, #11]
 8002364:	4613      	mov	r3, r2
 8002366:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	691c      	ldr	r4, [r3, #16]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	8918      	ldrh	r0, [r3, #8]
 8002374:	7afb      	ldrb	r3, [r7, #11]
 8002376:	b299      	uxth	r1, r3
 8002378:	893b      	ldrh	r3, [r7, #8]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	47a0      	blx	r4
 800237e:	4603      	mov	r3, r0
}
 8002380:	4618      	mov	r0, r3
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}

08002388 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	461a      	mov	r2, r3
 8002394:	460b      	mov	r3, r1
 8002396:	72fb      	strb	r3, [r7, #11]
 8002398:	4613      	mov	r3, r2
 800239a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	68dc      	ldr	r4, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	8918      	ldrh	r0, [r3, #8]
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	b299      	uxth	r1, r3
 80023ac:	893b      	ldrh	r3, [r7, #8]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	47a0      	blx	r4
 80023b2:	4603      	mov	r3, r0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}

080023bc <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	460b      	mov	r3, r1
 80023ca:	72fb      	strb	r3, [r7, #11]
 80023cc:	4613      	mov	r3, r2
 80023ce:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685c      	ldr	r4, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	893b      	ldrh	r3, [r7, #8]
 80023da:	7af9      	ldrb	r1, [r7, #11]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	47a0      	blx	r4
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}

080023ea <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80023ea:	b590      	push	{r4, r7, lr}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	461a      	mov	r2, r3
 80023f6:	460b      	mov	r3, r1
 80023f8:	72fb      	strb	r3, [r7, #11]
 80023fa:	4613      	mov	r3, r2
 80023fc:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681c      	ldr	r4, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6898      	ldr	r0, [r3, #8]
 8002406:	893b      	ldrh	r3, [r7, #8]
 8002408:	7af9      	ldrb	r1, [r7, #11]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	47a0      	blx	r4
 800240e:	4603      	mov	r3, r0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}

08002418 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 8002422:	2301      	movs	r3, #1
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	2101      	movs	r1, #1
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ffc7 	bl	80023bc <ft5336_read_reg>
 800242e:	4603      	mov	r3, r0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 8002442:	2301      	movs	r3, #1
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	2102      	movs	r1, #2
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ffb7 	bl	80023bc <ft5336_read_reg>
 800244e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	b2da      	uxtb	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800246c:	68fb      	ldr	r3, [r7, #12]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8002482:	1cfa      	adds	r2, r7, #3
 8002484:	2301      	movs	r3, #1
 8002486:	2191      	movs	r1, #145	; 0x91
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffae 	bl	80023ea <ft5336_write_reg>
 800248e:	4603      	mov	r3, r0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 80024a4:	1cfa      	adds	r2, r7, #3
 80024a6:	2301      	movs	r3, #1
 80024a8:	2192      	movs	r1, #146	; 0x92
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ff9d 	bl	80023ea <ft5336_write_reg>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80024c6:	1cfa      	adds	r2, r7, #3
 80024c8:	2301      	movs	r3, #1
 80024ca:	2193      	movs	r1, #147	; 0x93
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff8c 	bl	80023ea <ft5336_write_reg>
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80024e8:	1cfa      	adds	r2, r7, #3
 80024ea:	2301      	movs	r3, #1
 80024ec:	2194      	movs	r1, #148	; 0x94
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ff7b 	bl	80023ea <ft5336_write_reg>
 80024f4:	4603      	mov	r3, r0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800250a:	1cfa      	adds	r2, r7, #3
 800250c:	2301      	movs	r3, #1
 800250e:	2195      	movs	r1, #149	; 0x95
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff ff6a 	bl	80023ea <ft5336_write_reg>
 8002516:	4603      	mov	r3, r0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800252c:	1cfa      	adds	r2, r7, #3
 800252e:	2301      	movs	r3, #1
 8002530:	2196      	movs	r1, #150	; 0x96
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff ff59 	bl	80023ea <ft5336_write_reg>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800254e:	1cfa      	adds	r2, r7, #3
 8002550:	2301      	movs	r3, #1
 8002552:	21a4      	movs	r1, #164	; 0xa4
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff48 	bl	80023ea <ft5336_write_reg>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800256e:	2301      	movs	r3, #1
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	21a8      	movs	r1, #168	; 0xa8
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff21 	bl	80023bc <ft5336_read_reg>
 800257a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d107      	bne.n	8002592 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	781a      	ldrb	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f832 	bl	800261c <MT48LC4M32B2_ClockEnable>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d128      	bne.n	8002610 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f000 f8e2 	bl	8002788 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f84a 	bl	8002664 <MT48LC4M32B2_Precharge>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11c      	bne.n	8002610 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	461a      	mov	r2, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f897 	bl	8002714 <MT48LC4M32B2_RefreshMode>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f85c 	bl	80026ac <MT48LC4M32B2_ModeRegConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10a      	bne.n	8002610 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8ad 	bl	8002760 <MT48LC4M32B2_RefreshRate>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8002610:	68fb      	ldr	r3, [r7, #12]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <MT48LC4M32B2_ClockEnable+0x44>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <MT48LC4M32B2_ClockEnable+0x44>)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <MT48LC4M32B2_ClockEnable+0x44>)
 8002634:	2201      	movs	r2, #1
 8002636:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <MT48LC4M32B2_ClockEnable+0x44>)
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800263e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002642:	4907      	ldr	r1, [pc, #28]	; (8002660 <MT48LC4M32B2_ClockEnable+0x44>)
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f008 ff73 	bl	800b530 <HAL_SDRAM_SendCommand>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
 8002654:	e000      	b.n	8002658 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002656:	2300      	movs	r3, #0
  }
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2400028c 	.word	0x2400028c

08002664 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MT48LC4M32B2_Precharge+0x44>)
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002674:	4a0c      	ldr	r2, [pc, #48]	; (80026a8 <MT48LC4M32B2_Precharge+0x44>)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MT48LC4M32B2_Precharge+0x44>)
 800267c:	2201      	movs	r2, #1
 800267e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MT48LC4M32B2_Precharge+0x44>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	4907      	ldr	r1, [pc, #28]	; (80026a8 <MT48LC4M32B2_Precharge+0x44>)
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f008 ff4f 	bl	800b530 <HAL_SDRAM_SendCommand>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	e000      	b.n	80026a0 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800269e:	2300      	movs	r3, #0
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	2400028c 	.word	0x2400028c

080026ac <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026be:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80026c4:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80026ca:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026d0:	4313      	orrs	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a0c      	ldr	r2, [pc, #48]	; (8002710 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026e0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	4907      	ldr	r1, [pc, #28]	; (8002710 <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f008 ff1b 	bl	800b530 <HAL_SDRAM_SendCommand>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8002700:	f04f 33ff 	mov.w	r3, #4294967295
 8002704:	e000      	b.n	8002708 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002706:	2300      	movs	r3, #0
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	2400028c 	.word	0x2400028c

08002714 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <MT48LC4M32B2_RefreshMode+0x48>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <MT48LC4M32B2_RefreshMode+0x48>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MT48LC4M32B2_RefreshMode+0x48>)
 800272e:	2208      	movs	r2, #8
 8002730:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <MT48LC4M32B2_RefreshMode+0x48>)
 8002734:	2200      	movs	r2, #0
 8002736:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8002738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <MT48LC4M32B2_RefreshMode+0x48>)
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f008 fef6 	bl	800b530 <HAL_SDRAM_SendCommand>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800274a:	f04f 33ff 	mov.w	r3, #4294967295
 800274e:	e000      	b.n	8002752 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002750:	2300      	movs	r3, #0
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2400028c 	.word	0x2400028c

08002760 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f008 ff14 	bl	800b59a <HAL_SDRAM_ProgramRefreshRate>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	e000      	b.n	8002780 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800277e:	2300      	movs	r3, #0
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8002790:	f002 f896 	bl	80048c0 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002796:	bf00      	nop
 8002798:	f002 f892 	bl	80048c0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <BSP_LED_On+0x34>)
 80027c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <BSP_LED_On+0x38>)
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	4619      	mov	r1, r3
 80027d8:	f004 fc50 	bl	800707c <HAL_GPIO_WritePin>
  return ret;
 80027dc:	68fb      	ldr	r3, [r7, #12]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	24000048 	.word	0x24000048
 80027ec:	08014510 	.word	0x08014510

080027f0 <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <BSP_LED_Off+0x34>)
 8002802:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <BSP_LED_Off+0x38>)
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	b29b      	uxth	r3, r3
 8002810:	2201      	movs	r2, #1
 8002812:	4619      	mov	r1, r3
 8002814:	f004 fc32 	bl	800707c <HAL_GPIO_WritePin>
  return ret;
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	24000048 	.word	0x24000048
 8002828:	08014510 	.word	0x08014510

0800282c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	460a      	mov	r2, r1
 8002836:	71fb      	strb	r3, [r7, #7]
 8002838:	4613      	mov	r3, r2
 800283a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <BSP_PB_Init+0xcc>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002842:	4a2d      	ldr	r2, [pc, #180]	; (80028f8 <BSP_PB_Init+0xcc>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284c:	4b2a      	ldr	r3, [pc, #168]	; (80028f8 <BSP_PB_Init+0xcc>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800285a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800285e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002860:	2302      	movs	r3, #2
 8002862:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10c      	bne.n	8002888 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	4a21      	ldr	r2, [pc, #132]	; (80028fc <BSP_PB_Init+0xd0>)
 8002876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287a:	f107 020c 	add.w	r2, r7, #12
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f004 f941 	bl	8006b08 <HAL_GPIO_Init>
 8002886:	e031      	b.n	80028ec <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002888:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800288c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4a1a      	ldr	r2, [pc, #104]	; (80028fc <BSP_PB_Init+0xd0>)
 8002892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002896:	f107 020c 	add.w	r2, r7, #12
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f004 f933 	bl	8006b08 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <BSP_PB_Init+0xd4>)
 80028a8:	441a      	add	r2, r3
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	4915      	ldr	r1, [pc, #84]	; (8002904 <BSP_PB_Init+0xd8>)
 80028ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f004 f8e2 	bl	8006a7e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <BSP_PB_Init+0xd4>)
 80028c0:	1898      	adds	r0, r3, r2
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4a10      	ldr	r2, [pc, #64]	; (8002908 <BSP_PB_Init+0xdc>)
 80028c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ca:	461a      	mov	r2, r3
 80028cc:	2100      	movs	r1, #0
 80028ce:	f004 f8b7 	bl	8006a40 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80028d2:	2028      	movs	r0, #40	; 0x28
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <BSP_PB_Init+0xe0>)
 80028d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028dc:	2200      	movs	r2, #0
 80028de:	4619      	mov	r1, r3
 80028e0:	f002 f915 	bl	8004b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80028e4:	2328      	movs	r3, #40	; 0x28
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 f92b 	bl	8004b42 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
 80028fc:	24000050 	.word	0x24000050
 8002900:	2400029c 	.word	0x2400029c
 8002904:	08014518 	.word	0x08014518
 8002908:	24000054 	.word	0x24000054
 800290c:	24000058 	.word	0x24000058

08002910 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <BSP_PB_IRQHandler+0x20>)
 8002920:	4413      	add	r3, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f004 f8c0 	bl	8006aa8 <HAL_EXTI_IRQHandler>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	2400029c 	.word	0x2400029c

08002934 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002938:	2000      	movs	r0, #0
 800293a:	f7fe f98d 	bl	8000c58 <BSP_PB_Callback>
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d105      	bne.n	800295e <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8002954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002958:	4618      	mov	r0, r3
 800295a:	f002 fe71 	bl	8005640 <HAL_DMA_IRQHandler>
  }
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	240002a4 	.word	0x240002a4

0800296c <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b30      	cmp	r3, #48	; 0x30
 800297a:	d002      	beq.n	8002982 <BSP_AUDIO_IN_IRQHandler+0x16>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8002984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fe59 	bl	8005640 <HAL_DMA_IRQHandler>
  }

}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	2400033c 	.word	0x2400033c

0800299c <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <BSP_I2C4_Init+0x64>)
 80029a8:	4a16      	ldr	r2, [pc, #88]	; (8002a04 <BSP_I2C4_Init+0x68>)
 80029aa:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <BSP_I2C4_Init+0x6c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11f      	bne.n	80029f4 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <BSP_I2C4_Init+0x6c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <BSP_I2C4_Init+0x6c>)
 80029bc:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80029be:	4810      	ldr	r0, [pc, #64]	; (8002a00 <BSP_I2C4_Init+0x64>)
 80029c0:	f004 fe78 	bl	80076b4 <HAL_I2C_GetState>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d114      	bne.n	80029f4 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80029ca:	480d      	ldr	r0, [pc, #52]	; (8002a00 <BSP_I2C4_Init+0x64>)
 80029cc:	f000 fb60 	bl	8003090 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80029d0:	f006 ff26 	bl	8009820 <HAL_RCC_GetPCLK2Freq>
 80029d4:	4603      	mov	r3, r0
 80029d6:	490d      	ldr	r1, [pc, #52]	; (8002a0c <BSP_I2C4_Init+0x70>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f8e3 	bl	8002ba4 <I2C_GetTiming>
 80029de:	4603      	mov	r3, r0
 80029e0:	4619      	mov	r1, r3
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <BSP_I2C4_Init+0x64>)
 80029e4:	f000 f838 	bl	8002a58 <MX_I2C4_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80029ee:	f06f 0307 	mvn.w	r3, #7
 80029f2:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	24000ddc 	.word	0x24000ddc
 8002a04:	58001c00 	.word	0x58001c00
 8002a08:	240003d4 	.word	0x240003d4
 8002a0c:	000186a0 	.word	0x000186a0

08002a10 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <BSP_I2C4_DeInit+0x40>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <BSP_I2C4_DeInit+0x40>)
 8002a22:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <BSP_I2C4_DeInit+0x40>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8002a2c:	4809      	ldr	r0, [pc, #36]	; (8002a54 <BSP_I2C4_DeInit+0x44>)
 8002a2e:	f000 fb9b 	bl	8003168 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002a32:	4808      	ldr	r0, [pc, #32]	; (8002a54 <BSP_I2C4_DeInit+0x44>)
 8002a34:	f004 fbcc 	bl	80071d0 <HAL_I2C_DeInit>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002a3e:	f06f 0307 	mvn.w	r3, #7
 8002a42:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	240003d4 	.word	0x240003d4
 8002a54:	24000ddc 	.word	0x24000ddc

08002a58 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f004 fb0a 	bl	80070b0 <HAL_I2C_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	73fb      	strb	r3, [r7, #15]
 8002aa6:	e014      	b.n	8002ad2 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f005 f8d2 	bl	8007c58 <HAL_I2CEx_ConfigAnalogFilter>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e008      	b.n	8002ad2 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f005 f913 	bl	8007cee <HAL_I2CEx_ConfigDigitalFilter>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60ba      	str	r2, [r7, #8]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	81fb      	strh	r3, [r7, #14]
 8002aea:	460b      	mov	r3, r1
 8002aec:	81bb      	strh	r3, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002af2:	89b9      	ldrh	r1, [r7, #12]
 8002af4:	89f8      	ldrh	r0, [r7, #14]
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f000 fb57 	bl	80031b0 <I2C4_WriteReg>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d102      	bne.n	8002b0e <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e00c      	b.n	8002b28 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002b0e:	4809      	ldr	r0, [pc, #36]	; (8002b34 <BSP_I2C4_WriteReg+0x58>)
 8002b10:	f004 fdde 	bl	80076d0 <HAL_I2C_GetError>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d103      	bne.n	8002b22 <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b1a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e002      	b.n	8002b28 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b22:	f06f 0303 	mvn.w	r3, #3
 8002b26:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002b28:	697b      	ldr	r3, [r7, #20]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	24000ddc 	.word	0x24000ddc

08002b38 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60ba      	str	r2, [r7, #8]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4603      	mov	r3, r0
 8002b44:	81fb      	strh	r3, [r7, #14]
 8002b46:	460b      	mov	r3, r1
 8002b48:	81bb      	strh	r3, [r7, #12]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002b4e:	89b9      	ldrh	r1, [r7, #12]
 8002b50:	89f8      	ldrh	r0, [r7, #14]
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f000 fb4f 	bl	80031fc <I2C4_ReadReg>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	e00c      	b.n	8002b84 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002b6a:	4809      	ldr	r0, [pc, #36]	; (8002b90 <BSP_I2C4_ReadReg+0x58>)
 8002b6c:	f004 fdb0 	bl	80076d0 <HAL_I2C_GetError>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d103      	bne.n	8002b7e <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b76:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	e002      	b.n	8002b84 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b7e:	f06f 0303 	mvn.w	r3, #3
 8002b82:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002b84:	697b      	ldr	r3, [r7, #20]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	24000ddc 	.word	0x24000ddc

08002b94 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002b98:	f001 fe92 	bl	80048c0 <HAL_GetTick>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d06b      	beq.n	8002c90 <I2C_GetTiming+0xec>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d068      	beq.n	8002c90 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e060      	b.n	8002c86 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002bc4:	4a35      	ldr	r2, [pc, #212]	; (8002c9c <I2C_GetTiming+0xf8>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d352      	bcc.n	8002c80 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002bda:	4a30      	ldr	r2, [pc, #192]	; (8002c9c <I2C_GetTiming+0xf8>)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3308      	adds	r3, #8
 8002be8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d847      	bhi.n	8002c80 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f856 	bl	8002ca4 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f940 	bl	8002e80 <I2C_Compute_SCLL_SCLH>
 8002c00:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b7f      	cmp	r3, #127	; 0x7f
 8002c06:	d842      	bhi.n	8002c8e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002c08:	4925      	ldr	r1, [pc, #148]	; (8002ca0 <I2C_GetTiming+0xfc>)
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002c1a:	4821      	ldr	r0, [pc, #132]	; (8002ca0 <I2C_GetTiming+0xfc>)
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4403      	add	r3, r0
 8002c28:	3304      	adds	r3, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	051b      	lsls	r3, r3, #20
 8002c2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002c32:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002c34:	481a      	ldr	r0, [pc, #104]	; (8002ca0 <I2C_GetTiming+0xfc>)
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4403      	add	r3, r0
 8002c42:	3308      	adds	r3, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002c4c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002c4e:	4814      	ldr	r0, [pc, #80]	; (8002ca0 <I2C_GetTiming+0xfc>)
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4403      	add	r3, r0
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002c64:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002c66:	480e      	ldr	r0, [pc, #56]	; (8002ca0 <I2C_GetTiming+0xfc>)
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4403      	add	r3, r0
 8002c74:	3310      	adds	r3, #16
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	617b      	str	r3, [r7, #20]
        }
        break;
 8002c7e:	e006      	b.n	8002c8e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3301      	adds	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d99b      	bls.n	8002bc4 <I2C_GetTiming+0x20>
 8002c8c:	e000      	b.n	8002c90 <I2C_GetTiming+0xec>
        break;
 8002c8e:	bf00      	nop
      }
    }
  }

  return ret;
 8002c90:	697b      	ldr	r3, [r7, #20]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	0801451c 	.word	0x0801451c
 8002ca0:	240003d8 	.word	0x240003d8

08002ca4 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b08f      	sub	sp, #60	; 0x3c
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002cae:	2310      	movs	r3, #16
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	085a      	lsrs	r2, r3, #1
 8002cb6:	4b6e      	ldr	r3, [pc, #440]	; (8002e70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002cb8:	4413      	add	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002cc2:	2332      	movs	r3, #50	; 0x32
 8002cc4:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002cc6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002cca:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002ccc:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3324      	adds	r3, #36	; 0x24
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	4a65      	ldr	r2, [pc, #404]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	330c      	adds	r3, #12
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002cf0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002cf2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002cf4:	495f      	ldr	r1, [pc, #380]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	202c      	movs	r0, #44	; 0x2c
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3328      	adds	r3, #40	; 0x28
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3303      	adds	r3, #3
 8002d06:	69f9      	ldr	r1, [r7, #28]
 8002d08:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3320      	adds	r3, #32
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002d34:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002d36:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002d38:	494e      	ldr	r1, [pc, #312]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	202c      	movs	r0, #44	; 0x2c
 8002d3e:	fb00 f303 	mul.w	r3, r0, r3
 8002d42:	440b      	add	r3, r1
 8002d44:	3328      	adds	r3, #40	; 0x28
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	69f9      	ldr	r1, [r7, #28]
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002d54:	4a47      	ldr	r2, [pc, #284]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3320      	adds	r3, #32
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	4a43      	ldr	r2, [pc, #268]	; (8002e74 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	212c      	movs	r1, #44	; 0x2c
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	4413      	add	r3, r2
 8002d72:	3314      	adds	r3, #20
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4403      	add	r3, r0
 8002d78:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dc01      	bgt.n	8002d84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	dc01      	bgt.n	8002d8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	e062      	b.n	8002e5a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	e059      	b.n	8002e4e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da0:	3201      	adds	r2, #1
 8002da2:	fb03 f202 	mul.w	r2, r3, r2
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d348      	bcc.n	8002e48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	e042      	b.n	8002e42 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	6a3a      	ldr	r2, [r7, #32]
 8002dc2:	fb03 f202 	mul.w	r2, r3, r2
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d332      	bcc.n	8002e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d82e      	bhi.n	8002e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d02a      	beq.n	8002e3c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4924      	ldr	r1, [pc, #144]	; (8002e7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	491f      	ldr	r1, [pc, #124]	; (8002e7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0e:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4919      	ldr	r1, [pc, #100]	; (8002e7c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3308      	adds	r3, #8
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a11      	ldr	r2, [pc, #68]	; (8002e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e32:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b7f      	cmp	r3, #127	; 0x7f
 8002e3a:	d812      	bhi.n	8002e62 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	623b      	str	r3, [r7, #32]
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d9b9      	bls.n	8002dbc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d9a2      	bls.n	8002d9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	3301      	adds	r3, #1
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d999      	bls.n	8002d94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002e60:	e000      	b.n	8002e64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002e62:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002e64:	373c      	adds	r7, #60	; 0x3c
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	3b9aca00 	.word	0x3b9aca00
 8002e74:	0801451c 	.word	0x0801451c
 8002e78:	24000dd8 	.word	0x24000dd8
 8002e7c:	240003d8 	.word	0x240003d8

08002e80 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b093      	sub	sp, #76	; 0x4c
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	085a      	lsrs	r2, r3, #1
 8002e94:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <I2C_Compute_SCLL_SCLH+0x200>)
 8002e96:	4413      	add	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002ea0:	4a78      	ldr	r2, [pc, #480]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	085a      	lsrs	r2, r3, #1
 8002eb0:	4b73      	ldr	r3, [pc, #460]	; (8003080 <I2C_Compute_SCLL_SCLH+0x200>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4973      	ldr	r1, [pc, #460]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	202c      	movs	r0, #44	; 0x2c
 8002eba:	fb00 f202 	mul.w	r2, r0, r2
 8002ebe:	440a      	add	r2, r1
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec6:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002ec8:	2332      	movs	r3, #50	; 0x32
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002ecc:	4a6d      	ldr	r2, [pc, #436]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3328      	adds	r3, #40	; 0x28
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002ee4:	4a67      	ldr	r2, [pc, #412]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a62      	ldr	r2, [pc, #392]	; (8003080 <I2C_Compute_SCLL_SCLH+0x200>)
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002efc:	4a61      	ldr	r2, [pc, #388]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3308      	adds	r3, #8
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <I2C_Compute_SCLL_SCLH+0x200>)
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f1c:	e0a3      	b.n	8003066 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002f1e:	495a      	ldr	r1, [pc, #360]	; (8003088 <I2C_Compute_SCLL_SCLH+0x208>)
 8002f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f3c:	e08c      	b.n	8003058 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	441a      	add	r2, r3
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	3301      	adds	r3, #1
 8002f48:	6979      	ldr	r1, [r7, #20]
 8002f4a:	fb03 f101 	mul.w	r1, r3, r1
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	440b      	add	r3, r1
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002f58:	4a4a      	ldr	r2, [pc, #296]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	212c      	movs	r1, #44	; 0x2c
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	3318      	adds	r3, #24
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d971      	bls.n	8003052 <I2C_Compute_SCLL_SCLH+0x1d2>
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	089b      	lsrs	r3, r3, #2
 8002f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d268      	bcs.n	8003052 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f84:	e062      	b.n	800304c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	441a      	add	r2, r3
 8002f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8e:	3301      	adds	r3, #1
 8002f90:	6979      	ldr	r1, [r7, #20]
 8002f92:	fb03 f101 	mul.w	r1, r3, r1
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	440b      	add	r3, r1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	441a      	add	r2, r3
 8002fa6:	4937      	ldr	r1, [pc, #220]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	202c      	movs	r0, #44	; 0x2c
 8002fac:	fb00 f303 	mul.w	r3, r0, r3
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3320      	adds	r3, #32
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	441a      	add	r2, r3
 8002fb8:	4932      	ldr	r1, [pc, #200]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	202c      	movs	r0, #44	; 0x2c
 8002fbe:	fb00 f303 	mul.w	r3, r0, r3
 8002fc2:	440b      	add	r3, r1
 8002fc4:	3324      	adds	r3, #36	; 0x24
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d338      	bcc.n	8003046 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d834      	bhi.n	8003046 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002fdc:	4a29      	ldr	r2, [pc, #164]	; (8003084 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	212c      	movs	r1, #44	; 0x2c
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	331c      	adds	r3, #28
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d329      	bcc.n	8003046 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d225      	bcs.n	8003046 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	2b00      	cmp	r3, #0
 8003006:	da02      	bge.n	800300e <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	425b      	negs	r3, r3
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003012:	429a      	cmp	r2, r3
 8003014:	d917      	bls.n	8003046 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800301a:	491b      	ldr	r1, [pc, #108]	; (8003088 <I2C_Compute_SCLL_SCLH+0x208>)
 800301c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	3310      	adds	r3, #16
 800302a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800302c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800302e:	4916      	ldr	r1, [pc, #88]	; (8003088 <I2C_Compute_SCLL_SCLH+0x208>)
 8003030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	330c      	adds	r3, #12
 800303e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003040:	601a      	str	r2, [r3, #0]
              ret = count;
 8003042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003044:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003048:	3301      	adds	r3, #1
 800304a:	63bb      	str	r3, [r7, #56]	; 0x38
 800304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304e:	2bff      	cmp	r3, #255	; 0xff
 8003050:	d999      	bls.n	8002f86 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003054:	3301      	adds	r3, #1
 8003056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305a:	2bff      	cmp	r3, #255	; 0xff
 800305c:	f67f af6f 	bls.w	8002f3e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	3301      	adds	r3, #1
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <I2C_Compute_SCLL_SCLH+0x20c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800306c:	429a      	cmp	r2, r3
 800306e:	f4ff af56 	bcc.w	8002f1e <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8003072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003074:	4618      	mov	r0, r3
 8003076:	374c      	adds	r7, #76	; 0x4c
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	3b9aca00 	.word	0x3b9aca00
 8003084:	0801451c 	.word	0x0801451c
 8003088:	240003d8 	.word	0x240003d8
 800308c:	24000dd8 	.word	0x24000dd8

08003090 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003098:	4b31      	ldr	r3, [pc, #196]	; (8003160 <I2C4_MspInit+0xd0>)
 800309a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309e:	4a30      	ldr	r2, [pc, #192]	; (8003160 <I2C4_MspInit+0xd0>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <I2C4_MspInit+0xd0>)
 80030aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <I2C4_MspInit+0xd0>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	4a28      	ldr	r2, [pc, #160]	; (8003160 <I2C4_MspInit+0xd0>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030c6:	4b26      	ldr	r3, [pc, #152]	; (8003160 <I2C4_MspInit+0xd0>)
 80030c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80030d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80030da:	2312      	movs	r3, #18
 80030dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80030e2:	2302      	movs	r3, #2
 80030e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80030e6:	2304      	movs	r3, #4
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80030ea:	f107 0314 	add.w	r3, r7, #20
 80030ee:	4619      	mov	r1, r3
 80030f0:	481c      	ldr	r0, [pc, #112]	; (8003164 <I2C4_MspInit+0xd4>)
 80030f2:	f003 fd09 	bl	8006b08 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80030f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80030fc:	2312      	movs	r3, #18
 80030fe:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003104:	2302      	movs	r3, #2
 8003106:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003108:	2304      	movs	r3, #4
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4619      	mov	r1, r3
 8003112:	4814      	ldr	r0, [pc, #80]	; (8003164 <I2C4_MspInit+0xd4>)
 8003114:	f003 fcf8 	bl	8006b08 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <I2C4_MspInit+0xd0>)
 800311a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <I2C4_MspInit+0xd0>)
 8003120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003124:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <I2C4_MspInit+0xd0>)
 800312a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800312e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <I2C4_MspInit+0xd0>)
 8003138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800313c:	4a08      	ldr	r2, [pc, #32]	; (8003160 <I2C4_MspInit+0xd0>)
 800313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003142:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <I2C4_MspInit+0xd0>)
 8003148:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <I2C4_MspInit+0xd0>)
 800314e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003152:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	58024400 	.word	0x58024400
 8003164:	58020c00 	.word	0x58020c00

08003168 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8003170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003174:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4619      	mov	r1, r3
 800317a:	480b      	ldr	r0, [pc, #44]	; (80031a8 <I2C4_MspDeInit+0x40>)
 800317c:	f003 fe74 	bl	8006e68 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4619      	mov	r1, r3
 800318a:	4807      	ldr	r0, [pc, #28]	; (80031a8 <I2C4_MspDeInit+0x40>)
 800318c:	f003 fe6c 	bl	8006e68 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <I2C4_MspDeInit+0x44>)
 8003192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003196:	4a05      	ldr	r2, [pc, #20]	; (80031ac <I2C4_MspDeInit+0x44>)
 8003198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800319c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 80031a0:	bf00      	nop
 80031a2:	3720      	adds	r7, #32
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	58020c00 	.word	0x58020c00
 80031ac:	58024400 	.word	0x58024400

080031b0 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af04      	add	r7, sp, #16
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	4603      	mov	r3, r0
 80031ba:	81fb      	strh	r3, [r7, #14]
 80031bc:	460b      	mov	r3, r1
 80031be:	81bb      	strh	r3, [r7, #12]
 80031c0:	4613      	mov	r3, r2
 80031c2:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80031c4:	8978      	ldrh	r0, [r7, #10]
 80031c6:	89ba      	ldrh	r2, [r7, #12]
 80031c8:	89f9      	ldrh	r1, [r7, #14]
 80031ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ce:	9302      	str	r3, [sp, #8]
 80031d0:	8b3b      	ldrh	r3, [r7, #24]
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	4603      	mov	r3, r0
 80031da:	4807      	ldr	r0, [pc, #28]	; (80031f8 <I2C4_WriteReg+0x48>)
 80031dc:	f004 f83c 	bl	8007258 <HAL_I2C_Mem_Write>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e001      	b.n	80031ee <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80031ea:	f06f 0307 	mvn.w	r3, #7
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	24000ddc 	.word	0x24000ddc

080031fc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af04      	add	r7, sp, #16
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	4603      	mov	r3, r0
 8003206:	81fb      	strh	r3, [r7, #14]
 8003208:	460b      	mov	r3, r1
 800320a:	81bb      	strh	r3, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003210:	8978      	ldrh	r0, [r7, #10]
 8003212:	89ba      	ldrh	r2, [r7, #12]
 8003214:	89f9      	ldrh	r1, [r7, #14]
 8003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321a:	9302      	str	r3, [sp, #8]
 800321c:	8b3b      	ldrh	r3, [r7, #24]
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	4807      	ldr	r0, [pc, #28]	; (8003244 <I2C4_ReadReg+0x48>)
 8003228:	f004 f92a 	bl	8007480 <HAL_I2C_Mem_Read>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003232:	2300      	movs	r3, #0
 8003234:	e001      	b.n	800323a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003236:	f06f 0307 	mvn.w	r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	24000ddc 	.word	0x24000ddc

08003248 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af02      	add	r7, sp, #8
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8003252:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800325c:	2200      	movs	r2, #0
 800325e:	6839      	ldr	r1, [r7, #0]
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f805 	bl	8003270 <BSP_LCD_InitEx>
 8003266:	4603      	mov	r3, r0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b09e      	sub	sp, #120	; 0x78
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800327e:	2300      	movs	r3, #0
 8003280:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d808      	bhi.n	800329e <BSP_LCD_InitEx+0x2e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <BSP_LCD_InitEx+0x2e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d006      	beq.n	80032a6 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800329e:	f06f 0301 	mvn.w	r3, #1
 80032a2:	677b      	str	r3, [r7, #116]	; 0x74
 80032a4:	e0a8      	b.n	80033f8 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d109      	bne.n	80032c0 <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80032ac:	2302      	movs	r3, #2
 80032ae:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 80032b0:	4a54      	ldr	r2, [pc, #336]	; (8003404 <BSP_LCD_InitEx+0x194>)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015b      	lsls	r3, r3, #5
 80032b6:	4413      	add	r3, r2
 80032b8:	3310      	adds	r3, #16
 80032ba:	2202      	movs	r2, #2
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e008      	b.n	80032d2 <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80032c0:	2300      	movs	r3, #0
 80032c2:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80032c4:	4a4f      	ldr	r2, [pc, #316]	; (8003404 <BSP_LCD_InitEx+0x194>)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	015b      	lsls	r3, r3, #5
 80032ca:	4413      	add	r3, r2
 80032cc:	3310      	adds	r3, #16
 80032ce:	2204      	movs	r2, #4
 80032d0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80032d2:	4a4c      	ldr	r2, [pc, #304]	; (8003404 <BSP_LCD_InitEx+0x194>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	4413      	add	r3, r2
 80032da:	330c      	adds	r3, #12
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80032e0:	4a48      	ldr	r2, [pc, #288]	; (8003404 <BSP_LCD_InitEx+0x194>)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	015b      	lsls	r3, r3, #5
 80032e6:	4413      	add	r3, r2
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80032ec:	4a45      	ldr	r2, [pc, #276]	; (8003404 <BSP_LCD_InitEx+0x194>)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015b      	lsls	r3, r3, #5
 80032f2:	4413      	add	r3, r2
 80032f4:	3304      	adds	r3, #4
 80032f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032fa:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <BSP_LCD_InitEx+0x198>)
 80032fe:	4a43      	ldr	r2, [pc, #268]	; (800340c <BSP_LCD_InitEx+0x19c>)
 8003300:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8003302:	4b43      	ldr	r3, [pc, #268]	; (8003410 <BSP_LCD_InitEx+0x1a0>)
 8003304:	4a43      	ldr	r2, [pc, #268]	; (8003414 <BSP_LCD_InitEx+0x1a4>)
 8003306:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8003308:	483f      	ldr	r0, [pc, #252]	; (8003408 <BSP_LCD_InitEx+0x198>)
 800330a:	f000 fd1b 	bl	8003d44 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 800330e:	4840      	ldr	r0, [pc, #256]	; (8003410 <BSP_LCD_InitEx+0x1a0>)
 8003310:	f000 fde4 	bl	8003edc <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 8003314:	4b40      	ldr	r3, [pc, #256]	; (8003418 <BSP_LCD_InitEx+0x1a8>)
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <BSP_LCD_InitEx+0x1ac>)
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 800331c:	2370      	movs	r3, #112	; 0x70
 800331e:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 8003320:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003324:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe fdd6 	bl	8001edc <FT5336_RegisterBusIO>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	da03      	bge.n	800333e <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003336:	f06f 0304 	mvn.w	r3, #4
 800333a:	677b      	str	r3, [r7, #116]	; 0x74
 800333c:	e02b      	b.n	8003396 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800333e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003342:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe fec1 	bl	80020d0 <FT5336_ReadID>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	da03      	bge.n	800335c <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003354:	f06f 0304 	mvn.w	r3, #4
 8003358:	677b      	str	r3, [r7, #116]	; 0x74
 800335a:	e01c      	b.n	8003396 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 800335c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335e:	2b51      	cmp	r3, #81	; 0x51
 8003360:	d003      	beq.n	800336a <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003362:	f06f 0306 	mvn.w	r3, #6
 8003366:	677b      	str	r3, [r7, #116]	; 0x74
 8003368:	e015      	b.n	8003396 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800336a:	4827      	ldr	r0, [pc, #156]	; (8003408 <BSP_LCD_InitEx+0x198>)
 800336c:	f000 f8e8 	bl	8003540 <MX_LTDC_ClockConfig>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003376:	f06f 0303 	mvn.w	r3, #3
 800337a:	677b      	str	r3, [r7, #116]	; 0x74
 800337c:	e00b      	b.n	8003396 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800337e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003382:	6839      	ldr	r1, [r7, #0]
 8003384:	4820      	ldr	r0, [pc, #128]	; (8003408 <BSP_LCD_InitEx+0x198>)
 8003386:	f000 f84d 	bl	8003424 <MX_LTDC_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003390:	f06f 0303 	mvn.w	r3, #3
 8003394:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8003396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003398:	2b00      	cmp	r3, #0
 800339a:	d12d      	bne.n	80033f8 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800339c:	2000      	movs	r0, #0
 800339e:	f000 fe2f 	bl	8004000 <BSP_SDRAM_Init>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 80033a8:	f06f 0303 	mvn.w	r3, #3
 80033ac:	e025      	b.n	80033fa <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 80033ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80033be:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 80033c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80033c4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80033ca:	f107 0314 	add.w	r3, r7, #20
 80033ce:	461a      	mov	r2, r3
 80033d0:	2100      	movs	r1, #0
 80033d2:	480d      	ldr	r0, [pc, #52]	; (8003408 <BSP_LCD_InitEx+0x198>)
 80033d4:	f000 f872 	bl	80034bc <MX_LTDC_ConfigLayer>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80033de:	f06f 0303 	mvn.w	r3, #3
 80033e2:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80033e4:	480e      	ldr	r0, [pc, #56]	; (8003420 <BSP_LCD_InitEx+0x1b0>)
 80033e6:	f000 fde1 	bl	8003fac <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80033ea:	4a06      	ldr	r2, [pc, #24]	; (8003404 <BSP_LCD_InitEx+0x194>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	015b      	lsls	r3, r3, #5
 80033f0:	4413      	add	r3, r2
 80033f2:	3318      	adds	r3, #24
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80033f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3778      	adds	r7, #120	; 0x78
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	24000f8c 	.word	0x24000f8c
 8003408:	24000ee4 	.word	0x24000ee4
 800340c:	50001000 	.word	0x50001000
 8003410:	24000e7c 	.word	0x24000e7c
 8003414:	52001000 	.word	0x52001000
 8003418:	0800299d 	.word	0x0800299d
 800341c:	08002b39 	.word	0x08002b39
 8003420:	24000e30 	.word	0x24000e30

08003424 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <MX_LTDC_Init+0x94>)
 8003434:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2228      	movs	r2, #40	; 0x28
 8003452:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	222a      	movs	r2, #42	; 0x2a
 8003458:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2209      	movs	r2, #9
 8003472:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	220b      	movs	r2, #11
 8003478:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f103 020b 	add.w	r2, r3, #11
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 020d 	add.w	r2, r3, #13
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	22ff      	movs	r2, #255	; 0xff
 8003492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	22ff      	movs	r2, #255	; 0xff
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f004 fc6e 	bl	8007d88 <HAL_LTDC_Init>
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	50001000 	.word	0x50001000

080034bc <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b092      	sub	sp, #72	; 0x48
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80034e6:	23ff      	movs	r3, #255	; 0xff
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80034ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80034f4:	2307      	movs	r3, #7
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	4619      	mov	r1, r3
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f004 fd03 	bl	8007f3c <HAL_LTDC_ConfigLayer>
 8003536:	4603      	mov	r3, r0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3748      	adds	r7, #72	; 0x48
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b0b2      	sub	sp, #200	; 0xc8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8003548:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8003554:	2305      	movs	r3, #5
 8003556:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8003558:	23a0      	movs	r3, #160	; 0xa0
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800355c:	2302      	movs	r3, #2
 800355e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003560:	2302      	movs	r3, #2
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8003564:	2353      	movs	r3, #83	; 0x53
 8003566:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4618      	mov	r0, r3
 8003576:	f006 f969 	bl	800984c <HAL_RCCEx_PeriphCLKConfig>
 800357a:	4603      	mov	r3, r0
}
 800357c:	4618      	mov	r0, r3
 800357e:	37c8      	adds	r7, #200	; 0xc8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003598:	f06f 0301 	mvn.w	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	e007      	b.n	80035b0 <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 80035a0:	4a07      	ldr	r2, [pc, #28]	; (80035c0 <BSP_LCD_GetPixelFormat+0x3c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	4413      	add	r3, r2
 80035a8:	330c      	adds	r3, #12
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80035b0:	68fb      	ldr	r3, [r7, #12]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	24000f8c 	.word	0x24000f8c

080035c4 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035d8:	f06f 0301 	mvn.w	r3, #1
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	e006      	b.n	80035ee <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80035e0:	4a06      	ldr	r2, [pc, #24]	; (80035fc <BSP_LCD_SetActiveLayer+0x38>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	015b      	lsls	r3, r3, #5
 80035e6:	4413      	add	r3, r2
 80035e8:	3308      	adds	r3, #8
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	24000f8c 	.word	0x24000f8c

08003600 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003614:	f06f 0301 	mvn.w	r3, #1
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e006      	b.n	800362a <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800361c:	4a06      	ldr	r2, [pc, #24]	; (8003638 <BSP_LCD_GetXSize+0x38>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	015b      	lsls	r3, r3, #5
 8003622:	4413      	add	r3, r2
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	24000f8c 	.word	0x24000f8c

0800363c <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003650:	f06f 0301 	mvn.w	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	e007      	b.n	8003668 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <BSP_LCD_GetYSize+0x3c>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	015b      	lsls	r3, r3, #5
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003668:	68fb      	ldr	r3, [r7, #12]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	24000f8c 	.word	0x24000f8c

0800367c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	; 0x38
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	330a      	adds	r3, #10
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	330b      	adds	r3, #11
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	441a      	add	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	441a      	add	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	330d      	adds	r3, #13
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	4413      	add	r3, r2
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	3312      	adds	r3, #18
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	3313      	adds	r3, #19
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	441a      	add	r2, r3
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	441a      	add	r2, r3
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	3315      	adds	r3, #21
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	4413      	add	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	3316      	adds	r3, #22
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	3317      	adds	r3, #23
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	441a      	add	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	3318      	adds	r3, #24
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	041b      	lsls	r3, r3, #16
 80036f8:	441a      	add	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	3319      	adds	r3, #25
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	4413      	add	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	331c      	adds	r3, #28
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	331d      	adds	r3, #29
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	021b      	lsls	r3, r3, #8
 8003716:	4413      	add	r3, r2
 8003718:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800371a:	4a37      	ldr	r2, [pc, #220]	; (80037f8 <BSP_LCD_DrawBitmap+0x17c>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015b      	lsls	r3, r3, #5
 8003720:	4413      	add	r3, r2
 8003722:	3308      	adds	r3, #8
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a35      	ldr	r2, [pc, #212]	; (80037fc <BSP_LCD_DrawBitmap+0x180>)
 8003728:	2134      	movs	r1, #52	; 0x34
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	335c      	adds	r3, #92	; 0x5c
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4930      	ldr	r1, [pc, #192]	; (80037f8 <BSP_LCD_DrawBitmap+0x17c>)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	440b      	add	r3, r1
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	fb03 f101 	mul.w	r1, r3, r1
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	440b      	add	r3, r1
 8003748:	482b      	ldr	r0, [pc, #172]	; (80037f8 <BSP_LCD_DrawBitmap+0x17c>)
 800374a:	68f9      	ldr	r1, [r7, #12]
 800374c:	0149      	lsls	r1, r1, #5
 800374e:	4401      	add	r1, r0
 8003750:	3110      	adds	r1, #16
 8003752:	6809      	ldr	r1, [r1, #0]
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	3b20      	subs	r3, #32
 8003760:	2b07      	cmp	r3, #7
 8003762:	d802      	bhi.n	800376a <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
 8003768:	e008      	b.n	800377c <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	3b10      	subs	r3, #16
 800376e:	2b07      	cmp	r3, #7
 8003770:	d802      	bhi.n	8003778 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8003772:	2302      	movs	r3, #2
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e001      	b.n	800377c <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8003778:	2301      	movs	r3, #1
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	3b01      	subs	r3, #1
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	08d2      	lsrs	r2, r2, #3
 800378a:	fb03 f202 	mul.w	r2, r3, r2
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	4413      	add	r3, r2
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	4413      	add	r3, r2
 8003796:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379c:	e023      	b.n	80037e6 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 800379e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6a39      	ldr	r1, [r7, #32]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fa77 	bl	8003c9c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <BSP_LCD_DrawBitmap+0x17c>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	015b      	lsls	r3, r3, #5
 80037b4:	4413      	add	r3, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	490f      	ldr	r1, [pc, #60]	; (80037f8 <BSP_LCD_DrawBitmap+0x17c>)
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	0152      	lsls	r2, r2, #5
 80037be:	440a      	add	r2, r1
 80037c0:	3210      	adds	r2, #16
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	fb02 f303 	mul.w	r3, r2, r3
 80037c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037ca:	4413      	add	r3, r2
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	08db      	lsrs	r3, r3, #3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	fb02 f303 	mul.w	r3, r2, r3
 80037d8:	425b      	negs	r3, r3
 80037da:	6a3a      	ldr	r2, [r7, #32]
 80037dc:	4413      	add	r3, r2
 80037de:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80037e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e2:	3301      	adds	r3, #1
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d3d7      	bcc.n	800379e <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 80037ee:	69fb      	ldr	r3, [r7, #28]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3730      	adds	r7, #48	; 0x30
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	24000f8c 	.word	0x24000f8c
 80037fc:	24000ee4 	.word	0x24000ee4

08003800 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e032      	b.n	800387e <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	e028      	b.n	8003870 <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	3301      	adds	r3, #1
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	431a      	orrs	r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3302      	adds	r3, #2
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	041b      	lsls	r3, r3, #16
 8003836:	431a      	orrs	r2, r3
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	3303      	adds	r3, #3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	18d1      	adds	r1, r2, r3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	441a      	add	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f95e 	bl	8003b14 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <BSP_LCD_FillRGBRect+0x90>)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	015b      	lsls	r3, r3, #5
 800385e:	4413      	add	r3, r2
 8003860:	3310      	adds	r3, #16
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4413      	add	r3, r2
 8003868:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	429a      	cmp	r2, r3
 8003876:	d3d2      	bcc.n	800381e <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	3301      	adds	r3, #1
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	429a      	cmp	r2, r3
 8003884:	d3c8      	bcc.n	8003818 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	24000f8c 	.word	0x24000f8c

08003894 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af02      	add	r7, sp, #8
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
 80038a0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80038a2:	4a21      	ldr	r2, [pc, #132]	; (8003928 <BSP_LCD_DrawHLine+0x94>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	015b      	lsls	r3, r3, #5
 80038a8:	4413      	add	r3, r2
 80038aa:	3308      	adds	r3, #8
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <BSP_LCD_DrawHLine+0x98>)
 80038b0:	2134      	movs	r1, #52	; 0x34
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	335c      	adds	r3, #92	; 0x5c
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	491a      	ldr	r1, [pc, #104]	; (8003928 <BSP_LCD_DrawHLine+0x94>)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	015b      	lsls	r3, r3, #5
 80038c2:	440b      	add	r3, r1
 80038c4:	3310      	adds	r3, #16
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4817      	ldr	r0, [pc, #92]	; (8003928 <BSP_LCD_DrawHLine+0x94>)
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	0149      	lsls	r1, r1, #5
 80038ce:	4401      	add	r1, r0
 80038d0:	6809      	ldr	r1, [r1, #0]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	fb01 f000 	mul.w	r0, r1, r0
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4401      	add	r1, r0
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	441a      	add	r2, r3
 80038ea:	490f      	ldr	r1, [pc, #60]	; (8003928 <BSP_LCD_DrawHLine+0x94>)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	440b      	add	r3, r1
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d907      	bls.n	8003908 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <BSP_LCD_DrawHLine+0x94>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	015b      	lsls	r3, r3, #5
 80038fe:	4413      	add	r3, r2
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	2300      	movs	r3, #0
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2301      	movs	r3, #1
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f956 	bl	8003bc8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	24000f8c 	.word	0x24000f8c
 800392c:	24000ee4 	.word	0x24000ee4

08003930 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
 800393c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800393e:	4a24      	ldr	r2, [pc, #144]	; (80039d0 <BSP_LCD_DrawVLine+0xa0>)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	015b      	lsls	r3, r3, #5
 8003944:	4413      	add	r3, r2
 8003946:	3308      	adds	r3, #8
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a22      	ldr	r2, [pc, #136]	; (80039d4 <BSP_LCD_DrawVLine+0xa4>)
 800394c:	2134      	movs	r1, #52	; 0x34
 800394e:	fb01 f303 	mul.w	r3, r1, r3
 8003952:	4413      	add	r3, r2
 8003954:	335c      	adds	r3, #92	; 0x5c
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	491d      	ldr	r1, [pc, #116]	; (80039d0 <BSP_LCD_DrawVLine+0xa0>)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	015b      	lsls	r3, r3, #5
 800395e:	440b      	add	r3, r1
 8003960:	3310      	adds	r3, #16
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	481a      	ldr	r0, [pc, #104]	; (80039d0 <BSP_LCD_DrawVLine+0xa0>)
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	0149      	lsls	r1, r1, #5
 800396a:	4401      	add	r1, r0
 800396c:	6809      	ldr	r1, [r1, #0]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	fb01 f000 	mul.w	r0, r1, r0
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	4401      	add	r1, r0
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	441a      	add	r2, r3
 8003986:	4912      	ldr	r1, [pc, #72]	; (80039d0 <BSP_LCD_DrawVLine+0xa0>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	015b      	lsls	r3, r3, #5
 800398c:	440b      	add	r3, r1
 800398e:	3304      	adds	r3, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d908      	bls.n	80039a8 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8003996:	4a0e      	ldr	r2, [pc, #56]	; (80039d0 <BSP_LCD_DrawVLine+0xa0>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	4413      	add	r3, r2
 800399e:	3304      	adds	r3, #4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80039a8:	6979      	ldr	r1, [r7, #20]
 80039aa:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <BSP_LCD_DrawVLine+0xa0>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	015b      	lsls	r3, r3, #5
 80039b0:	4413      	add	r3, r2
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	6a3a      	ldr	r2, [r7, #32]
 80039b8:	9201      	str	r2, [sp, #4]
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f901 	bl	8003bc8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	24000f8c 	.word	0x24000f8c
 80039d4:	24000ee4 	.word	0x24000ee4

080039d8 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80039e6:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <BSP_LCD_FillRect+0x7c>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	4413      	add	r3, r2
 80039ee:	3308      	adds	r3, #8
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <BSP_LCD_FillRect+0x80>)
 80039f4:	2134      	movs	r1, #52	; 0x34
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	335c      	adds	r3, #92	; 0x5c
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4914      	ldr	r1, [pc, #80]	; (8003a54 <BSP_LCD_FillRect+0x7c>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015b      	lsls	r3, r3, #5
 8003a06:	440b      	add	r3, r1
 8003a08:	3310      	adds	r3, #16
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4811      	ldr	r0, [pc, #68]	; (8003a54 <BSP_LCD_FillRect+0x7c>)
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	0149      	lsls	r1, r1, #5
 8003a12:	4401      	add	r1, r0
 8003a14:	6809      	ldr	r1, [r1, #0]
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	fb01 f000 	mul.w	r0, r1, r0
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	4401      	add	r1, r0
 8003a20:	fb01 f303 	mul.w	r3, r1, r3
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003a28:	6979      	ldr	r1, [r7, #20]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <BSP_LCD_FillRect+0x7c>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	015b      	lsls	r3, r3, #5
 8003a30:	4413      	add	r3, r2
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3a:	9201      	str	r2, [sp, #4]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f8c0 	bl	8003bc8 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	24000f8c 	.word	0x24000f8c
 8003a58:	24000ee4 	.word	0x24000ee4

08003a5c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a6a:	4a28      	ldr	r2, [pc, #160]	; (8003b0c <BSP_LCD_ReadPixel+0xb0>)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015b      	lsls	r3, r3, #5
 8003a70:	4413      	add	r3, r2
 8003a72:	3308      	adds	r3, #8
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a26      	ldr	r2, [pc, #152]	; (8003b10 <BSP_LCD_ReadPixel+0xb4>)
 8003a78:	2134      	movs	r1, #52	; 0x34
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	4413      	add	r3, r2
 8003a80:	3348      	adds	r3, #72	; 0x48
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d11c      	bne.n	8003ac2 <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <BSP_LCD_ReadPixel+0xb0>)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	015b      	lsls	r3, r3, #5
 8003a8e:	4413      	add	r3, r2
 8003a90:	3308      	adds	r3, #8
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <BSP_LCD_ReadPixel+0xb4>)
 8003a96:	2134      	movs	r1, #52	; 0x34
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	335c      	adds	r3, #92	; 0x5c
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	491a      	ldr	r1, [pc, #104]	; (8003b0c <BSP_LCD_ReadPixel+0xb0>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015b      	lsls	r3, r3, #5
 8003aa8:	440b      	add	r3, r1
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	fb03 f101 	mul.w	r1, r3, r1
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	440b      	add	r3, r1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	e01d      	b.n	8003afe <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <BSP_LCD_ReadPixel+0xb0>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	4413      	add	r3, r2
 8003aca:	3308      	adds	r3, #8
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <BSP_LCD_ReadPixel+0xb4>)
 8003ad0:	2134      	movs	r1, #52	; 0x34
 8003ad2:	fb01 f303 	mul.w	r3, r1, r3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	335c      	adds	r3, #92	; 0x5c
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	490b      	ldr	r1, [pc, #44]	; (8003b0c <BSP_LCD_ReadPixel+0xb0>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	015b      	lsls	r3, r3, #5
 8003ae2:	440b      	add	r3, r1
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	fb03 f101 	mul.w	r1, r3, r1
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	440b      	add	r3, r1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	24000f8c 	.word	0x24000f8c
 8003b10:	24000ee4 	.word	0x24000ee4

08003b14 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003b22:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <BSP_LCD_WritePixel+0xac>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	015b      	lsls	r3, r3, #5
 8003b28:	4413      	add	r3, r2
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a25      	ldr	r2, [pc, #148]	; (8003bc4 <BSP_LCD_WritePixel+0xb0>)
 8003b30:	2134      	movs	r1, #52	; 0x34
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3348      	adds	r3, #72	; 0x48
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d11c      	bne.n	8003b7a <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8003b40:	4a1f      	ldr	r2, [pc, #124]	; (8003bc0 <BSP_LCD_WritePixel+0xac>)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015b      	lsls	r3, r3, #5
 8003b46:	4413      	add	r3, r2
 8003b48:	3308      	adds	r3, #8
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <BSP_LCD_WritePixel+0xb0>)
 8003b4e:	2134      	movs	r1, #52	; 0x34
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4919      	ldr	r1, [pc, #100]	; (8003bc0 <BSP_LCD_WritePixel+0xac>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	015b      	lsls	r3, r3, #5
 8003b60:	440b      	add	r3, r1
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	fb03 f101 	mul.w	r1, r3, r1
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	440b      	add	r3, r1
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	461a      	mov	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e01b      	b.n	8003bb2 <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8003b7a:	4a11      	ldr	r2, [pc, #68]	; (8003bc0 <BSP_LCD_WritePixel+0xac>)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	015b      	lsls	r3, r3, #5
 8003b80:	4413      	add	r3, r2
 8003b82:	3308      	adds	r3, #8
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <BSP_LCD_WritePixel+0xb0>)
 8003b88:	2134      	movs	r1, #52	; 0x34
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	335c      	adds	r3, #92	; 0x5c
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <BSP_LCD_WritePixel+0xac>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015b      	lsls	r3, r3, #5
 8003b9a:	440b      	add	r3, r1
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	fb03 f101 	mul.w	r1, r3, r1
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	440b      	add	r3, r1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	24000f8c 	.word	0x24000f8c
 8003bc4:	24000ee4 	.word	0x24000ee4

08003bc8 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8003bda:	4a2d      	ldr	r2, [pc, #180]	; (8003c90 <LL_FillBuffer+0xc8>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	015b      	lsls	r3, r3, #5
 8003be0:	4413      	add	r3, r2
 8003be2:	330c      	adds	r3, #12
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d129      	bne.n	8003c3e <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8003bea:	2302      	movs	r3, #2
 8003bec:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf0:	0adb      	lsrs	r3, r3, #11
 8003bf2:	f003 021f 	and.w	r2, r3, #31
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	4413      	add	r3, r2
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	3317      	adds	r3, #23
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	0419      	lsls	r1, r3, #16
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c0e:	4613      	mov	r3, r2
 8003c10:	01db      	lsls	r3, r3, #7
 8003c12:	4413      	add	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	4413      	add	r3, r2
 8003c18:	3321      	adds	r3, #33	; 0x21
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	4319      	orrs	r1, r3
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f003 021f 	and.w	r2, r3, #31
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	3317      	adds	r3, #23
 8003c32:	099b      	lsrs	r3, r3, #6
 8003c34:	430b      	orrs	r3, r1
 8003c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3a:	613b      	str	r3, [r7, #16]
    break;
 8003c3c:	e002      	b.n	8003c44 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
    break;
 8003c42:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c4a:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003c4c:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8003c58:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c5a:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <LL_FillBuffer+0xd0>)
 8003c5c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003c5e:	480d      	ldr	r0, [pc, #52]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c60:	f002 fc18 	bl	8006494 <HAL_DMA2D_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10e      	bne.n	8003c88 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6939      	ldr	r1, [r7, #16]
 8003c74:	4807      	ldr	r0, [pc, #28]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c76:	f002 fc7b 	bl	8006570 <HAL_DMA2D_Start>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d103      	bne.n	8003c88 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003c80:	2132      	movs	r1, #50	; 0x32
 8003c82:	4804      	ldr	r0, [pc, #16]	; (8003c94 <LL_FillBuffer+0xcc>)
 8003c84:	f002 fc9f 	bl	80065c6 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	24000f8c 	.word	0x24000f8c
 8003c94:	24000e7c 	.word	0x24000e7c
 8003c98:	52001000 	.word	0x52001000

08003c9c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8003caa:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <LL_ConvertLineToRGB+0x9c>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	015b      	lsls	r3, r3, #5
 8003cb0:	4413      	add	r3, r2
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d102      	bne.n	8003cc0 <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8003cba:	2302      	movs	r3, #2
 8003cbc:	617b      	str	r3, [r7, #20]
    break;
 8003cbe:	e002      	b.n	8003cc6 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
    break;
 8003cc4:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8003cc6:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ccc:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003cce:	4a1b      	ldr	r2, [pc, #108]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003ce2:	22ff      	movs	r2, #255	; 0xff
 8003ce4:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cf4:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <LL_ConvertLineToRGB+0xa4>)
 8003cf6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003cf8:	4810      	ldr	r0, [pc, #64]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003cfa:	f002 fbcb 	bl	8006494 <HAL_DMA2D_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d115      	bne.n	8003d30 <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003d04:	2101      	movs	r1, #1
 8003d06:	480d      	ldr	r0, [pc, #52]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003d08:	f002 fd46 	bl	8006798 <HAL_DMA2D_ConfigLayer>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10e      	bne.n	8003d30 <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	2301      	movs	r3, #1
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	4807      	ldr	r0, [pc, #28]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003d1e:	f002 fc27 	bl	8006570 <HAL_DMA2D_Start>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d103      	bne.n	8003d30 <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003d28:	2132      	movs	r1, #50	; 0x32
 8003d2a:	4804      	ldr	r0, [pc, #16]	; (8003d3c <LL_ConvertLineToRGB+0xa0>)
 8003d2c:	f002 fc4b 	bl	80065c6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	24000f8c 	.word	0x24000f8c
 8003d3c:	24000e7c 	.word	0x24000e7c
 8003d40:	52001000 	.word	0x52001000

08003d44 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	; 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a5b      	ldr	r2, [pc, #364]	; (8003ec0 <LTDC_MspInit+0x17c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f040 80b0 	bne.w	8003eb8 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d58:	4b5a      	ldr	r3, [pc, #360]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d5e:	4a59      	ldr	r2, [pc, #356]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d60:	f043 0308 	orr.w	r3, r3, #8
 8003d64:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d68:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	623b      	str	r3, [r7, #32]
 8003d74:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d76:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d7c:	4a51      	ldr	r2, [pc, #324]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d86:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d94:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003da4:	4b47      	ldr	r3, [pc, #284]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003db2:	4b44      	ldr	r3, [pc, #272]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dc2:	4b40      	ldr	r3, [pc, #256]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dd0:	4b3c      	ldr	r3, [pc, #240]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd6:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003de0:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dea:	613b      	str	r3, [r7, #16]
 8003dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dee:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003df4:	4a33      	ldr	r2, [pc, #204]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003df6:	f043 0308 	orr.w	r3, r3, #8
 8003dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003e0c:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e12:	2302      	movs	r3, #2
 8003e14:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e1e:	230e      	movs	r3, #14
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e26:	4619      	mov	r1, r3
 8003e28:	4827      	ldr	r0, [pc, #156]	; (8003ec8 <LTDC_MspInit+0x184>)
 8003e2a:	f002 fe6d 	bl	8006b08 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8003e2e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e34:	230e      	movs	r3, #14
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4823      	ldr	r0, [pc, #140]	; (8003ecc <LTDC_MspInit+0x188>)
 8003e40:	f002 fe62 	bl	8006b08 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003e44:	23ff      	movs	r3, #255	; 0xff
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e48:	230e      	movs	r3, #14
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e50:	4619      	mov	r1, r3
 8003e52:	481f      	ldr	r0, [pc, #124]	; (8003ed0 <LTDC_MspInit+0x18c>)
 8003e54:	f002 fe58 	bl	8006b08 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8003e58:	f240 2302 	movw	r3, #514	; 0x202
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003e66:	2302      	movs	r3, #2
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e6a:	230e      	movs	r3, #14
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e72:	4619      	mov	r1, r3
 8003e74:	4817      	ldr	r0, [pc, #92]	; (8003ed4 <LTDC_MspInit+0x190>)
 8003e76:	f002 fe47 	bl	8006b08 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e86:	4619      	mov	r1, r3
 8003e88:	4813      	ldr	r0, [pc, #76]	; (8003ed8 <LTDC_MspInit+0x194>)
 8003e8a:	f002 fe3d 	bl	8006b08 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003e8e:	2201      	movs	r2, #1
 8003e90:	2180      	movs	r1, #128	; 0x80
 8003e92:	4811      	ldr	r0, [pc, #68]	; (8003ed8 <LTDC_MspInit+0x194>)
 8003e94:	f003 f8f2 	bl	800707c <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003ea0:	f043 0308 	orr.w	r3, r3, #8
 8003ea4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eae:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <LTDC_MspInit+0x180>)
 8003eb0:	f023 0308 	bic.w	r3, r3, #8
 8003eb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3738      	adds	r7, #56	; 0x38
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	50001000 	.word	0x50001000
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	58022000 	.word	0x58022000
 8003ecc:	58022400 	.word	0x58022400
 8003ed0:	58022800 	.word	0x58022800
 8003ed4:	58021c00 	.word	0x58021c00
 8003ed8:	58020c00 	.word	0x58020c00

08003edc <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <DMA2D_MspInit+0x54>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d11a      	bne.n	8003f24 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003ef0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ef4:	4a0f      	ldr	r2, [pc, #60]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003ef6:	f043 0310 	orr.w	r3, r3, #16
 8003efa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003f00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f10:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003f12:	f043 0310 	orr.w	r3, r3, #16
 8003f16:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1c:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <DMA2D_MspInit+0x58>)
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8003f24:	bf00      	nop
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	52001000 	.word	0x52001000
 8003f34:	58024400 	.word	0x58024400

08003f38 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	; 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <TIMx_PWM_MspInit+0x6c>)
 8003f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <TIMx_PWM_MspInit+0x6c>)
 8003f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <TIMx_PWM_MspInit+0x6c>)
 8003f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5a:	613b      	str	r3, [r7, #16]
 8003f5c:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <TIMx_PWM_MspInit+0x6c>)
 8003f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f64:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <TIMx_PWM_MspInit+0x6c>)
 8003f66:	f043 0302 	orr.w	r3, r3, #2
 8003f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <TIMx_PWM_MspInit+0x6c>)
 8003f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003f84:	2301      	movs	r3, #1
 8003f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	4619      	mov	r1, r3
 8003f96:	4804      	ldr	r0, [pc, #16]	; (8003fa8 <TIMx_PWM_MspInit+0x70>)
 8003f98:	f002 fdb6 	bl	8006b08 <HAL_GPIO_Init>
}
 8003f9c:	bf00      	nop
 8003f9e:	3728      	adds	r7, #40	; 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	58024400 	.word	0x58024400
 8003fa8:	58022800 	.word	0x58022800

08003fac <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <TIMx_PWM_Init+0x50>)
 8003fb8:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f007 fc3d 	bl	800b83a <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff ffb9 	bl	8003f38 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003fd2:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f007 fbcd 	bl	800b78c <HAL_TIM_PWM_Init>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40010400 	.word	0x40010400

08004000 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8004012:	f06f 0301 	mvn.w	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e044      	b.n	80040a4 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2234      	movs	r2, #52	; 0x34
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a23      	ldr	r2, [pc, #140]	; (80040b0 <BSP_SDRAM_Init+0xb0>)
 8004024:	4413      	add	r3, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 f8a8 	bl	800417c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2234      	movs	r2, #52	; 0x34
 8004030:	fb02 f303 	mul.w	r3, r2, r3
 8004034:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <BSP_SDRAM_Init+0xb0>)
 8004036:	4413      	add	r3, r2
 8004038:	2210      	movs	r2, #16
 800403a:	2104      	movs	r1, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f83b 	bl	80040b8 <MX_SDRAM_BANK2_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e029      	b.n	80040a4 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8004050:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 8004052:	2208      	movs	r2, #8
 8004054:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8004056:	4b17      	ldr	r3, [pc, #92]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 8004058:	2203      	movs	r2, #3
 800405a:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800405c:	4b15      	ldr	r3, [pc, #84]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 800405e:	f240 6203 	movw	r2, #1539	; 0x603
 8004062:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8004064:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 8004066:	2200      	movs	r2, #0
 8004068:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 8004072:	2230      	movs	r2, #48	; 0x30
 8004074:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8004076:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800407c:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 800407e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004082:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2234      	movs	r2, #52	; 0x34
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <BSP_SDRAM_Init+0xb0>)
 800408e:	4413      	add	r3, r2
 8004090:	4908      	ldr	r1, [pc, #32]	; (80040b4 <BSP_SDRAM_Init+0xb4>)
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fa82 	bl	800259c <MT48LC4M32B2_Init>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800409e:	f06f 0304 	mvn.w	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80040a4:	68fb      	ldr	r3, [r7, #12]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	24000fac 	.word	0x24000fac
 80040b4:	24000fe0 	.word	0x24000fe0

080040b8 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	; 0x30
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80040c4:	4b20      	ldr	r3, [pc, #128]	; (8004148 <MX_SDRAM_BANK2_Init+0x90>)
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <MX_SDRAM_BANK2_Init+0x94>)
 80040c8:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040e2:	4b19      	ldr	r3, [pc, #100]	; (8004148 <MX_SDRAM_BANK2_Init+0x90>)
 80040e4:	2240      	movs	r2, #64	; 0x40
 80040e6:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80040ee:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040fc:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004104:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800410c:	2302      	movs	r3, #2
 800410e:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8004110:	2307      	movs	r3, #7
 8004112:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 8004114:	2304      	movs	r3, #4
 8004116:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 8004118:	2307      	movs	r3, #7
 800411a:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800411c:	2302      	movs	r3, #2
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 8004120:	2302      	movs	r3, #2
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8004124:	2302      	movs	r3, #2
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	4619      	mov	r1, r3
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f007 f9b8 	bl	800b4a4 <HAL_SDRAM_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3730      	adds	r7, #48	; 0x30
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	24000fac 	.word	0x24000fac
 800414c:	52004140 	.word	0x52004140

08004150 <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8004158:	4a07      	ldr	r2, [pc, #28]	; (8004178 <BSP_SDRAM_IRQHandler+0x28>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2134      	movs	r1, #52	; 0x34
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	3330      	adds	r3, #48	; 0x30
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f004 f963 	bl	8008434 <HAL_MDMA_IRQHandler>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	24000fac 	.word	0x24000fac

0800417c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08e      	sub	sp, #56	; 0x38
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004184:	4b73      	ldr	r3, [pc, #460]	; (8004354 <SDRAM_MspInit+0x1d8>)
 8004186:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800418a:	4a72      	ldr	r2, [pc, #456]	; (8004354 <SDRAM_MspInit+0x1d8>)
 800418c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004190:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004194:	4b6f      	ldr	r3, [pc, #444]	; (8004354 <SDRAM_MspInit+0x1d8>)
 8004196:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800419a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419e:	623b      	str	r3, [r7, #32]
 80041a0:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 80041a2:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80041a8:	4a6a      	ldr	r2, [pc, #424]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80041b2:	4b68      	ldr	r3, [pc, #416]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c0:	4b64      	ldr	r3, [pc, #400]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c6:	4a63      	ldr	r2, [pc, #396]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d0:	4b60      	ldr	r3, [pc, #384]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041de:	4b5d      	ldr	r3, [pc, #372]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e4:	4a5b      	ldr	r2, [pc, #364]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041e6:	f043 0310 	orr.w	r3, r3, #16
 80041ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ee:	4b59      	ldr	r3, [pc, #356]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041fc:	4b55      	ldr	r3, [pc, #340]	; (8004354 <SDRAM_MspInit+0x1d8>)
 80041fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004202:	4a54      	ldr	r2, [pc, #336]	; (8004354 <SDRAM_MspInit+0x1d8>)
 8004204:	f043 0320 	orr.w	r3, r3, #32
 8004208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800420c:	4b51      	ldr	r3, [pc, #324]	; (8004354 <SDRAM_MspInit+0x1d8>)
 800420e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800421a:	4b4e      	ldr	r3, [pc, #312]	; (8004354 <SDRAM_MspInit+0x1d8>)
 800421c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004220:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <SDRAM_MspInit+0x1d8>)
 8004222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <SDRAM_MspInit+0x1d8>)
 800422c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004238:	4b46      	ldr	r3, [pc, #280]	; (8004354 <SDRAM_MspInit+0x1d8>)
 800423a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800423e:	4a45      	ldr	r2, [pc, #276]	; (8004354 <SDRAM_MspInit+0x1d8>)
 8004240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004248:	4b42      	ldr	r3, [pc, #264]	; (8004354 <SDRAM_MspInit+0x1d8>)
 800424a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004256:	2302      	movs	r3, #2
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800425a:	2301      	movs	r3, #1
 800425c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800425e:	2303      	movs	r3, #3
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004262:	230c      	movs	r3, #12
 8004264:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8004266:	f24c 7303 	movw	r3, #50947	; 0xc703
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800426c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004270:	4619      	mov	r1, r3
 8004272:	4839      	ldr	r0, [pc, #228]	; (8004358 <SDRAM_MspInit+0x1dc>)
 8004274:	f002 fc48 	bl	8006b08 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004278:	f64f 7383 	movw	r3, #65411	; 0xff83
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800427e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004282:	4619      	mov	r1, r3
 8004284:	4835      	ldr	r0, [pc, #212]	; (800435c <SDRAM_MspInit+0x1e0>)
 8004286:	f002 fc3f 	bl	8006b08 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800428a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004294:	4619      	mov	r1, r3
 8004296:	4832      	ldr	r0, [pc, #200]	; (8004360 <SDRAM_MspInit+0x1e4>)
 8004298:	f002 fc36 	bl	8006b08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800429c:	f248 1333 	movw	r3, #33075	; 0x8133
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80042a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a6:	4619      	mov	r1, r3
 80042a8:	482e      	ldr	r0, [pc, #184]	; (8004364 <SDRAM_MspInit+0x1e8>)
 80042aa:	f002 fc2d 	bl	8006b08 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 80042ae:	23e0      	movs	r3, #224	; 0xe0
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80042b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042b6:	4619      	mov	r1, r3
 80042b8:	482b      	ldr	r0, [pc, #172]	; (8004368 <SDRAM_MspInit+0x1ec>)
 80042ba:	f002 fc25 	bl	8006b08 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 80042be:	4b2b      	ldr	r3, [pc, #172]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042c4:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042cc:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80042ce:	4b27      	ldr	r3, [pc, #156]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80042da:	4b24      	ldr	r3, [pc, #144]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042dc:	f240 2202 	movw	r2, #514	; 0x202
 80042e0:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042e4:	f640 0208 	movw	r2, #2056	; 0x808
 80042e8:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042ec:	2220      	movs	r2, #32
 80042ee:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80042f0:	4b1e      	ldr	r3, [pc, #120]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042f2:	2280      	movs	r2, #128	; 0x80
 80042f4:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <SDRAM_MspInit+0x1f0>)
 80042f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fc:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004300:	2200      	movs	r2, #0
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <SDRAM_MspInit+0x1f0>)
 800430c:	2280      	movs	r2, #128	; 0x80
 800430e:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004312:	2200      	movs	r2, #0
 8004314:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 8004316:	4b15      	ldr	r3, [pc, #84]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004318:	2200      	movs	r2, #0
 800431a:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <SDRAM_MspInit+0x1f0>)
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <SDRAM_MspInit+0x1f4>)
 8004320:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8004322:	4b14      	ldr	r3, [pc, #80]	; (8004374 <SDRAM_MspInit+0x1f8>)
 8004324:	4a11      	ldr	r2, [pc, #68]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
 8004328:	4b10      	ldr	r3, [pc, #64]	; (800436c <SDRAM_MspInit+0x1f0>)
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <SDRAM_MspInit+0x1f8>)
 800432c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800432e:	480f      	ldr	r0, [pc, #60]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004330:	f004 f828 	bl	8008384 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8004334:	480d      	ldr	r0, [pc, #52]	; (800436c <SDRAM_MspInit+0x1f0>)
 8004336:	f003 ffd9 	bl	80082ec <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800433a:	2200      	movs	r2, #0
 800433c:	210f      	movs	r1, #15
 800433e:	207a      	movs	r0, #122	; 0x7a
 8004340:	f000 fbe5 	bl	8004b0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8004344:	207a      	movs	r0, #122	; 0x7a
 8004346:	f000 fbfc 	bl	8004b42 <HAL_NVIC_EnableIRQ>
}
 800434a:	bf00      	nop
 800434c:	3738      	adds	r7, #56	; 0x38
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400
 8004358:	58020c00 	.word	0x58020c00
 800435c:	58021000 	.word	0x58021000
 8004360:	58021400 	.word	0x58021400
 8004364:	58021800 	.word	0x58021800
 8004368:	58021c00 	.word	0x58021c00
 800436c:	24001000 	.word	0x24001000
 8004370:	52000040 	.word	0x52000040
 8004374:	24000fac 	.word	0x24000fac

08004378 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11c      	bne.n	80043c6 <BSP_TS_Init+0x4e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d018      	beq.n	80043c6 <BSP_TS_Init+0x4e>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800439c:	d813      	bhi.n	80043c6 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00f      	beq.n	80043c6 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80043ae:	d80a      	bhi.n	80043c6 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6819      	ldr	r1, [r3, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	428b      	cmp	r3, r1
 80043be:	bf28      	it	cs
 80043c0:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d903      	bls.n	80043ce <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043c6:	f06f 0301 	mvn.w	r3, #1
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e06e      	b.n	80044ac <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f98c 	bl	80046ec <FT5336_Probe>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80043da:	f04f 33ff 	mov.w	r3, #4294967295
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e064      	b.n	80044ac <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4934      	ldr	r1, [pc, #208]	; (80044b8 <BSP_TS_Init+0x140>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	019b      	lsls	r3, r3, #6
 80043ec:	440b      	add	r3, r1
 80043ee:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	4930      	ldr	r1, [pc, #192]	; (80044b8 <BSP_TS_Init+0x140>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	019b      	lsls	r3, r3, #6
 80043fa:	440b      	add	r3, r1
 80043fc:	3304      	adds	r3, #4
 80043fe:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	492c      	ldr	r1, [pc, #176]	; (80044b8 <BSP_TS_Init+0x140>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	440b      	add	r3, r1
 800440c:	3308      	adds	r3, #8
 800440e:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	4928      	ldr	r1, [pc, #160]	; (80044b8 <BSP_TS_Init+0x140>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	019b      	lsls	r3, r3, #6
 800441a:	440b      	add	r3, r1
 800441c:	330c      	adds	r3, #12
 800441e:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <BSP_TS_Init+0x144>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	4926      	ldr	r1, [pc, #152]	; (80044c0 <BSP_TS_Init+0x148>)
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800442e:	f107 010c 	add.w	r1, r7, #12
 8004432:	4610      	mov	r0, r2
 8004434:	4798      	blx	r3
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	da03      	bge.n	8004444 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800443c:	f06f 0304 	mvn.w	r3, #4
 8004440:	61fb      	str	r3, [r7, #28]
 8004442:	e033      	b.n	80044ac <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	491c      	ldr	r1, [pc, #112]	; (80044b8 <BSP_TS_Init+0x140>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	019b      	lsls	r3, r3, #6
 800444c:	440b      	add	r3, r1
 800444e:	3310      	adds	r3, #16
 8004450:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4918      	ldr	r1, [pc, #96]	; (80044b8 <BSP_TS_Init+0x140>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	440b      	add	r3, r1
 800445c:	3314      	adds	r3, #20
 800445e:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e01f      	b.n	80044a6 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4413      	add	r3, r2
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	4811      	ldr	r0, [pc, #68]	; (80044b8 <BSP_TS_Init+0x140>)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0119      	lsls	r1, r3, #4
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	440b      	add	r3, r1
 800447c:	3306      	adds	r3, #6
 800447e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4413      	add	r3, r2
 800448c:	1c5a      	adds	r2, r3, #1
 800448e:	480a      	ldr	r0, [pc, #40]	; (80044b8 <BSP_TS_Init+0x140>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	0119      	lsls	r1, r3, #4
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	440b      	add	r3, r1
 8004498:	330a      	adds	r3, #10
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4403      	add	r3, r0
 800449e:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	3301      	adds	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d9dc      	bls.n	8004466 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 80044ac:	69fb      	ldr	r3, [r7, #28]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	24001074 	.word	0x24001074
 80044bc:	2400106c 	.word	0x2400106c
 80044c0:	24001070 	.word	0x24001070

080044c4 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80044d8:	f06f 0301 	mvn.w	r3, #1
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
 80044de:	e0f9      	b.n	80046d4 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80044e0:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <BSP_TS_GetState+0x21c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	497f      	ldr	r1, [pc, #508]	; (80046e4 <BSP_TS_GetState+0x220>)
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044ee:	f107 0108 	add.w	r1, r7, #8
 80044f2:	4610      	mov	r0, r2
 80044f4:	4798      	blx	r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da03      	bge.n	8004504 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80044fc:	f06f 0304 	mvn.w	r3, #4
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
 8004502:	e0e7      	b.n	80046d4 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	f000 80d1 	beq.w	80046ae <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8004514:	4a74      	ldr	r2, [pc, #464]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	4413      	add	r3, r2
 800451c:	3308      	adds	r3, #8
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8004530:	4a6d      	ldr	r2, [pc, #436]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	019b      	lsls	r3, r3, #6
 8004536:	4413      	add	r3, r2
 8004538:	3308      	adds	r3, #8
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004544:	4a68      	ldr	r2, [pc, #416]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	4413      	add	r3, r2
 800454c:	3310      	adds	r3, #16
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004558:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <BSP_TS_GetState+0x224>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	4413      	add	r3, r2
 8004560:	3308      	adds	r3, #8
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800456c:	4a5e      	ldr	r2, [pc, #376]	; (80046e8 <BSP_TS_GetState+0x224>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	4413      	add	r3, r2
 8004574:	3314      	adds	r3, #20
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800457e:	4a5a      	ldr	r2, [pc, #360]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	019b      	lsls	r3, r3, #6
 8004584:	4413      	add	r3, r2
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	fb03 f202 	mul.w	r2, r3, r2
 800458e:	4956      	ldr	r1, [pc, #344]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	019b      	lsls	r3, r3, #6
 8004594:	440b      	add	r3, r1
 8004596:	3310      	adds	r3, #16
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	fbb2 f2f3 	udiv	r2, r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80045a2:	4a51      	ldr	r2, [pc, #324]	; (80046e8 <BSP_TS_GetState+0x224>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	019b      	lsls	r3, r3, #6
 80045a8:	4413      	add	r3, r2
 80045aa:	3304      	adds	r3, #4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	fb03 f202 	mul.w	r2, r3, r2
 80045b4:	494c      	ldr	r1, [pc, #304]	; (80046e8 <BSP_TS_GetState+0x224>)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	440b      	add	r3, r1
 80045bc:	3314      	adds	r3, #20
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	4945      	ldr	r1, [pc, #276]	; (80046e8 <BSP_TS_GetState+0x224>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	019b      	lsls	r3, r3, #6
 80045d8:	440b      	add	r3, r1
 80045da:	3318      	adds	r3, #24
 80045dc:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80045de:	429a      	cmp	r2, r3
 80045e0:	d909      	bls.n	80045f6 <BSP_TS_GetState+0x132>
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	4940      	ldr	r1, [pc, #256]	; (80046e8 <BSP_TS_GetState+0x224>)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	019b      	lsls	r3, r3, #6
 80045ec:	440b      	add	r3, r1
 80045ee:	3318      	adds	r3, #24
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	e008      	b.n	8004608 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80045f6:	4a3c      	ldr	r2, [pc, #240]	; (80046e8 <BSP_TS_GetState+0x224>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	019b      	lsls	r3, r3, #6
 80045fc:	4413      	add	r3, r2
 80045fe:	3318      	adds	r3, #24
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004606:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8004608:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	4936      	ldr	r1, [pc, #216]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	019b      	lsls	r3, r3, #6
 8004614:	440b      	add	r3, r1
 8004616:	332c      	adds	r3, #44	; 0x2c
 8004618:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800461a:	429a      	cmp	r2, r3
 800461c:	d909      	bls.n	8004632 <BSP_TS_GetState+0x16e>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	4931      	ldr	r1, [pc, #196]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	019b      	lsls	r3, r3, #6
 8004628:	440b      	add	r3, r1
 800462a:	332c      	adds	r3, #44	; 0x2c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	e008      	b.n	8004644 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8004632:	4a2d      	ldr	r2, [pc, #180]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	019b      	lsls	r3, r3, #6
 8004638:	4413      	add	r3, r2
 800463a:	332c      	adds	r3, #44	; 0x2c
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8004642:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8004644:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004646:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	019b      	lsls	r3, r3, #6
 800464c:	4413      	add	r3, r2
 800464e:	330c      	adds	r3, #12
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	429a      	cmp	r2, r3
 8004656:	d808      	bhi.n	800466a <BSP_TS_GetState+0x1a6>
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <BSP_TS_GetState+0x224>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	019b      	lsls	r3, r3, #6
 800465e:	4413      	add	r3, r2
 8004660:	330c      	adds	r3, #12
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	429a      	cmp	r2, r3
 8004668:	d910      	bls.n	800468c <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	491e      	ldr	r1, [pc, #120]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	019b      	lsls	r3, r3, #6
 8004674:	440b      	add	r3, r1
 8004676:	3318      	adds	r3, #24
 8004678:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	491a      	ldr	r1, [pc, #104]	; (80046e8 <BSP_TS_GetState+0x224>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	019b      	lsls	r3, r3, #6
 8004684:	440b      	add	r3, r1
 8004686:	332c      	adds	r3, #44	; 0x2c
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e023      	b.n	80046d4 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800468c:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <BSP_TS_GetState+0x224>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	4413      	add	r3, r2
 8004694:	3318      	adds	r3, #24
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800469c:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <BSP_TS_GetState+0x224>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	4413      	add	r3, r2
 80046a4:	332c      	adds	r3, #44	; 0x2c
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	609a      	str	r2, [r3, #8]
 80046ac:	e012      	b.n	80046d4 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80046b4:	4a0c      	ldr	r2, [pc, #48]	; (80046e8 <BSP_TS_GetState+0x224>)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	4413      	add	r3, r2
 80046bc:	3318      	adds	r3, #24
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80046c4:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <BSP_TS_GetState+0x224>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	019b      	lsls	r3, r3, #6
 80046ca:	4413      	add	r3, r2
 80046cc:	332c      	adds	r3, #44	; 0x2c
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3728      	adds	r7, #40	; 0x28
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2400106c 	.word	0x2400106c
 80046e4:	24001070 	.word	0x24001070
 80046e8:	24001074 	.word	0x24001074

080046ec <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80046fc:	2370      	movs	r3, #112	; 0x70
 80046fe:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8004700:	4b23      	ldr	r3, [pc, #140]	; (8004790 <FT5336_Probe+0xa4>)
 8004702:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <FT5336_Probe+0xa8>)
 8004706:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8004708:	4b23      	ldr	r3, [pc, #140]	; (8004798 <FT5336_Probe+0xac>)
 800470a:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800470c:	4b23      	ldr	r3, [pc, #140]	; (800479c <FT5336_Probe+0xb0>)
 800470e:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <FT5336_Probe+0xb4>)
 8004712:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004714:	f107 030c 	add.w	r3, r7, #12
 8004718:	4619      	mov	r1, r3
 800471a:	4822      	ldr	r0, [pc, #136]	; (80047a4 <FT5336_Probe+0xb8>)
 800471c:	f7fd fbde 	bl	8001edc <FT5336_RegisterBusIO>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8004726:	f06f 0307 	mvn.w	r3, #7
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
 800472c:	e02a      	b.n	8004784 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4619      	mov	r1, r3
 8004734:	481b      	ldr	r0, [pc, #108]	; (80047a4 <FT5336_Probe+0xb8>)
 8004736:	f7fd fccb 	bl	80020d0 <FT5336_ReadID>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004740:	f06f 0304 	mvn.w	r3, #4
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
 8004746:	e01d      	b.n	8004784 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b51      	cmp	r3, #81	; 0x51
 800474c:	d003      	beq.n	8004756 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800474e:	f06f 0306 	mvn.w	r3, #6
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
 8004754:	e016      	b.n	8004784 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8004756:	4a14      	ldr	r2, [pc, #80]	; (80047a8 <FT5336_Probe+0xbc>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4912      	ldr	r1, [pc, #72]	; (80047a4 <FT5336_Probe+0xb8>)
 800475c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004760:	4b12      	ldr	r3, [pc, #72]	; (80047ac <FT5336_Probe+0xc0>)
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <FT5336_Probe+0xc4>)
 8004764:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004766:	4b11      	ldr	r3, [pc, #68]	; (80047ac <FT5336_Probe+0xc0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	490e      	ldr	r1, [pc, #56]	; (80047a8 <FT5336_Probe+0xbc>)
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004774:	4610      	mov	r0, r2
 8004776:	4798      	blx	r3
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800477e:	f06f 0304 	mvn.w	r3, #4
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004786:	4618      	mov	r0, r3
 8004788:	3728      	adds	r7, #40	; 0x28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	0800299d 	.word	0x0800299d
 8004794:	08002a11 	.word	0x08002a11
 8004798:	08002b39 	.word	0x08002b39
 800479c:	08002add 	.word	0x08002add
 80047a0:	08002b95 	.word	0x08002b95
 80047a4:	240010b4 	.word	0x240010b4
 80047a8:	24001070 	.word	0x24001070
 80047ac:	2400106c 	.word	0x2400106c
 80047b0:	24000018 	.word	0x24000018

080047b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ba:	2003      	movs	r0, #3
 80047bc:	f000 f99c 	bl	8004af8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80047c0:	f004 fe6e 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b15      	ldr	r3, [pc, #84]	; (800481c <HAL_Init+0x68>)
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	4913      	ldr	r1, [pc, #76]	; (8004820 <HAL_Init+0x6c>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
 80047dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047de:	4b0f      	ldr	r3, [pc, #60]	; (800481c <HAL_Init+0x68>)
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	4a0e      	ldr	r2, [pc, #56]	; (8004820 <HAL_Init+0x6c>)
 80047e8:	5cd3      	ldrb	r3, [r2, r3]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <HAL_Init+0x70>)
 80047f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047f8:	4a0b      	ldr	r2, [pc, #44]	; (8004828 <HAL_Init+0x74>)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047fe:	200f      	movs	r0, #15
 8004800:	f000 f814 	bl	800482c <HAL_InitTick>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e002      	b.n	8004814 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800480e:	f7fd f909 	bl	8001a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	58024400 	.word	0x58024400
 8004820:	08014500 	.word	0x08014500
 8004824:	24000014 	.word	0x24000014
 8004828:	24000010 	.word	0x24000010

0800482c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004834:	4b15      	ldr	r3, [pc, #84]	; (800488c <HAL_InitTick+0x60>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e021      	b.n	8004884 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004840:	4b13      	ldr	r3, [pc, #76]	; (8004890 <HAL_InitTick+0x64>)
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_InitTick+0x60>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4619      	mov	r1, r3
 800484a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800484e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f981 	bl	8004b5e <HAL_SYSTICK_Config>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e00e      	b.n	8004884 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b0f      	cmp	r3, #15
 800486a:	d80a      	bhi.n	8004882 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800486c:	2200      	movs	r2, #0
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	f000 f94b 	bl	8004b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004878:	4a06      	ldr	r2, [pc, #24]	; (8004894 <HAL_InitTick+0x68>)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	24000060 	.word	0x24000060
 8004890:	24000010 	.word	0x24000010
 8004894:	2400005c 	.word	0x2400005c

08004898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800489c:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_IncTick+0x20>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_IncTick+0x24>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4413      	add	r3, r2
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <HAL_IncTick+0x24>)
 80048aa:	6013      	str	r3, [r2, #0]
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	24000060 	.word	0x24000060
 80048bc:	240010dc 	.word	0x240010dc

080048c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return uwTick;
 80048c4:	4b03      	ldr	r3, [pc, #12]	; (80048d4 <HAL_GetTick+0x14>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	240010dc 	.word	0x240010dc

080048d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e0:	f7ff ffee 	bl	80048c0 <HAL_GetTick>
 80048e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f0:	d005      	beq.n	80048fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <HAL_Delay+0x44>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048fe:	bf00      	nop
 8004900:	f7ff ffde 	bl	80048c0 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	429a      	cmp	r2, r3
 800490e:	d8f7      	bhi.n	8004900 <HAL_Delay+0x28>
  {
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	24000060 	.word	0x24000060

08004920 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_GetREVID+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0c1b      	lsrs	r3, r3, #16
}
 800492a:	4618      	mov	r0, r3
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	5c001000 	.word	0x5c001000

08004938 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_EnableCompensationCell+0x1c>)
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	4a04      	ldr	r2, [pc, #16]	; (8004954 <HAL_EnableCompensationCell+0x1c>)
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	6213      	str	r3, [r2, #32]
}
 8004948:	bf00      	nop
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	58000400 	.word	0x58000400

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	05fa0000 	.word	0x05fa0000

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db0a      	blt.n	8004a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <__NVIC_SetPriority+0x4c>)
 8004a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a20:	e00a      	b.n	8004a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <__NVIC_SetPriority+0x50>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	440b      	add	r3, r1
 8004a36:	761a      	strb	r2, [r3, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f1c3 0307 	rsb	r3, r3, #7
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	bf28      	it	cs
 8004a6a:	2304      	movcs	r3, #4
 8004a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d902      	bls.n	8004a7c <NVIC_EncodePriority+0x30>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3b03      	subs	r3, #3
 8004a7a:	e000      	b.n	8004a7e <NVIC_EncodePriority+0x32>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	4313      	orrs	r3, r2
         );
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac4:	d301      	bcc.n	8004aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e00f      	b.n	8004aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <SysTick_Config+0x40>)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad2:	210f      	movs	r1, #15
 8004ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad8:	f7ff ff8e 	bl	80049f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <SysTick_Config+0x40>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <SysTick_Config+0x40>)
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000e010 	.word	0xe000e010

08004af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7ff ff29 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b086      	sub	sp, #24
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
 8004b1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b1c:	f7ff ff40 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004b20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	6978      	ldr	r0, [r7, #20]
 8004b28:	f7ff ff90 	bl	8004a4c <NVIC_EncodePriority>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ff5f 	bl	80049f8 <__NVIC_SetPriority>
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff33 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b082      	sub	sp, #8
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff ffa4 	bl	8004ab4 <SysTick_Config>
 8004b6c:	4603      	mov	r3, r0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
	...

08004b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b80:	f7ff fe9e 	bl	80048c0 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e2dc      	b.n	800514a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d008      	beq.n	8004bae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2280      	movs	r2, #128	; 0x80
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e2cd      	b.n	800514a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a76      	ldr	r2, [pc, #472]	; (8004d8c <HAL_DMA_Abort+0x214>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d04a      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a74      	ldr	r2, [pc, #464]	; (8004d90 <HAL_DMA_Abort+0x218>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d045      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a73      	ldr	r2, [pc, #460]	; (8004d94 <HAL_DMA_Abort+0x21c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d040      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a71      	ldr	r2, [pc, #452]	; (8004d98 <HAL_DMA_Abort+0x220>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d03b      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a70      	ldr	r2, [pc, #448]	; (8004d9c <HAL_DMA_Abort+0x224>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d036      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6e      	ldr	r2, [pc, #440]	; (8004da0 <HAL_DMA_Abort+0x228>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d031      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a6d      	ldr	r2, [pc, #436]	; (8004da4 <HAL_DMA_Abort+0x22c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d02c      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a6b      	ldr	r2, [pc, #428]	; (8004da8 <HAL_DMA_Abort+0x230>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d027      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a6a      	ldr	r2, [pc, #424]	; (8004dac <HAL_DMA_Abort+0x234>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d022      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	; (8004db0 <HAL_DMA_Abort+0x238>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d01d      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a67      	ldr	r2, [pc, #412]	; (8004db4 <HAL_DMA_Abort+0x23c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d018      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a65      	ldr	r2, [pc, #404]	; (8004db8 <HAL_DMA_Abort+0x240>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a64      	ldr	r2, [pc, #400]	; (8004dbc <HAL_DMA_Abort+0x244>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00e      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a62      	ldr	r2, [pc, #392]	; (8004dc0 <HAL_DMA_Abort+0x248>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a61      	ldr	r2, [pc, #388]	; (8004dc4 <HAL_DMA_Abort+0x24c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d004      	beq.n	8004c4e <HAL_DMA_Abort+0xd6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a5f      	ldr	r2, [pc, #380]	; (8004dc8 <HAL_DMA_Abort+0x250>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <HAL_DMA_Abort+0xda>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_DMA_Abort+0xdc>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 021e 	bic.w	r2, r2, #30
 8004c66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e00a      	b.n	8004c96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 020e 	bic.w	r2, r2, #14
 8004c8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3c      	ldr	r2, [pc, #240]	; (8004d8c <HAL_DMA_Abort+0x214>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d072      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3a      	ldr	r2, [pc, #232]	; (8004d90 <HAL_DMA_Abort+0x218>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d06d      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a39      	ldr	r2, [pc, #228]	; (8004d94 <HAL_DMA_Abort+0x21c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d068      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a37      	ldr	r2, [pc, #220]	; (8004d98 <HAL_DMA_Abort+0x220>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d063      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a36      	ldr	r2, [pc, #216]	; (8004d9c <HAL_DMA_Abort+0x224>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d05e      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a34      	ldr	r2, [pc, #208]	; (8004da0 <HAL_DMA_Abort+0x228>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d059      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a33      	ldr	r2, [pc, #204]	; (8004da4 <HAL_DMA_Abort+0x22c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d054      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	; (8004da8 <HAL_DMA_Abort+0x230>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04f      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a30      	ldr	r2, [pc, #192]	; (8004dac <HAL_DMA_Abort+0x234>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d04a      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	; (8004db0 <HAL_DMA_Abort+0x238>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d045      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a2d      	ldr	r2, [pc, #180]	; (8004db4 <HAL_DMA_Abort+0x23c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d040      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a2b      	ldr	r2, [pc, #172]	; (8004db8 <HAL_DMA_Abort+0x240>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <HAL_DMA_Abort+0x244>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d036      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a28      	ldr	r2, [pc, #160]	; (8004dc0 <HAL_DMA_Abort+0x248>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d031      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <HAL_DMA_Abort+0x24c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d02c      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <HAL_DMA_Abort+0x250>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d027      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a24      	ldr	r2, [pc, #144]	; (8004dcc <HAL_DMA_Abort+0x254>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a22      	ldr	r2, [pc, #136]	; (8004dd0 <HAL_DMA_Abort+0x258>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a21      	ldr	r2, [pc, #132]	; (8004dd4 <HAL_DMA_Abort+0x25c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d018      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1f      	ldr	r2, [pc, #124]	; (8004dd8 <HAL_DMA_Abort+0x260>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_DMA_Abort+0x264>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <HAL_DMA_Abort+0x268>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1b      	ldr	r2, [pc, #108]	; (8004de4 <HAL_DMA_Abort+0x26c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_DMA_Abort+0x20e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_DMA_Abort+0x270>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d132      	bne.n	8004dec <HAL_DMA_Abort+0x274>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e031      	b.n	8004dee <HAL_DMA_Abort+0x276>
 8004d8a:	bf00      	nop
 8004d8c:	40020010 	.word	0x40020010
 8004d90:	40020028 	.word	0x40020028
 8004d94:	40020040 	.word	0x40020040
 8004d98:	40020058 	.word	0x40020058
 8004d9c:	40020070 	.word	0x40020070
 8004da0:	40020088 	.word	0x40020088
 8004da4:	400200a0 	.word	0x400200a0
 8004da8:	400200b8 	.word	0x400200b8
 8004dac:	40020410 	.word	0x40020410
 8004db0:	40020428 	.word	0x40020428
 8004db4:	40020440 	.word	0x40020440
 8004db8:	40020458 	.word	0x40020458
 8004dbc:	40020470 	.word	0x40020470
 8004dc0:	40020488 	.word	0x40020488
 8004dc4:	400204a0 	.word	0x400204a0
 8004dc8:	400204b8 	.word	0x400204b8
 8004dcc:	58025408 	.word	0x58025408
 8004dd0:	5802541c 	.word	0x5802541c
 8004dd4:	58025430 	.word	0x58025430
 8004dd8:	58025444 	.word	0x58025444
 8004ddc:	58025458 	.word	0x58025458
 8004de0:	5802546c 	.word	0x5802546c
 8004de4:	58025480 	.word	0x58025480
 8004de8:	58025494 	.word	0x58025494
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a6d      	ldr	r2, [pc, #436]	; (8004fbc <HAL_DMA_Abort+0x444>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d04a      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6b      	ldr	r2, [pc, #428]	; (8004fc0 <HAL_DMA_Abort+0x448>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d045      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a6a      	ldr	r2, [pc, #424]	; (8004fc4 <HAL_DMA_Abort+0x44c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d040      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a68      	ldr	r2, [pc, #416]	; (8004fc8 <HAL_DMA_Abort+0x450>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d03b      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a67      	ldr	r2, [pc, #412]	; (8004fcc <HAL_DMA_Abort+0x454>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d036      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a65      	ldr	r2, [pc, #404]	; (8004fd0 <HAL_DMA_Abort+0x458>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d031      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a64      	ldr	r2, [pc, #400]	; (8004fd4 <HAL_DMA_Abort+0x45c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d02c      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a62      	ldr	r2, [pc, #392]	; (8004fd8 <HAL_DMA_Abort+0x460>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d027      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a61      	ldr	r2, [pc, #388]	; (8004fdc <HAL_DMA_Abort+0x464>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d022      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a5f      	ldr	r2, [pc, #380]	; (8004fe0 <HAL_DMA_Abort+0x468>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d01d      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a5e      	ldr	r2, [pc, #376]	; (8004fe4 <HAL_DMA_Abort+0x46c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d018      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5c      	ldr	r2, [pc, #368]	; (8004fe8 <HAL_DMA_Abort+0x470>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a5b      	ldr	r2, [pc, #364]	; (8004fec <HAL_DMA_Abort+0x474>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00e      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a59      	ldr	r2, [pc, #356]	; (8004ff0 <HAL_DMA_Abort+0x478>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d009      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a58      	ldr	r2, [pc, #352]	; (8004ff4 <HAL_DMA_Abort+0x47c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d004      	beq.n	8004ea2 <HAL_DMA_Abort+0x32a>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a56      	ldr	r2, [pc, #344]	; (8004ff8 <HAL_DMA_Abort+0x480>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <HAL_DMA_Abort+0x33c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0201 	bic.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e007      	b.n	8004ec4 <HAL_DMA_Abort+0x34c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ec4:	e013      	b.n	8004eee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec6:	f7ff fcfb 	bl	80048c0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d90c      	bls.n	8004eee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2203      	movs	r2, #3
 8004ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e12d      	b.n	800514a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2f      	ldr	r2, [pc, #188]	; (8004fbc <HAL_DMA_Abort+0x444>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d04a      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a2d      	ldr	r2, [pc, #180]	; (8004fc0 <HAL_DMA_Abort+0x448>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d045      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a2c      	ldr	r2, [pc, #176]	; (8004fc4 <HAL_DMA_Abort+0x44c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d040      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a2a      	ldr	r2, [pc, #168]	; (8004fc8 <HAL_DMA_Abort+0x450>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d03b      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a29      	ldr	r2, [pc, #164]	; (8004fcc <HAL_DMA_Abort+0x454>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d036      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <HAL_DMA_Abort+0x458>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d031      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <HAL_DMA_Abort+0x45c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d02c      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a24      	ldr	r2, [pc, #144]	; (8004fd8 <HAL_DMA_Abort+0x460>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d027      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a23      	ldr	r2, [pc, #140]	; (8004fdc <HAL_DMA_Abort+0x464>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d022      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <HAL_DMA_Abort+0x468>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01d      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <HAL_DMA_Abort+0x46c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d018      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_DMA_Abort+0x470>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d013      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <HAL_DMA_Abort+0x474>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00e      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_DMA_Abort+0x478>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d009      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <HAL_DMA_Abort+0x47c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d004      	beq.n	8004f9a <HAL_DMA_Abort+0x422>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_DMA_Abort+0x480>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d101      	bne.n	8004f9e <HAL_DMA_Abort+0x426>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_DMA_Abort+0x428>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d02b      	beq.n	8004ffc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	223f      	movs	r2, #63	; 0x3f
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	e02a      	b.n	8005012 <HAL_DMA_Abort+0x49a>
 8004fbc:	40020010 	.word	0x40020010
 8004fc0:	40020028 	.word	0x40020028
 8004fc4:	40020040 	.word	0x40020040
 8004fc8:	40020058 	.word	0x40020058
 8004fcc:	40020070 	.word	0x40020070
 8004fd0:	40020088 	.word	0x40020088
 8004fd4:	400200a0 	.word	0x400200a0
 8004fd8:	400200b8 	.word	0x400200b8
 8004fdc:	40020410 	.word	0x40020410
 8004fe0:	40020428 	.word	0x40020428
 8004fe4:	40020440 	.word	0x40020440
 8004fe8:	40020458 	.word	0x40020458
 8004fec:	40020470 	.word	0x40020470
 8004ff0:	40020488 	.word	0x40020488
 8004ff4:	400204a0 	.word	0x400204a0
 8004ff8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2201      	movs	r2, #1
 800500c:	409a      	lsls	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a4f      	ldr	r2, [pc, #316]	; (8005154 <HAL_DMA_Abort+0x5dc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d072      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a4d      	ldr	r2, [pc, #308]	; (8005158 <HAL_DMA_Abort+0x5e0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d06d      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a4c      	ldr	r2, [pc, #304]	; (800515c <HAL_DMA_Abort+0x5e4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d068      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a4a      	ldr	r2, [pc, #296]	; (8005160 <HAL_DMA_Abort+0x5e8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d063      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a49      	ldr	r2, [pc, #292]	; (8005164 <HAL_DMA_Abort+0x5ec>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d05e      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a47      	ldr	r2, [pc, #284]	; (8005168 <HAL_DMA_Abort+0x5f0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d059      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a46      	ldr	r2, [pc, #280]	; (800516c <HAL_DMA_Abort+0x5f4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d054      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a44      	ldr	r2, [pc, #272]	; (8005170 <HAL_DMA_Abort+0x5f8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d04f      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a43      	ldr	r2, [pc, #268]	; (8005174 <HAL_DMA_Abort+0x5fc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d04a      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a41      	ldr	r2, [pc, #260]	; (8005178 <HAL_DMA_Abort+0x600>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d045      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a40      	ldr	r2, [pc, #256]	; (800517c <HAL_DMA_Abort+0x604>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d040      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a3e      	ldr	r2, [pc, #248]	; (8005180 <HAL_DMA_Abort+0x608>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d03b      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3d      	ldr	r2, [pc, #244]	; (8005184 <HAL_DMA_Abort+0x60c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d036      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a3b      	ldr	r2, [pc, #236]	; (8005188 <HAL_DMA_Abort+0x610>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d031      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a3a      	ldr	r2, [pc, #232]	; (800518c <HAL_DMA_Abort+0x614>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d02c      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a38      	ldr	r2, [pc, #224]	; (8005190 <HAL_DMA_Abort+0x618>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d027      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a37      	ldr	r2, [pc, #220]	; (8005194 <HAL_DMA_Abort+0x61c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d022      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a35      	ldr	r2, [pc, #212]	; (8005198 <HAL_DMA_Abort+0x620>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d01d      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a34      	ldr	r2, [pc, #208]	; (800519c <HAL_DMA_Abort+0x624>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d018      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a32      	ldr	r2, [pc, #200]	; (80051a0 <HAL_DMA_Abort+0x628>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a31      	ldr	r2, [pc, #196]	; (80051a4 <HAL_DMA_Abort+0x62c>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00e      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	; (80051a8 <HAL_DMA_Abort+0x630>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d009      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2e      	ldr	r2, [pc, #184]	; (80051ac <HAL_DMA_Abort+0x634>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <HAL_DMA_Abort+0x58a>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a2c      	ldr	r2, [pc, #176]	; (80051b0 <HAL_DMA_Abort+0x638>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <HAL_DMA_Abort+0x58e>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <HAL_DMA_Abort+0x590>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005114:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00c      	beq.n	8005138 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800512c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005136:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40020010 	.word	0x40020010
 8005158:	40020028 	.word	0x40020028
 800515c:	40020040 	.word	0x40020040
 8005160:	40020058 	.word	0x40020058
 8005164:	40020070 	.word	0x40020070
 8005168:	40020088 	.word	0x40020088
 800516c:	400200a0 	.word	0x400200a0
 8005170:	400200b8 	.word	0x400200b8
 8005174:	40020410 	.word	0x40020410
 8005178:	40020428 	.word	0x40020428
 800517c:	40020440 	.word	0x40020440
 8005180:	40020458 	.word	0x40020458
 8005184:	40020470 	.word	0x40020470
 8005188:	40020488 	.word	0x40020488
 800518c:	400204a0 	.word	0x400204a0
 8005190:	400204b8 	.word	0x400204b8
 8005194:	58025408 	.word	0x58025408
 8005198:	5802541c 	.word	0x5802541c
 800519c:	58025430 	.word	0x58025430
 80051a0:	58025444 	.word	0x58025444
 80051a4:	58025458 	.word	0x58025458
 80051a8:	5802546c 	.word	0x5802546c
 80051ac:	58025480 	.word	0x58025480
 80051b0:	58025494 	.word	0x58025494

080051b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e237      	b.n	8005636 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d004      	beq.n	80051dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2280      	movs	r2, #128	; 0x80
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e22c      	b.n	8005636 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a5c      	ldr	r2, [pc, #368]	; (8005354 <HAL_DMA_Abort_IT+0x1a0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a5b      	ldr	r2, [pc, #364]	; (8005358 <HAL_DMA_Abort_IT+0x1a4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a59      	ldr	r2, [pc, #356]	; (800535c <HAL_DMA_Abort_IT+0x1a8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a58      	ldr	r2, [pc, #352]	; (8005360 <HAL_DMA_Abort_IT+0x1ac>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a56      	ldr	r2, [pc, #344]	; (8005364 <HAL_DMA_Abort_IT+0x1b0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a55      	ldr	r2, [pc, #340]	; (8005368 <HAL_DMA_Abort_IT+0x1b4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a53      	ldr	r2, [pc, #332]	; (800536c <HAL_DMA_Abort_IT+0x1b8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a52      	ldr	r2, [pc, #328]	; (8005370 <HAL_DMA_Abort_IT+0x1bc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a50      	ldr	r2, [pc, #320]	; (8005374 <HAL_DMA_Abort_IT+0x1c0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a4f      	ldr	r2, [pc, #316]	; (8005378 <HAL_DMA_Abort_IT+0x1c4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a4d      	ldr	r2, [pc, #308]	; (800537c <HAL_DMA_Abort_IT+0x1c8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4c      	ldr	r2, [pc, #304]	; (8005380 <HAL_DMA_Abort_IT+0x1cc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a4a      	ldr	r2, [pc, #296]	; (8005384 <HAL_DMA_Abort_IT+0x1d0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a49      	ldr	r2, [pc, #292]	; (8005388 <HAL_DMA_Abort_IT+0x1d4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a47      	ldr	r2, [pc, #284]	; (800538c <HAL_DMA_Abort_IT+0x1d8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Abort_IT+0xc8>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a46      	ldr	r2, [pc, #280]	; (8005390 <HAL_DMA_Abort_IT+0x1dc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_DMA_Abort_IT+0xcc>
 800527c:	2301      	movs	r3, #1
 800527e:	e000      	b.n	8005282 <HAL_DMA_Abort_IT+0xce>
 8005280:	2300      	movs	r3, #0
 8005282:	2b00      	cmp	r3, #0
 8005284:	f000 8086 	beq.w	8005394 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2204      	movs	r2, #4
 800528c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <HAL_DMA_Abort_IT+0x1a0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d04a      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2e      	ldr	r2, [pc, #184]	; (8005358 <HAL_DMA_Abort_IT+0x1a4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d045      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2c      	ldr	r2, [pc, #176]	; (800535c <HAL_DMA_Abort_IT+0x1a8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d040      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2b      	ldr	r2, [pc, #172]	; (8005360 <HAL_DMA_Abort_IT+0x1ac>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d03b      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <HAL_DMA_Abort_IT+0x1b0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d036      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a28      	ldr	r2, [pc, #160]	; (8005368 <HAL_DMA_Abort_IT+0x1b4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d031      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a26      	ldr	r2, [pc, #152]	; (800536c <HAL_DMA_Abort_IT+0x1b8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d02c      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a25      	ldr	r2, [pc, #148]	; (8005370 <HAL_DMA_Abort_IT+0x1bc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d027      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a23      	ldr	r2, [pc, #140]	; (8005374 <HAL_DMA_Abort_IT+0x1c0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d022      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a22      	ldr	r2, [pc, #136]	; (8005378 <HAL_DMA_Abort_IT+0x1c4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d01d      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a20      	ldr	r2, [pc, #128]	; (800537c <HAL_DMA_Abort_IT+0x1c8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d018      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_DMA_Abort_IT+0x1cc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d013      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1d      	ldr	r2, [pc, #116]	; (8005384 <HAL_DMA_Abort_IT+0x1d0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00e      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1c      	ldr	r2, [pc, #112]	; (8005388 <HAL_DMA_Abort_IT+0x1d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d009      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1a      	ldr	r2, [pc, #104]	; (800538c <HAL_DMA_Abort_IT+0x1d8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d004      	beq.n	8005330 <HAL_DMA_Abort_IT+0x17c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a19      	ldr	r2, [pc, #100]	; (8005390 <HAL_DMA_Abort_IT+0x1dc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d108      	bne.n	8005342 <HAL_DMA_Abort_IT+0x18e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e178      	b.n	8005634 <HAL_DMA_Abort_IT+0x480>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	e16f      	b.n	8005634 <HAL_DMA_Abort_IT+0x480>
 8005354:	40020010 	.word	0x40020010
 8005358:	40020028 	.word	0x40020028
 800535c:	40020040 	.word	0x40020040
 8005360:	40020058 	.word	0x40020058
 8005364:	40020070 	.word	0x40020070
 8005368:	40020088 	.word	0x40020088
 800536c:	400200a0 	.word	0x400200a0
 8005370:	400200b8 	.word	0x400200b8
 8005374:	40020410 	.word	0x40020410
 8005378:	40020428 	.word	0x40020428
 800537c:	40020440 	.word	0x40020440
 8005380:	40020458 	.word	0x40020458
 8005384:	40020470 	.word	0x40020470
 8005388:	40020488 	.word	0x40020488
 800538c:	400204a0 	.word	0x400204a0
 8005390:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 020e 	bic.w	r2, r2, #14
 80053a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a6c      	ldr	r2, [pc, #432]	; (800555c <HAL_DMA_Abort_IT+0x3a8>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d04a      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6b      	ldr	r2, [pc, #428]	; (8005560 <HAL_DMA_Abort_IT+0x3ac>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d045      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a69      	ldr	r2, [pc, #420]	; (8005564 <HAL_DMA_Abort_IT+0x3b0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d040      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a68      	ldr	r2, [pc, #416]	; (8005568 <HAL_DMA_Abort_IT+0x3b4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d03b      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a66      	ldr	r2, [pc, #408]	; (800556c <HAL_DMA_Abort_IT+0x3b8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d036      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a65      	ldr	r2, [pc, #404]	; (8005570 <HAL_DMA_Abort_IT+0x3bc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d031      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a63      	ldr	r2, [pc, #396]	; (8005574 <HAL_DMA_Abort_IT+0x3c0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d02c      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a62      	ldr	r2, [pc, #392]	; (8005578 <HAL_DMA_Abort_IT+0x3c4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d027      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a60      	ldr	r2, [pc, #384]	; (800557c <HAL_DMA_Abort_IT+0x3c8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d022      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a5f      	ldr	r2, [pc, #380]	; (8005580 <HAL_DMA_Abort_IT+0x3cc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d01d      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a5d      	ldr	r2, [pc, #372]	; (8005584 <HAL_DMA_Abort_IT+0x3d0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d018      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a5c      	ldr	r2, [pc, #368]	; (8005588 <HAL_DMA_Abort_IT+0x3d4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a5a      	ldr	r2, [pc, #360]	; (800558c <HAL_DMA_Abort_IT+0x3d8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00e      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a59      	ldr	r2, [pc, #356]	; (8005590 <HAL_DMA_Abort_IT+0x3dc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d009      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a57      	ldr	r2, [pc, #348]	; (8005594 <HAL_DMA_Abort_IT+0x3e0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <HAL_DMA_Abort_IT+0x290>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a56      	ldr	r2, [pc, #344]	; (8005598 <HAL_DMA_Abort_IT+0x3e4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d108      	bne.n	8005456 <HAL_DMA_Abort_IT+0x2a2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e007      	b.n	8005466 <HAL_DMA_Abort_IT+0x2b2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a3c      	ldr	r2, [pc, #240]	; (800555c <HAL_DMA_Abort_IT+0x3a8>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d072      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a3a      	ldr	r2, [pc, #232]	; (8005560 <HAL_DMA_Abort_IT+0x3ac>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d06d      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a39      	ldr	r2, [pc, #228]	; (8005564 <HAL_DMA_Abort_IT+0x3b0>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d068      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a37      	ldr	r2, [pc, #220]	; (8005568 <HAL_DMA_Abort_IT+0x3b4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d063      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a36      	ldr	r2, [pc, #216]	; (800556c <HAL_DMA_Abort_IT+0x3b8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d05e      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a34      	ldr	r2, [pc, #208]	; (8005570 <HAL_DMA_Abort_IT+0x3bc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d059      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a33      	ldr	r2, [pc, #204]	; (8005574 <HAL_DMA_Abort_IT+0x3c0>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d054      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a31      	ldr	r2, [pc, #196]	; (8005578 <HAL_DMA_Abort_IT+0x3c4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d04f      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a30      	ldr	r2, [pc, #192]	; (800557c <HAL_DMA_Abort_IT+0x3c8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d04a      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <HAL_DMA_Abort_IT+0x3cc>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d045      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <HAL_DMA_Abort_IT+0x3d0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d040      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <HAL_DMA_Abort_IT+0x3d4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d03b      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2a      	ldr	r2, [pc, #168]	; (800558c <HAL_DMA_Abort_IT+0x3d8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d036      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a28      	ldr	r2, [pc, #160]	; (8005590 <HAL_DMA_Abort_IT+0x3dc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d031      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a27      	ldr	r2, [pc, #156]	; (8005594 <HAL_DMA_Abort_IT+0x3e0>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d02c      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a25      	ldr	r2, [pc, #148]	; (8005598 <HAL_DMA_Abort_IT+0x3e4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d027      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a24      	ldr	r2, [pc, #144]	; (800559c <HAL_DMA_Abort_IT+0x3e8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d022      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a22      	ldr	r2, [pc, #136]	; (80055a0 <HAL_DMA_Abort_IT+0x3ec>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d01d      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a21      	ldr	r2, [pc, #132]	; (80055a4 <HAL_DMA_Abort_IT+0x3f0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d018      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_DMA_Abort_IT+0x3f4>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_DMA_Abort_IT+0x3f8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d00e      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_DMA_Abort_IT+0x3fc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d009      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_DMA_Abort_IT+0x400>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d004      	beq.n	8005556 <HAL_DMA_Abort_IT+0x3a2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_DMA_Abort_IT+0x404>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d132      	bne.n	80055bc <HAL_DMA_Abort_IT+0x408>
 8005556:	2301      	movs	r3, #1
 8005558:	e031      	b.n	80055be <HAL_DMA_Abort_IT+0x40a>
 800555a:	bf00      	nop
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
 800559c:	58025408 	.word	0x58025408
 80055a0:	5802541c 	.word	0x5802541c
 80055a4:	58025430 	.word	0x58025430
 80055a8:	58025444 	.word	0x58025444
 80055ac:	58025458 	.word	0x58025458
 80055b0:	5802546c 	.word	0x5802546c
 80055b4:	58025480 	.word	0x58025480
 80055b8:	58025494 	.word	0x58025494
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d028      	beq.n	8005614 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	2201      	movs	r2, #1
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00c      	beq.n	8005614 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005608:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005612:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop

08005640 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800564c:	4b67      	ldr	r3, [pc, #412]	; (80057ec <HAL_DMA_IRQHandler+0x1ac>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a67      	ldr	r2, [pc, #412]	; (80057f0 <HAL_DMA_IRQHandler+0x1b0>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0a9b      	lsrs	r3, r3, #10
 8005658:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005664:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a5f      	ldr	r2, [pc, #380]	; (80057f4 <HAL_DMA_IRQHandler+0x1b4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d04a      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a5d      	ldr	r2, [pc, #372]	; (80057f8 <HAL_DMA_IRQHandler+0x1b8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d045      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a5c      	ldr	r2, [pc, #368]	; (80057fc <HAL_DMA_IRQHandler+0x1bc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d040      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a5a      	ldr	r2, [pc, #360]	; (8005800 <HAL_DMA_IRQHandler+0x1c0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d03b      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a59      	ldr	r2, [pc, #356]	; (8005804 <HAL_DMA_IRQHandler+0x1c4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d036      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a57      	ldr	r2, [pc, #348]	; (8005808 <HAL_DMA_IRQHandler+0x1c8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a56      	ldr	r2, [pc, #344]	; (800580c <HAL_DMA_IRQHandler+0x1cc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d02c      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a54      	ldr	r2, [pc, #336]	; (8005810 <HAL_DMA_IRQHandler+0x1d0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d027      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a53      	ldr	r2, [pc, #332]	; (8005814 <HAL_DMA_IRQHandler+0x1d4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a51      	ldr	r2, [pc, #324]	; (8005818 <HAL_DMA_IRQHandler+0x1d8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d01d      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a50      	ldr	r2, [pc, #320]	; (800581c <HAL_DMA_IRQHandler+0x1dc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a4e      	ldr	r2, [pc, #312]	; (8005820 <HAL_DMA_IRQHandler+0x1e0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a4d      	ldr	r2, [pc, #308]	; (8005824 <HAL_DMA_IRQHandler+0x1e4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a4b      	ldr	r2, [pc, #300]	; (8005828 <HAL_DMA_IRQHandler+0x1e8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a4a      	ldr	r2, [pc, #296]	; (800582c <HAL_DMA_IRQHandler+0x1ec>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_DMA_IRQHandler+0xd2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a48      	ldr	r2, [pc, #288]	; (8005830 <HAL_DMA_IRQHandler+0x1f0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <HAL_DMA_IRQHandler+0xd6>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_DMA_IRQHandler+0xd8>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 842b 	beq.w	8005f74 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2208      	movs	r2, #8
 8005728:	409a      	lsls	r2, r3
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80a2 	beq.w	8005878 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2e      	ldr	r2, [pc, #184]	; (80057f4 <HAL_DMA_IRQHandler+0x1b4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04a      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2d      	ldr	r2, [pc, #180]	; (80057f8 <HAL_DMA_IRQHandler+0x1b8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d045      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a2b      	ldr	r2, [pc, #172]	; (80057fc <HAL_DMA_IRQHandler+0x1bc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d040      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <HAL_DMA_IRQHandler+0x1c0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d03b      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a28      	ldr	r2, [pc, #160]	; (8005804 <HAL_DMA_IRQHandler+0x1c4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d036      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a27      	ldr	r2, [pc, #156]	; (8005808 <HAL_DMA_IRQHandler+0x1c8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d031      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a25      	ldr	r2, [pc, #148]	; (800580c <HAL_DMA_IRQHandler+0x1cc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02c      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a24      	ldr	r2, [pc, #144]	; (8005810 <HAL_DMA_IRQHandler+0x1d0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d027      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <HAL_DMA_IRQHandler+0x1d4>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d022      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_DMA_IRQHandler+0x1d8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d01d      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <HAL_DMA_IRQHandler+0x1dc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d018      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_DMA_IRQHandler+0x1e0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_DMA_IRQHandler+0x1e4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_DMA_IRQHandler+0x1e8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_DMA_IRQHandler+0x1ec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_DMA_IRQHandler+0x194>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_DMA_IRQHandler+0x1f0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d12f      	bne.n	8005834 <HAL_DMA_IRQHandler+0x1f4>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	bf14      	ite	ne
 80057e2:	2301      	movne	r3, #1
 80057e4:	2300      	moveq	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e02e      	b.n	8005848 <HAL_DMA_IRQHandler+0x208>
 80057ea:	bf00      	nop
 80057ec:	24000010 	.word	0x24000010
 80057f0:	1b4e81b5 	.word	0x1b4e81b5
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028
 80057fc:	40020040 	.word	0x40020040
 8005800:	40020058 	.word	0x40020058
 8005804:	40020070 	.word	0x40020070
 8005808:	40020088 	.word	0x40020088
 800580c:	400200a0 	.word	0x400200a0
 8005810:	400200b8 	.word	0x400200b8
 8005814:	40020410 	.word	0x40020410
 8005818:	40020428 	.word	0x40020428
 800581c:	40020440 	.word	0x40020440
 8005820:	40020458 	.word	0x40020458
 8005824:	40020470 	.word	0x40020470
 8005828:	40020488 	.word	0x40020488
 800582c:	400204a0 	.word	0x400204a0
 8005830:	400204b8 	.word	0x400204b8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0204 	bic.w	r2, r2, #4
 800585a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2208      	movs	r2, #8
 8005866:	409a      	lsls	r2, r3
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	f043 0201 	orr.w	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	fa22 f303 	lsr.w	r3, r2, r3
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d06e      	beq.n	800596c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a69      	ldr	r2, [pc, #420]	; (8005a38 <HAL_DMA_IRQHandler+0x3f8>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d04a      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a67      	ldr	r2, [pc, #412]	; (8005a3c <HAL_DMA_IRQHandler+0x3fc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d045      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a66      	ldr	r2, [pc, #408]	; (8005a40 <HAL_DMA_IRQHandler+0x400>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d040      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a64      	ldr	r2, [pc, #400]	; (8005a44 <HAL_DMA_IRQHandler+0x404>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d03b      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a63      	ldr	r2, [pc, #396]	; (8005a48 <HAL_DMA_IRQHandler+0x408>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d036      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a61      	ldr	r2, [pc, #388]	; (8005a4c <HAL_DMA_IRQHandler+0x40c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d031      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a60      	ldr	r2, [pc, #384]	; (8005a50 <HAL_DMA_IRQHandler+0x410>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d02c      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5e      	ldr	r2, [pc, #376]	; (8005a54 <HAL_DMA_IRQHandler+0x414>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d027      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5d      	ldr	r2, [pc, #372]	; (8005a58 <HAL_DMA_IRQHandler+0x418>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d022      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5b      	ldr	r2, [pc, #364]	; (8005a5c <HAL_DMA_IRQHandler+0x41c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01d      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a5a      	ldr	r2, [pc, #360]	; (8005a60 <HAL_DMA_IRQHandler+0x420>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a58      	ldr	r2, [pc, #352]	; (8005a64 <HAL_DMA_IRQHandler+0x424>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a57      	ldr	r2, [pc, #348]	; (8005a68 <HAL_DMA_IRQHandler+0x428>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a55      	ldr	r2, [pc, #340]	; (8005a6c <HAL_DMA_IRQHandler+0x42c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a54      	ldr	r2, [pc, #336]	; (8005a70 <HAL_DMA_IRQHandler+0x430>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_DMA_IRQHandler+0x2ee>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a52      	ldr	r2, [pc, #328]	; (8005a74 <HAL_DMA_IRQHandler+0x434>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d10a      	bne.n	8005944 <HAL_DMA_IRQHandler+0x304>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e003      	b.n	800594c <HAL_DMA_IRQHandler+0x30c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00d      	beq.n	800596c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2201      	movs	r2, #1
 800595a:	409a      	lsls	r2, r3
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005964:	f043 0202 	orr.w	r2, r3, #2
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	2204      	movs	r2, #4
 8005976:	409a      	lsls	r2, r3
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 808f 	beq.w	8005aa0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <HAL_DMA_IRQHandler+0x3f8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d04a      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2a      	ldr	r2, [pc, #168]	; (8005a3c <HAL_DMA_IRQHandler+0x3fc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d045      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a29      	ldr	r2, [pc, #164]	; (8005a40 <HAL_DMA_IRQHandler+0x400>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d040      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a27      	ldr	r2, [pc, #156]	; (8005a44 <HAL_DMA_IRQHandler+0x404>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d03b      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a26      	ldr	r2, [pc, #152]	; (8005a48 <HAL_DMA_IRQHandler+0x408>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d036      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a24      	ldr	r2, [pc, #144]	; (8005a4c <HAL_DMA_IRQHandler+0x40c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d031      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a23      	ldr	r2, [pc, #140]	; (8005a50 <HAL_DMA_IRQHandler+0x410>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d02c      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <HAL_DMA_IRQHandler+0x414>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d027      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <HAL_DMA_IRQHandler+0x418>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d022      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1e      	ldr	r2, [pc, #120]	; (8005a5c <HAL_DMA_IRQHandler+0x41c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01d      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_DMA_IRQHandler+0x420>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <HAL_DMA_IRQHandler+0x424>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d013      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_DMA_IRQHandler+0x428>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <HAL_DMA_IRQHandler+0x42c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <HAL_DMA_IRQHandler+0x430>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_DMA_IRQHandler+0x3e2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a15      	ldr	r2, [pc, #84]	; (8005a74 <HAL_DMA_IRQHandler+0x434>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d12a      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x438>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e023      	b.n	8005a80 <HAL_DMA_IRQHandler+0x440>
 8005a38:	40020010 	.word	0x40020010
 8005a3c:	40020028 	.word	0x40020028
 8005a40:	40020040 	.word	0x40020040
 8005a44:	40020058 	.word	0x40020058
 8005a48:	40020070 	.word	0x40020070
 8005a4c:	40020088 	.word	0x40020088
 8005a50:	400200a0 	.word	0x400200a0
 8005a54:	400200b8 	.word	0x400200b8
 8005a58:	40020410 	.word	0x40020410
 8005a5c:	40020428 	.word	0x40020428
 8005a60:	40020440 	.word	0x40020440
 8005a64:	40020458 	.word	0x40020458
 8005a68:	40020470 	.word	0x40020470
 8005a6c:	40020488 	.word	0x40020488
 8005a70:	400204a0 	.word	0x400204a0
 8005a74:	400204b8 	.word	0x400204b8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f043 0204 	orr.w	r2, r3, #4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 80a6 	beq.w	8005c02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a85      	ldr	r2, [pc, #532]	; (8005cd0 <HAL_DMA_IRQHandler+0x690>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d04a      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a83      	ldr	r2, [pc, #524]	; (8005cd4 <HAL_DMA_IRQHandler+0x694>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d045      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a82      	ldr	r2, [pc, #520]	; (8005cd8 <HAL_DMA_IRQHandler+0x698>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d040      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a80      	ldr	r2, [pc, #512]	; (8005cdc <HAL_DMA_IRQHandler+0x69c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d03b      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a7f      	ldr	r2, [pc, #508]	; (8005ce0 <HAL_DMA_IRQHandler+0x6a0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d036      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a7d      	ldr	r2, [pc, #500]	; (8005ce4 <HAL_DMA_IRQHandler+0x6a4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d031      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a7c      	ldr	r2, [pc, #496]	; (8005ce8 <HAL_DMA_IRQHandler+0x6a8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d02c      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a7a      	ldr	r2, [pc, #488]	; (8005cec <HAL_DMA_IRQHandler+0x6ac>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d027      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a79      	ldr	r2, [pc, #484]	; (8005cf0 <HAL_DMA_IRQHandler+0x6b0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d022      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a77      	ldr	r2, [pc, #476]	; (8005cf4 <HAL_DMA_IRQHandler+0x6b4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d01d      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a76      	ldr	r2, [pc, #472]	; (8005cf8 <HAL_DMA_IRQHandler+0x6b8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a74      	ldr	r2, [pc, #464]	; (8005cfc <HAL_DMA_IRQHandler+0x6bc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a73      	ldr	r2, [pc, #460]	; (8005d00 <HAL_DMA_IRQHandler+0x6c0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a71      	ldr	r2, [pc, #452]	; (8005d04 <HAL_DMA_IRQHandler+0x6c4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a70      	ldr	r2, [pc, #448]	; (8005d08 <HAL_DMA_IRQHandler+0x6c8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x516>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6e      	ldr	r2, [pc, #440]	; (8005d0c <HAL_DMA_IRQHandler+0x6cc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d10a      	bne.n	8005b6c <HAL_DMA_IRQHandler+0x52c>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e009      	b.n	8005b80 <HAL_DMA_IRQHandler+0x540>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bf14      	ite	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	2300      	moveq	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d03e      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	f003 031f 	and.w	r3, r3, #31
 8005b8c:	2210      	movs	r2, #16
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d024      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
 8005bc0:	e01f      	b.n	8005c02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d01b      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	4798      	blx	r3
 8005bd2:	e016      	b.n	8005c02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d107      	bne.n	8005bf2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0208 	bic.w	r2, r2, #8
 8005bf0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	409a      	lsls	r2, r3
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 8110 	beq.w	8005e38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <HAL_DMA_IRQHandler+0x690>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d04a      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DMA_IRQHandler+0x694>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d045      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a29      	ldr	r2, [pc, #164]	; (8005cd8 <HAL_DMA_IRQHandler+0x698>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d040      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <HAL_DMA_IRQHandler+0x69c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d03b      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <HAL_DMA_IRQHandler+0x6a0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d036      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <HAL_DMA_IRQHandler+0x6a4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d031      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a23      	ldr	r2, [pc, #140]	; (8005ce8 <HAL_DMA_IRQHandler+0x6a8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d02c      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_DMA_IRQHandler+0x6ac>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d027      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a20      	ldr	r2, [pc, #128]	; (8005cf0 <HAL_DMA_IRQHandler+0x6b0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d022      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a1f      	ldr	r2, [pc, #124]	; (8005cf4 <HAL_DMA_IRQHandler+0x6b4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d01d      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <HAL_DMA_IRQHandler+0x6b8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d018      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <HAL_DMA_IRQHandler+0x6bc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <HAL_DMA_IRQHandler+0x6c0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00e      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_DMA_IRQHandler+0x6c4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d009      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_DMA_IRQHandler+0x6c8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x678>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a16      	ldr	r2, [pc, #88]	; (8005d0c <HAL_DMA_IRQHandler+0x6cc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d12b      	bne.n	8005d10 <HAL_DMA_IRQHandler+0x6d0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e02a      	b.n	8005d24 <HAL_DMA_IRQHandler+0x6e4>
 8005cce:	bf00      	nop
 8005cd0:	40020010 	.word	0x40020010
 8005cd4:	40020028 	.word	0x40020028
 8005cd8:	40020040 	.word	0x40020040
 8005cdc:	40020058 	.word	0x40020058
 8005ce0:	40020070 	.word	0x40020070
 8005ce4:	40020088 	.word	0x40020088
 8005ce8:	400200a0 	.word	0x400200a0
 8005cec:	400200b8 	.word	0x400200b8
 8005cf0:	40020410 	.word	0x40020410
 8005cf4:	40020428 	.word	0x40020428
 8005cf8:	40020440 	.word	0x40020440
 8005cfc:	40020458 	.word	0x40020458
 8005d00:	40020470 	.word	0x40020470
 8005d04:	40020488 	.word	0x40020488
 8005d08:	400204a0 	.word	0x400204a0
 8005d0c:	400204b8 	.word	0x400204b8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bf14      	ite	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	2300      	moveq	r3, #0
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8087 	beq.w	8005e38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	2220      	movs	r2, #32
 8005d34:	409a      	lsls	r2, r3
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d139      	bne.n	8005dba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0216 	bic.w	r2, r2, #22
 8005d54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <HAL_DMA_IRQHandler+0x736>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0208 	bic.w	r2, r2, #8
 8005d84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	223f      	movs	r2, #63	; 0x3f
 8005d90:	409a      	lsls	r2, r3
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 834a 	beq.w	8006444 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	4798      	blx	r3
          }
          return;
 8005db8:	e344      	b.n	8006444 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d018      	beq.n	8005dfa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d108      	bne.n	8005de8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d02c      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	4798      	blx	r3
 8005de6:	e027      	b.n	8005e38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d023      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	4798      	blx	r3
 8005df8:	e01e      	b.n	8005e38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0210 	bic.w	r2, r2, #16
 8005e16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 8306 	beq.w	800644e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8088 	beq.w	8005f60 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2204      	movs	r2, #4
 8005e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a7a      	ldr	r2, [pc, #488]	; (8006048 <HAL_DMA_IRQHandler+0xa08>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a79      	ldr	r2, [pc, #484]	; (800604c <HAL_DMA_IRQHandler+0xa0c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d045      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a77      	ldr	r2, [pc, #476]	; (8006050 <HAL_DMA_IRQHandler+0xa10>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a76      	ldr	r2, [pc, #472]	; (8006054 <HAL_DMA_IRQHandler+0xa14>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d03b      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a74      	ldr	r2, [pc, #464]	; (8006058 <HAL_DMA_IRQHandler+0xa18>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d036      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a73      	ldr	r2, [pc, #460]	; (800605c <HAL_DMA_IRQHandler+0xa1c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d031      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a71      	ldr	r2, [pc, #452]	; (8006060 <HAL_DMA_IRQHandler+0xa20>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02c      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a70      	ldr	r2, [pc, #448]	; (8006064 <HAL_DMA_IRQHandler+0xa24>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a6e      	ldr	r2, [pc, #440]	; (8006068 <HAL_DMA_IRQHandler+0xa28>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a6d      	ldr	r2, [pc, #436]	; (800606c <HAL_DMA_IRQHandler+0xa2c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a6b      	ldr	r2, [pc, #428]	; (8006070 <HAL_DMA_IRQHandler+0xa30>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a6a      	ldr	r2, [pc, #424]	; (8006074 <HAL_DMA_IRQHandler+0xa34>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a68      	ldr	r2, [pc, #416]	; (8006078 <HAL_DMA_IRQHandler+0xa38>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a67      	ldr	r2, [pc, #412]	; (800607c <HAL_DMA_IRQHandler+0xa3c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a65      	ldr	r2, [pc, #404]	; (8006080 <HAL_DMA_IRQHandler+0xa40>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_DMA_IRQHandler+0x8b8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a64      	ldr	r2, [pc, #400]	; (8006084 <HAL_DMA_IRQHandler+0xa44>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d108      	bne.n	8005f0a <HAL_DMA_IRQHandler+0x8ca>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	e007      	b.n	8005f1a <HAL_DMA_IRQHandler+0x8da>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0201 	bic.w	r2, r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d307      	bcc.n	8005f36 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f2      	bne.n	8005f1a <HAL_DMA_IRQHandler+0x8da>
 8005f34:	e000      	b.n	8005f38 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f36:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2203      	movs	r2, #3
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f4e:	e003      	b.n	8005f58 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8272 	beq.w	800644e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	4798      	blx	r3
 8005f72:	e26c      	b.n	800644e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a43      	ldr	r2, [pc, #268]	; (8006088 <HAL_DMA_IRQHandler+0xa48>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d022      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a42      	ldr	r2, [pc, #264]	; (800608c <HAL_DMA_IRQHandler+0xa4c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d01d      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a40      	ldr	r2, [pc, #256]	; (8006090 <HAL_DMA_IRQHandler+0xa50>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d018      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3f      	ldr	r2, [pc, #252]	; (8006094 <HAL_DMA_IRQHandler+0xa54>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d013      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a3d      	ldr	r2, [pc, #244]	; (8006098 <HAL_DMA_IRQHandler+0xa58>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00e      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3c      	ldr	r2, [pc, #240]	; (800609c <HAL_DMA_IRQHandler+0xa5c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d009      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3a      	ldr	r2, [pc, #232]	; (80060a0 <HAL_DMA_IRQHandler+0xa60>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x984>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a39      	ldr	r2, [pc, #228]	; (80060a4 <HAL_DMA_IRQHandler+0xa64>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d101      	bne.n	8005fc8 <HAL_DMA_IRQHandler+0x988>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e000      	b.n	8005fca <HAL_DMA_IRQHandler+0x98a>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 823f 	beq.w	800644e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fdc:	f003 031f 	and.w	r3, r3, #31
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80cd 	beq.w	8006188 <HAL_DMA_IRQHandler+0xb48>
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 80c7 	beq.w	8006188 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	2204      	movs	r2, #4
 8006004:	409a      	lsls	r2, r3
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d049      	beq.n	80060a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 8210 	beq.w	8006448 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006030:	e20a      	b.n	8006448 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8206 	beq.w	8006448 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006044:	e200      	b.n	8006448 <HAL_DMA_IRQHandler+0xe08>
 8006046:	bf00      	nop
 8006048:	40020010 	.word	0x40020010
 800604c:	40020028 	.word	0x40020028
 8006050:	40020040 	.word	0x40020040
 8006054:	40020058 	.word	0x40020058
 8006058:	40020070 	.word	0x40020070
 800605c:	40020088 	.word	0x40020088
 8006060:	400200a0 	.word	0x400200a0
 8006064:	400200b8 	.word	0x400200b8
 8006068:	40020410 	.word	0x40020410
 800606c:	40020428 	.word	0x40020428
 8006070:	40020440 	.word	0x40020440
 8006074:	40020458 	.word	0x40020458
 8006078:	40020470 	.word	0x40020470
 800607c:	40020488 	.word	0x40020488
 8006080:	400204a0 	.word	0x400204a0
 8006084:	400204b8 	.word	0x400204b8
 8006088:	58025408 	.word	0x58025408
 800608c:	5802541c 	.word	0x5802541c
 8006090:	58025430 	.word	0x58025430
 8006094:	58025444 	.word	0x58025444
 8006098:	58025458 	.word	0x58025458
 800609c:	5802546c 	.word	0x5802546c
 80060a0:	58025480 	.word	0x58025480
 80060a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d160      	bne.n	8006174 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a7f      	ldr	r2, [pc, #508]	; (80062b4 <HAL_DMA_IRQHandler+0xc74>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d04a      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <HAL_DMA_IRQHandler+0xc78>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d045      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7c      	ldr	r2, [pc, #496]	; (80062bc <HAL_DMA_IRQHandler+0xc7c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d040      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a7a      	ldr	r2, [pc, #488]	; (80062c0 <HAL_DMA_IRQHandler+0xc80>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d03b      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a79      	ldr	r2, [pc, #484]	; (80062c4 <HAL_DMA_IRQHandler+0xc84>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d036      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a77      	ldr	r2, [pc, #476]	; (80062c8 <HAL_DMA_IRQHandler+0xc88>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d031      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a76      	ldr	r2, [pc, #472]	; (80062cc <HAL_DMA_IRQHandler+0xc8c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d02c      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a74      	ldr	r2, [pc, #464]	; (80062d0 <HAL_DMA_IRQHandler+0xc90>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d027      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a73      	ldr	r2, [pc, #460]	; (80062d4 <HAL_DMA_IRQHandler+0xc94>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d022      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a71      	ldr	r2, [pc, #452]	; (80062d8 <HAL_DMA_IRQHandler+0xc98>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01d      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a70      	ldr	r2, [pc, #448]	; (80062dc <HAL_DMA_IRQHandler+0xc9c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d018      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a6e      	ldr	r2, [pc, #440]	; (80062e0 <HAL_DMA_IRQHandler+0xca0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a6d      	ldr	r2, [pc, #436]	; (80062e4 <HAL_DMA_IRQHandler+0xca4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a6b      	ldr	r2, [pc, #428]	; (80062e8 <HAL_DMA_IRQHandler+0xca8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a6a      	ldr	r2, [pc, #424]	; (80062ec <HAL_DMA_IRQHandler+0xcac>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_DMA_IRQHandler+0xb12>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a68      	ldr	r2, [pc, #416]	; (80062f0 <HAL_DMA_IRQHandler+0xcb0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <HAL_DMA_IRQHandler+0xb24>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0208 	bic.w	r2, r2, #8
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e007      	b.n	8006174 <HAL_DMA_IRQHandler+0xb34>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0204 	bic.w	r2, r2, #4
 8006172:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8165 	beq.w	8006448 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006186:	e15f      	b.n	8006448 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	2202      	movs	r2, #2
 8006192:	409a      	lsls	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4013      	ands	r3, r2
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80c5 	beq.w	8006328 <HAL_DMA_IRQHandler+0xce8>
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80bf 	beq.w	8006328 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2202      	movs	r2, #2
 80061b4:	409a      	lsls	r2, r3
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d018      	beq.n	80061f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d109      	bne.n	80061e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 813a 	beq.w	800644c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e0:	e134      	b.n	800644c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 8130 	beq.w	800644c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f4:	e12a      	b.n	800644c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8089 	bne.w	8006314 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <HAL_DMA_IRQHandler+0xc74>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a29      	ldr	r2, [pc, #164]	; (80062b8 <HAL_DMA_IRQHandler+0xc78>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a28      	ldr	r2, [pc, #160]	; (80062bc <HAL_DMA_IRQHandler+0xc7c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a26      	ldr	r2, [pc, #152]	; (80062c0 <HAL_DMA_IRQHandler+0xc80>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a25      	ldr	r2, [pc, #148]	; (80062c4 <HAL_DMA_IRQHandler+0xc84>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a23      	ldr	r2, [pc, #140]	; (80062c8 <HAL_DMA_IRQHandler+0xc88>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a22      	ldr	r2, [pc, #136]	; (80062cc <HAL_DMA_IRQHandler+0xc8c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <HAL_DMA_IRQHandler+0xc90>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <HAL_DMA_IRQHandler+0xc94>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <HAL_DMA_IRQHandler+0xc98>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1c      	ldr	r2, [pc, #112]	; (80062dc <HAL_DMA_IRQHandler+0xc9c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1a      	ldr	r2, [pc, #104]	; (80062e0 <HAL_DMA_IRQHandler+0xca0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a19      	ldr	r2, [pc, #100]	; (80062e4 <HAL_DMA_IRQHandler+0xca4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a17      	ldr	r2, [pc, #92]	; (80062e8 <HAL_DMA_IRQHandler+0xca8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a16      	ldr	r2, [pc, #88]	; (80062ec <HAL_DMA_IRQHandler+0xcac>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_IRQHandler+0xc62>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a14      	ldr	r2, [pc, #80]	; (80062f0 <HAL_DMA_IRQHandler+0xcb0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d128      	bne.n	80062f4 <HAL_DMA_IRQHandler+0xcb4>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0214 	bic.w	r2, r2, #20
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e027      	b.n	8006304 <HAL_DMA_IRQHandler+0xcc4>
 80062b4:	40020010 	.word	0x40020010
 80062b8:	40020028 	.word	0x40020028
 80062bc:	40020040 	.word	0x40020040
 80062c0:	40020058 	.word	0x40020058
 80062c4:	40020070 	.word	0x40020070
 80062c8:	40020088 	.word	0x40020088
 80062cc:	400200a0 	.word	0x400200a0
 80062d0:	400200b8 	.word	0x400200b8
 80062d4:	40020410 	.word	0x40020410
 80062d8:	40020428 	.word	0x40020428
 80062dc:	40020440 	.word	0x40020440
 80062e0:	40020458 	.word	0x40020458
 80062e4:	40020470 	.word	0x40020470
 80062e8:	40020488 	.word	0x40020488
 80062ec:	400204a0 	.word	0x400204a0
 80062f0:	400204b8 	.word	0x400204b8
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 020a 	bic.w	r2, r2, #10
 8006302:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 8097 	beq.w	800644c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006326:	e091      	b.n	800644c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	2208      	movs	r2, #8
 8006332:	409a      	lsls	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8088 	beq.w	800644e <HAL_DMA_IRQHandler+0xe0e>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8082 	beq.w	800644e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a41      	ldr	r2, [pc, #260]	; (8006454 <HAL_DMA_IRQHandler+0xe14>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d04a      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a3f      	ldr	r2, [pc, #252]	; (8006458 <HAL_DMA_IRQHandler+0xe18>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d045      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3e      	ldr	r2, [pc, #248]	; (800645c <HAL_DMA_IRQHandler+0xe1c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d040      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <HAL_DMA_IRQHandler+0xe20>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d03b      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a3b      	ldr	r2, [pc, #236]	; (8006464 <HAL_DMA_IRQHandler+0xe24>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d036      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a39      	ldr	r2, [pc, #228]	; (8006468 <HAL_DMA_IRQHandler+0xe28>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d031      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a38      	ldr	r2, [pc, #224]	; (800646c <HAL_DMA_IRQHandler+0xe2c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d02c      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a36      	ldr	r2, [pc, #216]	; (8006470 <HAL_DMA_IRQHandler+0xe30>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d027      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a35      	ldr	r2, [pc, #212]	; (8006474 <HAL_DMA_IRQHandler+0xe34>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a33      	ldr	r2, [pc, #204]	; (8006478 <HAL_DMA_IRQHandler+0xe38>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a32      	ldr	r2, [pc, #200]	; (800647c <HAL_DMA_IRQHandler+0xe3c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a30      	ldr	r2, [pc, #192]	; (8006480 <HAL_DMA_IRQHandler+0xe40>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <HAL_DMA_IRQHandler+0xe44>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <HAL_DMA_IRQHandler+0xe48>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a2c      	ldr	r2, [pc, #176]	; (800648c <HAL_DMA_IRQHandler+0xe4c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_DMA_IRQHandler+0xdaa>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <HAL_DMA_IRQHandler+0xe50>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d108      	bne.n	80063fc <HAL_DMA_IRQHandler+0xdbc>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 021c 	bic.w	r2, r2, #28
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e007      	b.n	800640c <HAL_DMA_IRQHandler+0xdcc>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 020e 	bic.w	r2, r2, #14
 800640a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006410:	f003 031f 	and.w	r3, r3, #31
 8006414:	2201      	movs	r2, #1
 8006416:	409a      	lsls	r2, r3
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	e004      	b.n	800644e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006444:	bf00      	nop
 8006446:	e002      	b.n	800644e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006448:	bf00      	nop
 800644a:	e000      	b.n	800644e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800644c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800644e:	3728      	adds	r7, #40	; 0x28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8

08006494 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e04f      	b.n	8006546 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d106      	bne.n	80064c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f84e 	bl	800655c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b20      	ldr	r3, [pc, #128]	; (8006550 <HAL_DMA2D_Init+0xbc>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6851      	ldr	r1, [r2, #4]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	69d2      	ldr	r2, [r2, #28]
 80064da:	4311      	orrs	r1, r2
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6812      	ldr	r2, [r2, #0]
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ea:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <HAL_DMA2D_Init+0xc0>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6891      	ldr	r1, [r2, #8]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6992      	ldr	r2, [r2, #24]
 80064f6:	4311      	orrs	r1, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	430b      	orrs	r3, r1
 80064fe:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_DMA2D_Init+0xc4>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68d1      	ldr	r1, [r2, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6812      	ldr	r2, [r2, #0]
 8006512:	430b      	orrs	r3, r1
 8006514:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	051a      	lsls	r2, r3, #20
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	055b      	lsls	r3, r3, #21
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	fff8ffbf 	.word	0xfff8ffbf
 8006554:	fffffef8 	.word	0xfffffef8
 8006558:	ffff0000 	.word	0xffff0000

0800655c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_DMA2D_Start+0x1c>
 8006588:	2302      	movs	r3, #2
 800658a:	e018      	b.n	80065be <HAL_DMA2D_Start+0x4e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f9a4 	bl	80068f4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d056      	beq.n	8006690 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80065e2:	f7fe f96d 	bl	80048c0 <HAL_GetTick>
 80065e6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80065e8:	e04b      	b.n	8006682 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d023      	beq.n	8006644 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800660a:	f043 0202 	orr.w	r2, r3, #2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006620:	f043 0201 	orr.w	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2221      	movs	r2, #33	; 0x21
 800662e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2204      	movs	r2, #4
 8006634:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0a5      	b.n	8006790 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d01a      	beq.n	8006682 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800664c:	f7fe f938 	bl	80048c0 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d302      	bcc.n	8006662 <HAL_DMA2D_PollForTransfer+0x9c>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10f      	bne.n	8006682 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2203      	movs	r2, #3
 8006672:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e086      	b.n	8006790 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0ac      	beq.n	80065ea <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d061      	beq.n	8006776 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80066b2:	f7fe f905 	bl	80048c0 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80066b8:	e056      	b.n	8006768 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d02e      	beq.n	800672a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	f043 0204 	orr.w	r2, r3, #4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0320 	and.w	r3, r3, #32
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f0:	f043 0202 	orr.w	r2, r3, #2
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006706:	f043 0201 	orr.w	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2229      	movs	r2, #41	; 0x29
 8006714:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2204      	movs	r2, #4
 800671a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e032      	b.n	8006790 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006730:	d01a      	beq.n	8006768 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006732:	f7fe f8c5 	bl	80048c0 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d302      	bcc.n	8006748 <HAL_DMA2D_PollForTransfer+0x182>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10f      	bne.n	8006768 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674c:	f043 0220 	orr.w	r2, r3, #32
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2203      	movs	r2, #3
 8006758:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e013      	b.n	8006790 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f003 0310 	and.w	r3, r3, #16
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0a1      	beq.n	80066ba <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2212      	movs	r2, #18
 800677c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_DMA2D_ConfigLayer+0x24>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e092      	b.n	80068e2 <HAL_DMA2D_ConfigLayer+0x14a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	4613      	mov	r3, r2
 80067d0:	00db      	lsls	r3, r3, #3
 80067d2:	1a9b      	subs	r3, r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	3328      	adds	r3, #40	; 0x28
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	4413      	add	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067f0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80067fc:	4b3c      	ldr	r3, [pc, #240]	; (80068f0 <HAL_DMA2D_ConfigLayer+0x158>)
 80067fe:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b0a      	cmp	r3, #10
 8006806:	d003      	beq.n	8006810 <HAL_DMA2D_ConfigLayer+0x78>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b09      	cmp	r3, #9
 800680e:	d107      	bne.n	8006820 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e005      	b.n	800682c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d120      	bne.n	8006874 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	43db      	mvns	r3, r3
 800683c:	ea02 0103 	and.w	r1, r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	430a      	orrs	r2, r1
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	6812      	ldr	r2, [r2, #0]
 8006852:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b0a      	cmp	r3, #10
 800685a:	d003      	beq.n	8006864 <HAL_DMA2D_ConfigLayer+0xcc>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	2b09      	cmp	r3, #9
 8006862:	d135      	bne.n	80068d0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006870:	629a      	str	r2, [r3, #40]	; 0x28
 8006872:	e02d      	b.n	80068d0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b0b      	cmp	r3, #11
 800687a:	d109      	bne.n	8006890 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	049b      	lsls	r3, r3, #18
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800688e:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	43db      	mvns	r3, r3
 800689a:	ea02 0103 	and.w	r1, r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b0a      	cmp	r3, #10
 80068b8:	d003      	beq.n	80068c2 <HAL_DMA2D_ConfigLayer+0x12a>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b09      	cmp	r3, #9
 80068c0:	d106      	bne.n	80068d0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80068ce:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	ff33000f 	.word	0xff33000f

080068f4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b08b      	sub	sp, #44	; 0x2c
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	041a      	lsls	r2, r3, #16
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	431a      	orrs	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800692c:	d174      	bne.n	8006a18 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006934:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800693c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006944:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	b2db      	uxtb	r3, r3
 800694a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d108      	bne.n	8006966 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	431a      	orrs	r2, r3
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	4313      	orrs	r3, r2
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
 8006964:	e053      	b.n	8006a0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d106      	bne.n	800697c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	4313      	orrs	r3, r2
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
 800697a:	e048      	b.n	8006a0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b02      	cmp	r3, #2
 8006982:	d111      	bne.n	80069a8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	0cdb      	lsrs	r3, r3, #19
 8006988:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	0a9b      	lsrs	r3, r3, #10
 800698e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	02db      	lsls	r3, r3, #11
 800699e:	4313      	orrs	r3, r2
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
 80069a6:	e032      	b.n	8006a0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d117      	bne.n	80069e0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	0fdb      	lsrs	r3, r3, #31
 80069b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	0cdb      	lsrs	r3, r3, #19
 80069ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	0adb      	lsrs	r3, r3, #11
 80069c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	08db      	lsrs	r3, r3, #3
 80069c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	029b      	lsls	r3, r3, #10
 80069d0:	431a      	orrs	r2, r3
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	03db      	lsls	r3, r3, #15
 80069d6:	4313      	orrs	r3, r2
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	e016      	b.n	8006a0e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	0f1b      	lsrs	r3, r3, #28
 80069e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	0d1b      	lsrs	r3, r3, #20
 80069ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	0b1b      	lsrs	r3, r3, #12
 80069f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	091b      	lsrs	r3, r3, #4
 80069f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	011a      	lsls	r2, r3, #4
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	431a      	orrs	r2, r3
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	031b      	lsls	r3, r3, #12
 8006a06:	4313      	orrs	r3, r2
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a14:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006a16:	e00d      	b.n	8006a34 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a20:	d104      	bne.n	8006a2c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	615a      	str	r2, [r3, #20]
}
 8006a2a:	e003      	b.n	8006a34 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	60da      	str	r2, [r3, #12]
}
 8006a34:	bf00      	nop
 8006a36:	372c      	adds	r7, #44	; 0x2c
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e00a      	b.n	8006a72 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006a5c:	7afb      	ldrb	r3, [r7, #11]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	605a      	str	r2, [r3, #4]
      break;
 8006a68:	e002      	b.n	8006a70 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6e:	bf00      	nop
  }

  return status;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e003      	b.n	8006a9a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a98:	2300      	movs	r3, #0
  }
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	f003 0303 	and.w	r3, r3, #3
 8006aba:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 031f 	and.w	r3, r3, #31
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	011a      	lsls	r2, r3, #4
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <HAL_EXTI_IRQHandler+0x5c>)
 8006ad2:	4413      	add	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4013      	ands	r3, r2
 8006ade:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	4798      	blx	r3
    }
  }
}
 8006afa:	bf00      	nop
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	58000088 	.word	0x58000088

08006b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b089      	sub	sp, #36	; 0x24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006b16:	4b89      	ldr	r3, [pc, #548]	; (8006d3c <HAL_GPIO_Init+0x234>)
 8006b18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b1a:	e194      	b.n	8006e46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	2101      	movs	r1, #1
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	fa01 f303 	lsl.w	r3, r1, r3
 8006b28:	4013      	ands	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8186 	beq.w	8006e40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f003 0303 	and.w	r3, r3, #3
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d005      	beq.n	8006b4c <HAL_GPIO_Init+0x44>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d130      	bne.n	8006bae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	005b      	lsls	r3, r3, #1
 8006b56:	2203      	movs	r2, #3
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4013      	ands	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	005b      	lsls	r3, r3, #1
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b82:	2201      	movs	r2, #1
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0201 	and.w	r2, r3, #1
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d017      	beq.n	8006bea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	689a      	ldr	r2, [r3, #8]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d123      	bne.n	8006c3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	08da      	lsrs	r2, r3, #3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3208      	adds	r2, #8
 8006bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f003 0307 	and.w	r3, r3, #7
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	220f      	movs	r2, #15
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	43db      	mvns	r3, r3
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	4013      	ands	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	08da      	lsrs	r2, r3, #3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3208      	adds	r2, #8
 8006c38:	69b9      	ldr	r1, [r7, #24]
 8006c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	2203      	movs	r2, #3
 8006c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	4013      	ands	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f003 0203 	and.w	r2, r3, #3
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69ba      	ldr	r2, [r7, #24]
 8006c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80e0 	beq.w	8006e40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c80:	4b2f      	ldr	r3, [pc, #188]	; (8006d40 <HAL_GPIO_Init+0x238>)
 8006c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c86:	4a2e      	ldr	r2, [pc, #184]	; (8006d40 <HAL_GPIO_Init+0x238>)
 8006c88:	f043 0302 	orr.w	r3, r3, #2
 8006c8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <HAL_GPIO_Init+0x238>)
 8006c92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c9e:	4a29      	ldr	r2, [pc, #164]	; (8006d44 <HAL_GPIO_Init+0x23c>)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	089b      	lsrs	r3, r3, #2
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	f003 0303 	and.w	r3, r3, #3
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	220f      	movs	r2, #15
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	; (8006d48 <HAL_GPIO_Init+0x240>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d052      	beq.n	8006d70 <HAL_GPIO_Init+0x268>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_GPIO_Init+0x244>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d031      	beq.n	8006d36 <HAL_GPIO_Init+0x22e>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <HAL_GPIO_Init+0x248>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d02b      	beq.n	8006d32 <HAL_GPIO_Init+0x22a>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <HAL_GPIO_Init+0x24c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d025      	beq.n	8006d2e <HAL_GPIO_Init+0x226>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	; (8006d58 <HAL_GPIO_Init+0x250>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01f      	beq.n	8006d2a <HAL_GPIO_Init+0x222>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a1b      	ldr	r2, [pc, #108]	; (8006d5c <HAL_GPIO_Init+0x254>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d019      	beq.n	8006d26 <HAL_GPIO_Init+0x21e>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a1a      	ldr	r2, [pc, #104]	; (8006d60 <HAL_GPIO_Init+0x258>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_GPIO_Init+0x21a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a19      	ldr	r2, [pc, #100]	; (8006d64 <HAL_GPIO_Init+0x25c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00d      	beq.n	8006d1e <HAL_GPIO_Init+0x216>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <HAL_GPIO_Init+0x260>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <HAL_GPIO_Init+0x212>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <HAL_GPIO_Init+0x264>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d101      	bne.n	8006d16 <HAL_GPIO_Init+0x20e>
 8006d12:	2309      	movs	r3, #9
 8006d14:	e02d      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d16:	230a      	movs	r3, #10
 8006d18:	e02b      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d1a:	2308      	movs	r3, #8
 8006d1c:	e029      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d1e:	2307      	movs	r3, #7
 8006d20:	e027      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d22:	2306      	movs	r3, #6
 8006d24:	e025      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d26:	2305      	movs	r3, #5
 8006d28:	e023      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d2a:	2304      	movs	r3, #4
 8006d2c:	e021      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e01f      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d32:	2302      	movs	r3, #2
 8006d34:	e01d      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e01b      	b.n	8006d72 <HAL_GPIO_Init+0x26a>
 8006d3a:	bf00      	nop
 8006d3c:	58000080 	.word	0x58000080
 8006d40:	58024400 	.word	0x58024400
 8006d44:	58000400 	.word	0x58000400
 8006d48:	58020000 	.word	0x58020000
 8006d4c:	58020400 	.word	0x58020400
 8006d50:	58020800 	.word	0x58020800
 8006d54:	58020c00 	.word	0x58020c00
 8006d58:	58021000 	.word	0x58021000
 8006d5c:	58021400 	.word	0x58021400
 8006d60:	58021800 	.word	0x58021800
 8006d64:	58021c00 	.word	0x58021c00
 8006d68:	58022000 	.word	0x58022000
 8006d6c:	58022400 	.word	0x58022400
 8006d70:	2300      	movs	r3, #0
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	f002 0203 	and.w	r2, r2, #3
 8006d78:	0092      	lsls	r2, r2, #2
 8006d7a:	4093      	lsls	r3, r2
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d82:	4938      	ldr	r1, [pc, #224]	; (8006e64 <HAL_GPIO_Init+0x35c>)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	089b      	lsrs	r3, r3, #2
 8006d88:	3302      	adds	r3, #2
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	43db      	mvns	r3, r3
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	4013      	ands	r3, r2
 8006e24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d003      	beq.n	8006e3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f ae63 	bne.w	8006b1c <HAL_GPIO_Init+0x14>
  }
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	3724      	adds	r7, #36	; 0x24
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	58000400 	.word	0x58000400

08006e68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e76:	4b75      	ldr	r3, [pc, #468]	; (800704c <HAL_GPIO_DeInit+0x1e4>)
 8006e78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006e7a:	e0d9      	b.n	8007030 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	4013      	ands	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 80cc 	beq.w	800702a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006e92:	4a6f      	ldr	r2, [pc, #444]	; (8007050 <HAL_GPIO_DeInit+0x1e8>)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	089b      	lsrs	r3, r3, #2
 8006e98:	3302      	adds	r3, #2
 8006e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	220f      	movs	r2, #15
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a67      	ldr	r2, [pc, #412]	; (8007054 <HAL_GPIO_DeInit+0x1ec>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d037      	beq.n	8006f2c <HAL_GPIO_DeInit+0xc4>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a66      	ldr	r2, [pc, #408]	; (8007058 <HAL_GPIO_DeInit+0x1f0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d031      	beq.n	8006f28 <HAL_GPIO_DeInit+0xc0>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a65      	ldr	r2, [pc, #404]	; (800705c <HAL_GPIO_DeInit+0x1f4>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d02b      	beq.n	8006f24 <HAL_GPIO_DeInit+0xbc>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a64      	ldr	r2, [pc, #400]	; (8007060 <HAL_GPIO_DeInit+0x1f8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d025      	beq.n	8006f20 <HAL_GPIO_DeInit+0xb8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a63      	ldr	r2, [pc, #396]	; (8007064 <HAL_GPIO_DeInit+0x1fc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d01f      	beq.n	8006f1c <HAL_GPIO_DeInit+0xb4>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a62      	ldr	r2, [pc, #392]	; (8007068 <HAL_GPIO_DeInit+0x200>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d019      	beq.n	8006f18 <HAL_GPIO_DeInit+0xb0>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a61      	ldr	r2, [pc, #388]	; (800706c <HAL_GPIO_DeInit+0x204>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d013      	beq.n	8006f14 <HAL_GPIO_DeInit+0xac>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a60      	ldr	r2, [pc, #384]	; (8007070 <HAL_GPIO_DeInit+0x208>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d00d      	beq.n	8006f10 <HAL_GPIO_DeInit+0xa8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a5f      	ldr	r2, [pc, #380]	; (8007074 <HAL_GPIO_DeInit+0x20c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d007      	beq.n	8006f0c <HAL_GPIO_DeInit+0xa4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a5e      	ldr	r2, [pc, #376]	; (8007078 <HAL_GPIO_DeInit+0x210>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d101      	bne.n	8006f08 <HAL_GPIO_DeInit+0xa0>
 8006f04:	2309      	movs	r3, #9
 8006f06:	e012      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f08:	230a      	movs	r3, #10
 8006f0a:	e010      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	e00e      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f10:	2307      	movs	r3, #7
 8006f12:	e00c      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f14:	2306      	movs	r3, #6
 8006f16:	e00a      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f18:	2305      	movs	r3, #5
 8006f1a:	e008      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	e006      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f20:	2303      	movs	r3, #3
 8006f22:	e004      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e002      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <HAL_GPIO_DeInit+0xc6>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	f002 0203 	and.w	r2, r2, #3
 8006f34:	0092      	lsls	r2, r2, #2
 8006f36:	4093      	lsls	r3, r2
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d136      	bne.n	8006fac <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	401a      	ands	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	43db      	mvns	r3, r3
 8006f54:	401a      	ands	r2, r3
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	43db      	mvns	r3, r3
 8006f64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f68:	4013      	ands	r3, r2
 8006f6a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	43db      	mvns	r3, r3
 8006f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f003 0303 	and.w	r3, r3, #3
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	220f      	movs	r2, #15
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006f8e:	4a30      	ldr	r2, [pc, #192]	; (8007050 <HAL_GPIO_DeInit+0x1e8>)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	089b      	lsrs	r3, r3, #2
 8006f94:	3302      	adds	r3, #2
 8006f96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	43da      	mvns	r2, r3
 8006f9e:	482c      	ldr	r0, [pc, #176]	; (8007050 <HAL_GPIO_DeInit+0x1e8>)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	089b      	lsrs	r3, r3, #2
 8006fa4:	400a      	ands	r2, r1
 8006fa6:	3302      	adds	r3, #2
 8006fa8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	2103      	movs	r1, #3
 8006fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	08da      	lsrs	r2, r3, #3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3208      	adds	r2, #8
 8006fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	220f      	movs	r2, #15
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	08d2      	lsrs	r2, r2, #3
 8006fe0:	4019      	ands	r1, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3208      	adds	r2, #8
 8006fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68da      	ldr	r2, [r3, #12]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	2103      	movs	r1, #3
 8006ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	2101      	movs	r1, #1
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	fa01 f303 	lsl.w	r3, r1, r3
 800700c:	43db      	mvns	r3, r3
 800700e:	401a      	ands	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	2103      	movs	r1, #3
 800701e:	fa01 f303 	lsl.w	r3, r1, r3
 8007022:	43db      	mvns	r3, r3
 8007024:	401a      	ands	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	609a      	str	r2, [r3, #8]
    }

    position++;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	3301      	adds	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af1f 	bne.w	8006e7c <HAL_GPIO_DeInit+0x14>
  }
}
 800703e:	bf00      	nop
 8007040:	bf00      	nop
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr
 800704c:	58000080 	.word	0x58000080
 8007050:	58000400 	.word	0x58000400
 8007054:	58020000 	.word	0x58020000
 8007058:	58020400 	.word	0x58020400
 800705c:	58020800 	.word	0x58020800
 8007060:	58020c00 	.word	0x58020c00
 8007064:	58021000 	.word	0x58021000
 8007068:	58021400 	.word	0x58021400
 800706c:	58021800 	.word	0x58021800
 8007070:	58021c00 	.word	0x58021c00
 8007074:	58022000 	.word	0x58022000
 8007078:	58022400 	.word	0x58022400

0800707c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	807b      	strh	r3, [r7, #2]
 8007088:	4613      	mov	r3, r2
 800708a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800708c:	787b      	ldrb	r3, [r7, #1]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007092:	887a      	ldrh	r2, [r7, #2]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007098:	e003      	b.n	80070a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800709a:	887b      	ldrh	r3, [r7, #2]
 800709c:	041a      	lsls	r2, r3, #16
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	619a      	str	r2, [r3, #24]
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e07f      	b.n	80071c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8a9 	bl	800722e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2224      	movs	r2, #36	; 0x24
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d107      	bne.n	800712a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689a      	ldr	r2, [r3, #8]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	e006      	b.n	8007138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689a      	ldr	r2, [r3, #8]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d104      	bne.n	800714a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007148:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6859      	ldr	r1, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b1d      	ldr	r3, [pc, #116]	; (80071cc <HAL_I2C_Init+0x11c>)
 8007156:	430b      	orrs	r3, r1
 8007158:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007168:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	69d9      	ldr	r1, [r3, #28]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a1a      	ldr	r2, [r3, #32]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	430a      	orrs	r2, r1
 8007192:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	02008000 	.word	0x02008000

080071d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e021      	b.n	8007226 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2224      	movs	r2, #36	; 0x24
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f821 	bl	8007242 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
	...

08007258 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af02      	add	r7, sp, #8
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	4608      	mov	r0, r1
 8007262:	4611      	mov	r1, r2
 8007264:	461a      	mov	r2, r3
 8007266:	4603      	mov	r3, r0
 8007268:	817b      	strh	r3, [r7, #10]
 800726a:	460b      	mov	r3, r1
 800726c:	813b      	strh	r3, [r7, #8]
 800726e:	4613      	mov	r3, r2
 8007270:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b20      	cmp	r3, #32
 800727c:	f040 80f9 	bne.w	8007472 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_I2C_Mem_Write+0x34>
 8007286:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007288:	2b00      	cmp	r3, #0
 800728a:	d105      	bne.n	8007298 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007292:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e0ed      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_I2C_Mem_Write+0x4e>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e0e6      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072ae:	f7fd fb07 	bl	80048c0 <HAL_GetTick>
 80072b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	2319      	movs	r3, #25
 80072ba:	2201      	movs	r2, #1
 80072bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fadd 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0d1      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2221      	movs	r2, #33	; 0x21
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2240      	movs	r2, #64	; 0x40
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a3a      	ldr	r2, [r7, #32]
 80072ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072f8:	88f8      	ldrh	r0, [r7, #6]
 80072fa:	893a      	ldrh	r2, [r7, #8]
 80072fc:	8979      	ldrh	r1, [r7, #10]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	4603      	mov	r3, r0
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f9ed 	bl	80076e8 <I2C_RequestMemoryWrite>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e0a9      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007324:	b29b      	uxth	r3, r3
 8007326:	2bff      	cmp	r3, #255	; 0xff
 8007328:	d90e      	bls.n	8007348 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	22ff      	movs	r2, #255	; 0xff
 800732e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007334:	b2da      	uxtb	r2, r3
 8007336:	8979      	ldrh	r1, [r7, #10]
 8007338:	2300      	movs	r3, #0
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fc57 	bl	8007bf4 <I2C_TransferConfig>
 8007346:	e00f      	b.n	8007368 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734c:	b29a      	uxth	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	b2da      	uxtb	r2, r3
 8007358:	8979      	ldrh	r1, [r7, #10]
 800735a:	2300      	movs	r3, #0
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fc46 	bl	8007bf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fad6 	bl	800791e <I2C_WaitOnTXISFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e07b      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d034      	beq.n	8007420 <HAL_I2C_Mem_Write+0x1c8>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d130      	bne.n	8007420 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c4:	2200      	movs	r2, #0
 80073c6:	2180      	movs	r1, #128	; 0x80
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fa59 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e04d      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2bff      	cmp	r3, #255	; 0xff
 80073e0:	d90e      	bls.n	8007400 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	22ff      	movs	r2, #255	; 0xff
 80073e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	8979      	ldrh	r1, [r7, #10]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fbfb 	bl	8007bf4 <I2C_TransferConfig>
 80073fe:	e00f      	b.n	8007420 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740e:	b2da      	uxtb	r2, r3
 8007410:	8979      	ldrh	r1, [r7, #10]
 8007412:	2300      	movs	r3, #0
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fbea 	bl	8007bf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d19e      	bne.n	8007368 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fabc 	bl	80079ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e01a      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2220      	movs	r2, #32
 8007444:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6859      	ldr	r1, [r3, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	4b0a      	ldr	r3, [pc, #40]	; (800747c <HAL_I2C_Mem_Write+0x224>)
 8007452:	400b      	ands	r3, r1
 8007454:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2220      	movs	r2, #32
 800745a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	e000      	b.n	8007474 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007472:	2302      	movs	r3, #2
  }
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	fe00e800 	.word	0xfe00e800

08007480 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	4608      	mov	r0, r1
 800748a:	4611      	mov	r1, r2
 800748c:	461a      	mov	r2, r3
 800748e:	4603      	mov	r3, r0
 8007490:	817b      	strh	r3, [r7, #10]
 8007492:	460b      	mov	r3, r1
 8007494:	813b      	strh	r3, [r7, #8]
 8007496:	4613      	mov	r3, r2
 8007498:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b20      	cmp	r3, #32
 80074a4:	f040 80fd 	bne.w	80076a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <HAL_I2C_Mem_Read+0x34>
 80074ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0f1      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_I2C_Mem_Read+0x4e>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e0ea      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074d6:	f7fd f9f3 	bl	80048c0 <HAL_GetTick>
 80074da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2319      	movs	r3, #25
 80074e2:	2201      	movs	r2, #1
 80074e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f9c9 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e0d5      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2222      	movs	r2, #34	; 0x22
 80074fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2240      	movs	r2, #64	; 0x40
 8007504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a3a      	ldr	r2, [r7, #32]
 8007512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007520:	88f8      	ldrh	r0, [r7, #6]
 8007522:	893a      	ldrh	r2, [r7, #8]
 8007524:	8979      	ldrh	r1, [r7, #10]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	9301      	str	r3, [sp, #4]
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	4603      	mov	r3, r0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f92d 	bl	8007790 <I2C_RequestMemoryRead>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e0ad      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	2bff      	cmp	r3, #255	; 0xff
 8007550:	d90e      	bls.n	8007570 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755c:	b2da      	uxtb	r2, r3
 800755e:	8979      	ldrh	r1, [r7, #10]
 8007560:	4b52      	ldr	r3, [pc, #328]	; (80076ac <HAL_I2C_Mem_Read+0x22c>)
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fb43 	bl	8007bf4 <I2C_TransferConfig>
 800756e:	e00f      	b.n	8007590 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757e:	b2da      	uxtb	r2, r3
 8007580:	8979      	ldrh	r1, [r7, #10]
 8007582:	4b4a      	ldr	r3, [pc, #296]	; (80076ac <HAL_I2C_Mem_Read+0x22c>)
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fb32 	bl	8007bf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	2200      	movs	r2, #0
 8007598:	2104      	movs	r1, #4
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f970 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e07c      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d034      	beq.n	8007650 <HAL_I2C_Mem_Read+0x1d0>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d130      	bne.n	8007650 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	2200      	movs	r2, #0
 80075f6:	2180      	movs	r1, #128	; 0x80
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f941 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e04d      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760c:	b29b      	uxth	r3, r3
 800760e:	2bff      	cmp	r3, #255	; 0xff
 8007610:	d90e      	bls.n	8007630 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	22ff      	movs	r2, #255	; 0xff
 8007616:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761c:	b2da      	uxtb	r2, r3
 800761e:	8979      	ldrh	r1, [r7, #10]
 8007620:	2300      	movs	r3, #0
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fae3 	bl	8007bf4 <I2C_TransferConfig>
 800762e:	e00f      	b.n	8007650 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763e:	b2da      	uxtb	r2, r3
 8007640:	8979      	ldrh	r1, [r7, #10]
 8007642:	2300      	movs	r3, #0
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fad2 	bl	8007bf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d19a      	bne.n	8007590 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f9a4 	bl	80079ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e01a      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2220      	movs	r2, #32
 8007674:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <HAL_I2C_Mem_Read+0x230>)
 8007682:	400b      	ands	r3, r1
 8007684:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e000      	b.n	80076a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80076a2:	2302      	movs	r3, #2
  }
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	80002400 	.word	0x80002400
 80076b0:	fe00e800 	.word	0xfe00e800

080076b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c2:	b2db      	uxtb	r3, r3
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af02      	add	r7, sp, #8
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	4608      	mov	r0, r1
 80076f2:	4611      	mov	r1, r2
 80076f4:	461a      	mov	r2, r3
 80076f6:	4603      	mov	r3, r0
 80076f8:	817b      	strh	r3, [r7, #10]
 80076fa:	460b      	mov	r3, r1
 80076fc:	813b      	strh	r3, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	8979      	ldrh	r1, [r7, #10]
 8007708:	4b20      	ldr	r3, [pc, #128]	; (800778c <I2C_RequestMemoryWrite+0xa4>)
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fa6f 	bl	8007bf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	69b9      	ldr	r1, [r7, #24]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f8ff 	bl	800791e <I2C_WaitOnTXISFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e02c      	b.n	8007784 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d105      	bne.n	800773c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	629a      	str	r2, [r3, #40]	; 0x28
 800773a:	e015      	b.n	8007768 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800773c:	893b      	ldrh	r3, [r7, #8]
 800773e:	0a1b      	lsrs	r3, r3, #8
 8007740:	b29b      	uxth	r3, r3
 8007742:	b2da      	uxtb	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	69b9      	ldr	r1, [r7, #24]
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f8e5 	bl	800791e <I2C_WaitOnTXISFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e012      	b.n	8007784 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800775e:	893b      	ldrh	r3, [r7, #8]
 8007760:	b2da      	uxtb	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2200      	movs	r2, #0
 8007770:	2180      	movs	r1, #128	; 0x80
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 f884 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	80002000 	.word	0x80002000

08007790 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	461a      	mov	r2, r3
 800779e:	4603      	mov	r3, r0
 80077a0:	817b      	strh	r3, [r7, #10]
 80077a2:	460b      	mov	r3, r1
 80077a4:	813b      	strh	r3, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	8979      	ldrh	r1, [r7, #10]
 80077b0:	4b20      	ldr	r3, [pc, #128]	; (8007834 <I2C_RequestMemoryRead+0xa4>)
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	2300      	movs	r3, #0
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fa1c 	bl	8007bf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	69b9      	ldr	r1, [r7, #24]
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f8ac 	bl	800791e <I2C_WaitOnTXISFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e02c      	b.n	800782a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d105      	bne.n	80077e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d6:	893b      	ldrh	r3, [r7, #8]
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	629a      	str	r2, [r3, #40]	; 0x28
 80077e0:	e015      	b.n	800780e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077e2:	893b      	ldrh	r3, [r7, #8]
 80077e4:	0a1b      	lsrs	r3, r3, #8
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	b2da      	uxtb	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	69b9      	ldr	r1, [r7, #24]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f892 	bl	800791e <I2C_WaitOnTXISFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e012      	b.n	800782a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007804:	893b      	ldrh	r3, [r7, #8]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2200      	movs	r2, #0
 8007816:	2140      	movs	r1, #64	; 0x40
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f831 	bl	8007880 <I2C_WaitOnFlagUntilTimeout>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e000      	b.n	800782a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	80002000 	.word	0x80002000

08007838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b02      	cmp	r3, #2
 800784c:	d103      	bne.n	8007856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d007      	beq.n	8007874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699a      	ldr	r2, [r3, #24]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 0201 	orr.w	r2, r2, #1
 8007872:	619a      	str	r2, [r3, #24]
  }
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007890:	e031      	b.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d02d      	beq.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789a:	f7fd f811 	bl	80048c0 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d122      	bne.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4013      	ands	r3, r2
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	429a      	cmp	r2, r3
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	79fb      	ldrb	r3, [r7, #7]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d113      	bne.n	80078f6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e00f      	b.n	8007916 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699a      	ldr	r2, [r3, #24]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4013      	ands	r3, r2
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	bf0c      	ite	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	2300      	movne	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	429a      	cmp	r2, r3
 8007912:	d0be      	beq.n	8007892 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800792a:	e033      	b.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	68b9      	ldr	r1, [r7, #8]
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f000 f87f 	bl	8007a34 <I2C_IsErrorOccurred>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e031      	b.n	80079a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	d025      	beq.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007948:	f7fc ffba 	bl	80048c0 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	d302      	bcc.n	800795e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11a      	bne.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b02      	cmp	r3, #2
 800796a:	d013      	beq.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e007      	b.n	80079a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d1c4      	bne.n	800792c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079b8:	e02f      	b.n	8007a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f838 	bl	8007a34 <I2C_IsErrorOccurred>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e02d      	b.n	8007a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ce:	f7fc ff77 	bl	80048c0 <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d302      	bcc.n	80079e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d11a      	bne.n	8007a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f003 0320 	and.w	r3, r3, #32
 80079ee:	2b20      	cmp	r3, #32
 80079f0:	d013      	beq.n	8007a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e007      	b.n	8007a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b20      	cmp	r3, #32
 8007a26:	d1c8      	bne.n	80079ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b08a      	sub	sp, #40	; 0x28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f003 0310 	and.w	r3, r3, #16
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d068      	beq.n	8007b32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2210      	movs	r2, #16
 8007a66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a68:	e049      	b.n	8007afe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a70:	d045      	beq.n	8007afe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a72:	f7fc ff25 	bl	80048c0 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <I2C_IsErrorOccurred+0x54>
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d13a      	bne.n	8007afe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aaa:	d121      	bne.n	8007af0 <I2C_IsErrorOccurred+0xbc>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab2:	d01d      	beq.n	8007af0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007ab4:	7cfb      	ldrb	r3, [r7, #19]
 8007ab6:	2b20      	cmp	r3, #32
 8007ab8:	d01a      	beq.n	8007af0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ac8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007aca:	f7fc fef9 	bl	80048c0 <HAL_GetTick>
 8007ace:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ad0:	e00e      	b.n	8007af0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ad2:	f7fc fef5 	bl	80048c0 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b19      	cmp	r3, #25
 8007ade:	d907      	bls.n	8007af0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	f043 0320 	orr.w	r3, r3, #32
 8007ae6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007aee:	e006      	b.n	8007afe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b20      	cmp	r3, #32
 8007afc:	d1e9      	bne.n	8007ad2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b20      	cmp	r3, #32
 8007b0a:	d003      	beq.n	8007b14 <I2C_IsErrorOccurred+0xe0>
 8007b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0aa      	beq.n	8007a6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d103      	bne.n	8007b24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2220      	movs	r2, #32
 8007b22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b24:	6a3b      	ldr	r3, [r7, #32]
 8007b26:	f043 0304 	orr.w	r3, r3, #4
 8007b2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	f043 0308 	orr.w	r3, r3, #8
 8007b6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b88:	6a3b      	ldr	r3, [r7, #32]
 8007b8a:	f043 0302 	orr.w	r3, r3, #2
 8007b8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d01c      	beq.n	8007be2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff fe45 	bl	8007838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6859      	ldr	r1, [r3, #4]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <I2C_IsErrorOccurred+0x1bc>)
 8007bba:	400b      	ands	r3, r1
 8007bbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007be2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3728      	adds	r7, #40	; 0x28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	fe00e800 	.word	0xfe00e800

08007bf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	607b      	str	r3, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	817b      	strh	r3, [r7, #10]
 8007c02:	4613      	mov	r3, r2
 8007c04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c06:	897b      	ldrh	r3, [r7, #10]
 8007c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c0c:	7a7b      	ldrb	r3, [r7, #9]
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	0d5b      	lsrs	r3, r3, #21
 8007c2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <I2C_TransferConfig+0x60>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	43db      	mvns	r3, r3
 8007c38:	ea02 0103 	and.w	r1, r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	03ff63ff 	.word	0x03ff63ff

08007c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d138      	bne.n	8007ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e032      	b.n	8007ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2224      	movs	r2, #36	; 0x24
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e000      	b.n	8007ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
  }
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d139      	bne.n	8007d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e033      	b.n	8007d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2224      	movs	r2, #36	; 0x24
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e0bf      	b.n	8007f1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d106      	bne.n	8007db4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f8ba 	bl	8007f28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007dca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6999      	ldr	r1, [r3, #24]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007de0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6899      	ldr	r1, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b4a      	ldr	r3, [pc, #296]	; (8007f24 <HAL_LTDC_Init+0x19c>)
 8007dfc:	400b      	ands	r3, r1
 8007dfe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	041b      	lsls	r3, r3, #16
 8007e06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6899      	ldr	r1, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68d9      	ldr	r1, [r3, #12]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4b3e      	ldr	r3, [pc, #248]	; (8007f24 <HAL_LTDC_Init+0x19c>)
 8007e2a:	400b      	ands	r3, r1
 8007e2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68d9      	ldr	r1, [r3, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a1a      	ldr	r2, [r3, #32]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	431a      	orrs	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6919      	ldr	r1, [r3, #16]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	4b33      	ldr	r3, [pc, #204]	; (8007f24 <HAL_LTDC_Init+0x19c>)
 8007e58:	400b      	ands	r3, r1
 8007e5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	041b      	lsls	r3, r3, #16
 8007e62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6919      	ldr	r1, [r3, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6959      	ldr	r1, [r3, #20]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <HAL_LTDC_Init+0x19c>)
 8007e86:	400b      	ands	r3, r1
 8007e88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	6959      	ldr	r1, [r3, #20]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007eb8:	041b      	lsls	r3, r3, #16
 8007eba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f042 0206 	orr.w	r2, r2, #6
 8007ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	699a      	ldr	r2, [r3, #24]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	f000f800 	.word	0xf000f800

08007f28 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f3c:	b5b0      	push	{r4, r5, r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <HAL_LTDC_ConfigLayer+0x1a>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e02c      	b.n	8007fb0 <HAL_LTDC_ConfigLayer+0x74>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2202      	movs	r2, #2
 8007f62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2134      	movs	r1, #52	; 0x34
 8007f6c:	fb01 f303 	mul.w	r3, r1, r3
 8007f70:	4413      	add	r3, r2
 8007f72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	4614      	mov	r4, r2
 8007f7a:	461d      	mov	r5, r3
 8007f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f811 	bl	8007fb8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bdb0      	pop	{r4, r5, r7, pc}

08007fb8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b089      	sub	sp, #36	; 0x24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fd4:	4413      	add	r3, r2
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	01db      	lsls	r3, r3, #7
 8007fe4:	4413      	add	r3, r2
 8007fe6:	3384      	adds	r3, #132	; 0x84
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	01d2      	lsls	r2, r2, #7
 8007ff4:	440a      	add	r2, r1
 8007ff6:	3284      	adds	r2, #132	; 0x84
 8007ff8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ffc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	0c1b      	lsrs	r3, r3, #16
 800800a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800800e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008010:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4619      	mov	r1, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	01db      	lsls	r3, r3, #7
 800801c:	440b      	add	r3, r1
 800801e:	3384      	adds	r3, #132	; 0x84
 8008020:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008026:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008036:	4413      	add	r3, r2
 8008038:	041b      	lsls	r3, r3, #16
 800803a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	01db      	lsls	r3, r3, #7
 8008046:	4413      	add	r3, r2
 8008048:	3384      	adds	r3, #132	; 0x84
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	4611      	mov	r1, r2
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	01d2      	lsls	r2, r2, #7
 8008056:	440a      	add	r2, r1
 8008058:	3284      	adds	r2, #132	; 0x84
 800805a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800805e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800806e:	4413      	add	r3, r2
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4619      	mov	r1, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	01db      	lsls	r3, r3, #7
 800807c:	440b      	add	r3, r1
 800807e:	3384      	adds	r3, #132	; 0x84
 8008080:	4619      	mov	r1, r3
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	4313      	orrs	r3, r2
 8008086:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	01db      	lsls	r3, r3, #7
 8008092:	4413      	add	r3, r2
 8008094:	3384      	adds	r3, #132	; 0x84
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	4611      	mov	r1, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	01d2      	lsls	r2, r2, #7
 80080a2:	440a      	add	r2, r1
 80080a4:	3284      	adds	r2, #132	; 0x84
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	01db      	lsls	r3, r3, #7
 80080b6:	4413      	add	r3, r2
 80080b8:	3384      	adds	r3, #132	; 0x84
 80080ba:	461a      	mov	r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080c8:	021b      	lsls	r3, r3, #8
 80080ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080d2:	041b      	lsls	r3, r3, #16
 80080d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	061b      	lsls	r3, r3, #24
 80080dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	01db      	lsls	r3, r3, #7
 80080e8:	4413      	add	r3, r2
 80080ea:	3384      	adds	r3, #132	; 0x84
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	01db      	lsls	r3, r3, #7
 80080f8:	4413      	add	r3, r2
 80080fa:	3384      	adds	r3, #132	; 0x84
 80080fc:	461a      	mov	r2, r3
 80080fe:	2300      	movs	r3, #0
 8008100:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008108:	461a      	mov	r2, r3
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	431a      	orrs	r2, r3
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	431a      	orrs	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4619      	mov	r1, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	01db      	lsls	r3, r3, #7
 800811c:	440b      	add	r3, r1
 800811e:	3384      	adds	r3, #132	; 0x84
 8008120:	4619      	mov	r1, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	01db      	lsls	r3, r3, #7
 8008132:	4413      	add	r3, r2
 8008134:	3384      	adds	r3, #132	; 0x84
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	6812      	ldr	r2, [r2, #0]
 800813c:	4611      	mov	r1, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	01d2      	lsls	r2, r2, #7
 8008142:	440a      	add	r2, r1
 8008144:	3284      	adds	r2, #132	; 0x84
 8008146:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800814a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	01db      	lsls	r3, r3, #7
 8008156:	4413      	add	r3, r2
 8008158:	3384      	adds	r3, #132	; 0x84
 800815a:	461a      	mov	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	461a      	mov	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	01db      	lsls	r3, r3, #7
 800816c:	4413      	add	r3, r2
 800816e:	3384      	adds	r3, #132	; 0x84
 8008170:	69da      	ldr	r2, [r3, #28]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4619      	mov	r1, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	01db      	lsls	r3, r3, #7
 800817c:	440b      	add	r3, r1
 800817e:	3384      	adds	r3, #132	; 0x84
 8008180:	4619      	mov	r1, r3
 8008182:	4b58      	ldr	r3, [pc, #352]	; (80082e4 <LTDC_SetConfig+0x32c>)
 8008184:	4013      	ands	r3, r2
 8008186:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	6809      	ldr	r1, [r1, #0]
 8008194:	4608      	mov	r0, r1
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	01c9      	lsls	r1, r1, #7
 800819a:	4401      	add	r1, r0
 800819c:	3184      	adds	r1, #132	; 0x84
 800819e:	4313      	orrs	r3, r2
 80081a0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	01db      	lsls	r3, r3, #7
 80081ac:	4413      	add	r3, r2
 80081ae:	3384      	adds	r3, #132	; 0x84
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	01db      	lsls	r3, r3, #7
 80081bc:	4413      	add	r3, r2
 80081be:	3384      	adds	r3, #132	; 0x84
 80081c0:	461a      	mov	r2, r3
 80081c2:	2300      	movs	r3, #0
 80081c4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	01db      	lsls	r3, r3, #7
 80081d0:	4413      	add	r3, r2
 80081d2:	3384      	adds	r3, #132	; 0x84
 80081d4:	461a      	mov	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d102      	bne.n	80081ea <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80081e4:	2304      	movs	r3, #4
 80081e6:	61fb      	str	r3, [r7, #28]
 80081e8:	e01b      	b.n	8008222 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d102      	bne.n	80081f8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80081f2:	2303      	movs	r3, #3
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	e014      	b.n	8008222 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	2b04      	cmp	r3, #4
 80081fe:	d00b      	beq.n	8008218 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008204:	2b02      	cmp	r3, #2
 8008206:	d007      	beq.n	8008218 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800820c:	2b03      	cmp	r3, #3
 800820e:	d003      	beq.n	8008218 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008214:	2b07      	cmp	r3, #7
 8008216:	d102      	bne.n	800821e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008218:	2302      	movs	r3, #2
 800821a:	61fb      	str	r3, [r7, #28]
 800821c:	e001      	b.n	8008222 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800821e:	2301      	movs	r3, #1
 8008220:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	01db      	lsls	r3, r3, #7
 800822c:	4413      	add	r3, r2
 800822e:	3384      	adds	r3, #132	; 0x84
 8008230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	4611      	mov	r1, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	01d2      	lsls	r2, r2, #7
 800823c:	440a      	add	r2, r1
 800823e:	3284      	adds	r2, #132	; 0x84
 8008240:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008244:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	fb02 f303 	mul.w	r3, r2, r3
 8008250:	041a      	lsls	r2, r3, #16
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	6859      	ldr	r1, [r3, #4]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	1acb      	subs	r3, r1, r3
 800825c:	69f9      	ldr	r1, [r7, #28]
 800825e:	fb01 f303 	mul.w	r3, r1, r3
 8008262:	3307      	adds	r3, #7
 8008264:	68f9      	ldr	r1, [r7, #12]
 8008266:	6809      	ldr	r1, [r1, #0]
 8008268:	4608      	mov	r0, r1
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	01c9      	lsls	r1, r1, #7
 800826e:	4401      	add	r1, r0
 8008270:	3184      	adds	r1, #132	; 0x84
 8008272:	4313      	orrs	r3, r2
 8008274:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	01db      	lsls	r3, r3, #7
 8008280:	4413      	add	r3, r2
 8008282:	3384      	adds	r3, #132	; 0x84
 8008284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4619      	mov	r1, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	01db      	lsls	r3, r3, #7
 8008290:	440b      	add	r3, r1
 8008292:	3384      	adds	r3, #132	; 0x84
 8008294:	4619      	mov	r1, r3
 8008296:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <LTDC_SetConfig+0x330>)
 8008298:	4013      	ands	r3, r2
 800829a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	01db      	lsls	r3, r3, #7
 80082a6:	4413      	add	r3, r2
 80082a8:	3384      	adds	r3, #132	; 0x84
 80082aa:	461a      	mov	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	01db      	lsls	r3, r3, #7
 80082bc:	4413      	add	r3, r2
 80082be:	3384      	adds	r3, #132	; 0x84
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	4611      	mov	r1, r2
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	01d2      	lsls	r2, r2, #7
 80082cc:	440a      	add	r2, r1
 80082ce:	3284      	adds	r2, #132	; 0x84
 80082d0:	f043 0301 	orr.w	r3, r3, #1
 80082d4:	6013      	str	r3, [r2, #0]
}
 80082d6:	bf00      	nop
 80082d8:	3724      	adds	r7, #36	; 0x24
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	fffff8f8 	.word	0xfffff8f8
 80082e8:	fffff800 	.word	0xfffff800

080082ec <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082f4:	f7fc fae4 	bl	80048c0 <HAL_GetTick>
 80082f8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e03b      	b.n	800837c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0201 	bic.w	r2, r2, #1
 8008322:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008324:	e00f      	b.n	8008346 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008326:	f7fc facb 	bl	80048c0 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	2b05      	cmp	r3, #5
 8008332:	d908      	bls.n	8008346 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2240      	movs	r2, #64	; 0x40
 8008338:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2203      	movs	r2, #3
 800833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e01a      	b.n	800837c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e8      	bne.n	8008326 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f9c1 	bl	80086dc <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d101      	bne.n	8008396 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e048      	b.n	8008428 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68da      	ldr	r2, [r3, #12]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2200      	movs	r2, #0
 80083b4:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2200      	movs	r2, #0
 80083bc:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2200      	movs	r2, #0
 80083c4:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2200      	movs	r2, #0
 80083d4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2200      	movs	r2, #0
 80083dc:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2200      	movs	r2, #0
 80083e4:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2200      	movs	r2, #0
 80083f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	221f      	movs	r2, #31
 80083fc:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008440:	4b91      	ldr	r3, [pc, #580]	; (8008688 <HAL_MDMA_IRQHandler+0x254>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a91      	ldr	r2, [pc, #580]	; (800868c <HAL_MDMA_IRQHandler+0x258>)
 8008446:	fba2 2303 	umull	r2, r3, r2, r3
 800844a:	0a9b      	lsrs	r3, r3, #10
 800844c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	4b8e      	ldr	r3, [pc, #568]	; (8008690 <HAL_MDMA_IRQHandler+0x25c>)
 8008456:	4413      	add	r3, r2
 8008458:	099b      	lsrs	r3, r3, #6
 800845a:	f003 031f 	and.w	r3, r3, #31
 800845e:	2201      	movs	r2, #1
 8008460:	fa02 f303 	lsl.w	r3, r2, r3
 8008464:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008466:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	4013      	ands	r3, r2
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 812d 	beq.w	80086d0 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d054      	beq.n	800852e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d04d      	beq.n	800852e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0202 	bic.w	r2, r2, #2
 80084a0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b8:	f043 0201 	orr.w	r2, r3, #1
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	669a      	str	r2, [r3, #104]	; 0x68
 80084c0:	e005      	b.n	80084ce <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084c6:	f043 0202 	orr.w	r2, r3, #2
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084dc:	f043 0204 	orr.w	r2, r3, #4
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084f2:	f043 0208 	orr.w	r2, r3, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008500:	2b00      	cmp	r3, #0
 8008502:	d005      	beq.n	8008510 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008508:	f043 0210 	orr.w	r2, r3, #16
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800851e:	f043 0220 	orr.w	r2, r3, #32
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2201      	movs	r2, #1
 800852c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0310 	and.w	r3, r3, #16
 8008538:	2b00      	cmp	r3, #0
 800853a:	d012      	beq.n	8008562 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f003 0320 	and.w	r3, r3, #32
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00b      	beq.n	8008562 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2210      	movs	r2, #16
 8008550:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0308 	and.w	r3, r3, #8
 800856c:	2b00      	cmp	r3, #0
 800856e:	d012      	beq.n	8008596 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2208      	movs	r2, #8
 8008584:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d012      	beq.n	80085ca <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00b      	beq.n	80085ca <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2204      	movs	r2, #4
 80085b8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d039      	beq.n	800864c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d032      	beq.n	800864c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80085f4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d110      	bne.n	8008624 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	2b00      	cmp	r3, #0
 8008618:	d05c      	beq.n	80086d4 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
        }
        return;
 8008622:	e057      	b.n	80086d4 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2202      	movs	r2, #2
 800862a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008650:	2b00      	cmp	r3, #0
 8008652:	d040      	beq.n	80086d6 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2204      	movs	r2, #4
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3301      	adds	r3, #1
 8008670:	60bb      	str	r3, [r7, #8]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	429a      	cmp	r2, r3
 8008676:	d30d      	bcc.n	8008694 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1f2      	bne.n	800866c <HAL_MDMA_IRQHandler+0x238>
 8008686:	e006      	b.n	8008696 <HAL_MDMA_IRQHandler+0x262>
 8008688:	24000010 	.word	0x24000010
 800868c:	1b4e81b5 	.word	0x1b4e81b5
 8008690:	adffffc0 	.word	0xadffffc0
        break;
 8008694:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2203      	movs	r2, #3
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086b4:	e003      	b.n	80086be <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
 80086ce:	e002      	b.n	80086d6 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80086d0:	bf00      	nop
 80086d2:	e000      	b.n	80086d6 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80086d4:	bf00      	nop
    }
  }
}
 80086d6:	3718      	adds	r7, #24
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68d9      	ldr	r1, [r3, #12]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008702:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800870e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800871a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	3b01      	subs	r3, #1
 8008722:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008724:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008730:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008732:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800873c:	d107      	bne.n	800874e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	691a      	ldr	r2, [r3, #16]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800874c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2200      	movs	r2, #0
 8008754:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875a:	2b00      	cmp	r3, #0
 800875c:	da11      	bge.n	8008782 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695a      	ldr	r2, [r3, #20]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800876c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008772:	425b      	negs	r3, r3
 8008774:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	b292      	uxth	r2, r2
 800877e:	621a      	str	r2, [r3, #32]
 8008780:	e006      	b.n	8008790 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	b292      	uxth	r2, r2
 800878e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	da15      	bge.n	80087c4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80087a6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ac:	425b      	negs	r3, r3
 80087ae:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6a19      	ldr	r1, [r3, #32]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	041a      	lsls	r2, r3, #16
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	621a      	str	r2, [r3, #32]
 80087c2:	e009      	b.n	80087d8 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a19      	ldr	r1, [r3, #32]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	041a      	lsls	r2, r3, #16
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e0:	d006      	beq.n	80087f0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b2d2      	uxtb	r2, r2
 80087ec:	629a      	str	r2, [r3, #40]	; 0x28
 80087ee:	e003      	b.n	80087f8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2200      	movs	r2, #0
 80087f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2200      	movs	r2, #0
 80087fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008814:	4b19      	ldr	r3, [pc, #100]	; (800887c <HAL_PWREx_ConfigSupply+0x70>)
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b04      	cmp	r3, #4
 800881e:	d00a      	beq.n	8008836 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008820:	4b16      	ldr	r3, [pc, #88]	; (800887c <HAL_PWREx_ConfigSupply+0x70>)
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f003 0307 	and.w	r3, r3, #7
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d001      	beq.n	8008832 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01f      	b.n	8008872 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008832:	2300      	movs	r3, #0
 8008834:	e01d      	b.n	8008872 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <HAL_PWREx_ConfigSupply+0x70>)
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f023 0207 	bic.w	r2, r3, #7
 800883e:	490f      	ldr	r1, [pc, #60]	; (800887c <HAL_PWREx_ConfigSupply+0x70>)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4313      	orrs	r3, r2
 8008844:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008846:	f7fc f83b 	bl	80048c0 <HAL_GetTick>
 800884a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800884c:	e009      	b.n	8008862 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800884e:	f7fc f837 	bl	80048c0 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800885c:	d901      	bls.n	8008862 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e007      	b.n	8008872 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <HAL_PWREx_ConfigSupply+0x70>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800886a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800886e:	d1ee      	bne.n	800884e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	58024800 	.word	0x58024800

08008880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08c      	sub	sp, #48	; 0x30
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f000 bc48 	b.w	8009124 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	2b00      	cmp	r3, #0
 800889e:	f000 8088 	beq.w	80089b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088a2:	4b99      	ldr	r3, [pc, #612]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80088ac:	4b96      	ldr	r3, [pc, #600]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80088ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	2b10      	cmp	r3, #16
 80088b6:	d007      	beq.n	80088c8 <HAL_RCC_OscConfig+0x48>
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	2b18      	cmp	r3, #24
 80088bc:	d111      	bne.n	80088e2 <HAL_RCC_OscConfig+0x62>
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d10c      	bne.n	80088e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c8:	4b8f      	ldr	r3, [pc, #572]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d06d      	beq.n	80089b0 <HAL_RCC_OscConfig+0x130>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d169      	bne.n	80089b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	f000 bc21 	b.w	8009124 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ea:	d106      	bne.n	80088fa <HAL_RCC_OscConfig+0x7a>
 80088ec:	4b86      	ldr	r3, [pc, #536]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a85      	ldr	r2, [pc, #532]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80088f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	e02e      	b.n	8008958 <HAL_RCC_OscConfig+0xd8>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10c      	bne.n	800891c <HAL_RCC_OscConfig+0x9c>
 8008902:	4b81      	ldr	r3, [pc, #516]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a80      	ldr	r2, [pc, #512]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4b7e      	ldr	r3, [pc, #504]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a7d      	ldr	r2, [pc, #500]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e01d      	b.n	8008958 <HAL_RCC_OscConfig+0xd8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008924:	d10c      	bne.n	8008940 <HAL_RCC_OscConfig+0xc0>
 8008926:	4b78      	ldr	r3, [pc, #480]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a77      	ldr	r2, [pc, #476]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 800892c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	4b75      	ldr	r3, [pc, #468]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a74      	ldr	r2, [pc, #464]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	e00b      	b.n	8008958 <HAL_RCC_OscConfig+0xd8>
 8008940:	4b71      	ldr	r3, [pc, #452]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a70      	ldr	r2, [pc, #448]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b6e      	ldr	r3, [pc, #440]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a6d      	ldr	r2, [pc, #436]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d013      	beq.n	8008988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fb ffae 	bl	80048c0 <HAL_GetTick>
 8008964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008968:	f7fb ffaa 	bl	80048c0 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b64      	cmp	r3, #100	; 0x64
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e3d4      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800897a:	4b63      	ldr	r3, [pc, #396]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0xe8>
 8008986:	e014      	b.n	80089b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008988:	f7fb ff9a 	bl	80048c0 <HAL_GetTick>
 800898c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008990:	f7fb ff96 	bl	80048c0 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b64      	cmp	r3, #100	; 0x64
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e3c0      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80089a2:	4b59      	ldr	r3, [pc, #356]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0x110>
 80089ae:	e000      	b.n	80089b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80ca 	beq.w	8008b54 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089c0:	4b51      	ldr	r3, [pc, #324]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089ca:	4b4f      	ldr	r3, [pc, #316]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <HAL_RCC_OscConfig+0x166>
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	2b18      	cmp	r3, #24
 80089da:	d156      	bne.n	8008a8a <HAL_RCC_OscConfig+0x20a>
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d151      	bne.n	8008a8a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089e6:	4b48      	ldr	r3, [pc, #288]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d005      	beq.n	80089fe <HAL_RCC_OscConfig+0x17e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e392      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089fe:	4b42      	ldr	r3, [pc, #264]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f023 0219 	bic.w	r2, r3, #25
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	493f      	ldr	r1, [pc, #252]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a10:	f7fb ff56 	bl	80048c0 <HAL_GetTick>
 8008a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a16:	e008      	b.n	8008a2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a18:	f7fb ff52 	bl	80048c0 <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e37c      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a2a:	4b37      	ldr	r3, [pc, #220]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a36:	f7fb ff73 	bl	8004920 <HAL_GetREVID>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d817      	bhi.n	8008a74 <HAL_RCC_OscConfig+0x1f4>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	2b40      	cmp	r3, #64	; 0x40
 8008a4a:	d108      	bne.n	8008a5e <HAL_RCC_OscConfig+0x1de>
 8008a4c:	4b2e      	ldr	r3, [pc, #184]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a54:	4a2c      	ldr	r2, [pc, #176]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a5c:	e07a      	b.n	8008b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a5e:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	031b      	lsls	r3, r3, #12
 8008a6c:	4926      	ldr	r1, [pc, #152]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a72:	e06f      	b.n	8008b54 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a74:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	061b      	lsls	r3, r3, #24
 8008a82:	4921      	ldr	r1, [pc, #132]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a88:	e064      	b.n	8008b54 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d047      	beq.n	8008b22 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a92:	4b1d      	ldr	r3, [pc, #116]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f023 0219 	bic.w	r2, r3, #25
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	491a      	ldr	r1, [pc, #104]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa4:	f7fb ff0c 	bl	80048c0 <HAL_GetTick>
 8008aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aac:	f7fb ff08 	bl	80048c0 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e332      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008abe:	4b12      	ldr	r3, [pc, #72]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0304 	and.w	r3, r3, #4
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0f0      	beq.n	8008aac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aca:	f7fb ff29 	bl	8004920 <HAL_GetREVID>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d819      	bhi.n	8008b0c <HAL_RCC_OscConfig+0x28c>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	2b40      	cmp	r3, #64	; 0x40
 8008ade:	d108      	bne.n	8008af2 <HAL_RCC_OscConfig+0x272>
 8008ae0:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ae8:	4a07      	ldr	r2, [pc, #28]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aee:	6053      	str	r3, [r2, #4]
 8008af0:	e030      	b.n	8008b54 <HAL_RCC_OscConfig+0x2d4>
 8008af2:	4b05      	ldr	r3, [pc, #20]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	031b      	lsls	r3, r3, #12
 8008b00:	4901      	ldr	r1, [pc, #4]	; (8008b08 <HAL_RCC_OscConfig+0x288>)
 8008b02:	4313      	orrs	r3, r2
 8008b04:	604b      	str	r3, [r1, #4]
 8008b06:	e025      	b.n	8008b54 <HAL_RCC_OscConfig+0x2d4>
 8008b08:	58024400 	.word	0x58024400
 8008b0c:	4b9a      	ldr	r3, [pc, #616]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	061b      	lsls	r3, r3, #24
 8008b1a:	4997      	ldr	r1, [pc, #604]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	604b      	str	r3, [r1, #4]
 8008b20:	e018      	b.n	8008b54 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b22:	4b95      	ldr	r3, [pc, #596]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a94      	ldr	r2, [pc, #592]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b28:	f023 0301 	bic.w	r3, r3, #1
 8008b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2e:	f7fb fec7 	bl	80048c0 <HAL_GetTick>
 8008b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b36:	f7fb fec3 	bl	80048c0 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e2ed      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b48:	4b8b      	ldr	r3, [pc, #556]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1f0      	bne.n	8008b36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 80a9 	beq.w	8008cb4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b62:	4b85      	ldr	r3, [pc, #532]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b6a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b6c:	4b82      	ldr	r3, [pc, #520]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b70:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d007      	beq.n	8008b88 <HAL_RCC_OscConfig+0x308>
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b18      	cmp	r3, #24
 8008b7c:	d13a      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x374>
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f003 0303 	and.w	r3, r3, #3
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d135      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b88:	4b7b      	ldr	r3, [pc, #492]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x320>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d001      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e2c1      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ba0:	f7fb febe 	bl	8004920 <HAL_GetREVID>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	f241 0203 	movw	r2, #4099	; 0x1003
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d817      	bhi.n	8008bde <HAL_RCC_OscConfig+0x35e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	2b20      	cmp	r3, #32
 8008bb4:	d108      	bne.n	8008bc8 <HAL_RCC_OscConfig+0x348>
 8008bb6:	4b70      	ldr	r3, [pc, #448]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008bbe:	4a6e      	ldr	r2, [pc, #440]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008bc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bc4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bc6:	e075      	b.n	8008cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bc8:	4b6b      	ldr	r3, [pc, #428]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a1b      	ldr	r3, [r3, #32]
 8008bd4:	069b      	lsls	r3, r3, #26
 8008bd6:	4968      	ldr	r1, [pc, #416]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bdc:	e06a      	b.n	8008cb4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bde:	4b66      	ldr	r3, [pc, #408]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	061b      	lsls	r3, r3, #24
 8008bec:	4962      	ldr	r1, [pc, #392]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bf2:	e05f      	b.n	8008cb4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d042      	beq.n	8008c82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bfc:	4b5e      	ldr	r3, [pc, #376]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a5d      	ldr	r2, [pc, #372]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c08:	f7fb fe5a 	bl	80048c0 <HAL_GetTick>
 8008c0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c0e:	e008      	b.n	8008c22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c10:	f7fb fe56 	bl	80048c0 <HAL_GetTick>
 8008c14:	4602      	mov	r2, r0
 8008c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d901      	bls.n	8008c22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e280      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c22:	4b55      	ldr	r3, [pc, #340]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d0f0      	beq.n	8008c10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c2e:	f7fb fe77 	bl	8004920 <HAL_GetREVID>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d817      	bhi.n	8008c6c <HAL_RCC_OscConfig+0x3ec>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a1b      	ldr	r3, [r3, #32]
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d108      	bne.n	8008c56 <HAL_RCC_OscConfig+0x3d6>
 8008c44:	4b4c      	ldr	r3, [pc, #304]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c4c:	4a4a      	ldr	r2, [pc, #296]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c52:	6053      	str	r3, [r2, #4]
 8008c54:	e02e      	b.n	8008cb4 <HAL_RCC_OscConfig+0x434>
 8008c56:	4b48      	ldr	r3, [pc, #288]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	069b      	lsls	r3, r3, #26
 8008c64:	4944      	ldr	r1, [pc, #272]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	604b      	str	r3, [r1, #4]
 8008c6a:	e023      	b.n	8008cb4 <HAL_RCC_OscConfig+0x434>
 8008c6c:	4b42      	ldr	r3, [pc, #264]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	061b      	lsls	r3, r3, #24
 8008c7a:	493f      	ldr	r1, [pc, #252]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	60cb      	str	r3, [r1, #12]
 8008c80:	e018      	b.n	8008cb4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c82:	4b3d      	ldr	r3, [pc, #244]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a3c      	ldr	r2, [pc, #240]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8e:	f7fb fe17 	bl	80048c0 <HAL_GetTick>
 8008c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c94:	e008      	b.n	8008ca8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c96:	f7fb fe13 	bl	80048c0 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e23d      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008ca8:	4b33      	ldr	r3, [pc, #204]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1f0      	bne.n	8008c96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d036      	beq.n	8008d2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d019      	beq.n	8008cfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cc8:	4b2b      	ldr	r3, [pc, #172]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008cca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ccc:	4a2a      	ldr	r2, [pc, #168]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008cce:	f043 0301 	orr.w	r3, r3, #1
 8008cd2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd4:	f7fb fdf4 	bl	80048c0 <HAL_GetTick>
 8008cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cda:	e008      	b.n	8008cee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cdc:	f7fb fdf0 	bl	80048c0 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d901      	bls.n	8008cee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e21a      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cee:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0f0      	beq.n	8008cdc <HAL_RCC_OscConfig+0x45c>
 8008cfa:	e018      	b.n	8008d2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cfc:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008cfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d00:	4a1d      	ldr	r2, [pc, #116]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008d02:	f023 0301 	bic.w	r3, r3, #1
 8008d06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d08:	f7fb fdda 	bl	80048c0 <HAL_GetTick>
 8008d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d10:	f7fb fdd6 	bl	80048c0 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e200      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008d22:	4b15      	ldr	r3, [pc, #84]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d039      	beq.n	8008dae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d01c      	beq.n	8008d7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d42:	4b0d      	ldr	r3, [pc, #52]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a0c      	ldr	r2, [pc, #48]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008d48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d4e:	f7fb fdb7 	bl	80048c0 <HAL_GetTick>
 8008d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d54:	e008      	b.n	8008d68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d56:	f7fb fdb3 	bl	80048c0 <HAL_GetTick>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d901      	bls.n	8008d68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e1dd      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d68:	4b03      	ldr	r3, [pc, #12]	; (8008d78 <HAL_RCC_OscConfig+0x4f8>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0f0      	beq.n	8008d56 <HAL_RCC_OscConfig+0x4d6>
 8008d74:	e01b      	b.n	8008dae <HAL_RCC_OscConfig+0x52e>
 8008d76:	bf00      	nop
 8008d78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d7c:	4b9b      	ldr	r3, [pc, #620]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a9a      	ldr	r2, [pc, #616]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d88:	f7fb fd9a 	bl	80048c0 <HAL_GetTick>
 8008d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d90:	f7fb fd96 	bl	80048c0 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e1c0      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008da2:	4b92      	ldr	r3, [pc, #584]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f0      	bne.n	8008d90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0304 	and.w	r3, r3, #4
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8081 	beq.w	8008ebe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008dbc:	4b8c      	ldr	r3, [pc, #560]	; (8008ff0 <HAL_RCC_OscConfig+0x770>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a8b      	ldr	r2, [pc, #556]	; (8008ff0 <HAL_RCC_OscConfig+0x770>)
 8008dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dc8:	f7fb fd7a 	bl	80048c0 <HAL_GetTick>
 8008dcc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dce:	e008      	b.n	8008de2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dd0:	f7fb fd76 	bl	80048c0 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b64      	cmp	r3, #100	; 0x64
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e1a0      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008de2:	4b83      	ldr	r3, [pc, #524]	; (8008ff0 <HAL_RCC_OscConfig+0x770>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f0      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d106      	bne.n	8008e04 <HAL_RCC_OscConfig+0x584>
 8008df6:	4b7d      	ldr	r3, [pc, #500]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfa:	4a7c      	ldr	r2, [pc, #496]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	6713      	str	r3, [r2, #112]	; 0x70
 8008e02:	e02d      	b.n	8008e60 <HAL_RCC_OscConfig+0x5e0>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10c      	bne.n	8008e26 <HAL_RCC_OscConfig+0x5a6>
 8008e0c:	4b77      	ldr	r3, [pc, #476]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e10:	4a76      	ldr	r2, [pc, #472]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e12:	f023 0301 	bic.w	r3, r3, #1
 8008e16:	6713      	str	r3, [r2, #112]	; 0x70
 8008e18:	4b74      	ldr	r3, [pc, #464]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1c:	4a73      	ldr	r2, [pc, #460]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e1e:	f023 0304 	bic.w	r3, r3, #4
 8008e22:	6713      	str	r3, [r2, #112]	; 0x70
 8008e24:	e01c      	b.n	8008e60 <HAL_RCC_OscConfig+0x5e0>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d10c      	bne.n	8008e48 <HAL_RCC_OscConfig+0x5c8>
 8008e2e:	4b6f      	ldr	r3, [pc, #444]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e32:	4a6e      	ldr	r2, [pc, #440]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e34:	f043 0304 	orr.w	r3, r3, #4
 8008e38:	6713      	str	r3, [r2, #112]	; 0x70
 8008e3a:	4b6c      	ldr	r3, [pc, #432]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e3e:	4a6b      	ldr	r2, [pc, #428]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	6713      	str	r3, [r2, #112]	; 0x70
 8008e46:	e00b      	b.n	8008e60 <HAL_RCC_OscConfig+0x5e0>
 8008e48:	4b68      	ldr	r3, [pc, #416]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4c:	4a67      	ldr	r2, [pc, #412]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e4e:	f023 0301 	bic.w	r3, r3, #1
 8008e52:	6713      	str	r3, [r2, #112]	; 0x70
 8008e54:	4b65      	ldr	r3, [pc, #404]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e58:	4a64      	ldr	r2, [pc, #400]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e5a:	f023 0304 	bic.w	r3, r3, #4
 8008e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d015      	beq.n	8008e94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e68:	f7fb fd2a 	bl	80048c0 <HAL_GetTick>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e6e:	e00a      	b.n	8008e86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e70:	f7fb fd26 	bl	80048c0 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e14e      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e86:	4b59      	ldr	r3, [pc, #356]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0ee      	beq.n	8008e70 <HAL_RCC_OscConfig+0x5f0>
 8008e92:	e014      	b.n	8008ebe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e94:	f7fb fd14 	bl	80048c0 <HAL_GetTick>
 8008e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e9a:	e00a      	b.n	8008eb2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e9c:	f7fb fd10 	bl	80048c0 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e138      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008eb2:	4b4e      	ldr	r3, [pc, #312]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1ee      	bne.n	8008e9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 812d 	beq.w	8009122 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ec8:	4b48      	ldr	r3, [pc, #288]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed0:	2b18      	cmp	r3, #24
 8008ed2:	f000 80bd 	beq.w	8009050 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	f040 809e 	bne.w	800901c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ee0:	4b42      	ldr	r3, [pc, #264]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a41      	ldr	r2, [pc, #260]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eec:	f7fb fce8 	bl	80048c0 <HAL_GetTick>
 8008ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef4:	f7fb fce4 	bl	80048c0 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e10e      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f06:	4b39      	ldr	r3, [pc, #228]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f0      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f12:	4b36      	ldr	r3, [pc, #216]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f16:	4b37      	ldr	r3, [pc, #220]	; (8008ff4 <HAL_RCC_OscConfig+0x774>)
 8008f18:	4013      	ands	r3, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	430a      	orrs	r2, r1
 8008f26:	4931      	ldr	r1, [pc, #196]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	3b01      	subs	r3, #1
 8008f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	025b      	lsls	r3, r3, #9
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	431a      	orrs	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	3b01      	subs	r3, #1
 8008f48:	041b      	lsls	r3, r3, #16
 8008f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f54:	3b01      	subs	r3, #1
 8008f56:	061b      	lsls	r3, r3, #24
 8008f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f5c:	4923      	ldr	r1, [pc, #140]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f62:	4b22      	ldr	r3, [pc, #136]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f66:	4a21      	ldr	r2, [pc, #132]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f6e:	4b1f      	ldr	r3, [pc, #124]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f72:	4b21      	ldr	r3, [pc, #132]	; (8008ff8 <HAL_RCC_OscConfig+0x778>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f7a:	00d2      	lsls	r2, r2, #3
 8008f7c:	491b      	ldr	r1, [pc, #108]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	f023 020c 	bic.w	r2, r3, #12
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	4917      	ldr	r1, [pc, #92]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f94:	4b15      	ldr	r3, [pc, #84]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f98:	f023 0202 	bic.w	r2, r3, #2
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa0:	4912      	ldr	r1, [pc, #72]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fa6:	4b11      	ldr	r3, [pc, #68]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a10      	ldr	r2, [pc, #64]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb2:	4b0e      	ldr	r3, [pc, #56]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb6:	4a0d      	ldr	r2, [pc, #52]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008fca:	4b08      	ldr	r3, [pc, #32]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4a07      	ldr	r2, [pc, #28]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fd0:	f043 0301 	orr.w	r3, r3, #1
 8008fd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a04      	ldr	r2, [pc, #16]	; (8008fec <HAL_RCC_OscConfig+0x76c>)
 8008fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe2:	f7fb fc6d 	bl	80048c0 <HAL_GetTick>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fe8:	e011      	b.n	800900e <HAL_RCC_OscConfig+0x78e>
 8008fea:	bf00      	nop
 8008fec:	58024400 	.word	0x58024400
 8008ff0:	58024800 	.word	0x58024800
 8008ff4:	fffffc0c 	.word	0xfffffc0c
 8008ff8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ffc:	f7fb fc60 	bl	80048c0 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e08a      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800900e:	4b47      	ldr	r3, [pc, #284]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d0f0      	beq.n	8008ffc <HAL_RCC_OscConfig+0x77c>
 800901a:	e082      	b.n	8009122 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800901c:	4b43      	ldr	r3, [pc, #268]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a42      	ldr	r2, [pc, #264]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009028:	f7fb fc4a 	bl	80048c0 <HAL_GetTick>
 800902c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800902e:	e008      	b.n	8009042 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009030:	f7fb fc46 	bl	80048c0 <HAL_GetTick>
 8009034:	4602      	mov	r2, r0
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d901      	bls.n	8009042 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e070      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009042:	4b3a      	ldr	r3, [pc, #232]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d1f0      	bne.n	8009030 <HAL_RCC_OscConfig+0x7b0>
 800904e:	e068      	b.n	8009122 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009050:	4b36      	ldr	r3, [pc, #216]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009056:	4b35      	ldr	r3, [pc, #212]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	2b01      	cmp	r3, #1
 8009062:	d031      	beq.n	80090c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f003 0203 	and.w	r2, r3, #3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800906e:	429a      	cmp	r2, r3
 8009070:	d12a      	bne.n	80090c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800907e:	429a      	cmp	r2, r3
 8009080:	d122      	bne.n	80090c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800908e:	429a      	cmp	r2, r3
 8009090:	d11a      	bne.n	80090c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	0a5b      	lsrs	r3, r3, #9
 8009096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d111      	bne.n	80090c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	0c1b      	lsrs	r3, r3, #16
 80090a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d108      	bne.n	80090c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	0e1b      	lsrs	r3, r3, #24
 80090ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d001      	beq.n	80090cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	e02b      	b.n	8009124 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80090cc:	4b17      	ldr	r3, [pc, #92]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 80090ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d0:	08db      	lsrs	r3, r3, #3
 80090d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d01f      	beq.n	8009122 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80090e2:	4b12      	ldr	r3, [pc, #72]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	4a11      	ldr	r2, [pc, #68]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 80090e8:	f023 0301 	bic.w	r3, r3, #1
 80090ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090ee:	f7fb fbe7 	bl	80048c0 <HAL_GetTick>
 80090f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80090f4:	bf00      	nop
 80090f6:	f7fb fbe3 	bl	80048c0 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	4293      	cmp	r3, r2
 8009100:	d0f9      	beq.n	80090f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009102:	4b0a      	ldr	r3, [pc, #40]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009106:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <HAL_RCC_OscConfig+0x8b0>)
 8009108:	4013      	ands	r3, r2
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800910e:	00d2      	lsls	r2, r2, #3
 8009110:	4906      	ldr	r1, [pc, #24]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009112:	4313      	orrs	r3, r2
 8009114:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009116:	4b05      	ldr	r3, [pc, #20]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	4a04      	ldr	r2, [pc, #16]	; (800912c <HAL_RCC_OscConfig+0x8ac>)
 800911c:	f043 0301 	orr.w	r3, r3, #1
 8009120:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	4618      	mov	r0, r3
 8009126:	3730      	adds	r7, #48	; 0x30
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	58024400 	.word	0x58024400
 8009130:	ffff0007 	.word	0xffff0007

08009134 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e19c      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009148:	4b8a      	ldr	r3, [pc, #552]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f003 030f 	and.w	r3, r3, #15
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d910      	bls.n	8009178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009156:	4b87      	ldr	r3, [pc, #540]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f023 020f 	bic.w	r2, r3, #15
 800915e:	4985      	ldr	r1, [pc, #532]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	4313      	orrs	r3, r2
 8009164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009166:	4b83      	ldr	r3, [pc, #524]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 030f 	and.w	r3, r3, #15
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d001      	beq.n	8009178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e184      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0304 	and.w	r3, r3, #4
 8009180:	2b00      	cmp	r3, #0
 8009182:	d010      	beq.n	80091a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	691a      	ldr	r2, [r3, #16]
 8009188:	4b7b      	ldr	r3, [pc, #492]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009190:	429a      	cmp	r2, r3
 8009192:	d908      	bls.n	80091a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009194:	4b78      	ldr	r3, [pc, #480]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	4975      	ldr	r1, [pc, #468]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d010      	beq.n	80091d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	695a      	ldr	r2, [r3, #20]
 80091b6:	4b70      	ldr	r3, [pc, #448]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091be:	429a      	cmp	r2, r3
 80091c0:	d908      	bls.n	80091d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80091c2:	4b6d      	ldr	r3, [pc, #436]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	496a      	ldr	r1, [pc, #424]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0310 	and.w	r3, r3, #16
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d010      	beq.n	8009202 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699a      	ldr	r2, [r3, #24]
 80091e4:	4b64      	ldr	r3, [pc, #400]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d908      	bls.n	8009202 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091f0:	4b61      	ldr	r3, [pc, #388]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	495e      	ldr	r1, [pc, #376]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d010      	beq.n	8009230 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69da      	ldr	r2, [r3, #28]
 8009212:	4b59      	ldr	r3, [pc, #356]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800921a:	429a      	cmp	r2, r3
 800921c:	d908      	bls.n	8009230 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800921e:	4b56      	ldr	r3, [pc, #344]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	4953      	ldr	r1, [pc, #332]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 800922c:	4313      	orrs	r3, r2
 800922e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b00      	cmp	r3, #0
 800923a:	d010      	beq.n	800925e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	4b4d      	ldr	r3, [pc, #308]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	429a      	cmp	r2, r3
 800924a:	d908      	bls.n	800925e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800924c:	4b4a      	ldr	r3, [pc, #296]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	f023 020f 	bic.w	r2, r3, #15
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4947      	ldr	r1, [pc, #284]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 800925a:	4313      	orrs	r3, r2
 800925c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	2b00      	cmp	r3, #0
 8009268:	d055      	beq.n	8009316 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800926a:	4b43      	ldr	r3, [pc, #268]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	4940      	ldr	r1, [pc, #256]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009278:	4313      	orrs	r3, r2
 800927a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	2b02      	cmp	r3, #2
 8009282:	d107      	bne.n	8009294 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009284:	4b3c      	ldr	r3, [pc, #240]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d121      	bne.n	80092d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e0f6      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	2b03      	cmp	r3, #3
 800929a:	d107      	bne.n	80092ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800929c:	4b36      	ldr	r3, [pc, #216]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d115      	bne.n	80092d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	e0ea      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d107      	bne.n	80092c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092b4:	4b30      	ldr	r3, [pc, #192]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d109      	bne.n	80092d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e0de      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092c4:	4b2c      	ldr	r3, [pc, #176]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0d6      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092d4:	4b28      	ldr	r3, [pc, #160]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	f023 0207 	bic.w	r2, r3, #7
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	4925      	ldr	r1, [pc, #148]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e6:	f7fb faeb 	bl	80048c0 <HAL_GetTick>
 80092ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092ec:	e00a      	b.n	8009304 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092ee:	f7fb fae7 	bl	80048c0 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d901      	bls.n	8009304 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e0be      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009304:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	429a      	cmp	r2, r3
 8009314:	d1eb      	bne.n	80092ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d010      	beq.n	8009344 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	4b14      	ldr	r3, [pc, #80]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	f003 030f 	and.w	r3, r3, #15
 800932e:	429a      	cmp	r2, r3
 8009330:	d208      	bcs.n	8009344 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009332:	4b11      	ldr	r3, [pc, #68]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009334:	699b      	ldr	r3, [r3, #24]
 8009336:	f023 020f 	bic.w	r2, r3, #15
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	490e      	ldr	r1, [pc, #56]	; (8009378 <HAL_RCC_ClockConfig+0x244>)
 8009340:	4313      	orrs	r3, r2
 8009342:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009344:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	429a      	cmp	r2, r3
 8009350:	d214      	bcs.n	800937c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009352:	4b08      	ldr	r3, [pc, #32]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f023 020f 	bic.w	r2, r3, #15
 800935a:	4906      	ldr	r1, [pc, #24]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	4313      	orrs	r3, r2
 8009360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009362:	4b04      	ldr	r3, [pc, #16]	; (8009374 <HAL_RCC_ClockConfig+0x240>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 030f 	and.w	r3, r3, #15
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	429a      	cmp	r2, r3
 800936e:	d005      	beq.n	800937c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e086      	b.n	8009482 <HAL_RCC_ClockConfig+0x34e>
 8009374:	52002000 	.word	0x52002000
 8009378:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d010      	beq.n	80093aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691a      	ldr	r2, [r3, #16]
 800938c:	4b3f      	ldr	r3, [pc, #252]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009394:	429a      	cmp	r2, r3
 8009396:	d208      	bcs.n	80093aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009398:	4b3c      	ldr	r3, [pc, #240]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	4939      	ldr	r1, [pc, #228]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 80093a6:	4313      	orrs	r3, r2
 80093a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0308 	and.w	r3, r3, #8
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d010      	beq.n	80093d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695a      	ldr	r2, [r3, #20]
 80093ba:	4b34      	ldr	r3, [pc, #208]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d208      	bcs.n	80093d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093c6:	4b31      	ldr	r3, [pc, #196]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 80093c8:	69db      	ldr	r3, [r3, #28]
 80093ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	492e      	ldr	r1, [pc, #184]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 0310 	and.w	r3, r3, #16
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d010      	beq.n	8009406 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	699a      	ldr	r2, [r3, #24]
 80093e8:	4b28      	ldr	r3, [pc, #160]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 80093ea:	69db      	ldr	r3, [r3, #28]
 80093ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d208      	bcs.n	8009406 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093f4:	4b25      	ldr	r3, [pc, #148]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 80093f6:	69db      	ldr	r3, [r3, #28]
 80093f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	4922      	ldr	r1, [pc, #136]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 8009402:	4313      	orrs	r3, r2
 8009404:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d010      	beq.n	8009434 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69da      	ldr	r2, [r3, #28]
 8009416:	4b1d      	ldr	r3, [pc, #116]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800941e:	429a      	cmp	r2, r3
 8009420:	d208      	bcs.n	8009434 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009422:	4b1a      	ldr	r3, [pc, #104]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	4917      	ldr	r1, [pc, #92]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 8009430:	4313      	orrs	r3, r2
 8009432:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009434:	f000 f834 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 8009438:	4602      	mov	r2, r0
 800943a:	4b14      	ldr	r3, [pc, #80]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 800943c:	699b      	ldr	r3, [r3, #24]
 800943e:	0a1b      	lsrs	r3, r3, #8
 8009440:	f003 030f 	and.w	r3, r3, #15
 8009444:	4912      	ldr	r1, [pc, #72]	; (8009490 <HAL_RCC_ClockConfig+0x35c>)
 8009446:	5ccb      	ldrb	r3, [r1, r3]
 8009448:	f003 031f 	and.w	r3, r3, #31
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
 8009450:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009452:	4b0e      	ldr	r3, [pc, #56]	; (800948c <HAL_RCC_ClockConfig+0x358>)
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	f003 030f 	and.w	r3, r3, #15
 800945a:	4a0d      	ldr	r2, [pc, #52]	; (8009490 <HAL_RCC_ClockConfig+0x35c>)
 800945c:	5cd3      	ldrb	r3, [r2, r3]
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	fa22 f303 	lsr.w	r3, r2, r3
 8009468:	4a0a      	ldr	r2, [pc, #40]	; (8009494 <HAL_RCC_ClockConfig+0x360>)
 800946a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800946c:	4a0a      	ldr	r2, [pc, #40]	; (8009498 <HAL_RCC_ClockConfig+0x364>)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <HAL_RCC_ClockConfig+0x368>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f7fb f9d8 	bl	800482c <HAL_InitTick>
 800947c:	4603      	mov	r3, r0
 800947e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009480:	7bfb      	ldrb	r3, [r7, #15]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	58024400 	.word	0x58024400
 8009490:	08014500 	.word	0x08014500
 8009494:	24000014 	.word	0x24000014
 8009498:	24000010 	.word	0x24000010
 800949c:	2400005c 	.word	0x2400005c

080094a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b089      	sub	sp, #36	; 0x24
 80094a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094a6:	4bb3      	ldr	r3, [pc, #716]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094ae:	2b18      	cmp	r3, #24
 80094b0:	f200 8155 	bhi.w	800975e <HAL_RCC_GetSysClockFreq+0x2be>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	08009521 	.word	0x08009521
 80094c0:	0800975f 	.word	0x0800975f
 80094c4:	0800975f 	.word	0x0800975f
 80094c8:	0800975f 	.word	0x0800975f
 80094cc:	0800975f 	.word	0x0800975f
 80094d0:	0800975f 	.word	0x0800975f
 80094d4:	0800975f 	.word	0x0800975f
 80094d8:	0800975f 	.word	0x0800975f
 80094dc:	08009547 	.word	0x08009547
 80094e0:	0800975f 	.word	0x0800975f
 80094e4:	0800975f 	.word	0x0800975f
 80094e8:	0800975f 	.word	0x0800975f
 80094ec:	0800975f 	.word	0x0800975f
 80094f0:	0800975f 	.word	0x0800975f
 80094f4:	0800975f 	.word	0x0800975f
 80094f8:	0800975f 	.word	0x0800975f
 80094fc:	0800954d 	.word	0x0800954d
 8009500:	0800975f 	.word	0x0800975f
 8009504:	0800975f 	.word	0x0800975f
 8009508:	0800975f 	.word	0x0800975f
 800950c:	0800975f 	.word	0x0800975f
 8009510:	0800975f 	.word	0x0800975f
 8009514:	0800975f 	.word	0x0800975f
 8009518:	0800975f 	.word	0x0800975f
 800951c:	08009553 	.word	0x08009553
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009520:	4b94      	ldr	r3, [pc, #592]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0320 	and.w	r3, r3, #32
 8009528:	2b00      	cmp	r3, #0
 800952a:	d009      	beq.n	8009540 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800952c:	4b91      	ldr	r3, [pc, #580]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	08db      	lsrs	r3, r3, #3
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	4a90      	ldr	r2, [pc, #576]	; (8009778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
 800953c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800953e:	e111      	b.n	8009764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009540:	4b8d      	ldr	r3, [pc, #564]	; (8009778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009542:	61bb      	str	r3, [r7, #24]
      break;
 8009544:	e10e      	b.n	8009764 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009546:	4b8d      	ldr	r3, [pc, #564]	; (800977c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009548:	61bb      	str	r3, [r7, #24]
      break;
 800954a:	e10b      	b.n	8009764 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800954c:	4b8c      	ldr	r3, [pc, #560]	; (8009780 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800954e:	61bb      	str	r3, [r7, #24]
      break;
 8009550:	e108      	b.n	8009764 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009552:	4b88      	ldr	r3, [pc, #544]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800955c:	4b85      	ldr	r3, [pc, #532]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	091b      	lsrs	r3, r3, #4
 8009562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009566:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009568:	4b82      	ldr	r3, [pc, #520]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009572:	4b80      	ldr	r3, [pc, #512]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009576:	08db      	lsrs	r3, r3, #3
 8009578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	fb02 f303 	mul.w	r3, r2, r3
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f000 80e1 	beq.w	8009758 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b02      	cmp	r3, #2
 800959a:	f000 8083 	beq.w	80096a4 <HAL_RCC_GetSysClockFreq+0x204>
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	f200 80a1 	bhi.w	80096e8 <HAL_RCC_GetSysClockFreq+0x248>
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <HAL_RCC_GetSysClockFreq+0x114>
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d056      	beq.n	8009660 <HAL_RCC_GetSysClockFreq+0x1c0>
 80095b2:	e099      	b.n	80096e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b4:	4b6f      	ldr	r3, [pc, #444]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0320 	and.w	r3, r3, #32
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d02d      	beq.n	800961c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095c0:	4b6c      	ldr	r3, [pc, #432]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	08db      	lsrs	r3, r3, #3
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	4a6b      	ldr	r2, [pc, #428]	; (8009778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095cc:	fa22 f303 	lsr.w	r3, r2, r3
 80095d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ea:	4b62      	ldr	r3, [pc, #392]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80095fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800960a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800960e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009616:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800961a:	e087      	b.n	800972c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009626:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009788 <HAL_RCC_GetSysClockFreq+0x2e8>
 800962a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800962e:	4b51      	ldr	r3, [pc, #324]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009642:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800964a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800964e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800965a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800965e:	e065      	b.n	800972c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800978c <HAL_RCC_GetSysClockFreq+0x2ec>
 800966e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009672:	4b40      	ldr	r3, [pc, #256]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009682:	ed97 6a02 	vldr	s12, [r7, #8]
 8009686:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009784 <HAL_RCC_GetSysClockFreq+0x2e4>
 800968a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800968e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800969e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096a2:	e043      	b.n	800972c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009790 <HAL_RCC_GetSysClockFreq+0x2f0>
 80096b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b6:	4b2f      	ldr	r3, [pc, #188]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80096ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009784 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096e6:	e021      	b.n	800972c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800978c <HAL_RCC_GetSysClockFreq+0x2ec>
 80096f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fa:	4b1e      	ldr	r3, [pc, #120]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970a:	ed97 6a02 	vldr	s12, [r7, #8]
 800970e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800971e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800972a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800972c:	4b11      	ldr	r3, [pc, #68]	; (8009774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800972e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009730:	0a5b      	lsrs	r3, r3, #9
 8009732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009736:	3301      	adds	r3, #1
 8009738:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	ee07 3a90 	vmov	s15, r3
 8009740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009744:	edd7 6a07 	vldr	s13, [r7, #28]
 8009748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800974c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009750:	ee17 3a90 	vmov	r3, s15
 8009754:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009756:	e005      	b.n	8009764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009758:	2300      	movs	r3, #0
 800975a:	61bb      	str	r3, [r7, #24]
      break;
 800975c:	e002      	b.n	8009764 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800975e:	4b07      	ldr	r3, [pc, #28]	; (800977c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009760:	61bb      	str	r3, [r7, #24]
      break;
 8009762:	bf00      	nop
  }

  return sysclockfreq;
 8009764:	69bb      	ldr	r3, [r7, #24]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3724      	adds	r7, #36	; 0x24
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	58024400 	.word	0x58024400
 8009778:	03d09000 	.word	0x03d09000
 800977c:	003d0900 	.word	0x003d0900
 8009780:	017d7840 	.word	0x017d7840
 8009784:	46000000 	.word	0x46000000
 8009788:	4c742400 	.word	0x4c742400
 800978c:	4a742400 	.word	0x4a742400
 8009790:	4bbebc20 	.word	0x4bbebc20

08009794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800979a:	f7ff fe81 	bl	80094a0 <HAL_RCC_GetSysClockFreq>
 800979e:	4602      	mov	r2, r0
 80097a0:	4b10      	ldr	r3, [pc, #64]	; (80097e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	490f      	ldr	r1, [pc, #60]	; (80097e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80097ac:	5ccb      	ldrb	r3, [r1, r3]
 80097ae:	f003 031f 	and.w	r3, r3, #31
 80097b2:	fa22 f303 	lsr.w	r3, r2, r3
 80097b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097b8:	4b0a      	ldr	r3, [pc, #40]	; (80097e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f003 030f 	and.w	r3, r3, #15
 80097c0:	4a09      	ldr	r2, [pc, #36]	; (80097e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80097c2:	5cd3      	ldrb	r3, [r2, r3]
 80097c4:	f003 031f 	and.w	r3, r3, #31
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	fa22 f303 	lsr.w	r3, r2, r3
 80097ce:	4a07      	ldr	r2, [pc, #28]	; (80097ec <HAL_RCC_GetHCLKFreq+0x58>)
 80097d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097d2:	4a07      	ldr	r2, [pc, #28]	; (80097f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <HAL_RCC_GetHCLKFreq+0x58>)
 80097da:	681b      	ldr	r3, [r3, #0]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	58024400 	.word	0x58024400
 80097e8:	08014500 	.word	0x08014500
 80097ec:	24000014 	.word	0x24000014
 80097f0:	24000010 	.word	0x24000010

080097f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097f8:	f7ff ffcc 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 80097fc:	4602      	mov	r2, r0
 80097fe:	4b06      	ldr	r3, [pc, #24]	; (8009818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	091b      	lsrs	r3, r3, #4
 8009804:	f003 0307 	and.w	r3, r3, #7
 8009808:	4904      	ldr	r1, [pc, #16]	; (800981c <HAL_RCC_GetPCLK1Freq+0x28>)
 800980a:	5ccb      	ldrb	r3, [r1, r3]
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009814:	4618      	mov	r0, r3
 8009816:	bd80      	pop	{r7, pc}
 8009818:	58024400 	.word	0x58024400
 800981c:	08014500 	.word	0x08014500

08009820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009824:	f7ff ffb6 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 8009828:	4602      	mov	r2, r0
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	0a1b      	lsrs	r3, r3, #8
 8009830:	f003 0307 	and.w	r3, r3, #7
 8009834:	4904      	ldr	r1, [pc, #16]	; (8009848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009836:	5ccb      	ldrb	r3, [r1, r3]
 8009838:	f003 031f 	and.w	r3, r3, #31
 800983c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009840:	4618      	mov	r0, r3
 8009842:	bd80      	pop	{r7, pc}
 8009844:	58024400 	.word	0x58024400
 8009848:	08014500 	.word	0x08014500

0800984c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800984c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009850:	b0ca      	sub	sp, #296	; 0x128
 8009852:	af00      	add	r7, sp, #0
 8009854:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009858:	2300      	movs	r3, #0
 800985a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800985e:	2300      	movs	r3, #0
 8009860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009870:	2500      	movs	r5, #0
 8009872:	ea54 0305 	orrs.w	r3, r4, r5
 8009876:	d049      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800987e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009882:	d02f      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009884:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009888:	d828      	bhi.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800988a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800988e:	d01a      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009894:	d822      	bhi.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800989a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800989e:	d007      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80098a0:	e01c      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098a2:	4bb8      	ldr	r3, [pc, #736]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	4ab7      	ldr	r2, [pc, #732]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098ae:	e01a      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b4:	3308      	adds	r3, #8
 80098b6:	2102      	movs	r1, #2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 fc8f 	bl	800b1dc <RCCEx_PLL2_Config>
 80098be:	4603      	mov	r3, r0
 80098c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098c4:	e00f      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ca:	3328      	adds	r3, #40	; 0x28
 80098cc:	2102      	movs	r1, #2
 80098ce:	4618      	mov	r0, r3
 80098d0:	f001 fd36 	bl	800b340 <RCCEx_PLL3_Config>
 80098d4:	4603      	mov	r3, r0
 80098d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098da:	e004      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098e2:	e000      	b.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098ee:	4ba5      	ldr	r3, [pc, #660]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098fc:	4aa1      	ldr	r2, [pc, #644]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098fe:	430b      	orrs	r3, r1
 8009900:	6513      	str	r3, [r2, #80]	; 0x50
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009908:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009918:	f04f 0900 	mov.w	r9, #0
 800991c:	ea58 0309 	orrs.w	r3, r8, r9
 8009920:	d047      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009928:	2b04      	cmp	r3, #4
 800992a:	d82a      	bhi.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800992c:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800992e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009932:	bf00      	nop
 8009934:	08009949 	.word	0x08009949
 8009938:	08009957 	.word	0x08009957
 800993c:	0800996d 	.word	0x0800996d
 8009940:	0800998b 	.word	0x0800998b
 8009944:	0800998b 	.word	0x0800998b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009948:	4b8e      	ldr	r3, [pc, #568]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	4a8d      	ldr	r2, [pc, #564]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800994e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009954:	e01a      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995a:	3308      	adds	r3, #8
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f001 fc3c 	bl	800b1dc <RCCEx_PLL2_Config>
 8009964:	4603      	mov	r3, r0
 8009966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800996a:	e00f      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800996c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009970:	3328      	adds	r3, #40	; 0x28
 8009972:	2100      	movs	r1, #0
 8009974:	4618      	mov	r0, r3
 8009976:	f001 fce3 	bl	800b340 <RCCEx_PLL3_Config>
 800997a:	4603      	mov	r3, r0
 800997c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009980:	e004      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009988:	e000      	b.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800998a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800998c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009994:	4b7b      	ldr	r3, [pc, #492]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009998:	f023 0107 	bic.w	r1, r3, #7
 800999c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099a2:	4a78      	ldr	r2, [pc, #480]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6513      	str	r3, [r2, #80]	; 0x50
 80099a8:	e003      	b.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80099be:	f04f 0b00 	mov.w	fp, #0
 80099c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80099c6:	d04c      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d2:	d030      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80099d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d8:	d829      	bhi.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099da:	2bc0      	cmp	r3, #192	; 0xc0
 80099dc:	d02d      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80099de:	2bc0      	cmp	r3, #192	; 0xc0
 80099e0:	d825      	bhi.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099e2:	2b80      	cmp	r3, #128	; 0x80
 80099e4:	d018      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80099e6:	2b80      	cmp	r3, #128	; 0x80
 80099e8:	d821      	bhi.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d002      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80099ee:	2b40      	cmp	r3, #64	; 0x40
 80099f0:	d007      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80099f2:	e01c      	b.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f4:	4b63      	ldr	r3, [pc, #396]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	4a62      	ldr	r2, [pc, #392]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a00:	e01c      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a06:	3308      	adds	r3, #8
 8009a08:	2100      	movs	r1, #0
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f001 fbe6 	bl	800b1dc <RCCEx_PLL2_Config>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a16:	e011      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a1c:	3328      	adds	r3, #40	; 0x28
 8009a1e:	2100      	movs	r1, #0
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fc8d 	bl	800b340 <RCCEx_PLL3_Config>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a2c:	e006      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a34:	e002      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a36:	bf00      	nop
 8009a38:	e000      	b.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a44:	4b4f      	ldr	r3, [pc, #316]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a48:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a52:	4a4c      	ldr	r2, [pc, #304]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a54:	430b      	orrs	r3, r1
 8009a56:	6513      	str	r3, [r2, #80]	; 0x50
 8009a58:	e003      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a72:	2300      	movs	r3, #0
 8009a74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	d053      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a8e:	d035      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a94:	d82e      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a9a:	d031      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009aa0:	d828      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aa6:	d01a      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aac:	d822      	bhi.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009ab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ab6:	d007      	beq.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009ab8:	e01c      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aba:	4b32      	ldr	r3, [pc, #200]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	4a31      	ldr	r2, [pc, #196]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ac6:	e01c      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009acc:	3308      	adds	r3, #8
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 fb83 	bl	800b1dc <RCCEx_PLL2_Config>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009adc:	e011      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ae2:	3328      	adds	r3, #40	; 0x28
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fc2a 	bl	800b340 <RCCEx_PLL3_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009af2:	e006      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009afa:	e002      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10b      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b0a:	4b1e      	ldr	r3, [pc, #120]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b1a:	4a1a      	ldr	r2, [pc, #104]	; (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b1c:	430b      	orrs	r3, r1
 8009b1e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b20:	e003      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009b44:	460b      	mov	r3, r1
 8009b46:	4313      	orrs	r3, r2
 8009b48:	d056      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b56:	d038      	beq.n	8009bca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b5c:	d831      	bhi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b62:	d034      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b68:	d82b      	bhi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b6e:	d01d      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b74:	d825      	bhi.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d006      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b7e:	d00a      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b80:	e01f      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b82:	bf00      	nop
 8009b84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b88:	4ba2      	ldr	r3, [pc, #648]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8c:	4aa1      	ldr	r2, [pc, #644]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b94:	e01c      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 fb1c 	bl	800b1dc <RCCEx_PLL2_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009baa:	e011      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb0:	3328      	adds	r3, #40	; 0x28
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 fbc3 	bl	800b340 <RCCEx_PLL3_Config>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009bc0:	e006      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bc8:	e002      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bca:	bf00      	nop
 8009bcc:	e000      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bd8:	4b8e      	ldr	r3, [pc, #568]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bdc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009be8:	4a8a      	ldr	r2, [pc, #552]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bea:	430b      	orrs	r3, r1
 8009bec:	6593      	str	r3, [r2, #88]	; 0x58
 8009bee:	e003      	b.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009c04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009c0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d03a      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c1e:	2b30      	cmp	r3, #48	; 0x30
 8009c20:	d01f      	beq.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009c22:	2b30      	cmp	r3, #48	; 0x30
 8009c24:	d819      	bhi.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	d00c      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c2a:	2b20      	cmp	r3, #32
 8009c2c:	d815      	bhi.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d019      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c32:	2b10      	cmp	r3, #16
 8009c34:	d111      	bne.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c36:	4b77      	ldr	r3, [pc, #476]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	4a76      	ldr	r2, [pc, #472]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c42:	e011      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c48:	3308      	adds	r3, #8
 8009c4a:	2102      	movs	r1, #2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f001 fac5 	bl	800b1dc <RCCEx_PLL2_Config>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c58:	e006      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c60:	e002      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c62:	bf00      	nop
 8009c64:	e000      	b.n	8009c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c70:	4b68      	ldr	r3, [pc, #416]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c74:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c7e:	4a65      	ldr	r2, [pc, #404]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c80:	430b      	orrs	r3, r1
 8009c82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c84:	e003      	b.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ca4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4313      	orrs	r3, r2
 8009cac:	d051      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cb8:	d035      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cbe:	d82e      	bhi.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cc4:	d031      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009cc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cca:	d828      	bhi.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cd0:	d01a      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cd6:	d822      	bhi.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce0:	d007      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009ce2:	e01c      	b.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce4:	4b4b      	ldr	r3, [pc, #300]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce8:	4a4a      	ldr	r2, [pc, #296]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cf0:	e01c      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f001 fa6e 	bl	800b1dc <RCCEx_PLL2_Config>
 8009d00:	4603      	mov	r3, r0
 8009d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d06:	e011      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0c:	3328      	adds	r3, #40	; 0x28
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 fb15 	bl	800b340 <RCCEx_PLL3_Config>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d1c:	e006      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d24:	e002      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d26:	bf00      	nop
 8009d28:	e000      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d34:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d38:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d42:	4a34      	ldr	r2, [pc, #208]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d44:	430b      	orrs	r3, r1
 8009d46:	6513      	str	r3, [r2, #80]	; 0x50
 8009d48:	e003      	b.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d62:	2300      	movs	r3, #0
 8009d64:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	d056      	beq.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d7c:	d033      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d82:	d82c      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d88:	d02f      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d8e:	d826      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d94:	d02b      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d9a:	d820      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009da0:	d012      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009da6:	d81a      	bhi.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d022      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009db0:	d115      	bne.n	8009dde <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	3308      	adds	r3, #8
 8009db8:	2101      	movs	r1, #1
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 fa0e 	bl	800b1dc <RCCEx_PLL2_Config>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009dc6:	e015      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dcc:	3328      	adds	r3, #40	; 0x28
 8009dce:	2101      	movs	r1, #1
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 fab5 	bl	800b340 <RCCEx_PLL3_Config>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ddc:	e00a      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009de4:	e006      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009de6:	bf00      	nop
 8009de8:	e004      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dea:	bf00      	nop
 8009dec:	e002      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dee:	bf00      	nop
 8009df0:	e000      	b.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10d      	bne.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009dfc:	4b05      	ldr	r3, [pc, #20]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e00:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e0a:	4a02      	ldr	r2, [pc, #8]	; (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009e0c:	430b      	orrs	r3, r1
 8009e0e:	6513      	str	r3, [r2, #80]	; 0x50
 8009e10:	e006      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009e12:	bf00      	nop
 8009e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e30:	2300      	movs	r3, #0
 8009e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	d055      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e4c:	d033      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e52:	d82c      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e58:	d02f      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e5e:	d826      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e64:	d02b      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e6a:	d820      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e70:	d012      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e76:	d81a      	bhi.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d022      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e80:	d115      	bne.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	3308      	adds	r3, #8
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 f9a6 	bl	800b1dc <RCCEx_PLL2_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e96:	e015      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9c:	3328      	adds	r3, #40	; 0x28
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fa4d 	bl	800b340 <RCCEx_PLL3_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009eac:	e00a      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009eb4:	e006      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009eb6:	bf00      	nop
 8009eb8:	e004      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009eba:	bf00      	nop
 8009ebc:	e002      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ebe:	bf00      	nop
 8009ec0:	e000      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ecc:	4ba3      	ldr	r3, [pc, #652]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009edc:	4a9f      	ldr	r2, [pc, #636]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ee2:	e003      	b.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ee8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009efc:	2300      	movs	r3, #0
 8009efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f06:	460b      	mov	r3, r1
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	d037      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f16:	d00e      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f1c:	d816      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d018      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f26:	d111      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f28:	4b8c      	ldr	r3, [pc, #560]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	4a8b      	ldr	r2, [pc, #556]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f34:	e00f      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3a:	3308      	adds	r3, #8
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 f94c 	bl	800b1dc <RCCEx_PLL2_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f4a:	e004      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f52:	e000      	b.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10a      	bne.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f5e:	4b7f      	ldr	r3, [pc, #508]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6c:	4a7b      	ldr	r2, [pc, #492]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	6513      	str	r3, [r2, #80]	; 0x50
 8009f72:	e003      	b.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	d039      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d81c      	bhi.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009fa6:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	08009fe9 	.word	0x08009fe9
 8009fb0:	08009fbd 	.word	0x08009fbd
 8009fb4:	08009fcb 	.word	0x08009fcb
 8009fb8:	08009fe9 	.word	0x08009fe9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fbc:	4b67      	ldr	r3, [pc, #412]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc0:	4a66      	ldr	r2, [pc, #408]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fc8:	e00f      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fce:	3308      	adds	r3, #8
 8009fd0:	2102      	movs	r1, #2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f001 f902 	bl	800b1dc <RCCEx_PLL2_Config>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fde:	e004      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fe6:	e000      	b.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ff2:	4b5a      	ldr	r3, [pc, #360]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff6:	f023 0103 	bic.w	r1, r3, #3
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a000:	4a56      	ldr	r2, [pc, #344]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a002:	430b      	orrs	r3, r1
 800a004:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a006:	e003      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a00c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a01c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a020:	2300      	movs	r3, #0
 800a022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a026:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a02a:	460b      	mov	r3, r1
 800a02c:	4313      	orrs	r3, r2
 800a02e:	f000 809f 	beq.w	800a170 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a032:	4b4b      	ldr	r3, [pc, #300]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a4a      	ldr	r2, [pc, #296]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a03c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a03e:	f7fa fc3f 	bl	80048c0 <HAL_GetTick>
 800a042:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a046:	e00b      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a048:	f7fa fc3a 	bl	80048c0 <HAL_GetTick>
 800a04c:	4602      	mov	r2, r0
 800a04e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	2b64      	cmp	r3, #100	; 0x64
 800a056:	d903      	bls.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a05e:	e005      	b.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a060:	4b3f      	ldr	r3, [pc, #252]	; (800a160 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0ed      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a06c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a070:	2b00      	cmp	r3, #0
 800a072:	d179      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a074:	4b39      	ldr	r3, [pc, #228]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a076:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a080:	4053      	eors	r3, r2
 800a082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a086:	2b00      	cmp	r3, #0
 800a088:	d015      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a08a:	4b34      	ldr	r3, [pc, #208]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a092:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a096:	4b31      	ldr	r3, [pc, #196]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09a:	4a30      	ldr	r2, [pc, #192]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a09c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a0a2:	4b2e      	ldr	r3, [pc, #184]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a6:	4a2d      	ldr	r2, [pc, #180]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a0ae:	4a2b      	ldr	r2, [pc, #172]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0c2:	d118      	bne.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c4:	f7fa fbfc 	bl	80048c0 <HAL_GetTick>
 800a0c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0cc:	e00d      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0ce:	f7fa fbf7 	bl	80048c0 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0d8:	1ad2      	subs	r2, r2, r3
 800a0da:	f241 3388 	movw	r3, #5000	; 0x1388
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a0e8:	e005      	b.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0ea:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	f003 0302 	and.w	r3, r3, #2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d0eb      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d129      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a10a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a10e:	d10e      	bne.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a110:	4b12      	ldr	r3, [pc, #72]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a120:	091a      	lsrs	r2, r3, #4
 800a122:	4b10      	ldr	r3, [pc, #64]	; (800a164 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a124:	4013      	ands	r3, r2
 800a126:	4a0d      	ldr	r2, [pc, #52]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a128:	430b      	orrs	r3, r1
 800a12a:	6113      	str	r3, [r2, #16]
 800a12c:	e005      	b.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	4a0a      	ldr	r2, [pc, #40]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a134:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a138:	6113      	str	r3, [r2, #16]
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a13c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a14a:	4a04      	ldr	r2, [pc, #16]	; (800a15c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a14c:	430b      	orrs	r3, r1
 800a14e:	6713      	str	r3, [r2, #112]	; 0x70
 800a150:	e00e      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a156:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a15a:	e009      	b.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a15c:	58024400 	.word	0x58024400
 800a160:	58024800 	.word	0x58024800
 800a164:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a16c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f002 0301 	and.w	r3, r2, #1
 800a17c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a180:	2300      	movs	r3, #0
 800a182:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a186:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4313      	orrs	r3, r2
 800a18e:	f000 8089 	beq.w	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a198:	2b28      	cmp	r3, #40	; 0x28
 800a19a:	d86b      	bhi.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a19c:	a201      	add	r2, pc, #4	; (adr r2, 800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a27d 	.word	0x0800a27d
 800a1a8:	0800a275 	.word	0x0800a275
 800a1ac:	0800a275 	.word	0x0800a275
 800a1b0:	0800a275 	.word	0x0800a275
 800a1b4:	0800a275 	.word	0x0800a275
 800a1b8:	0800a275 	.word	0x0800a275
 800a1bc:	0800a275 	.word	0x0800a275
 800a1c0:	0800a275 	.word	0x0800a275
 800a1c4:	0800a249 	.word	0x0800a249
 800a1c8:	0800a275 	.word	0x0800a275
 800a1cc:	0800a275 	.word	0x0800a275
 800a1d0:	0800a275 	.word	0x0800a275
 800a1d4:	0800a275 	.word	0x0800a275
 800a1d8:	0800a275 	.word	0x0800a275
 800a1dc:	0800a275 	.word	0x0800a275
 800a1e0:	0800a275 	.word	0x0800a275
 800a1e4:	0800a25f 	.word	0x0800a25f
 800a1e8:	0800a275 	.word	0x0800a275
 800a1ec:	0800a275 	.word	0x0800a275
 800a1f0:	0800a275 	.word	0x0800a275
 800a1f4:	0800a275 	.word	0x0800a275
 800a1f8:	0800a275 	.word	0x0800a275
 800a1fc:	0800a275 	.word	0x0800a275
 800a200:	0800a275 	.word	0x0800a275
 800a204:	0800a27d 	.word	0x0800a27d
 800a208:	0800a275 	.word	0x0800a275
 800a20c:	0800a275 	.word	0x0800a275
 800a210:	0800a275 	.word	0x0800a275
 800a214:	0800a275 	.word	0x0800a275
 800a218:	0800a275 	.word	0x0800a275
 800a21c:	0800a275 	.word	0x0800a275
 800a220:	0800a275 	.word	0x0800a275
 800a224:	0800a27d 	.word	0x0800a27d
 800a228:	0800a275 	.word	0x0800a275
 800a22c:	0800a275 	.word	0x0800a275
 800a230:	0800a275 	.word	0x0800a275
 800a234:	0800a275 	.word	0x0800a275
 800a238:	0800a275 	.word	0x0800a275
 800a23c:	0800a275 	.word	0x0800a275
 800a240:	0800a275 	.word	0x0800a275
 800a244:	0800a27d 	.word	0x0800a27d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24c:	3308      	adds	r3, #8
 800a24e:	2101      	movs	r1, #1
 800a250:	4618      	mov	r0, r3
 800a252:	f000 ffc3 	bl	800b1dc <RCCEx_PLL2_Config>
 800a256:	4603      	mov	r3, r0
 800a258:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a25c:	e00f      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a262:	3328      	adds	r3, #40	; 0x28
 800a264:	2101      	movs	r1, #1
 800a266:	4618      	mov	r0, r3
 800a268:	f001 f86a 	bl	800b340 <RCCEx_PLL3_Config>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a272:	e004      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a27a:	e000      	b.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a27c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a27e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10a      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a286:	4bbf      	ldr	r3, [pc, #764]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a28e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a294:	4abb      	ldr	r2, [pc, #748]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a296:	430b      	orrs	r3, r1
 800a298:	6553      	str	r3, [r2, #84]	; 0x54
 800a29a:	e003      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f002 0302 	and.w	r3, r2, #2
 800a2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a2ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a2be:	460b      	mov	r3, r1
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	d041      	beq.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ca:	2b05      	cmp	r3, #5
 800a2cc:	d824      	bhi.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a2ce:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a321 	.word	0x0800a321
 800a2d8:	0800a2ed 	.word	0x0800a2ed
 800a2dc:	0800a303 	.word	0x0800a303
 800a2e0:	0800a321 	.word	0x0800a321
 800a2e4:	0800a321 	.word	0x0800a321
 800a2e8:	0800a321 	.word	0x0800a321
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 ff71 	bl	800b1dc <RCCEx_PLL2_Config>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a300:	e00f      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a306:	3328      	adds	r3, #40	; 0x28
 800a308:	2101      	movs	r1, #1
 800a30a:	4618      	mov	r0, r3
 800a30c:	f001 f818 	bl	800b340 <RCCEx_PLL3_Config>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a316:	e004      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a31e:	e000      	b.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a326:	2b00      	cmp	r3, #0
 800a328:	d10a      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a32a:	4b96      	ldr	r3, [pc, #600]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32e:	f023 0107 	bic.w	r1, r3, #7
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a338:	4a92      	ldr	r2, [pc, #584]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a33a:	430b      	orrs	r3, r1
 800a33c:	6553      	str	r3, [r2, #84]	; 0x54
 800a33e:	e003      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a340:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a344:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	f002 0304 	and.w	r3, r2, #4
 800a354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a35e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a362:	460b      	mov	r3, r1
 800a364:	4313      	orrs	r3, r2
 800a366:	d044      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a370:	2b05      	cmp	r3, #5
 800a372:	d825      	bhi.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a3c9 	.word	0x0800a3c9
 800a380:	0800a395 	.word	0x0800a395
 800a384:	0800a3ab 	.word	0x0800a3ab
 800a388:	0800a3c9 	.word	0x0800a3c9
 800a38c:	0800a3c9 	.word	0x0800a3c9
 800a390:	0800a3c9 	.word	0x0800a3c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a398:	3308      	adds	r3, #8
 800a39a:	2101      	movs	r1, #1
 800a39c:	4618      	mov	r0, r3
 800a39e:	f000 ff1d 	bl	800b1dc <RCCEx_PLL2_Config>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a3a8:	e00f      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ae:	3328      	adds	r3, #40	; 0x28
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 ffc4 	bl	800b340 <RCCEx_PLL3_Config>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a3be:	e004      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3c6:	e000      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a3c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10b      	bne.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3d2:	4b6c      	ldr	r3, [pc, #432]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d6:	f023 0107 	bic.w	r1, r3, #7
 800a3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3e2:	4a68      	ldr	r2, [pc, #416]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3e4:	430b      	orrs	r3, r1
 800a3e6:	6593      	str	r3, [r2, #88]	; 0x58
 800a3e8:	e003      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	f002 0320 	and.w	r3, r2, #32
 800a3fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a402:	2300      	movs	r3, #0
 800a404:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a40c:	460b      	mov	r3, r1
 800a40e:	4313      	orrs	r3, r2
 800a410:	d055      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a41e:	d033      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a424:	d82c      	bhi.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a42a:	d02f      	beq.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a42c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a430:	d826      	bhi.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a432:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a436:	d02b      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a43c:	d820      	bhi.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a442:	d012      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a448:	d81a      	bhi.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d022      	beq.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a44e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a452:	d115      	bne.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a458:	3308      	adds	r3, #8
 800a45a:	2100      	movs	r1, #0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 febd 	bl	800b1dc <RCCEx_PLL2_Config>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a468:	e015      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46e:	3328      	adds	r3, #40	; 0x28
 800a470:	2102      	movs	r1, #2
 800a472:	4618      	mov	r0, r3
 800a474:	f000 ff64 	bl	800b340 <RCCEx_PLL3_Config>
 800a478:	4603      	mov	r3, r0
 800a47a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a47e:	e00a      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a486:	e006      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a488:	bf00      	nop
 800a48a:	e004      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a48c:	bf00      	nop
 800a48e:	e002      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a490:	bf00      	nop
 800a492:	e000      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a494:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10b      	bne.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a49e:	4b39      	ldr	r3, [pc, #228]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ae:	4a35      	ldr	r2, [pc, #212]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	6553      	str	r3, [r2, #84]	; 0x54
 800a4b4:	e003      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a4ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	d058      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4ea:	d033      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4f0:	d82c      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4f6:	d02f      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a4f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4fc:	d826      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a502:	d02b      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a508:	d820      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a50a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a50e:	d012      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a514:	d81a      	bhi.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d022      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a51a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a51e:	d115      	bne.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a524:	3308      	adds	r3, #8
 800a526:	2100      	movs	r1, #0
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 fe57 	bl	800b1dc <RCCEx_PLL2_Config>
 800a52e:	4603      	mov	r3, r0
 800a530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a534:	e015      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a53a:	3328      	adds	r3, #40	; 0x28
 800a53c:	2102      	movs	r1, #2
 800a53e:	4618      	mov	r0, r3
 800a540:	f000 fefe 	bl	800b340 <RCCEx_PLL3_Config>
 800a544:	4603      	mov	r3, r0
 800a546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a54a:	e00a      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a552:	e006      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a554:	bf00      	nop
 800a556:	e004      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a558:	bf00      	nop
 800a55a:	e002      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a55c:	bf00      	nop
 800a55e:	e000      	b.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a562:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a566:	2b00      	cmp	r3, #0
 800a568:	d10e      	bne.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a56a:	4b06      	ldr	r3, [pc, #24]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a56e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a57a:	4a02      	ldr	r2, [pc, #8]	; (800a584 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a57c:	430b      	orrs	r3, r1
 800a57e:	6593      	str	r3, [r2, #88]	; 0x58
 800a580:	e006      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a582:	bf00      	nop
 800a584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a58c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a59c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	d055      	beq.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a5b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5bc:	d033      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a5be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5c2:	d82c      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5c8:	d02f      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a5ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ce:	d826      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5d4:	d02b      	beq.n	800a62e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a5d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5da:	d820      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e0:	d012      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a5e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5e6:	d81a      	bhi.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d022      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f0:	d115      	bne.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fdee 	bl	800b1dc <RCCEx_PLL2_Config>
 800a600:	4603      	mov	r3, r0
 800a602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a606:	e015      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a60c:	3328      	adds	r3, #40	; 0x28
 800a60e:	2102      	movs	r1, #2
 800a610:	4618      	mov	r0, r3
 800a612:	f000 fe95 	bl	800b340 <RCCEx_PLL3_Config>
 800a616:	4603      	mov	r3, r0
 800a618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a61c:	e00a      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a624:	e006      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a626:	bf00      	nop
 800a628:	e004      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a62a:	bf00      	nop
 800a62c:	e002      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a62e:	bf00      	nop
 800a630:	e000      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a632:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10b      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a63c:	4ba1      	ldr	r3, [pc, #644]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a640:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a64c:	4a9d      	ldr	r2, [pc, #628]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a64e:	430b      	orrs	r3, r1
 800a650:	6593      	str	r3, [r2, #88]	; 0x58
 800a652:	e003      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a664:	f002 0308 	and.w	r3, r2, #8
 800a668:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a66c:	2300      	movs	r3, #0
 800a66e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a672:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a676:	460b      	mov	r3, r1
 800a678:	4313      	orrs	r3, r2
 800a67a:	d01e      	beq.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a688:	d10c      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68e:	3328      	adds	r3, #40	; 0x28
 800a690:	2102      	movs	r1, #2
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fe54 	bl	800b340 <RCCEx_PLL3_Config>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a6a4:	4b87      	ldr	r3, [pc, #540]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6b4:	4a83      	ldr	r2, [pc, #524]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6b6:	430b      	orrs	r3, r1
 800a6b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	f002 0310 	and.w	r3, r2, #16
 800a6c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	d01e      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6e6:	d10c      	bne.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ec:	3328      	adds	r3, #40	; 0x28
 800a6ee:	2102      	movs	r1, #2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f000 fe25 	bl	800b340 <RCCEx_PLL3_Config>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a702:	4b70      	ldr	r3, [pc, #448]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a70e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a712:	4a6c      	ldr	r2, [pc, #432]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a714:	430b      	orrs	r3, r1
 800a716:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a728:	2300      	movs	r3, #0
 800a72a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a72e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a732:	460b      	mov	r3, r1
 800a734:	4313      	orrs	r3, r2
 800a736:	d03e      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a73c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a740:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a744:	d022      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a74a:	d81b      	bhi.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a754:	d00b      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a756:	e015      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a75c:	3308      	adds	r3, #8
 800a75e:	2100      	movs	r1, #0
 800a760:	4618      	mov	r0, r3
 800a762:	f000 fd3b 	bl	800b1dc <RCCEx_PLL2_Config>
 800a766:	4603      	mov	r3, r0
 800a768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a76c:	e00f      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a772:	3328      	adds	r3, #40	; 0x28
 800a774:	2102      	movs	r1, #2
 800a776:	4618      	mov	r0, r3
 800a778:	f000 fde2 	bl	800b340 <RCCEx_PLL3_Config>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a782:	e004      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a78a:	e000      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a78c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a78e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10b      	bne.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a796:	4b4b      	ldr	r3, [pc, #300]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a79e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a7a6:	4a47      	ldr	r2, [pc, #284]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7a8:	430b      	orrs	r3, r1
 800a7aa:	6593      	str	r3, [r2, #88]	; 0x58
 800a7ac:	e003      	b.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a7c2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	d03b      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7de:	d01f      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a7e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7e4:	d818      	bhi.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a7e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ea:	d003      	beq.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a7ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7f0:	d007      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a7f2:	e011      	b.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f4:	4b33      	ldr	r3, [pc, #204]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	4a32      	ldr	r2, [pc, #200]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a800:	e00f      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a806:	3328      	adds	r3, #40	; 0x28
 800a808:	2101      	movs	r1, #1
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fd98 	bl	800b340 <RCCEx_PLL3_Config>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a816:	e004      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a818:	2301      	movs	r3, #1
 800a81a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a81e:	e000      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a820:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10b      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a82a:	4b26      	ldr	r3, [pc, #152]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83a:	4a22      	ldr	r2, [pc, #136]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a83c:	430b      	orrs	r3, r1
 800a83e:	6553      	str	r3, [r2, #84]	; 0x54
 800a840:	e003      	b.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a856:	673b      	str	r3, [r7, #112]	; 0x70
 800a858:	2300      	movs	r3, #0
 800a85a:	677b      	str	r3, [r7, #116]	; 0x74
 800a85c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a860:	460b      	mov	r3, r1
 800a862:	4313      	orrs	r3, r2
 800a864:	d034      	beq.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d003      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a874:	d007      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a876:	e011      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a878:	4b12      	ldr	r3, [pc, #72]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	4a11      	ldr	r2, [pc, #68]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a87e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a884:	e00e      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a88a:	3308      	adds	r3, #8
 800a88c:	2102      	movs	r1, #2
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fca4 	bl	800b1dc <RCCEx_PLL2_Config>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a89a:	e003      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10d      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a8ac:	4b05      	ldr	r3, [pc, #20]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ba:	4a02      	ldr	r2, [pc, #8]	; (800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8bc:	430b      	orrs	r3, r1
 800a8be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8c0:	e006      	b.n	800a8d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a8c2:	bf00      	nop
 800a8c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a8dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8de:	2300      	movs	r3, #0
 800a8e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	d00c      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f0:	3328      	adds	r3, #40	; 0x28
 800a8f2:	2102      	movs	r1, #2
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f000 fd23 	bl	800b340 <RCCEx_PLL3_Config>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a912:	663b      	str	r3, [r7, #96]	; 0x60
 800a914:	2300      	movs	r3, #0
 800a916:	667b      	str	r3, [r7, #100]	; 0x64
 800a918:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a91c:	460b      	mov	r3, r1
 800a91e:	4313      	orrs	r3, r2
 800a920:	d038      	beq.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a92a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a92e:	d018      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a934:	d811      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a93a:	d014      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a93c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a940:	d80b      	bhi.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d011      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a94a:	d106      	bne.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94c:	4bc3      	ldr	r3, [pc, #780]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4ac2      	ldr	r2, [pc, #776]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a958:	e008      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a960:	e004      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a962:	bf00      	nop
 800a964:	e002      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a96c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10b      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a974:	4bb9      	ldr	r3, [pc, #740]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a978:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a984:	4ab5      	ldr	r2, [pc, #724]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a986:	430b      	orrs	r3, r1
 800a988:	6553      	str	r3, [r2, #84]	; 0x54
 800a98a:	e003      	b.n	800a994 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a990:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a9a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	d009      	beq.n	800a9c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a9b0:	4baa      	ldr	r3, [pc, #680]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9be:	4aa7      	ldr	r2, [pc, #668]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9c0:	430b      	orrs	r3, r1
 800a9c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a9d0:	653b      	str	r3, [r7, #80]	; 0x50
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	657b      	str	r3, [r7, #84]	; 0x54
 800a9d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	d00a      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a9e0:	4b9e      	ldr	r3, [pc, #632]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9f0:	4a9a      	ldr	r2, [pc, #616]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f2:	430b      	orrs	r3, r1
 800a9f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800aa02:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa04:	2300      	movs	r3, #0
 800aa06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	d009      	beq.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa12:	4b92      	ldr	r3, [pc, #584]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa16:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800aa1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa20:	4a8e      	ldr	r2, [pc, #568]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa22:	430b      	orrs	r3, r1
 800aa24:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aa32:	643b      	str	r3, [r7, #64]	; 0x40
 800aa34:	2300      	movs	r3, #0
 800aa36:	647b      	str	r3, [r7, #68]	; 0x44
 800aa38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	d00e      	beq.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa42:	4b86      	ldr	r3, [pc, #536]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	4a85      	ldr	r2, [pc, #532]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa4c:	6113      	str	r3, [r2, #16]
 800aa4e:	4b83      	ldr	r3, [pc, #524]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa50:	6919      	ldr	r1, [r3, #16]
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aa5a:	4a80      	ldr	r2, [pc, #512]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa6e:	2300      	movs	r3, #0
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa76:	460b      	mov	r3, r1
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	d009      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa7c:	4b77      	ldr	r3, [pc, #476]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa80:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8a:	4a74      	ldr	r2, [pc, #464]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa9c:	633b      	str	r3, [r7, #48]	; 0x30
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	d00a      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aaac:	4b6b      	ldr	r3, [pc, #428]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aabc:	4a67      	ldr	r2, [pc, #412]	; (800ac5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aabe:	430b      	orrs	r3, r1
 800aac0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaca:	2100      	movs	r1, #0
 800aacc:	62b9      	str	r1, [r7, #40]	; 0x28
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aad4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aad8:	460b      	mov	r3, r1
 800aada:	4313      	orrs	r3, r2
 800aadc:	d011      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae2:	3308      	adds	r3, #8
 800aae4:	2100      	movs	r1, #0
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fb78 	bl	800b1dc <RCCEx_PLL2_Config>
 800aaec:	4603      	mov	r3, r0
 800aaee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aaf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aafe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	6239      	str	r1, [r7, #32]
 800ab0e:	f003 0302 	and.w	r3, r3, #2
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
 800ab14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	d011      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab22:	3308      	adds	r3, #8
 800ab24:	2101      	movs	r1, #1
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 fb58 	bl	800b1dc <RCCEx_PLL2_Config>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	61b9      	str	r1, [r7, #24]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
 800ab52:	61fb      	str	r3, [r7, #28]
 800ab54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	d011      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab62:	3308      	adds	r3, #8
 800ab64:	2102      	movs	r1, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fb38 	bl	800b1dc <RCCEx_PLL2_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d003      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	6139      	str	r1, [r7, #16]
 800ab8e:	f003 0308 	and.w	r3, r3, #8
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	d011      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba2:	3328      	adds	r3, #40	; 0x28
 800aba4:	2100      	movs	r1, #0
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fbca 	bl	800b340 <RCCEx_PLL3_Config>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800abb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abca:	2100      	movs	r1, #0
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	f003 0310 	and.w	r3, r3, #16
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800abd8:	460b      	mov	r3, r1
 800abda:	4313      	orrs	r3, r2
 800abdc:	d011      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe2:	3328      	adds	r3, #40	; 0x28
 800abe4:	2101      	movs	r1, #1
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fbaa 	bl	800b340 <RCCEx_PLL3_Config>
 800abec:	4603      	mov	r3, r0
 800abee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	f003 0320 	and.w	r3, r3, #32
 800ac12:	607b      	str	r3, [r7, #4]
 800ac14:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	d011      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac22:	3328      	adds	r3, #40	; 0x28
 800ac24:	2102      	movs	r1, #2
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fb8a 	bl	800b340 <RCCEx_PLL3_Config>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ac42:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e000      	b.n	800ac50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ac56:	46bd      	mov	sp, r7
 800ac58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac5c:	58024400 	.word	0x58024400

0800ac60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac64:	f7fe fd96 	bl	8009794 <HAL_RCC_GetHCLKFreq>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	091b      	lsrs	r3, r3, #4
 800ac70:	f003 0307 	and.w	r3, r3, #7
 800ac74:	4904      	ldr	r1, [pc, #16]	; (800ac88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac76:	5ccb      	ldrb	r3, [r1, r3]
 800ac78:	f003 031f 	and.w	r3, r3, #31
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	58024400 	.word	0x58024400
 800ac88:	08014500 	.word	0x08014500

0800ac8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b089      	sub	sp, #36	; 0x24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac94:	4ba1      	ldr	r3, [pc, #644]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac9e:	4b9f      	ldr	r3, [pc, #636]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca2:	0b1b      	lsrs	r3, r3, #12
 800aca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aca8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800acaa:	4b9c      	ldr	r3, [pc, #624]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	091b      	lsrs	r3, r3, #4
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800acb6:	4b99      	ldr	r3, [pc, #612]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acba:	08db      	lsrs	r3, r3, #3
 800acbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8111 	beq.w	800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	f000 8083 	beq.w	800ade8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	f200 80a1 	bhi.w	800ae2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d056      	beq.n	800ada4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800acf6:	e099      	b.n	800ae2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acf8:	4b88      	ldr	r3, [pc, #544]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02d      	beq.n	800ad60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad04:	4b85      	ldr	r3, [pc, #532]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	08db      	lsrs	r3, r3, #3
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	4a84      	ldr	r2, [pc, #528]	; (800af20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad10:	fa22 f303 	lsr.w	r3, r2, r3
 800ad14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	ee07 3a90 	vmov	s15, r3
 800ad1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2e:	4b7b      	ldr	r3, [pc, #492]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad5e:	e087      	b.n	800ae70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad72:	4b6a      	ldr	r3, [pc, #424]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ada2:	e065      	b.n	800ae70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800adb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb6:	4b59      	ldr	r3, [pc, #356]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ade6:	e043      	b.n	800ae70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800adf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adfa:	4b48      	ldr	r3, [pc, #288]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae2a:	e021      	b.n	800ae70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae3e:	4b37      	ldr	r3, [pc, #220]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae70:	4b2a      	ldr	r3, [pc, #168]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae74:	0a5b      	lsrs	r3, r3, #9
 800ae76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae96:	ee17 2a90 	vmov	r2, s15
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae9e:	4b1f      	ldr	r3, [pc, #124]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea2:	0c1b      	lsrs	r3, r3, #16
 800aea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aea8:	ee07 3a90 	vmov	s15, r3
 800aeac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec4:	ee17 2a90 	vmov	r2, s15
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aecc:	4b13      	ldr	r3, [pc, #76]	; (800af1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed0:	0e1b      	lsrs	r3, r3, #24
 800aed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef2:	ee17 2a90 	vmov	r2, s15
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aefa:	e008      	b.n	800af0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	609a      	str	r2, [r3, #8]
}
 800af0e:	bf00      	nop
 800af10:	3724      	adds	r7, #36	; 0x24
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	58024400 	.word	0x58024400
 800af20:	03d09000 	.word	0x03d09000
 800af24:	46000000 	.word	0x46000000
 800af28:	4c742400 	.word	0x4c742400
 800af2c:	4a742400 	.word	0x4a742400
 800af30:	4bbebc20 	.word	0x4bbebc20

0800af34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800af34:	b480      	push	{r7}
 800af36:	b089      	sub	sp, #36	; 0x24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af3c:	4ba1      	ldr	r3, [pc, #644]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800af46:	4b9f      	ldr	r3, [pc, #636]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af4a:	0d1b      	lsrs	r3, r3, #20
 800af4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af52:	4b9c      	ldr	r3, [pc, #624]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af56:	0a1b      	lsrs	r3, r3, #8
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af5e:	4b99      	ldr	r3, [pc, #612]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af62:	08db      	lsrs	r3, r3, #3
 800af64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	fb02 f303 	mul.w	r3, r2, r3
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 8111 	beq.w	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	2b02      	cmp	r3, #2
 800af86:	f000 8083 	beq.w	800b090 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	f200 80a1 	bhi.w	800b0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d056      	beq.n	800b04c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af9e:	e099      	b.n	800b0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afa0:	4b88      	ldr	r3, [pc, #544]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0320 	and.w	r3, r3, #32
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d02d      	beq.n	800b008 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afac:	4b85      	ldr	r3, [pc, #532]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	08db      	lsrs	r3, r3, #3
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	4a84      	ldr	r2, [pc, #528]	; (800b1c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800afb8:	fa22 f303 	lsr.w	r3, r2, r3
 800afbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	ee07 3a90 	vmov	s15, r3
 800afc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd6:	4b7b      	ldr	r3, [pc, #492]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b006:	e087      	b.n	800b118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01a:	4b6a      	ldr	r3, [pc, #424]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b04a:	e065      	b.n	800b118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b056:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05e:	4b59      	ldr	r3, [pc, #356]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b072:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b08e:	e043      	b.n	800b118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	ee07 3a90 	vmov	s15, r3
 800b096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b09a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a2:	4b48      	ldr	r3, [pc, #288]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d2:	e021      	b.n	800b118 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0e6:	4b37      	ldr	r3, [pc, #220]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ee:	ee07 3a90 	vmov	s15, r3
 800b0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b116:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b118:	4b2a      	ldr	r3, [pc, #168]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11c:	0a5b      	lsrs	r3, r3, #9
 800b11e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b122:	ee07 3a90 	vmov	s15, r3
 800b126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b132:	edd7 6a07 	vldr	s13, [r7, #28]
 800b136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b13e:	ee17 2a90 	vmov	r2, s15
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b146:	4b1f      	ldr	r3, [pc, #124]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b14a:	0c1b      	lsrs	r3, r3, #16
 800b14c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b150:	ee07 3a90 	vmov	s15, r3
 800b154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b15c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b160:	edd7 6a07 	vldr	s13, [r7, #28]
 800b164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16c:	ee17 2a90 	vmov	r2, s15
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b174:	4b13      	ldr	r3, [pc, #76]	; (800b1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b178:	0e1b      	lsrs	r3, r3, #24
 800b17a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b18e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b19a:	ee17 2a90 	vmov	r2, s15
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b1a2:	e008      	b.n	800b1b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	609a      	str	r2, [r3, #8]
}
 800b1b6:	bf00      	nop
 800b1b8:	3724      	adds	r7, #36	; 0x24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	58024400 	.word	0x58024400
 800b1c8:	03d09000 	.word	0x03d09000
 800b1cc:	46000000 	.word	0x46000000
 800b1d0:	4c742400 	.word	0x4c742400
 800b1d4:	4a742400 	.word	0x4a742400
 800b1d8:	4bbebc20 	.word	0x4bbebc20

0800b1dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1ea:	4b53      	ldr	r3, [pc, #332]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d101      	bne.n	800b1fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e099      	b.n	800b32e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1fa:	4b4f      	ldr	r3, [pc, #316]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a4e      	ldr	r2, [pc, #312]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b200:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b206:	f7f9 fb5b 	bl	80048c0 <HAL_GetTick>
 800b20a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b20c:	e008      	b.n	800b220 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b20e:	f7f9 fb57 	bl	80048c0 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d901      	bls.n	800b220 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e086      	b.n	800b32e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b220:	4b45      	ldr	r3, [pc, #276]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d1f0      	bne.n	800b20e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b22c:	4b42      	ldr	r3, [pc, #264]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b230:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	031b      	lsls	r3, r3, #12
 800b23a:	493f      	ldr	r1, [pc, #252]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b23c:	4313      	orrs	r3, r2
 800b23e:	628b      	str	r3, [r1, #40]	; 0x28
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	3b01      	subs	r3, #1
 800b246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	3b01      	subs	r3, #1
 800b250:	025b      	lsls	r3, r3, #9
 800b252:	b29b      	uxth	r3, r3
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	3b01      	subs	r3, #1
 800b25c:	041b      	lsls	r3, r3, #16
 800b25e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b262:	431a      	orrs	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	3b01      	subs	r3, #1
 800b26a:	061b      	lsls	r3, r3, #24
 800b26c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b270:	4931      	ldr	r1, [pc, #196]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b272:	4313      	orrs	r3, r2
 800b274:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b276:	4b30      	ldr	r3, [pc, #192]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	492d      	ldr	r1, [pc, #180]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b284:	4313      	orrs	r3, r2
 800b286:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b288:	4b2b      	ldr	r3, [pc, #172]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28c:	f023 0220 	bic.w	r2, r3, #32
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	4928      	ldr	r1, [pc, #160]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b296:	4313      	orrs	r3, r2
 800b298:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b29a:	4b27      	ldr	r3, [pc, #156]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29e:	4a26      	ldr	r2, [pc, #152]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2a0:	f023 0310 	bic.w	r3, r3, #16
 800b2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2a6:	4b24      	ldr	r3, [pc, #144]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2aa:	4b24      	ldr	r3, [pc, #144]	; (800b33c <RCCEx_PLL2_Config+0x160>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	69d2      	ldr	r2, [r2, #28]
 800b2b2:	00d2      	lsls	r2, r2, #3
 800b2b4:	4920      	ldr	r1, [pc, #128]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2ba:	4b1f      	ldr	r3, [pc, #124]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2be:	4a1e      	ldr	r2, [pc, #120]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	f043 0310 	orr.w	r3, r3, #16
 800b2c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4a19      	ldr	r2, [pc, #100]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2d8:	e00f      	b.n	800b2fa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d106      	bne.n	800b2ee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2e0:	4b15      	ldr	r3, [pc, #84]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4a14      	ldr	r2, [pc, #80]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2ec:	e005      	b.n	800b2fa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f2:	4a11      	ldr	r2, [pc, #68]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a0e      	ldr	r2, [pc, #56]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b300:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b306:	f7f9 fadb 	bl	80048c0 <HAL_GetTick>
 800b30a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b30c:	e008      	b.n	800b320 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b30e:	f7f9 fad7 	bl	80048c0 <HAL_GetTick>
 800b312:	4602      	mov	r2, r0
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	2b02      	cmp	r3, #2
 800b31a:	d901      	bls.n	800b320 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e006      	b.n	800b32e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b320:	4b05      	ldr	r3, [pc, #20]	; (800b338 <RCCEx_PLL2_Config+0x15c>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0f0      	beq.n	800b30e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	58024400 	.word	0x58024400
 800b33c:	ffff0007 	.word	0xffff0007

0800b340 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b34e:	4b53      	ldr	r3, [pc, #332]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b352:	f003 0303 	and.w	r3, r3, #3
 800b356:	2b03      	cmp	r3, #3
 800b358:	d101      	bne.n	800b35e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e099      	b.n	800b492 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b35e:	4b4f      	ldr	r3, [pc, #316]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a4e      	ldr	r2, [pc, #312]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b36a:	f7f9 faa9 	bl	80048c0 <HAL_GetTick>
 800b36e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b370:	e008      	b.n	800b384 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b372:	f7f9 faa5 	bl	80048c0 <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d901      	bls.n	800b384 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e086      	b.n	800b492 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b384:	4b45      	ldr	r3, [pc, #276]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1f0      	bne.n	800b372 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b390:	4b42      	ldr	r3, [pc, #264]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b394:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	051b      	lsls	r3, r3, #20
 800b39e:	493f      	ldr	r1, [pc, #252]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	628b      	str	r3, [r1, #40]	; 0x28
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	689b      	ldr	r3, [r3, #8]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	025b      	lsls	r3, r3, #9
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	041b      	lsls	r3, r3, #16
 800b3c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	061b      	lsls	r3, r3, #24
 800b3d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3d4:	4931      	ldr	r1, [pc, #196]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3da:	4b30      	ldr	r3, [pc, #192]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	492d      	ldr	r1, [pc, #180]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3ec:	4b2b      	ldr	r3, [pc, #172]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	699b      	ldr	r3, [r3, #24]
 800b3f8:	4928      	ldr	r1, [pc, #160]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3fe:	4b27      	ldr	r3, [pc, #156]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b402:	4a26      	ldr	r2, [pc, #152]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b40c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b40e:	4b24      	ldr	r3, [pc, #144]	; (800b4a0 <RCCEx_PLL3_Config+0x160>)
 800b410:	4013      	ands	r3, r2
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	69d2      	ldr	r2, [r2, #28]
 800b416:	00d2      	lsls	r2, r2, #3
 800b418:	4920      	ldr	r1, [pc, #128]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b41e:	4b1f      	ldr	r3, [pc, #124]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b422:	4a1e      	ldr	r2, [pc, #120]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b428:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d106      	bne.n	800b43e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b430:	4b1a      	ldr	r3, [pc, #104]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	4a19      	ldr	r2, [pc, #100]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b43a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b43c:	e00f      	b.n	800b45e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d106      	bne.n	800b452 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b444:	4b15      	ldr	r3, [pc, #84]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b448:	4a14      	ldr	r2, [pc, #80]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b44a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b44e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b450:	e005      	b.n	800b45e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b452:	4b12      	ldr	r3, [pc, #72]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b456:	4a11      	ldr	r2, [pc, #68]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b45c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b45e:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a0e      	ldr	r2, [pc, #56]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b468:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b46a:	f7f9 fa29 	bl	80048c0 <HAL_GetTick>
 800b46e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b470:	e008      	b.n	800b484 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b472:	f7f9 fa25 	bl	80048c0 <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d901      	bls.n	800b484 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b480:	2303      	movs	r3, #3
 800b482:	e006      	b.n	800b492 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b484:	4b05      	ldr	r3, [pc, #20]	; (800b49c <RCCEx_PLL3_Config+0x15c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0f0      	beq.n	800b472 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b490:	7bfb      	ldrb	r3, [r7, #15]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	58024400 	.word	0x58024400
 800b4a0:	ffff0007 	.word	0xffff0007

0800b4a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e02b      	b.n	800b510 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f825 	bl	800b51c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f002 f983 	bl	800d7f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6818      	ldr	r0, [r3, #0]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6839      	ldr	r1, [r7, #0]
 800b4f6:	f002 f9d7 	bl	800d8a8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b4fa:	4b07      	ldr	r3, [pc, #28]	; (800b518 <HAL_SDRAM_Init+0x74>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a06      	ldr	r2, [pc, #24]	; (800b518 <HAL_SDRAM_Init+0x74>)
 800b500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b504:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	52004000 	.word	0x52004000

0800b51c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800b524:	bf00      	nop
 800b526:	370c      	adds	r7, #12
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b086      	sub	sp, #24
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b542:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b544:	7dfb      	ldrb	r3, [r7, #23]
 800b546:	2b02      	cmp	r3, #2
 800b548:	d101      	bne.n	800b54e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b54a:	2302      	movs	r3, #2
 800b54c:	e021      	b.n	800b592 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b54e:	7dfb      	ldrb	r3, [r7, #23]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d002      	beq.n	800b55a <HAL_SDRAM_SendCommand+0x2a>
 800b554:	7dfb      	ldrb	r3, [r7, #23]
 800b556:	2b05      	cmp	r3, #5
 800b558:	d118      	bne.n	800b58c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2202      	movs	r2, #2
 800b55e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	68b9      	ldr	r1, [r7, #8]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 fa06 	bl	800d97c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b02      	cmp	r3, #2
 800b576:	d104      	bne.n	800b582 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2205      	movs	r2, #5
 800b57c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b580:	e006      	b.n	800b590 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b58a:	e001      	b.n	800b590 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e000      	b.n	800b592 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d101      	bne.n	800b5b4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e016      	b.n	800b5e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d10f      	bne.n	800b5e0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f002 f9f8 	bl	800d9c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e000      	b.n	800b5e2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}

0800b5ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d101      	bne.n	800b5fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e049      	b.n	800b690 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b602:	b2db      	uxtb	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d106      	bne.n	800b616 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f841 	bl	800b698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	3304      	adds	r3, #4
 800b626:	4619      	mov	r1, r3
 800b628:	4610      	mov	r0, r2
 800b62a:	f000 fac7 	bl	800bbbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3708      	adds	r7, #8
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}

0800b698 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d001      	beq.n	800b6c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e04c      	b.n	800b75e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2202      	movs	r2, #2
 800b6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a26      	ldr	r2, [pc, #152]	; (800b76c <HAL_TIM_Base_Start+0xc0>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d022      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6de:	d01d      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a22      	ldr	r2, [pc, #136]	; (800b770 <HAL_TIM_Base_Start+0xc4>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d018      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a21      	ldr	r2, [pc, #132]	; (800b774 <HAL_TIM_Base_Start+0xc8>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d013      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a1f      	ldr	r2, [pc, #124]	; (800b778 <HAL_TIM_Base_Start+0xcc>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d00e      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a1e      	ldr	r2, [pc, #120]	; (800b77c <HAL_TIM_Base_Start+0xd0>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d009      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1c      	ldr	r2, [pc, #112]	; (800b780 <HAL_TIM_Base_Start+0xd4>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d004      	beq.n	800b71c <HAL_TIM_Base_Start+0x70>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a1b      	ldr	r2, [pc, #108]	; (800b784 <HAL_TIM_Base_Start+0xd8>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d115      	bne.n	800b748 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689a      	ldr	r2, [r3, #8]
 800b722:	4b19      	ldr	r3, [pc, #100]	; (800b788 <HAL_TIM_Base_Start+0xdc>)
 800b724:	4013      	ands	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2b06      	cmp	r3, #6
 800b72c:	d015      	beq.n	800b75a <HAL_TIM_Base_Start+0xae>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b734:	d011      	beq.n	800b75a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f042 0201 	orr.w	r2, r2, #1
 800b744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b746:	e008      	b.n	800b75a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f042 0201 	orr.w	r2, r2, #1
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	e000      	b.n	800b75c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b75a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	40010000 	.word	0x40010000
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40010400 	.word	0x40010400
 800b780:	40001800 	.word	0x40001800
 800b784:	40014000 	.word	0x40014000
 800b788:	00010007 	.word	0x00010007

0800b78c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e049      	b.n	800b832 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d106      	bne.n	800b7b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f89d 	bl	800b8f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2202      	movs	r2, #2
 800b7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	3304      	adds	r3, #4
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	f000 f9f6 	bl	800bbbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b082      	sub	sp, #8
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2202      	movs	r2, #2
 800b846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6a1a      	ldr	r2, [r3, #32]
 800b850:	f241 1311 	movw	r3, #4369	; 0x1111
 800b854:	4013      	ands	r3, r2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10f      	bne.n	800b87a <HAL_TIM_PWM_DeInit+0x40>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	6a1a      	ldr	r2, [r3, #32]
 800b860:	f240 4344 	movw	r3, #1092	; 0x444
 800b864:	4013      	ands	r3, r2
 800b866:	2b00      	cmp	r3, #0
 800b868:	d107      	bne.n	800b87a <HAL_TIM_PWM_DeInit+0x40>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0201 	bic.w	r2, r2, #1
 800b878:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f843 	bl	800b906 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b8fa:	bf00      	nop
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800b90e:	bf00      	nop
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b082      	sub	sp, #8
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d122      	bne.n	800b976 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d11b      	bne.n	800b976 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f06f 0202 	mvn.w	r2, #2
 800b946:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	f003 0303 	and.w	r3, r3, #3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f90f 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800b962:	e005      	b.n	800b970 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 f901 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f912 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	f003 0304 	and.w	r3, r3, #4
 800b980:	2b04      	cmp	r3, #4
 800b982:	d122      	bne.n	800b9ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	f003 0304 	and.w	r3, r3, #4
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d11b      	bne.n	800b9ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f06f 0204 	mvn.w	r2, #4
 800b99a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	699b      	ldr	r3, [r3, #24]
 800b9a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f8e5 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800b9b6:	e005      	b.n	800b9c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f8d7 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f8e8 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	f003 0308 	and.w	r3, r3, #8
 800b9d4:	2b08      	cmp	r3, #8
 800b9d6:	d122      	bne.n	800ba1e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	f003 0308 	and.w	r3, r3, #8
 800b9e2:	2b08      	cmp	r3, #8
 800b9e4:	d11b      	bne.n	800ba1e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f06f 0208 	mvn.w	r2, #8
 800b9ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2204      	movs	r2, #4
 800b9f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	69db      	ldr	r3, [r3, #28]
 800b9fc:	f003 0303 	and.w	r3, r3, #3
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f000 f8bb 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800ba0a:	e005      	b.n	800ba18 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f8ad 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 f8be 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	f003 0310 	and.w	r3, r3, #16
 800ba28:	2b10      	cmp	r3, #16
 800ba2a:	d122      	bne.n	800ba72 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	f003 0310 	and.w	r3, r3, #16
 800ba36:	2b10      	cmp	r3, #16
 800ba38:	d11b      	bne.n	800ba72 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f06f 0210 	mvn.w	r2, #16
 800ba42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2208      	movs	r2, #8
 800ba48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d003      	beq.n	800ba60 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f000 f891 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800ba5e:	e005      	b.n	800ba6c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f883 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f894 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	f003 0301 	and.w	r3, r3, #1
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d10e      	bne.n	800ba9e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d107      	bne.n	800ba9e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f06f 0201 	mvn.w	r2, #1
 800ba96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f85d 	bl	800bb58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa8:	2b80      	cmp	r3, #128	; 0x80
 800baaa:	d10e      	bne.n	800baca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab6:	2b80      	cmp	r3, #128	; 0x80
 800bab8:	d107      	bne.n	800baca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 f91d 	bl	800bd04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad8:	d10e      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae4:	2b80      	cmp	r3, #128	; 0x80
 800bae6:	d107      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800baf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 f910 	bl	800bd18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb02:	2b40      	cmp	r3, #64	; 0x40
 800bb04:	d10e      	bne.n	800bb24 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb10:	2b40      	cmp	r3, #64	; 0x40
 800bb12:	d107      	bne.n	800bb24 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f842 	bl	800bba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d10e      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b20      	cmp	r3, #32
 800bb3e:	d107      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f06f 0220 	mvn.w	r2, #32
 800bb48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f8d0 	bl	800bcf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a40      	ldr	r2, [pc, #256]	; (800bcd0 <TIM_Base_SetConfig+0x114>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d013      	beq.n	800bbfc <TIM_Base_SetConfig+0x40>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbda:	d00f      	beq.n	800bbfc <TIM_Base_SetConfig+0x40>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a3d      	ldr	r2, [pc, #244]	; (800bcd4 <TIM_Base_SetConfig+0x118>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d00b      	beq.n	800bbfc <TIM_Base_SetConfig+0x40>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a3c      	ldr	r2, [pc, #240]	; (800bcd8 <TIM_Base_SetConfig+0x11c>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d007      	beq.n	800bbfc <TIM_Base_SetConfig+0x40>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a3b      	ldr	r2, [pc, #236]	; (800bcdc <TIM_Base_SetConfig+0x120>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d003      	beq.n	800bbfc <TIM_Base_SetConfig+0x40>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a3a      	ldr	r2, [pc, #232]	; (800bce0 <TIM_Base_SetConfig+0x124>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d108      	bne.n	800bc0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a2f      	ldr	r2, [pc, #188]	; (800bcd0 <TIM_Base_SetConfig+0x114>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d01f      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc1c:	d01b      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a2c      	ldr	r2, [pc, #176]	; (800bcd4 <TIM_Base_SetConfig+0x118>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d017      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a2b      	ldr	r2, [pc, #172]	; (800bcd8 <TIM_Base_SetConfig+0x11c>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d013      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a2a      	ldr	r2, [pc, #168]	; (800bcdc <TIM_Base_SetConfig+0x120>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d00f      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a29      	ldr	r2, [pc, #164]	; (800bce0 <TIM_Base_SetConfig+0x124>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d00b      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a28      	ldr	r2, [pc, #160]	; (800bce4 <TIM_Base_SetConfig+0x128>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d007      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4a27      	ldr	r2, [pc, #156]	; (800bce8 <TIM_Base_SetConfig+0x12c>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d003      	beq.n	800bc56 <TIM_Base_SetConfig+0x9a>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a26      	ldr	r2, [pc, #152]	; (800bcec <TIM_Base_SetConfig+0x130>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d108      	bne.n	800bc68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	689a      	ldr	r2, [r3, #8]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a10      	ldr	r2, [pc, #64]	; (800bcd0 <TIM_Base_SetConfig+0x114>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d00f      	beq.n	800bcb4 <TIM_Base_SetConfig+0xf8>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a12      	ldr	r2, [pc, #72]	; (800bce0 <TIM_Base_SetConfig+0x124>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d00b      	beq.n	800bcb4 <TIM_Base_SetConfig+0xf8>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a11      	ldr	r2, [pc, #68]	; (800bce4 <TIM_Base_SetConfig+0x128>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d007      	beq.n	800bcb4 <TIM_Base_SetConfig+0xf8>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a10      	ldr	r2, [pc, #64]	; (800bce8 <TIM_Base_SetConfig+0x12c>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d003      	beq.n	800bcb4 <TIM_Base_SetConfig+0xf8>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a0f      	ldr	r2, [pc, #60]	; (800bcec <TIM_Base_SetConfig+0x130>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d103      	bne.n	800bcbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	691a      	ldr	r2, [r3, #16]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	615a      	str	r2, [r3, #20]
}
 800bcc2:	bf00      	nop
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	40010000 	.word	0x40010000
 800bcd4:	40000400 	.word	0x40000400
 800bcd8:	40000800 	.word	0x40000800
 800bcdc:	40000c00 	.word	0x40000c00
 800bce0:	40010400 	.word	0x40010400
 800bce4:	40014000 	.word	0x40014000
 800bce8:	40014400 	.word	0x40014400
 800bcec:	40014800 	.word	0x40014800

0800bcf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd20:	bf00      	nop
 800bd22:	370c      	adds	r7, #12
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d101      	bne.n	800bd3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e042      	b.n	800bdc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7f5 fea5 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2224      	movs	r2, #36	; 0x24
 800bd5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0201 	bic.w	r2, r2, #1
 800bd6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fd5c 	bl	800c82c <UART_SetConfig>
 800bd74:	4603      	mov	r3, r0
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d101      	bne.n	800bd7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e022      	b.n	800bdc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 fab8 	bl	800d2fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bdaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f042 0201 	orr.w	r2, r2, #1
 800bdba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 fb3f 	bl	800d440 <UART_CheckIdleState>
 800bdc2:	4603      	mov	r3, r0
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08a      	sub	sp, #40	; 0x28
 800bdd0:	af02      	add	r7, sp, #8
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	603b      	str	r3, [r7, #0]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bde2:	2b20      	cmp	r3, #32
 800bde4:	d17b      	bne.n	800bede <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <HAL_UART_Transmit+0x26>
 800bdec:	88fb      	ldrh	r3, [r7, #6]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e074      	b.n	800bee0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2221      	movs	r2, #33	; 0x21
 800be02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be06:	f7f8 fd5b 	bl	80048c0 <HAL_GetTick>
 800be0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	88fa      	ldrh	r2, [r7, #6]
 800be10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	88fa      	ldrh	r2, [r7, #6]
 800be18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be24:	d108      	bne.n	800be38 <HAL_UART_Transmit+0x6c>
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d104      	bne.n	800be38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be2e:	2300      	movs	r3, #0
 800be30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	61bb      	str	r3, [r7, #24]
 800be36:	e003      	b.n	800be40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be40:	e030      	b.n	800bea4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2200      	movs	r2, #0
 800be4a:	2180      	movs	r1, #128	; 0x80
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f001 fba1 	bl	800d594 <UART_WaitOnFlagUntilTimeout>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d005      	beq.n	800be64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2220      	movs	r2, #32
 800be5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e03d      	b.n	800bee0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10b      	bne.n	800be82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be6a:	69bb      	ldr	r3, [r7, #24]
 800be6c:	881b      	ldrh	r3, [r3, #0]
 800be6e:	461a      	mov	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	3302      	adds	r3, #2
 800be7e:	61bb      	str	r3, [r7, #24]
 800be80:	e007      	b.n	800be92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	781a      	ldrb	r2, [r3, #0]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	3301      	adds	r3, #1
 800be90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800beaa:	b29b      	uxth	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1c8      	bne.n	800be42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	2200      	movs	r2, #0
 800beb8:	2140      	movs	r1, #64	; 0x40
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f001 fb6a 	bl	800d594 <UART_WaitOnFlagUntilTimeout>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d005      	beq.n	800bed2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2220      	movs	r2, #32
 800beca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800bece:	2303      	movs	r3, #3
 800bed0:	e006      	b.n	800bee0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2220      	movs	r2, #32
 800bed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	e000      	b.n	800bee0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bede:	2302      	movs	r3, #2
  }
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3720      	adds	r7, #32
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}

0800bee8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08a      	sub	sp, #40	; 0x28
 800beec:	af02      	add	r7, sp, #8
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	603b      	str	r3, [r7, #0]
 800bef4:	4613      	mov	r3, r2
 800bef6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800befe:	2b20      	cmp	r3, #32
 800bf00:	f040 80b5 	bne.w	800c06e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <HAL_UART_Receive+0x28>
 800bf0a:	88fb      	ldrh	r3, [r7, #6]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e0ad      	b.n	800c070 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2222      	movs	r2, #34	; 0x22
 800bf20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2200      	movs	r2, #0
 800bf28:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf2a:	f7f8 fcc9 	bl	80048c0 <HAL_GetTick>
 800bf2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	88fa      	ldrh	r2, [r7, #6]
 800bf34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	88fa      	ldrh	r2, [r7, #6]
 800bf3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf48:	d10e      	bne.n	800bf68 <HAL_UART_Receive+0x80>
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d105      	bne.n	800bf5e <HAL_UART_Receive+0x76>
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bf58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf5c:	e02d      	b.n	800bfba <HAL_UART_Receive+0xd2>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	22ff      	movs	r2, #255	; 0xff
 800bf62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf66:	e028      	b.n	800bfba <HAL_UART_Receive+0xd2>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10d      	bne.n	800bf8c <HAL_UART_Receive+0xa4>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d104      	bne.n	800bf82 <HAL_UART_Receive+0x9a>
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	22ff      	movs	r2, #255	; 0xff
 800bf7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf80:	e01b      	b.n	800bfba <HAL_UART_Receive+0xd2>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	227f      	movs	r2, #127	; 0x7f
 800bf86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf8a:	e016      	b.n	800bfba <HAL_UART_Receive+0xd2>
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf94:	d10d      	bne.n	800bfb2 <HAL_UART_Receive+0xca>
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d104      	bne.n	800bfa8 <HAL_UART_Receive+0xc0>
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	227f      	movs	r2, #127	; 0x7f
 800bfa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bfa6:	e008      	b.n	800bfba <HAL_UART_Receive+0xd2>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	223f      	movs	r2, #63	; 0x3f
 800bfac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bfb0:	e003      	b.n	800bfba <HAL_UART_Receive+0xd2>
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfc0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfca:	d108      	bne.n	800bfde <HAL_UART_Receive+0xf6>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d104      	bne.n	800bfde <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	e003      	b.n	800bfe6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bfe6:	e036      	b.n	800c056 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2200      	movs	r2, #0
 800bff0:	2120      	movs	r1, #32
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f001 face 	bl	800d594 <UART_WaitOnFlagUntilTimeout>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e032      	b.n	800c070 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10c      	bne.n	800c02a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c016:	b29a      	uxth	r2, r3
 800c018:	8a7b      	ldrh	r3, [r7, #18]
 800c01a:	4013      	ands	r3, r2
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	3302      	adds	r3, #2
 800c026:	61bb      	str	r3, [r7, #24]
 800c028:	e00c      	b.n	800c044 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c030:	b2da      	uxtb	r2, r3
 800c032:	8a7b      	ldrh	r3, [r7, #18]
 800c034:	b2db      	uxtb	r3, r3
 800c036:	4013      	ands	r3, r2
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	3301      	adds	r3, #1
 800c042:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	3b01      	subs	r3, #1
 800c04e:	b29a      	uxth	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1c2      	bne.n	800bfe8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2220      	movs	r2, #32
 800c066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	e000      	b.n	800c070 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c06e:	2302      	movs	r3, #2
  }
}
 800c070:	4618      	mov	r0, r3
 800c072:	3720      	adds	r7, #32
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b0ba      	sub	sp, #232	; 0xe8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c09e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c0a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c0ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d11b      	bne.n	800c0ec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b8:	f003 0320 	and.w	r3, r3, #32
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d015      	beq.n	800c0ec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0c4:	f003 0320 	and.w	r3, r3, #32
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d105      	bne.n	800c0d8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d009      	beq.n	800c0ec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f000 8377 	beq.w	800c7d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	4798      	blx	r3
      }
      return;
 800c0ea:	e371      	b.n	800c7d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 8123 	beq.w	800c33c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0f6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0fa:	4b8d      	ldr	r3, [pc, #564]	; (800c330 <HAL_UART_IRQHandler+0x2b8>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c102:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c106:	4b8b      	ldr	r3, [pc, #556]	; (800c334 <HAL_UART_IRQHandler+0x2bc>)
 800c108:	4013      	ands	r3, r2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 8116 	beq.w	800c33c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d011      	beq.n	800c140 <HAL_UART_IRQHandler+0xc8>
 800c11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00b      	beq.n	800c140 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2201      	movs	r2, #1
 800c12e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c136:	f043 0201 	orr.w	r2, r3, #1
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c144:	f003 0302 	and.w	r3, r3, #2
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d011      	beq.n	800c170 <HAL_UART_IRQHandler+0xf8>
 800c14c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2202      	movs	r2, #2
 800c15e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c166:	f043 0204 	orr.w	r2, r3, #4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c174:	f003 0304 	and.w	r3, r3, #4
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d011      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x128>
 800c17c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c180:	f003 0301 	and.w	r3, r3, #1
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00b      	beq.n	800c1a0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2204      	movs	r2, #4
 800c18e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c196:	f043 0202 	orr.w	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a4:	f003 0308 	and.w	r3, r3, #8
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d017      	beq.n	800c1dc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b0:	f003 0320 	and.w	r3, r3, #32
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d105      	bne.n	800c1c4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1bc:	4b5c      	ldr	r3, [pc, #368]	; (800c330 <HAL_UART_IRQHandler+0x2b8>)
 800c1be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00b      	beq.n	800c1dc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2208      	movs	r2, #8
 800c1ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1d2:	f043 0208 	orr.w	r2, r3, #8
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d012      	beq.n	800c20e <HAL_UART_IRQHandler+0x196>
 800c1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00c      	beq.n	800c20e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c204:	f043 0220 	orr.w	r2, r3, #32
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 82dd 	beq.w	800c7d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21e:	f003 0320 	and.w	r3, r3, #32
 800c222:	2b00      	cmp	r3, #0
 800c224:	d013      	beq.n	800c24e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d105      	bne.n	800c23e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d007      	beq.n	800c24e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c242:	2b00      	cmp	r3, #0
 800c244:	d003      	beq.n	800c24e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c262:	2b40      	cmp	r3, #64	; 0x40
 800c264:	d005      	beq.n	800c272 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c26a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d054      	beq.n	800c31c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f001 f9f6 	bl	800d664 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c282:	2b40      	cmp	r3, #64	; 0x40
 800c284:	d146      	bne.n	800c314 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3308      	adds	r3, #8
 800c28c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c294:	e853 3f00 	ldrex	r3, [r3]
 800c298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c29c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2c2:	e841 2300 	strex	r3, r2, [r1]
 800c2c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1d9      	bne.n	800c286 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d017      	beq.n	800c30c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2e2:	4a15      	ldr	r2, [pc, #84]	; (800c338 <HAL_UART_IRQHandler+0x2c0>)
 800c2e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7f8 ff61 	bl	80051b4 <HAL_DMA_Abort_IT>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d019      	beq.n	800c32c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c306:	4610      	mov	r0, r2
 800c308:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c30a:	e00f      	b.n	800c32c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fa77 	bl	800c800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c312:	e00b      	b.n	800c32c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fa73 	bl	800c800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c31a:	e007      	b.n	800c32c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fa6f 	bl	800c800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c32a:	e253      	b.n	800c7d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c32c:	bf00      	nop
    return;
 800c32e:	e251      	b.n	800c7d4 <HAL_UART_IRQHandler+0x75c>
 800c330:	10000001 	.word	0x10000001
 800c334:	04000120 	.word	0x04000120
 800c338:	0800d731 	.word	0x0800d731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c340:	2b01      	cmp	r3, #1
 800c342:	f040 81e7 	bne.w	800c714 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c34a:	f003 0310 	and.w	r3, r3, #16
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 81e0 	beq.w	800c714 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c358:	f003 0310 	and.w	r3, r3, #16
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 81d9 	beq.w	800c714 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2210      	movs	r2, #16
 800c368:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c374:	2b40      	cmp	r3, #64	; 0x40
 800c376:	f040 8151 	bne.w	800c61c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a96      	ldr	r2, [pc, #600]	; (800c5dc <HAL_UART_IRQHandler+0x564>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d068      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4a93      	ldr	r2, [pc, #588]	; (800c5e0 <HAL_UART_IRQHandler+0x568>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d061      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a91      	ldr	r2, [pc, #580]	; (800c5e4 <HAL_UART_IRQHandler+0x56c>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d05a      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a8e      	ldr	r2, [pc, #568]	; (800c5e8 <HAL_UART_IRQHandler+0x570>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d053      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a8c      	ldr	r2, [pc, #560]	; (800c5ec <HAL_UART_IRQHandler+0x574>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d04c      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a89      	ldr	r2, [pc, #548]	; (800c5f0 <HAL_UART_IRQHandler+0x578>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d045      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a87      	ldr	r2, [pc, #540]	; (800c5f4 <HAL_UART_IRQHandler+0x57c>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d03e      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a84      	ldr	r2, [pc, #528]	; (800c5f8 <HAL_UART_IRQHandler+0x580>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d037      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a82      	ldr	r2, [pc, #520]	; (800c5fc <HAL_UART_IRQHandler+0x584>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d030      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a7f      	ldr	r2, [pc, #508]	; (800c600 <HAL_UART_IRQHandler+0x588>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d029      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a7d      	ldr	r2, [pc, #500]	; (800c604 <HAL_UART_IRQHandler+0x58c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d022      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a7a      	ldr	r2, [pc, #488]	; (800c608 <HAL_UART_IRQHandler+0x590>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d01b      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a78      	ldr	r2, [pc, #480]	; (800c60c <HAL_UART_IRQHandler+0x594>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d014      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a75      	ldr	r2, [pc, #468]	; (800c610 <HAL_UART_IRQHandler+0x598>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d00d      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a73      	ldr	r2, [pc, #460]	; (800c614 <HAL_UART_IRQHandler+0x59c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d006      	beq.n	800c45a <HAL_UART_IRQHandler+0x3e2>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a70      	ldr	r2, [pc, #448]	; (800c618 <HAL_UART_IRQHandler+0x5a0>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d106      	bne.n	800c468 <HAL_UART_IRQHandler+0x3f0>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	b29b      	uxth	r3, r3
 800c466:	e005      	b.n	800c474 <HAL_UART_IRQHandler+0x3fc>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	b29b      	uxth	r3, r3
 800c474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 81ab 	beq.w	800c7d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c48c:	429a      	cmp	r2, r3
 800c48e:	f080 81a3 	bcs.w	800c7d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c498:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a8:	f000 8087 	beq.w	800c5ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4b8:	e853 3f00 	ldrex	r3, [r3]
 800c4bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c4e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4e6:	e841 2300 	strex	r3, r2, [r1]
 800c4ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1da      	bne.n	800c4ac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c500:	e853 3f00 	ldrex	r3, [r3]
 800c504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c508:	f023 0301 	bic.w	r3, r3, #1
 800c50c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3308      	adds	r3, #8
 800c516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c51a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c51e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e1      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3308      	adds	r3, #8
 800c552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c556:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c55a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c55c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c55e:	e841 2300 	strex	r3, r2, [r1]
 800c562:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1e3      	bne.n	800c532 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2220      	movs	r2, #32
 800c56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2200      	movs	r2, #0
 800c576:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c588:	f023 0310 	bic.w	r3, r3, #16
 800c58c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	461a      	mov	r2, r3
 800c596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c59a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c59c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5a2:	e841 2300 	strex	r3, r2, [r1]
 800c5a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1e4      	bne.n	800c578 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f8 fadf 	bl	8004b78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2202      	movs	r2, #2
 800c5be:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f91d 	bl	800c814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5da:	e0fd      	b.n	800c7d8 <HAL_UART_IRQHandler+0x760>
 800c5dc:	40020010 	.word	0x40020010
 800c5e0:	40020028 	.word	0x40020028
 800c5e4:	40020040 	.word	0x40020040
 800c5e8:	40020058 	.word	0x40020058
 800c5ec:	40020070 	.word	0x40020070
 800c5f0:	40020088 	.word	0x40020088
 800c5f4:	400200a0 	.word	0x400200a0
 800c5f8:	400200b8 	.word	0x400200b8
 800c5fc:	40020410 	.word	0x40020410
 800c600:	40020428 	.word	0x40020428
 800c604:	40020440 	.word	0x40020440
 800c608:	40020458 	.word	0x40020458
 800c60c:	40020470 	.word	0x40020470
 800c610:	40020488 	.word	0x40020488
 800c614:	400204a0 	.word	0x400204a0
 800c618:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c628:	b29b      	uxth	r3, r3
 800c62a:	1ad3      	subs	r3, r2, r3
 800c62c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c636:	b29b      	uxth	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 80cf 	beq.w	800c7dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c63e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80ca 	beq.w	800c7dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	e853 3f00 	ldrex	r3, [r3]
 800c654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c65c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c66a:	647b      	str	r3, [r7, #68]	; 0x44
 800c66c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c66e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c672:	e841 2300 	strex	r3, r2, [r1]
 800c676:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1e4      	bne.n	800c648 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3308      	adds	r3, #8
 800c684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	623b      	str	r3, [r7, #32]
   return(result);
 800c68e:	6a3a      	ldr	r2, [r7, #32]
 800c690:	4b55      	ldr	r3, [pc, #340]	; (800c7e8 <HAL_UART_IRQHandler+0x770>)
 800c692:	4013      	ands	r3, r2
 800c694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	3308      	adds	r3, #8
 800c69e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6a2:	633a      	str	r2, [r7, #48]	; 0x30
 800c6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6aa:	e841 2300 	strex	r3, r2, [r1]
 800c6ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1e3      	bne.n	800c67e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2220      	movs	r2, #32
 800c6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	e853 3f00 	ldrex	r3, [r3]
 800c6d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f023 0310 	bic.w	r3, r3, #16
 800c6de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6ec:	61fb      	str	r3, [r7, #28]
 800c6ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	69b9      	ldr	r1, [r7, #24]
 800c6f2:	69fa      	ldr	r2, [r7, #28]
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	617b      	str	r3, [r7, #20]
   return(result);
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e4      	bne.n	800c6ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c706:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f881 	bl	800c814 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c712:	e063      	b.n	800c7dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <HAL_UART_IRQHandler+0x6c6>
 800c720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d008      	beq.n	800c73e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c734:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f001 f83b 	bl	800d7b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c73c:	e051      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c746:	2b00      	cmp	r3, #0
 800c748:	d014      	beq.n	800c774 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c752:	2b00      	cmp	r3, #0
 800c754:	d105      	bne.n	800c762 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c75a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d008      	beq.n	800c774 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c766:	2b00      	cmp	r3, #0
 800c768:	d03a      	beq.n	800c7e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	4798      	blx	r3
    }
    return;
 800c772:	e035      	b.n	800c7e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d009      	beq.n	800c794 <HAL_UART_IRQHandler+0x71c>
 800c780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 ffe5 	bl	800d75c <UART_EndTransmit_IT>
    return;
 800c792:	e026      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c798:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d009      	beq.n	800c7b4 <HAL_UART_IRQHandler+0x73c>
 800c7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d003      	beq.n	800c7b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f001 f814 	bl	800d7da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7b2:	e016      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d010      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
 800c7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	da0c      	bge.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fffc 	bl	800d7c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7ce:	e008      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c7d0:	bf00      	nop
 800c7d2:	e006      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800c7d4:	bf00      	nop
 800c7d6:	e004      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c7d8:	bf00      	nop
 800c7da:	e002      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
      return;
 800c7dc:	bf00      	nop
 800c7de:	e000      	b.n	800c7e2 <HAL_UART_IRQHandler+0x76a>
    return;
 800c7e0:	bf00      	nop
  }
}
 800c7e2:	37e8      	adds	r7, #232	; 0xe8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	effffffe 	.word	0xeffffffe

0800c7ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c808:	bf00      	nop
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	460b      	mov	r3, r1
 800c81e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c82c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c830:	b092      	sub	sp, #72	; 0x48
 800c832:	af00      	add	r7, sp, #0
 800c834:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	689a      	ldr	r2, [r3, #8]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	431a      	orrs	r2, r3
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	431a      	orrs	r2, r3
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	4313      	orrs	r3, r2
 800c852:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	4bbe      	ldr	r3, [pc, #760]	; (800cb54 <UART_SetConfig+0x328>)
 800c85c:	4013      	ands	r3, r2
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	6812      	ldr	r2, [r2, #0]
 800c862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c864:	430b      	orrs	r3, r1
 800c866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	68da      	ldr	r2, [r3, #12]
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	430a      	orrs	r2, r1
 800c87c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4ab3      	ldr	r2, [pc, #716]	; (800cb58 <UART_SetConfig+0x32c>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d004      	beq.n	800c898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c894:	4313      	orrs	r3, r2
 800c896:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689a      	ldr	r2, [r3, #8]
 800c89e:	4baf      	ldr	r3, [pc, #700]	; (800cb5c <UART_SetConfig+0x330>)
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	697a      	ldr	r2, [r7, #20]
 800c8a4:	6812      	ldr	r2, [r2, #0]
 800c8a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c8a8:	430b      	orrs	r3, r1
 800c8aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	f023 010f 	bic.w	r1, r3, #15
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	430a      	orrs	r2, r1
 800c8c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	4aa6      	ldr	r2, [pc, #664]	; (800cb60 <UART_SetConfig+0x334>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d177      	bne.n	800c9bc <UART_SetConfig+0x190>
 800c8cc:	4ba5      	ldr	r3, [pc, #660]	; (800cb64 <UART_SetConfig+0x338>)
 800c8ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8d4:	2b28      	cmp	r3, #40	; 0x28
 800c8d6:	d86d      	bhi.n	800c9b4 <UART_SetConfig+0x188>
 800c8d8:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <UART_SetConfig+0xb4>)
 800c8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8de:	bf00      	nop
 800c8e0:	0800c985 	.word	0x0800c985
 800c8e4:	0800c9b5 	.word	0x0800c9b5
 800c8e8:	0800c9b5 	.word	0x0800c9b5
 800c8ec:	0800c9b5 	.word	0x0800c9b5
 800c8f0:	0800c9b5 	.word	0x0800c9b5
 800c8f4:	0800c9b5 	.word	0x0800c9b5
 800c8f8:	0800c9b5 	.word	0x0800c9b5
 800c8fc:	0800c9b5 	.word	0x0800c9b5
 800c900:	0800c98d 	.word	0x0800c98d
 800c904:	0800c9b5 	.word	0x0800c9b5
 800c908:	0800c9b5 	.word	0x0800c9b5
 800c90c:	0800c9b5 	.word	0x0800c9b5
 800c910:	0800c9b5 	.word	0x0800c9b5
 800c914:	0800c9b5 	.word	0x0800c9b5
 800c918:	0800c9b5 	.word	0x0800c9b5
 800c91c:	0800c9b5 	.word	0x0800c9b5
 800c920:	0800c995 	.word	0x0800c995
 800c924:	0800c9b5 	.word	0x0800c9b5
 800c928:	0800c9b5 	.word	0x0800c9b5
 800c92c:	0800c9b5 	.word	0x0800c9b5
 800c930:	0800c9b5 	.word	0x0800c9b5
 800c934:	0800c9b5 	.word	0x0800c9b5
 800c938:	0800c9b5 	.word	0x0800c9b5
 800c93c:	0800c9b5 	.word	0x0800c9b5
 800c940:	0800c99d 	.word	0x0800c99d
 800c944:	0800c9b5 	.word	0x0800c9b5
 800c948:	0800c9b5 	.word	0x0800c9b5
 800c94c:	0800c9b5 	.word	0x0800c9b5
 800c950:	0800c9b5 	.word	0x0800c9b5
 800c954:	0800c9b5 	.word	0x0800c9b5
 800c958:	0800c9b5 	.word	0x0800c9b5
 800c95c:	0800c9b5 	.word	0x0800c9b5
 800c960:	0800c9a5 	.word	0x0800c9a5
 800c964:	0800c9b5 	.word	0x0800c9b5
 800c968:	0800c9b5 	.word	0x0800c9b5
 800c96c:	0800c9b5 	.word	0x0800c9b5
 800c970:	0800c9b5 	.word	0x0800c9b5
 800c974:	0800c9b5 	.word	0x0800c9b5
 800c978:	0800c9b5 	.word	0x0800c9b5
 800c97c:	0800c9b5 	.word	0x0800c9b5
 800c980:	0800c9ad 	.word	0x0800c9ad
 800c984:	2301      	movs	r3, #1
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98a:	e222      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c98c:	2304      	movs	r3, #4
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c992:	e21e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c994:	2308      	movs	r3, #8
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c99a:	e21a      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c99c:	2310      	movs	r3, #16
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9a2:	e216      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9aa:	e212      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c9ac:	2340      	movs	r3, #64	; 0x40
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9b2:	e20e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ba:	e20a      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a69      	ldr	r2, [pc, #420]	; (800cb68 <UART_SetConfig+0x33c>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d130      	bne.n	800ca28 <UART_SetConfig+0x1fc>
 800c9c6:	4b67      	ldr	r3, [pc, #412]	; (800cb64 <UART_SetConfig+0x338>)
 800c9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b05      	cmp	r3, #5
 800c9d0:	d826      	bhi.n	800ca20 <UART_SetConfig+0x1f4>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <UART_SetConfig+0x1ac>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800c9f1 	.word	0x0800c9f1
 800c9dc:	0800c9f9 	.word	0x0800c9f9
 800c9e0:	0800ca01 	.word	0x0800ca01
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca11 	.word	0x0800ca11
 800c9ec:	0800ca19 	.word	0x0800ca19
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f6:	e1ec      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800c9f8:	2304      	movs	r3, #4
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fe:	e1e8      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca00:	2308      	movs	r3, #8
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca06:	e1e4      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca08:	2310      	movs	r3, #16
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca0e:	e1e0      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca10:	2320      	movs	r3, #32
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e1dc      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e1d8      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e1d4      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a4f      	ldr	r2, [pc, #316]	; (800cb6c <UART_SetConfig+0x340>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d130      	bne.n	800ca94 <UART_SetConfig+0x268>
 800ca32:	4b4c      	ldr	r3, [pc, #304]	; (800cb64 <UART_SetConfig+0x338>)
 800ca34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	2b05      	cmp	r3, #5
 800ca3c:	d826      	bhi.n	800ca8c <UART_SetConfig+0x260>
 800ca3e:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <UART_SetConfig+0x218>)
 800ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca44:	0800ca5d 	.word	0x0800ca5d
 800ca48:	0800ca65 	.word	0x0800ca65
 800ca4c:	0800ca6d 	.word	0x0800ca6d
 800ca50:	0800ca75 	.word	0x0800ca75
 800ca54:	0800ca7d 	.word	0x0800ca7d
 800ca58:	0800ca85 	.word	0x0800ca85
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca62:	e1b6      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca64:	2304      	movs	r3, #4
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6a:	e1b2      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca6c:	2308      	movs	r3, #8
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca72:	e1ae      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca74:	2310      	movs	r3, #16
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca7a:	e1aa      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca7c:	2320      	movs	r3, #32
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca82:	e1a6      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca84:	2340      	movs	r3, #64	; 0x40
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca8a:	e1a2      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca8c:	2380      	movs	r3, #128	; 0x80
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca92:	e19e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a35      	ldr	r2, [pc, #212]	; (800cb70 <UART_SetConfig+0x344>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d130      	bne.n	800cb00 <UART_SetConfig+0x2d4>
 800ca9e:	4b31      	ldr	r3, [pc, #196]	; (800cb64 <UART_SetConfig+0x338>)
 800caa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa2:	f003 0307 	and.w	r3, r3, #7
 800caa6:	2b05      	cmp	r3, #5
 800caa8:	d826      	bhi.n	800caf8 <UART_SetConfig+0x2cc>
 800caaa:	a201      	add	r2, pc, #4	; (adr r2, 800cab0 <UART_SetConfig+0x284>)
 800caac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab0:	0800cac9 	.word	0x0800cac9
 800cab4:	0800cad1 	.word	0x0800cad1
 800cab8:	0800cad9 	.word	0x0800cad9
 800cabc:	0800cae1 	.word	0x0800cae1
 800cac0:	0800cae9 	.word	0x0800cae9
 800cac4:	0800caf1 	.word	0x0800caf1
 800cac8:	2300      	movs	r3, #0
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cace:	e180      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cad0:	2304      	movs	r3, #4
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad6:	e17c      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cad8:	2308      	movs	r3, #8
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cade:	e178      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cae0:	2310      	movs	r3, #16
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cae6:	e174      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cae8:	2320      	movs	r3, #32
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caee:	e170      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800caf0:	2340      	movs	r3, #64	; 0x40
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf6:	e16c      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800caf8:	2380      	movs	r3, #128	; 0x80
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafe:	e168      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a1b      	ldr	r2, [pc, #108]	; (800cb74 <UART_SetConfig+0x348>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d142      	bne.n	800cb90 <UART_SetConfig+0x364>
 800cb0a:	4b16      	ldr	r3, [pc, #88]	; (800cb64 <UART_SetConfig+0x338>)
 800cb0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb0e:	f003 0307 	and.w	r3, r3, #7
 800cb12:	2b05      	cmp	r3, #5
 800cb14:	d838      	bhi.n	800cb88 <UART_SetConfig+0x35c>
 800cb16:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <UART_SetConfig+0x2f0>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb35 	.word	0x0800cb35
 800cb20:	0800cb3d 	.word	0x0800cb3d
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	0800cb4d 	.word	0x0800cb4d
 800cb2c:	0800cb79 	.word	0x0800cb79
 800cb30:	0800cb81 	.word	0x0800cb81
 800cb34:	2300      	movs	r3, #0
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb3a:	e14a      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb3c:	2304      	movs	r3, #4
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb42:	e146      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb44:	2308      	movs	r3, #8
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb4a:	e142      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb4c:	2310      	movs	r3, #16
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb52:	e13e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb54:	cfff69f3 	.word	0xcfff69f3
 800cb58:	58000c00 	.word	0x58000c00
 800cb5c:	11fff4ff 	.word	0x11fff4ff
 800cb60:	40011000 	.word	0x40011000
 800cb64:	58024400 	.word	0x58024400
 800cb68:	40004400 	.word	0x40004400
 800cb6c:	40004800 	.word	0x40004800
 800cb70:	40004c00 	.word	0x40004c00
 800cb74:	40005000 	.word	0x40005000
 800cb78:	2320      	movs	r3, #32
 800cb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7e:	e128      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb80:	2340      	movs	r3, #64	; 0x40
 800cb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb86:	e124      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb88:	2380      	movs	r3, #128	; 0x80
 800cb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8e:	e120      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4acb      	ldr	r2, [pc, #812]	; (800cec4 <UART_SetConfig+0x698>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d176      	bne.n	800cc88 <UART_SetConfig+0x45c>
 800cb9a:	4bcb      	ldr	r3, [pc, #812]	; (800cec8 <UART_SetConfig+0x69c>)
 800cb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cba2:	2b28      	cmp	r3, #40	; 0x28
 800cba4:	d86c      	bhi.n	800cc80 <UART_SetConfig+0x454>
 800cba6:	a201      	add	r2, pc, #4	; (adr r2, 800cbac <UART_SetConfig+0x380>)
 800cba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbac:	0800cc51 	.word	0x0800cc51
 800cbb0:	0800cc81 	.word	0x0800cc81
 800cbb4:	0800cc81 	.word	0x0800cc81
 800cbb8:	0800cc81 	.word	0x0800cc81
 800cbbc:	0800cc81 	.word	0x0800cc81
 800cbc0:	0800cc81 	.word	0x0800cc81
 800cbc4:	0800cc81 	.word	0x0800cc81
 800cbc8:	0800cc81 	.word	0x0800cc81
 800cbcc:	0800cc59 	.word	0x0800cc59
 800cbd0:	0800cc81 	.word	0x0800cc81
 800cbd4:	0800cc81 	.word	0x0800cc81
 800cbd8:	0800cc81 	.word	0x0800cc81
 800cbdc:	0800cc81 	.word	0x0800cc81
 800cbe0:	0800cc81 	.word	0x0800cc81
 800cbe4:	0800cc81 	.word	0x0800cc81
 800cbe8:	0800cc81 	.word	0x0800cc81
 800cbec:	0800cc61 	.word	0x0800cc61
 800cbf0:	0800cc81 	.word	0x0800cc81
 800cbf4:	0800cc81 	.word	0x0800cc81
 800cbf8:	0800cc81 	.word	0x0800cc81
 800cbfc:	0800cc81 	.word	0x0800cc81
 800cc00:	0800cc81 	.word	0x0800cc81
 800cc04:	0800cc81 	.word	0x0800cc81
 800cc08:	0800cc81 	.word	0x0800cc81
 800cc0c:	0800cc69 	.word	0x0800cc69
 800cc10:	0800cc81 	.word	0x0800cc81
 800cc14:	0800cc81 	.word	0x0800cc81
 800cc18:	0800cc81 	.word	0x0800cc81
 800cc1c:	0800cc81 	.word	0x0800cc81
 800cc20:	0800cc81 	.word	0x0800cc81
 800cc24:	0800cc81 	.word	0x0800cc81
 800cc28:	0800cc81 	.word	0x0800cc81
 800cc2c:	0800cc71 	.word	0x0800cc71
 800cc30:	0800cc81 	.word	0x0800cc81
 800cc34:	0800cc81 	.word	0x0800cc81
 800cc38:	0800cc81 	.word	0x0800cc81
 800cc3c:	0800cc81 	.word	0x0800cc81
 800cc40:	0800cc81 	.word	0x0800cc81
 800cc44:	0800cc81 	.word	0x0800cc81
 800cc48:	0800cc81 	.word	0x0800cc81
 800cc4c:	0800cc79 	.word	0x0800cc79
 800cc50:	2301      	movs	r3, #1
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc56:	e0bc      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc58:	2304      	movs	r3, #4
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5e:	e0b8      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc60:	2308      	movs	r3, #8
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc66:	e0b4      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc6e:	e0b0      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc70:	2320      	movs	r3, #32
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc76:	e0ac      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e0a8      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc80:	2380      	movs	r3, #128	; 0x80
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e0a4      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a8f      	ldr	r2, [pc, #572]	; (800cecc <UART_SetConfig+0x6a0>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d130      	bne.n	800ccf4 <UART_SetConfig+0x4c8>
 800cc92:	4b8d      	ldr	r3, [pc, #564]	; (800cec8 <UART_SetConfig+0x69c>)
 800cc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	2b05      	cmp	r3, #5
 800cc9c:	d826      	bhi.n	800ccec <UART_SetConfig+0x4c0>
 800cc9e:	a201      	add	r2, pc, #4	; (adr r2, 800cca4 <UART_SetConfig+0x478>)
 800cca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cca4:	0800ccbd 	.word	0x0800ccbd
 800cca8:	0800ccc5 	.word	0x0800ccc5
 800ccac:	0800cccd 	.word	0x0800cccd
 800ccb0:	0800ccd5 	.word	0x0800ccd5
 800ccb4:	0800ccdd 	.word	0x0800ccdd
 800ccb8:	0800cce5 	.word	0x0800cce5
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc2:	e086      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccca:	e082      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cccc:	2308      	movs	r3, #8
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccd2:	e07e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ccd4:	2310      	movs	r3, #16
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccda:	e07a      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ccdc:	2320      	movs	r3, #32
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cce2:	e076      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e072      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ccec:	2380      	movs	r3, #128	; 0x80
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e06e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a75      	ldr	r2, [pc, #468]	; (800ced0 <UART_SetConfig+0x6a4>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d130      	bne.n	800cd60 <UART_SetConfig+0x534>
 800ccfe:	4b72      	ldr	r3, [pc, #456]	; (800cec8 <UART_SetConfig+0x69c>)
 800cd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd02:	f003 0307 	and.w	r3, r3, #7
 800cd06:	2b05      	cmp	r3, #5
 800cd08:	d826      	bhi.n	800cd58 <UART_SetConfig+0x52c>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <UART_SetConfig+0x4e4>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd29 	.word	0x0800cd29
 800cd14:	0800cd31 	.word	0x0800cd31
 800cd18:	0800cd39 	.word	0x0800cd39
 800cd1c:	0800cd41 	.word	0x0800cd41
 800cd20:	0800cd49 	.word	0x0800cd49
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2e:	e050      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd30:	2304      	movs	r3, #4
 800cd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd36:	e04c      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd38:	2308      	movs	r3, #8
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3e:	e048      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd40:	2310      	movs	r3, #16
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd46:	e044      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd48:	2320      	movs	r3, #32
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd4e:	e040      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd50:	2340      	movs	r3, #64	; 0x40
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd56:	e03c      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd58:	2380      	movs	r3, #128	; 0x80
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5e:	e038      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a5b      	ldr	r2, [pc, #364]	; (800ced4 <UART_SetConfig+0x6a8>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d130      	bne.n	800cdcc <UART_SetConfig+0x5a0>
 800cd6a:	4b57      	ldr	r3, [pc, #348]	; (800cec8 <UART_SetConfig+0x69c>)
 800cd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd6e:	f003 0307 	and.w	r3, r3, #7
 800cd72:	2b05      	cmp	r3, #5
 800cd74:	d826      	bhi.n	800cdc4 <UART_SetConfig+0x598>
 800cd76:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <UART_SetConfig+0x550>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd95 	.word	0x0800cd95
 800cd80:	0800cd9d 	.word	0x0800cd9d
 800cd84:	0800cda5 	.word	0x0800cda5
 800cd88:	0800cdad 	.word	0x0800cdad
 800cd8c:	0800cdb5 	.word	0x0800cdb5
 800cd90:	0800cdbd 	.word	0x0800cdbd
 800cd94:	2302      	movs	r3, #2
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9a:	e01a      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cd9c:	2304      	movs	r3, #4
 800cd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda2:	e016      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cda4:	2308      	movs	r3, #8
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdaa:	e012      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cdac:	2310      	movs	r3, #16
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdb2:	e00e      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cdb4:	2320      	movs	r3, #32
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdba:	e00a      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cdbc:	2340      	movs	r3, #64	; 0x40
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc2:	e006      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cdc4:	2380      	movs	r3, #128	; 0x80
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdca:	e002      	b.n	800cdd2 <UART_SetConfig+0x5a6>
 800cdcc:	2380      	movs	r3, #128	; 0x80
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a3f      	ldr	r2, [pc, #252]	; (800ced4 <UART_SetConfig+0x6a8>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	f040 80f8 	bne.w	800cfce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cde2:	2b20      	cmp	r3, #32
 800cde4:	dc46      	bgt.n	800ce74 <UART_SetConfig+0x648>
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	f2c0 8082 	blt.w	800cef0 <UART_SetConfig+0x6c4>
 800cdec:	3b02      	subs	r3, #2
 800cdee:	2b1e      	cmp	r3, #30
 800cdf0:	d87e      	bhi.n	800cef0 <UART_SetConfig+0x6c4>
 800cdf2:	a201      	add	r2, pc, #4	; (adr r2, 800cdf8 <UART_SetConfig+0x5cc>)
 800cdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdf8:	0800ce7b 	.word	0x0800ce7b
 800cdfc:	0800cef1 	.word	0x0800cef1
 800ce00:	0800ce83 	.word	0x0800ce83
 800ce04:	0800cef1 	.word	0x0800cef1
 800ce08:	0800cef1 	.word	0x0800cef1
 800ce0c:	0800cef1 	.word	0x0800cef1
 800ce10:	0800ce93 	.word	0x0800ce93
 800ce14:	0800cef1 	.word	0x0800cef1
 800ce18:	0800cef1 	.word	0x0800cef1
 800ce1c:	0800cef1 	.word	0x0800cef1
 800ce20:	0800cef1 	.word	0x0800cef1
 800ce24:	0800cef1 	.word	0x0800cef1
 800ce28:	0800cef1 	.word	0x0800cef1
 800ce2c:	0800cef1 	.word	0x0800cef1
 800ce30:	0800cea3 	.word	0x0800cea3
 800ce34:	0800cef1 	.word	0x0800cef1
 800ce38:	0800cef1 	.word	0x0800cef1
 800ce3c:	0800cef1 	.word	0x0800cef1
 800ce40:	0800cef1 	.word	0x0800cef1
 800ce44:	0800cef1 	.word	0x0800cef1
 800ce48:	0800cef1 	.word	0x0800cef1
 800ce4c:	0800cef1 	.word	0x0800cef1
 800ce50:	0800cef1 	.word	0x0800cef1
 800ce54:	0800cef1 	.word	0x0800cef1
 800ce58:	0800cef1 	.word	0x0800cef1
 800ce5c:	0800cef1 	.word	0x0800cef1
 800ce60:	0800cef1 	.word	0x0800cef1
 800ce64:	0800cef1 	.word	0x0800cef1
 800ce68:	0800cef1 	.word	0x0800cef1
 800ce6c:	0800cef1 	.word	0x0800cef1
 800ce70:	0800cee3 	.word	0x0800cee3
 800ce74:	2b40      	cmp	r3, #64	; 0x40
 800ce76:	d037      	beq.n	800cee8 <UART_SetConfig+0x6bc>
 800ce78:	e03a      	b.n	800cef0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce7a:	f7fd fef1 	bl	800ac60 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce80:	e03c      	b.n	800cefc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fd ff00 	bl	800ac8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce90:	e034      	b.n	800cefc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce92:	f107 0318 	add.w	r3, r7, #24
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fe f84c 	bl	800af34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea0:	e02c      	b.n	800cefc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cea2:	4b09      	ldr	r3, [pc, #36]	; (800cec8 <UART_SetConfig+0x69c>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f003 0320 	and.w	r3, r3, #32
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d016      	beq.n	800cedc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceae:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <UART_SetConfig+0x69c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	08db      	lsrs	r3, r3, #3
 800ceb4:	f003 0303 	and.w	r3, r3, #3
 800ceb8:	4a07      	ldr	r2, [pc, #28]	; (800ced8 <UART_SetConfig+0x6ac>)
 800ceba:	fa22 f303 	lsr.w	r3, r2, r3
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cec0:	e01c      	b.n	800cefc <UART_SetConfig+0x6d0>
 800cec2:	bf00      	nop
 800cec4:	40011400 	.word	0x40011400
 800cec8:	58024400 	.word	0x58024400
 800cecc:	40007800 	.word	0x40007800
 800ced0:	40007c00 	.word	0x40007c00
 800ced4:	58000c00 	.word	0x58000c00
 800ced8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cedc:	4b9d      	ldr	r3, [pc, #628]	; (800d154 <UART_SetConfig+0x928>)
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee0:	e00c      	b.n	800cefc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cee2:	4b9d      	ldr	r3, [pc, #628]	; (800d158 <UART_SetConfig+0x92c>)
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee6:	e009      	b.n	800cefc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cee8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceee:	e005      	b.n	800cefc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cef4:	2301      	movs	r3, #1
 800cef6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cefa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cefc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	f000 81de 	beq.w	800d2c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf08:	4a94      	ldr	r2, [pc, #592]	; (800d15c <UART_SetConfig+0x930>)
 800cf0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf0e:	461a      	mov	r2, r3
 800cf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf12:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf16:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	4413      	add	r3, r2
 800cf22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d305      	bcc.n	800cf34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d903      	bls.n	800cf3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf34:	2301      	movs	r3, #1
 800cf36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf3a:	e1c1      	b.n	800d2c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf3e:	2200      	movs	r2, #0
 800cf40:	60bb      	str	r3, [r7, #8]
 800cf42:	60fa      	str	r2, [r7, #12]
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf48:	4a84      	ldr	r2, [pc, #528]	; (800d15c <UART_SetConfig+0x930>)
 800cf4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	2200      	movs	r2, #0
 800cf52:	603b      	str	r3, [r7, #0]
 800cf54:	607a      	str	r2, [r7, #4]
 800cf56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf5e:	f7f3 fa0f 	bl	8000380 <__aeabi_uldivmod>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4610      	mov	r0, r2
 800cf68:	4619      	mov	r1, r3
 800cf6a:	f04f 0200 	mov.w	r2, #0
 800cf6e:	f04f 0300 	mov.w	r3, #0
 800cf72:	020b      	lsls	r3, r1, #8
 800cf74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf78:	0202      	lsls	r2, r0, #8
 800cf7a:	6979      	ldr	r1, [r7, #20]
 800cf7c:	6849      	ldr	r1, [r1, #4]
 800cf7e:	0849      	lsrs	r1, r1, #1
 800cf80:	2000      	movs	r0, #0
 800cf82:	460c      	mov	r4, r1
 800cf84:	4605      	mov	r5, r0
 800cf86:	eb12 0804 	adds.w	r8, r2, r4
 800cf8a:	eb43 0905 	adc.w	r9, r3, r5
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	469a      	mov	sl, r3
 800cf96:	4693      	mov	fp, r2
 800cf98:	4652      	mov	r2, sl
 800cf9a:	465b      	mov	r3, fp
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	f7f3 f9ee 	bl	8000380 <__aeabi_uldivmod>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfb2:	d308      	bcc.n	800cfc6 <UART_SetConfig+0x79a>
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfba:	d204      	bcs.n	800cfc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfc2:	60da      	str	r2, [r3, #12]
 800cfc4:	e17c      	b.n	800d2c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cfcc:	e178      	b.n	800d2c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	69db      	ldr	r3, [r3, #28]
 800cfd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfd6:	f040 80c5 	bne.w	800d164 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cfda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cfde:	2b20      	cmp	r3, #32
 800cfe0:	dc48      	bgt.n	800d074 <UART_SetConfig+0x848>
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	db7b      	blt.n	800d0de <UART_SetConfig+0x8b2>
 800cfe6:	2b20      	cmp	r3, #32
 800cfe8:	d879      	bhi.n	800d0de <UART_SetConfig+0x8b2>
 800cfea:	a201      	add	r2, pc, #4	; (adr r2, 800cff0 <UART_SetConfig+0x7c4>)
 800cfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cff0:	0800d07b 	.word	0x0800d07b
 800cff4:	0800d083 	.word	0x0800d083
 800cff8:	0800d0df 	.word	0x0800d0df
 800cffc:	0800d0df 	.word	0x0800d0df
 800d000:	0800d08b 	.word	0x0800d08b
 800d004:	0800d0df 	.word	0x0800d0df
 800d008:	0800d0df 	.word	0x0800d0df
 800d00c:	0800d0df 	.word	0x0800d0df
 800d010:	0800d09b 	.word	0x0800d09b
 800d014:	0800d0df 	.word	0x0800d0df
 800d018:	0800d0df 	.word	0x0800d0df
 800d01c:	0800d0df 	.word	0x0800d0df
 800d020:	0800d0df 	.word	0x0800d0df
 800d024:	0800d0df 	.word	0x0800d0df
 800d028:	0800d0df 	.word	0x0800d0df
 800d02c:	0800d0df 	.word	0x0800d0df
 800d030:	0800d0ab 	.word	0x0800d0ab
 800d034:	0800d0df 	.word	0x0800d0df
 800d038:	0800d0df 	.word	0x0800d0df
 800d03c:	0800d0df 	.word	0x0800d0df
 800d040:	0800d0df 	.word	0x0800d0df
 800d044:	0800d0df 	.word	0x0800d0df
 800d048:	0800d0df 	.word	0x0800d0df
 800d04c:	0800d0df 	.word	0x0800d0df
 800d050:	0800d0df 	.word	0x0800d0df
 800d054:	0800d0df 	.word	0x0800d0df
 800d058:	0800d0df 	.word	0x0800d0df
 800d05c:	0800d0df 	.word	0x0800d0df
 800d060:	0800d0df 	.word	0x0800d0df
 800d064:	0800d0df 	.word	0x0800d0df
 800d068:	0800d0df 	.word	0x0800d0df
 800d06c:	0800d0df 	.word	0x0800d0df
 800d070:	0800d0d1 	.word	0x0800d0d1
 800d074:	2b40      	cmp	r3, #64	; 0x40
 800d076:	d02e      	beq.n	800d0d6 <UART_SetConfig+0x8aa>
 800d078:	e031      	b.n	800d0de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d07a:	f7fc fbbb 	bl	80097f4 <HAL_RCC_GetPCLK1Freq>
 800d07e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d080:	e033      	b.n	800d0ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d082:	f7fc fbcd 	bl	8009820 <HAL_RCC_GetPCLK2Freq>
 800d086:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d088:	e02f      	b.n	800d0ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d08a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fd fdfc 	bl	800ac8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d098:	e027      	b.n	800d0ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d09a:	f107 0318 	add.w	r3, r7, #24
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fd ff48 	bl	800af34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0a8:	e01f      	b.n	800d0ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0aa:	4b2d      	ldr	r3, [pc, #180]	; (800d160 <UART_SetConfig+0x934>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0320 	and.w	r3, r3, #32
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d009      	beq.n	800d0ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0b6:	4b2a      	ldr	r3, [pc, #168]	; (800d160 <UART_SetConfig+0x934>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	f003 0303 	and.w	r3, r3, #3
 800d0c0:	4a24      	ldr	r2, [pc, #144]	; (800d154 <UART_SetConfig+0x928>)
 800d0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0c8:	e00f      	b.n	800d0ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d0ca:	4b22      	ldr	r3, [pc, #136]	; (800d154 <UART_SetConfig+0x928>)
 800d0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0ce:	e00c      	b.n	800d0ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0d0:	4b21      	ldr	r3, [pc, #132]	; (800d158 <UART_SetConfig+0x92c>)
 800d0d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0d4:	e009      	b.n	800d0ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0dc:	e005      	b.n	800d0ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d0e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 80e7 	beq.w	800d2c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	4a19      	ldr	r2, [pc, #100]	; (800d15c <UART_SetConfig+0x930>)
 800d0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d100:	fbb3 f3f2 	udiv	r3, r3, r2
 800d104:	005a      	lsls	r2, r3, #1
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	441a      	add	r2, r3
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	fbb2 f3f3 	udiv	r3, r2, r3
 800d116:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	2b0f      	cmp	r3, #15
 800d11c:	d916      	bls.n	800d14c <UART_SetConfig+0x920>
 800d11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d124:	d212      	bcs.n	800d14c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d128:	b29b      	uxth	r3, r3
 800d12a:	f023 030f 	bic.w	r3, r3, #15
 800d12e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d132:	085b      	lsrs	r3, r3, #1
 800d134:	b29b      	uxth	r3, r3
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d13e:	4313      	orrs	r3, r2
 800d140:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d148:	60da      	str	r2, [r3, #12]
 800d14a:	e0b9      	b.n	800d2c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d152:	e0b5      	b.n	800d2c0 <UART_SetConfig+0xa94>
 800d154:	03d09000 	.word	0x03d09000
 800d158:	003d0900 	.word	0x003d0900
 800d15c:	080145cc 	.word	0x080145cc
 800d160:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d164:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d168:	2b20      	cmp	r3, #32
 800d16a:	dc49      	bgt.n	800d200 <UART_SetConfig+0x9d4>
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	db7c      	blt.n	800d26a <UART_SetConfig+0xa3e>
 800d170:	2b20      	cmp	r3, #32
 800d172:	d87a      	bhi.n	800d26a <UART_SetConfig+0xa3e>
 800d174:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <UART_SetConfig+0x950>)
 800d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d207 	.word	0x0800d207
 800d180:	0800d20f 	.word	0x0800d20f
 800d184:	0800d26b 	.word	0x0800d26b
 800d188:	0800d26b 	.word	0x0800d26b
 800d18c:	0800d217 	.word	0x0800d217
 800d190:	0800d26b 	.word	0x0800d26b
 800d194:	0800d26b 	.word	0x0800d26b
 800d198:	0800d26b 	.word	0x0800d26b
 800d19c:	0800d227 	.word	0x0800d227
 800d1a0:	0800d26b 	.word	0x0800d26b
 800d1a4:	0800d26b 	.word	0x0800d26b
 800d1a8:	0800d26b 	.word	0x0800d26b
 800d1ac:	0800d26b 	.word	0x0800d26b
 800d1b0:	0800d26b 	.word	0x0800d26b
 800d1b4:	0800d26b 	.word	0x0800d26b
 800d1b8:	0800d26b 	.word	0x0800d26b
 800d1bc:	0800d237 	.word	0x0800d237
 800d1c0:	0800d26b 	.word	0x0800d26b
 800d1c4:	0800d26b 	.word	0x0800d26b
 800d1c8:	0800d26b 	.word	0x0800d26b
 800d1cc:	0800d26b 	.word	0x0800d26b
 800d1d0:	0800d26b 	.word	0x0800d26b
 800d1d4:	0800d26b 	.word	0x0800d26b
 800d1d8:	0800d26b 	.word	0x0800d26b
 800d1dc:	0800d26b 	.word	0x0800d26b
 800d1e0:	0800d26b 	.word	0x0800d26b
 800d1e4:	0800d26b 	.word	0x0800d26b
 800d1e8:	0800d26b 	.word	0x0800d26b
 800d1ec:	0800d26b 	.word	0x0800d26b
 800d1f0:	0800d26b 	.word	0x0800d26b
 800d1f4:	0800d26b 	.word	0x0800d26b
 800d1f8:	0800d26b 	.word	0x0800d26b
 800d1fc:	0800d25d 	.word	0x0800d25d
 800d200:	2b40      	cmp	r3, #64	; 0x40
 800d202:	d02e      	beq.n	800d262 <UART_SetConfig+0xa36>
 800d204:	e031      	b.n	800d26a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d206:	f7fc faf5 	bl	80097f4 <HAL_RCC_GetPCLK1Freq>
 800d20a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d20c:	e033      	b.n	800d276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d20e:	f7fc fb07 	bl	8009820 <HAL_RCC_GetPCLK2Freq>
 800d212:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d214:	e02f      	b.n	800d276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fd fd36 	bl	800ac8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d224:	e027      	b.n	800d276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d226:	f107 0318 	add.w	r3, r7, #24
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fd fe82 	bl	800af34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d234:	e01f      	b.n	800d276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d236:	4b2d      	ldr	r3, [pc, #180]	; (800d2ec <UART_SetConfig+0xac0>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 0320 	and.w	r3, r3, #32
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d009      	beq.n	800d256 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d242:	4b2a      	ldr	r3, [pc, #168]	; (800d2ec <UART_SetConfig+0xac0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	08db      	lsrs	r3, r3, #3
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	4a28      	ldr	r2, [pc, #160]	; (800d2f0 <UART_SetConfig+0xac4>)
 800d24e:	fa22 f303 	lsr.w	r3, r2, r3
 800d252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d254:	e00f      	b.n	800d276 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d256:	4b26      	ldr	r3, [pc, #152]	; (800d2f0 <UART_SetConfig+0xac4>)
 800d258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d25a:	e00c      	b.n	800d276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d25c:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <UART_SetConfig+0xac8>)
 800d25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d260:	e009      	b.n	800d276 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d268:	e005      	b.n	800d276 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d26a:	2300      	movs	r3, #0
 800d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d274:	bf00      	nop
    }

    if (pclk != 0U)
 800d276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d021      	beq.n	800d2c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d280:	4a1d      	ldr	r2, [pc, #116]	; (800d2f8 <UART_SetConfig+0xacc>)
 800d282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d286:	461a      	mov	r2, r3
 800d288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	085b      	lsrs	r3, r3, #1
 800d294:	441a      	add	r2, r3
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d29e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a2:	2b0f      	cmp	r3, #15
 800d2a4:	d909      	bls.n	800d2ba <UART_SetConfig+0xa8e>
 800d2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2ac:	d205      	bcs.n	800d2ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	60da      	str	r2, [r3, #12]
 800d2b8:	e002      	b.n	800d2c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d2dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3748      	adds	r7, #72	; 0x48
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2ea:	bf00      	nop
 800d2ec:	58024400 	.word	0x58024400
 800d2f0:	03d09000 	.word	0x03d09000
 800d2f4:	003d0900 	.word	0x003d0900
 800d2f8:	080145cc 	.word	0x080145cc

0800d2fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00a      	beq.n	800d326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	430a      	orrs	r2, r1
 800d324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d32a:	f003 0302 	and.w	r3, r3, #2
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00a      	beq.n	800d348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	430a      	orrs	r2, r1
 800d346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34c:	f003 0304 	and.w	r3, r3, #4
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00a      	beq.n	800d36a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	685b      	ldr	r3, [r3, #4]
 800d35a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	430a      	orrs	r2, r1
 800d368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36e:	f003 0308 	and.w	r3, r3, #8
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00a      	beq.n	800d38c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	430a      	orrs	r2, r1
 800d38a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d390:	f003 0310 	and.w	r3, r3, #16
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00a      	beq.n	800d3ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	430a      	orrs	r2, r1
 800d3ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b2:	f003 0320 	and.w	r3, r3, #32
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00a      	beq.n	800d3d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d01a      	beq.n	800d412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3fa:	d10a      	bne.n	800d412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	430a      	orrs	r2, r1
 800d410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00a      	beq.n	800d434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	430a      	orrs	r2, r1
 800d432:	605a      	str	r2, [r3, #4]
  }
}
 800d434:	bf00      	nop
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b098      	sub	sp, #96	; 0x60
 800d444:	af02      	add	r7, sp, #8
 800d446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d450:	f7f7 fa36 	bl	80048c0 <HAL_GetTick>
 800d454:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	2b08      	cmp	r3, #8
 800d462:	d12f      	bne.n	800d4c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d46c:	2200      	movs	r2, #0
 800d46e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f88e 	bl	800d594 <UART_WaitOnFlagUntilTimeout>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d022      	beq.n	800d4c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d486:	e853 3f00 	ldrex	r3, [r3]
 800d48a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d48e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d492:	653b      	str	r3, [r7, #80]	; 0x50
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	461a      	mov	r2, r3
 800d49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d49c:	647b      	str	r3, [r7, #68]	; 0x44
 800d49e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d4a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4a4:	e841 2300 	strex	r3, r2, [r1]
 800d4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1e6      	bne.n	800d47e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2220      	movs	r2, #32
 800d4b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	e063      	b.n	800d58c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f003 0304 	and.w	r3, r3, #4
 800d4ce:	2b04      	cmp	r3, #4
 800d4d0:	d149      	bne.n	800d566 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4d6:	9300      	str	r3, [sp, #0]
 800d4d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f857 	bl	800d594 <UART_WaitOnFlagUntilTimeout>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d03c      	beq.n	800d566 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f4:	e853 3f00 	ldrex	r3, [r3]
 800d4f8:	623b      	str	r3, [r7, #32]
   return(result);
 800d4fa:	6a3b      	ldr	r3, [r7, #32]
 800d4fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d500:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50a:	633b      	str	r3, [r7, #48]	; 0x30
 800d50c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d512:	e841 2300 	strex	r3, r2, [r1]
 800d516:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d1e6      	bne.n	800d4ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	3308      	adds	r3, #8
 800d524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	e853 3f00 	ldrex	r3, [r3]
 800d52c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f023 0301 	bic.w	r3, r3, #1
 800d534:	64bb      	str	r3, [r7, #72]	; 0x48
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	3308      	adds	r3, #8
 800d53c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d53e:	61fa      	str	r2, [r7, #28]
 800d540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d542:	69b9      	ldr	r1, [r7, #24]
 800d544:	69fa      	ldr	r2, [r7, #28]
 800d546:	e841 2300 	strex	r3, r2, [r1]
 800d54a:	617b      	str	r3, [r7, #20]
   return(result);
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d1e5      	bne.n	800d51e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2220      	movs	r2, #32
 800d556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d562:	2303      	movs	r3, #3
 800d564:	e012      	b.n	800d58c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2220      	movs	r2, #32
 800d56a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2220      	movs	r2, #32
 800d572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3758      	adds	r7, #88	; 0x58
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5a4:	e049      	b.n	800d63a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ac:	d045      	beq.n	800d63a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5ae:	f7f7 f987 	bl	80048c0 <HAL_GetTick>
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d302      	bcc.n	800d5c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e048      	b.n	800d65a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 0304 	and.w	r3, r3, #4
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d031      	beq.n	800d63a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	69db      	ldr	r3, [r3, #28]
 800d5dc:	f003 0308 	and.w	r3, r3, #8
 800d5e0:	2b08      	cmp	r3, #8
 800d5e2:	d110      	bne.n	800d606 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2208      	movs	r2, #8
 800d5ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f000 f839 	bl	800d664 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2208      	movs	r2, #8
 800d5f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d602:	2301      	movs	r3, #1
 800d604:	e029      	b.n	800d65a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	69db      	ldr	r3, [r3, #28]
 800d60c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d614:	d111      	bne.n	800d63a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d61e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f000 f81f 	bl	800d664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2220      	movs	r2, #32
 800d62a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d636:	2303      	movs	r3, #3
 800d638:	e00f      	b.n	800d65a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	69da      	ldr	r2, [r3, #28]
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	4013      	ands	r3, r2
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	429a      	cmp	r2, r3
 800d648:	bf0c      	ite	eq
 800d64a:	2301      	moveq	r3, #1
 800d64c:	2300      	movne	r3, #0
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	461a      	mov	r2, r3
 800d652:	79fb      	ldrb	r3, [r7, #7]
 800d654:	429a      	cmp	r2, r3
 800d656:	d0a6      	beq.n	800d5a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d664:	b480      	push	{r7}
 800d666:	b095      	sub	sp, #84	; 0x54
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	e853 3f00 	ldrex	r3, [r3]
 800d678:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d680:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	461a      	mov	r2, r3
 800d688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d68a:	643b      	str	r3, [r7, #64]	; 0x40
 800d68c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d68e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d692:	e841 2300 	strex	r3, r2, [r1]
 800d696:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1e6      	bne.n	800d66c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	3308      	adds	r3, #8
 800d6a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6ae:	69fa      	ldr	r2, [r7, #28]
 800d6b0:	4b1e      	ldr	r3, [pc, #120]	; (800d72c <UART_EndRxTransfer+0xc8>)
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3308      	adds	r3, #8
 800d6bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d6c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6c6:	e841 2300 	strex	r3, r2, [r1]
 800d6ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1e5      	bne.n	800d69e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d118      	bne.n	800d70c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	e853 3f00 	ldrex	r3, [r3]
 800d6e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	f023 0310 	bic.w	r3, r3, #16
 800d6ee:	647b      	str	r3, [r7, #68]	; 0x44
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6f8:	61bb      	str	r3, [r7, #24]
 800d6fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	6979      	ldr	r1, [r7, #20]
 800d6fe:	69ba      	ldr	r2, [r7, #24]
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	613b      	str	r3, [r7, #16]
   return(result);
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e6      	bne.n	800d6da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2220      	movs	r2, #32
 800d710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d720:	bf00      	nop
 800d722:	3754      	adds	r7, #84	; 0x54
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	effffffe 	.word	0xeffffffe

0800d730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2200      	movs	r2, #0
 800d74a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f7ff f856 	bl	800c800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d754:	bf00      	nop
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b088      	sub	sp, #32
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	e853 3f00 	ldrex	r3, [r3]
 800d770:	60bb      	str	r3, [r7, #8]
   return(result);
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d778:	61fb      	str	r3, [r7, #28]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	61bb      	str	r3, [r7, #24]
 800d784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d786:	6979      	ldr	r1, [r7, #20]
 800d788:	69ba      	ldr	r2, [r7, #24]
 800d78a:	e841 2300 	strex	r3, r2, [r1]
 800d78e:	613b      	str	r3, [r7, #16]
   return(result);
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1e6      	bne.n	800d764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2220      	movs	r2, #32
 800d79a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff f821 	bl	800c7ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7aa:	bf00      	nop
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b083      	sub	sp, #12
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d7ba:	bf00      	nop
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7ce:	bf00      	nop
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b083      	sub	sp, #12
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7e2:	bf00      	nop
 800d7e4:	370c      	adds	r7, #12
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
	...

0800d7f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d121      	bne.n	800d846 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	4b27      	ldr	r3, [pc, #156]	; (800d8a4 <FMC_SDRAM_Init+0xb4>)
 800d808:	4013      	ands	r3, r2
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	6851      	ldr	r1, [r2, #4]
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	6892      	ldr	r2, [r2, #8]
 800d812:	4311      	orrs	r1, r2
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	68d2      	ldr	r2, [r2, #12]
 800d818:	4311      	orrs	r1, r2
 800d81a:	683a      	ldr	r2, [r7, #0]
 800d81c:	6912      	ldr	r2, [r2, #16]
 800d81e:	4311      	orrs	r1, r2
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	6952      	ldr	r2, [r2, #20]
 800d824:	4311      	orrs	r1, r2
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	6992      	ldr	r2, [r2, #24]
 800d82a:	4311      	orrs	r1, r2
 800d82c:	683a      	ldr	r2, [r7, #0]
 800d82e:	69d2      	ldr	r2, [r2, #28]
 800d830:	4311      	orrs	r1, r2
 800d832:	683a      	ldr	r2, [r7, #0]
 800d834:	6a12      	ldr	r2, [r2, #32]
 800d836:	4311      	orrs	r1, r2
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d83c:	430a      	orrs	r2, r1
 800d83e:	431a      	orrs	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	e026      	b.n	800d894 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	69d9      	ldr	r1, [r3, #28]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	6a1b      	ldr	r3, [r3, #32]
 800d856:	4319      	orrs	r1, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85c:	430b      	orrs	r3, r1
 800d85e:	431a      	orrs	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	4b0e      	ldr	r3, [pc, #56]	; (800d8a4 <FMC_SDRAM_Init+0xb4>)
 800d86a:	4013      	ands	r3, r2
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	6851      	ldr	r1, [r2, #4]
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	6892      	ldr	r2, [r2, #8]
 800d874:	4311      	orrs	r1, r2
 800d876:	683a      	ldr	r2, [r7, #0]
 800d878:	68d2      	ldr	r2, [r2, #12]
 800d87a:	4311      	orrs	r1, r2
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	6912      	ldr	r2, [r2, #16]
 800d880:	4311      	orrs	r1, r2
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	6952      	ldr	r2, [r2, #20]
 800d886:	4311      	orrs	r1, r2
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	6992      	ldr	r2, [r2, #24]
 800d88c:	430a      	orrs	r2, r1
 800d88e:	431a      	orrs	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	ffff8000 	.word	0xffff8000

0800d8a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d128      	bne.n	800d90c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	1e59      	subs	r1, r3, #1
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	3b01      	subs	r3, #1
 800d8ce:	011b      	lsls	r3, r3, #4
 800d8d0:	4319      	orrs	r1, r3
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	021b      	lsls	r3, r3, #8
 800d8da:	4319      	orrs	r1, r3
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	031b      	lsls	r3, r3, #12
 800d8e4:	4319      	orrs	r1, r3
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	041b      	lsls	r3, r3, #16
 800d8ee:	4319      	orrs	r1, r3
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	695b      	ldr	r3, [r3, #20]
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	051b      	lsls	r3, r3, #20
 800d8f8:	4319      	orrs	r1, r3
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	699b      	ldr	r3, [r3, #24]
 800d8fe:	3b01      	subs	r3, #1
 800d900:	061b      	lsls	r3, r3, #24
 800d902:	430b      	orrs	r3, r1
 800d904:	431a      	orrs	r2, r3
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	609a      	str	r2, [r3, #8]
 800d90a:	e02d      	b.n	800d968 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	689a      	ldr	r2, [r3, #8]
 800d910:	4b19      	ldr	r3, [pc, #100]	; (800d978 <FMC_SDRAM_Timing_Init+0xd0>)
 800d912:	4013      	ands	r3, r2
 800d914:	68ba      	ldr	r2, [r7, #8]
 800d916:	68d2      	ldr	r2, [r2, #12]
 800d918:	3a01      	subs	r2, #1
 800d91a:	0311      	lsls	r1, r2, #12
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	6952      	ldr	r2, [r2, #20]
 800d920:	3a01      	subs	r2, #1
 800d922:	0512      	lsls	r2, r2, #20
 800d924:	430a      	orrs	r2, r1
 800d926:	431a      	orrs	r2, r3
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	1e59      	subs	r1, r3, #1
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	3b01      	subs	r3, #1
 800d940:	011b      	lsls	r3, r3, #4
 800d942:	4319      	orrs	r1, r3
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	3b01      	subs	r3, #1
 800d94a:	021b      	lsls	r3, r3, #8
 800d94c:	4319      	orrs	r1, r3
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	3b01      	subs	r3, #1
 800d954:	041b      	lsls	r3, r3, #16
 800d956:	4319      	orrs	r1, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	699b      	ldr	r3, [r3, #24]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	061b      	lsls	r3, r3, #24
 800d960:	430b      	orrs	r3, r1
 800d962:	431a      	orrs	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	ff0f0fff 	.word	0xff0f0fff

0800d97c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	691a      	ldr	r2, [r3, #16]
 800d98c:	4b0c      	ldr	r3, [pc, #48]	; (800d9c0 <FMC_SDRAM_SendCommand+0x44>)
 800d98e:	4013      	ands	r3, r2
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	6811      	ldr	r1, [r2, #0]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	6852      	ldr	r2, [r2, #4]
 800d998:	4311      	orrs	r1, r2
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	6892      	ldr	r2, [r2, #8]
 800d99e:	3a01      	subs	r2, #1
 800d9a0:	0152      	lsls	r2, r2, #5
 800d9a2:	4311      	orrs	r1, r2
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	68d2      	ldr	r2, [r2, #12]
 800d9a8:	0252      	lsls	r2, r2, #9
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	431a      	orrs	r2, r3
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	ffc00000 	.word	0xffc00000

0800d9c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	695a      	ldr	r2, [r3, #20]
 800d9d2:	4b07      	ldr	r3, [pc, #28]	; (800d9f0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	683a      	ldr	r2, [r7, #0]
 800d9d8:	0052      	lsls	r2, r2, #1
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	ffffc001 	.word	0xffffc001

0800d9f4 <__NVIC_SetPriority>:
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	6039      	str	r1, [r7, #0]
 800d9fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800da00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da04:	2b00      	cmp	r3, #0
 800da06:	db0a      	blt.n	800da1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	490c      	ldr	r1, [pc, #48]	; (800da40 <__NVIC_SetPriority+0x4c>)
 800da0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da12:	0112      	lsls	r2, r2, #4
 800da14:	b2d2      	uxtb	r2, r2
 800da16:	440b      	add	r3, r1
 800da18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800da1c:	e00a      	b.n	800da34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	b2da      	uxtb	r2, r3
 800da22:	4908      	ldr	r1, [pc, #32]	; (800da44 <__NVIC_SetPriority+0x50>)
 800da24:	88fb      	ldrh	r3, [r7, #6]
 800da26:	f003 030f 	and.w	r3, r3, #15
 800da2a:	3b04      	subs	r3, #4
 800da2c:	0112      	lsls	r2, r2, #4
 800da2e:	b2d2      	uxtb	r2, r2
 800da30:	440b      	add	r3, r1
 800da32:	761a      	strb	r2, [r3, #24]
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr
 800da40:	e000e100 	.word	0xe000e100
 800da44:	e000ed00 	.word	0xe000ed00

0800da48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da48:	b580      	push	{r7, lr}
 800da4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800da4c:	2100      	movs	r1, #0
 800da4e:	f06f 0004 	mvn.w	r0, #4
 800da52:	f7ff ffcf 	bl	800d9f4 <__NVIC_SetPriority>
#endif
}
 800da56:	bf00      	nop
 800da58:	bd80      	pop	{r7, pc}
	...

0800da5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da62:	f3ef 8305 	mrs	r3, IPSR
 800da66:	603b      	str	r3, [r7, #0]
  return(result);
 800da68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da6e:	f06f 0305 	mvn.w	r3, #5
 800da72:	607b      	str	r3, [r7, #4]
 800da74:	e00c      	b.n	800da90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da76:	4b0a      	ldr	r3, [pc, #40]	; (800daa0 <osKernelInitialize+0x44>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da7e:	4b08      	ldr	r3, [pc, #32]	; (800daa0 <osKernelInitialize+0x44>)
 800da80:	2201      	movs	r2, #1
 800da82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da84:	2300      	movs	r3, #0
 800da86:	607b      	str	r3, [r7, #4]
 800da88:	e002      	b.n	800da90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da8a:	f04f 33ff 	mov.w	r3, #4294967295
 800da8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da90:	687b      	ldr	r3, [r7, #4]
}
 800da92:	4618      	mov	r0, r3
 800da94:	370c      	adds	r7, #12
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	240010e0 	.word	0x240010e0

0800daa4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800daaa:	f3ef 8305 	mrs	r3, IPSR
 800daae:	603b      	str	r3, [r7, #0]
  return(result);
 800dab0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d003      	beq.n	800dabe <osKernelStart+0x1a>
    stat = osErrorISR;
 800dab6:	f06f 0305 	mvn.w	r3, #5
 800daba:	607b      	str	r3, [r7, #4]
 800dabc:	e010      	b.n	800dae0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dabe:	4b0b      	ldr	r3, [pc, #44]	; (800daec <osKernelStart+0x48>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d109      	bne.n	800dada <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dac6:	f7ff ffbf 	bl	800da48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800daca:	4b08      	ldr	r3, [pc, #32]	; (800daec <osKernelStart+0x48>)
 800dacc:	2202      	movs	r2, #2
 800dace:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dad0:	f001 f866 	bl	800eba0 <vTaskStartScheduler>
      stat = osOK;
 800dad4:	2300      	movs	r3, #0
 800dad6:	607b      	str	r3, [r7, #4]
 800dad8:	e002      	b.n	800dae0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dada:	f04f 33ff 	mov.w	r3, #4294967295
 800dade:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dae0:	687b      	ldr	r3, [r7, #4]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	240010e0 	.word	0x240010e0

0800daf0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08e      	sub	sp, #56	; 0x38
 800daf4:	af04      	add	r7, sp, #16
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dafc:	2300      	movs	r3, #0
 800dafe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db00:	f3ef 8305 	mrs	r3, IPSR
 800db04:	617b      	str	r3, [r7, #20]
  return(result);
 800db06:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d17e      	bne.n	800dc0a <osThreadNew+0x11a>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d07b      	beq.n	800dc0a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800db12:	2380      	movs	r3, #128	; 0x80
 800db14:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800db16:	2318      	movs	r3, #24
 800db18:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800db1e:	f04f 33ff 	mov.w	r3, #4294967295
 800db22:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d045      	beq.n	800dbb6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d002      	beq.n	800db38 <osThreadNew+0x48>
        name = attr->name;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d008      	beq.n	800db5e <osThreadNew+0x6e>
 800db4c:	69fb      	ldr	r3, [r7, #28]
 800db4e:	2b38      	cmp	r3, #56	; 0x38
 800db50:	d805      	bhi.n	800db5e <osThreadNew+0x6e>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	f003 0301 	and.w	r3, r3, #1
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d001      	beq.n	800db62 <osThreadNew+0x72>
        return (NULL);
 800db5e:	2300      	movs	r3, #0
 800db60:	e054      	b.n	800dc0c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	089b      	lsrs	r3, r3, #2
 800db70:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d00e      	beq.n	800db98 <osThreadNew+0xa8>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	2b5b      	cmp	r3, #91	; 0x5b
 800db80:	d90a      	bls.n	800db98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db86:	2b00      	cmp	r3, #0
 800db88:	d006      	beq.n	800db98 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d002      	beq.n	800db98 <osThreadNew+0xa8>
        mem = 1;
 800db92:	2301      	movs	r3, #1
 800db94:	61bb      	str	r3, [r7, #24]
 800db96:	e010      	b.n	800dbba <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10c      	bne.n	800dbba <osThreadNew+0xca>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d108      	bne.n	800dbba <osThreadNew+0xca>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	691b      	ldr	r3, [r3, #16]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d104      	bne.n	800dbba <osThreadNew+0xca>
          mem = 0;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	61bb      	str	r3, [r7, #24]
 800dbb4:	e001      	b.n	800dbba <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d110      	bne.n	800dbe2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dbc8:	9202      	str	r2, [sp, #8]
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	6a3a      	ldr	r2, [r7, #32]
 800dbd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 fe0c 	bl	800e7f4 <xTaskCreateStatic>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	613b      	str	r3, [r7, #16]
 800dbe0:	e013      	b.n	800dc0a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dbe2:	69bb      	ldr	r3, [r7, #24]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d110      	bne.n	800dc0a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbe8:	6a3b      	ldr	r3, [r7, #32]
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	f107 0310 	add.w	r3, r7, #16
 800dbf0:	9301      	str	r3, [sp, #4]
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f000 fe57 	bl	800e8ae <xTaskCreate>
 800dc00:	4603      	mov	r3, r0
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d001      	beq.n	800dc0a <osThreadNew+0x11a>
            hTask = NULL;
 800dc06:	2300      	movs	r3, #0
 800dc08:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dc0a:	693b      	ldr	r3, [r7, #16]
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3728      	adds	r7, #40	; 0x28
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc1c:	f3ef 8305 	mrs	r3, IPSR
 800dc20:	60bb      	str	r3, [r7, #8]
  return(result);
 800dc22:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d003      	beq.n	800dc30 <osDelay+0x1c>
    stat = osErrorISR;
 800dc28:	f06f 0305 	mvn.w	r3, #5
 800dc2c:	60fb      	str	r3, [r7, #12]
 800dc2e:	e007      	b.n	800dc40 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d002      	beq.n	800dc40 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 ff7c 	bl	800eb38 <vTaskDelay>
    }
  }

  return (stat);
 800dc40:	68fb      	ldr	r3, [r7, #12]
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3710      	adds	r7, #16
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	4a07      	ldr	r2, [pc, #28]	; (800dc78 <vApplicationGetIdleTaskMemory+0x2c>)
 800dc5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	4a06      	ldr	r2, [pc, #24]	; (800dc7c <vApplicationGetIdleTaskMemory+0x30>)
 800dc62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2280      	movs	r2, #128	; 0x80
 800dc68:	601a      	str	r2, [r3, #0]
}
 800dc6a:	bf00      	nop
 800dc6c:	3714      	adds	r7, #20
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	240010e4 	.word	0x240010e4
 800dc7c:	24001140 	.word	0x24001140

0800dc80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4a07      	ldr	r2, [pc, #28]	; (800dcac <vApplicationGetTimerTaskMemory+0x2c>)
 800dc90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	4a06      	ldr	r2, [pc, #24]	; (800dcb0 <vApplicationGetTimerTaskMemory+0x30>)
 800dc96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc9e:	601a      	str	r2, [r3, #0]
}
 800dca0:	bf00      	nop
 800dca2:	3714      	adds	r7, #20
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr
 800dcac:	24001340 	.word	0x24001340
 800dcb0:	2400139c 	.word	0x2400139c

0800dcb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b083      	sub	sp, #12
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f103 0208 	add.w	r2, r3, #8
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dccc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f103 0208 	add.w	r2, r3, #8
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f103 0208 	add.w	r2, r3, #8
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr

0800dcf4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b083      	sub	sp, #12
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd02:	bf00      	nop
 800dd04:	370c      	adds	r7, #12
 800dd06:	46bd      	mov	sp, r7
 800dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0c:	4770      	bx	lr

0800dd0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd0e:	b480      	push	{r7}
 800dd10:	b085      	sub	sp, #20
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	68fa      	ldr	r2, [r7, #12]
 800dd22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	689a      	ldr	r2, [r3, #8]
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	683a      	ldr	r2, [r7, #0]
 800dd32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	687a      	ldr	r2, [r7, #4]
 800dd3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	1c5a      	adds	r2, r3, #1
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	601a      	str	r2, [r3, #0]
}
 800dd4a:	bf00      	nop
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
 800dd5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6c:	d103      	bne.n	800dd76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	e00c      	b.n	800dd90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	3308      	adds	r3, #8
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e002      	b.n	800dd84 <vListInsert+0x2e>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d2f6      	bcs.n	800dd7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	685a      	ldr	r2, [r3, #4]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	683a      	ldr	r2, [r7, #0]
 800ddaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	601a      	str	r2, [r3, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	3714      	adds	r7, #20
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	691b      	ldr	r3, [r3, #16]
 800ddd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	6892      	ldr	r2, [r2, #8]
 800ddde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	687a      	ldr	r2, [r7, #4]
 800dde6:	6852      	ldr	r2, [r2, #4]
 800dde8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d103      	bne.n	800ddfc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689a      	ldr	r2, [r3, #8]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	1e5a      	subs	r2, r3, #1
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10a      	bne.n	800de46 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de42:	bf00      	nop
 800de44:	e7fe      	b.n	800de44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de46:	f002 f84d 	bl	800fee4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de52:	68f9      	ldr	r1, [r7, #12]
 800de54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de56:	fb01 f303 	mul.w	r3, r1, r3
 800de5a:	441a      	add	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de76:	3b01      	subs	r3, #1
 800de78:	68f9      	ldr	r1, [r7, #12]
 800de7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de7c:	fb01 f303 	mul.w	r3, r1, r3
 800de80:	441a      	add	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	22ff      	movs	r2, #255	; 0xff
 800de8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	22ff      	movs	r2, #255	; 0xff
 800de92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d114      	bne.n	800dec6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d01a      	beq.n	800deda <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	3310      	adds	r3, #16
 800dea8:	4618      	mov	r0, r3
 800deaa:	f001 f903 	bl	800f0b4 <xTaskRemoveFromEventList>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d012      	beq.n	800deda <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800deb4:	4b0c      	ldr	r3, [pc, #48]	; (800dee8 <xQueueGenericReset+0xcc>)
 800deb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	f3bf 8f4f 	dsb	sy
 800dec0:	f3bf 8f6f 	isb	sy
 800dec4:	e009      	b.n	800deda <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3310      	adds	r3, #16
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff fef2 	bl	800dcb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3324      	adds	r3, #36	; 0x24
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff feed 	bl	800dcb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800deda:	f002 f833 	bl	800ff44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800dede:	2301      	movs	r3, #1
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	e000ed04 	.word	0xe000ed04

0800deec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08e      	sub	sp, #56	; 0x38
 800def0:	af02      	add	r7, sp, #8
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d10a      	bne.n	800df16 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df12:	bf00      	nop
 800df14:	e7fe      	b.n	800df14 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10a      	bne.n	800df32 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800df1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df2e:	bf00      	nop
 800df30:	e7fe      	b.n	800df30 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d002      	beq.n	800df3e <xQueueGenericCreateStatic+0x52>
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d001      	beq.n	800df42 <xQueueGenericCreateStatic+0x56>
 800df3e:	2301      	movs	r3, #1
 800df40:	e000      	b.n	800df44 <xQueueGenericCreateStatic+0x58>
 800df42:	2300      	movs	r3, #0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	623b      	str	r3, [r7, #32]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d102      	bne.n	800df6a <xQueueGenericCreateStatic+0x7e>
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <xQueueGenericCreateStatic+0x82>
 800df6a:	2301      	movs	r3, #1
 800df6c:	e000      	b.n	800df70 <xQueueGenericCreateStatic+0x84>
 800df6e:	2300      	movs	r3, #0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10a      	bne.n	800df8a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	61fb      	str	r3, [r7, #28]
}
 800df86:	bf00      	nop
 800df88:	e7fe      	b.n	800df88 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df8a:	2350      	movs	r3, #80	; 0x50
 800df8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b50      	cmp	r3, #80	; 0x50
 800df92:	d00a      	beq.n	800dfaa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df98:	f383 8811 	msr	BASEPRI, r3
 800df9c:	f3bf 8f6f 	isb	sy
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	61bb      	str	r3, [r7, #24]
}
 800dfa6:	bf00      	nop
 800dfa8:	e7fe      	b.n	800dfa8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dfaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d00d      	beq.n	800dfd2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	68b9      	ldr	r1, [r7, #8]
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f000 f805 	bl	800dfdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3730      	adds	r7, #48	; 0x30
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d103      	bne.n	800dff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	69ba      	ldr	r2, [r7, #24]
 800dff4:	601a      	str	r2, [r3, #0]
 800dff6:	e002      	b.n	800dffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dff8:	69bb      	ldr	r3, [r7, #24]
 800dffa:	687a      	ldr	r2, [r7, #4]
 800dffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e00a:	2101      	movs	r1, #1
 800e00c:	69b8      	ldr	r0, [r7, #24]
 800e00e:	f7ff ff05 	bl	800de1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	78fa      	ldrb	r2, [r7, #3]
 800e016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e01a:	bf00      	nop
 800e01c:	3710      	adds	r7, #16
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}
	...

0800e024 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b08e      	sub	sp, #56	; 0x38
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e032:	2300      	movs	r3, #0
 800e034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10a      	bne.n	800e056 <xQueueGenericSend+0x32>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e052:	bf00      	nop
 800e054:	e7fe      	b.n	800e054 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d103      	bne.n	800e064 <xQueueGenericSend+0x40>
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <xQueueGenericSend+0x44>
 800e064:	2301      	movs	r3, #1
 800e066:	e000      	b.n	800e06a <xQueueGenericSend+0x46>
 800e068:	2300      	movs	r3, #0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10a      	bne.n	800e084 <xQueueGenericSend+0x60>
	__asm volatile
 800e06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e080:	bf00      	nop
 800e082:	e7fe      	b.n	800e082 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	2b02      	cmp	r3, #2
 800e088:	d103      	bne.n	800e092 <xQueueGenericSend+0x6e>
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d101      	bne.n	800e096 <xQueueGenericSend+0x72>
 800e092:	2301      	movs	r3, #1
 800e094:	e000      	b.n	800e098 <xQueueGenericSend+0x74>
 800e096:	2300      	movs	r3, #0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10a      	bne.n	800e0b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	623b      	str	r3, [r7, #32]
}
 800e0ae:	bf00      	nop
 800e0b0:	e7fe      	b.n	800e0b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e0b2:	f001 f9bd 	bl	800f430 <xTaskGetSchedulerState>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d102      	bne.n	800e0c2 <xQueueGenericSend+0x9e>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d101      	bne.n	800e0c6 <xQueueGenericSend+0xa2>
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	e000      	b.n	800e0c8 <xQueueGenericSend+0xa4>
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d10a      	bne.n	800e0e2 <xQueueGenericSend+0xbe>
	__asm volatile
 800e0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d0:	f383 8811 	msr	BASEPRI, r3
 800e0d4:	f3bf 8f6f 	isb	sy
 800e0d8:	f3bf 8f4f 	dsb	sy
 800e0dc:	61fb      	str	r3, [r7, #28]
}
 800e0de:	bf00      	nop
 800e0e0:	e7fe      	b.n	800e0e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0e2:	f001 feff 	bl	800fee4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d302      	bcc.n	800e0f8 <xQueueGenericSend+0xd4>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d129      	bne.n	800e14c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	68b9      	ldr	r1, [r7, #8]
 800e0fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0fe:	f000 fa0b 	bl	800e518 <prvCopyDataToQueue>
 800e102:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d010      	beq.n	800e12e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10e:	3324      	adds	r3, #36	; 0x24
 800e110:	4618      	mov	r0, r3
 800e112:	f000 ffcf 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e116:	4603      	mov	r3, r0
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d013      	beq.n	800e144 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e11c:	4b3f      	ldr	r3, [pc, #252]	; (800e21c <xQueueGenericSend+0x1f8>)
 800e11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	e00a      	b.n	800e144 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e130:	2b00      	cmp	r3, #0
 800e132:	d007      	beq.n	800e144 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e134:	4b39      	ldr	r3, [pc, #228]	; (800e21c <xQueueGenericSend+0x1f8>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e144:	f001 fefe 	bl	800ff44 <vPortExitCritical>
				return pdPASS;
 800e148:	2301      	movs	r3, #1
 800e14a:	e063      	b.n	800e214 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d103      	bne.n	800e15a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e152:	f001 fef7 	bl	800ff44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e156:	2300      	movs	r3, #0
 800e158:	e05c      	b.n	800e214 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d106      	bne.n	800e16e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e160:	f107 0314 	add.w	r3, r7, #20
 800e164:	4618      	mov	r0, r3
 800e166:	f001 f809 	bl	800f17c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e16a:	2301      	movs	r3, #1
 800e16c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e16e:	f001 fee9 	bl	800ff44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e172:	f000 fd7b 	bl	800ec6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e176:	f001 feb5 	bl	800fee4 <vPortEnterCritical>
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e180:	b25b      	sxtb	r3, r3
 800e182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e186:	d103      	bne.n	800e190 <xQueueGenericSend+0x16c>
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e196:	b25b      	sxtb	r3, r3
 800e198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19c:	d103      	bne.n	800e1a6 <xQueueGenericSend+0x182>
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e1a6:	f001 fecd 	bl	800ff44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e1aa:	1d3a      	adds	r2, r7, #4
 800e1ac:	f107 0314 	add.w	r3, r7, #20
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f000 fff8 	bl	800f1a8 <xTaskCheckForTimeOut>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d124      	bne.n	800e208 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e1be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1c0:	f000 faa2 	bl	800e708 <prvIsQueueFull>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d018      	beq.n	800e1fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1cc:	3310      	adds	r3, #16
 800e1ce:	687a      	ldr	r2, [r7, #4]
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f000 ff1e 	bl	800f014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1da:	f000 fa2d 	bl	800e638 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1de:	f000 fd53 	bl	800ec88 <xTaskResumeAll>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	f47f af7c 	bne.w	800e0e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1ea:	4b0c      	ldr	r3, [pc, #48]	; (800e21c <xQueueGenericSend+0x1f8>)
 800e1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	e772      	b.n	800e0e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1fe:	f000 fa1b 	bl	800e638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e202:	f000 fd41 	bl	800ec88 <xTaskResumeAll>
 800e206:	e76c      	b.n	800e0e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e20a:	f000 fa15 	bl	800e638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e20e:	f000 fd3b 	bl	800ec88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e212:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e214:	4618      	mov	r0, r3
 800e216:	3738      	adds	r7, #56	; 0x38
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	e000ed04 	.word	0xe000ed04

0800e220 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b090      	sub	sp, #64	; 0x40
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10a      	bne.n	800e24e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e24a:	bf00      	nop
 800e24c:	e7fe      	b.n	800e24c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <xQueueGenericSendFromISR+0x3c>
 800e254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <xQueueGenericSendFromISR+0x40>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e000      	b.n	800e262 <xQueueGenericSendFromISR+0x42>
 800e260:	2300      	movs	r3, #0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10a      	bne.n	800e27c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e278:	bf00      	nop
 800e27a:	e7fe      	b.n	800e27a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d103      	bne.n	800e28a <xQueueGenericSendFromISR+0x6a>
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e286:	2b01      	cmp	r3, #1
 800e288:	d101      	bne.n	800e28e <xQueueGenericSendFromISR+0x6e>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e000      	b.n	800e290 <xQueueGenericSendFromISR+0x70>
 800e28e:	2300      	movs	r3, #0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10a      	bne.n	800e2aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	623b      	str	r3, [r7, #32]
}
 800e2a6:	bf00      	nop
 800e2a8:	e7fe      	b.n	800e2a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e2aa:	f001 fefd 	bl	80100a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e2ae:	f3ef 8211 	mrs	r2, BASEPRI
 800e2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	61fa      	str	r2, [r7, #28]
 800e2c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d302      	bcc.n	800e2dc <xQueueGenericSendFromISR+0xbc>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	d12f      	bne.n	800e33c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2ec:	683a      	ldr	r2, [r7, #0]
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2f2:	f000 f911 	bl	800e518 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2fe:	d112      	bne.n	800e326 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e304:	2b00      	cmp	r3, #0
 800e306:	d016      	beq.n	800e336 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	3324      	adds	r3, #36	; 0x24
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fed1 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00e      	beq.n	800e336 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2201      	movs	r2, #1
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	e007      	b.n	800e336 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e32a:	3301      	adds	r3, #1
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	b25a      	sxtb	r2, r3
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e336:	2301      	movs	r3, #1
 800e338:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e33a:	e001      	b.n	800e340 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e33c:	2300      	movs	r3, #0
 800e33e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e342:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e34a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3740      	adds	r7, #64	; 0x40
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08c      	sub	sp, #48	; 0x30
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e364:	2300      	movs	r3, #0
 800e366:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10a      	bne.n	800e388 <xQueueReceive+0x30>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	623b      	str	r3, [r7, #32]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d103      	bne.n	800e396 <xQueueReceive+0x3e>
 800e38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e392:	2b00      	cmp	r3, #0
 800e394:	d101      	bne.n	800e39a <xQueueReceive+0x42>
 800e396:	2301      	movs	r3, #1
 800e398:	e000      	b.n	800e39c <xQueueReceive+0x44>
 800e39a:	2300      	movs	r3, #0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d10a      	bne.n	800e3b6 <xQueueReceive+0x5e>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	61fb      	str	r3, [r7, #28]
}
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3b6:	f001 f83b 	bl	800f430 <xTaskGetSchedulerState>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d102      	bne.n	800e3c6 <xQueueReceive+0x6e>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <xQueueReceive+0x72>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e000      	b.n	800e3cc <xQueueReceive+0x74>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10a      	bne.n	800e3e6 <xQueueReceive+0x8e>
	__asm volatile
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	61bb      	str	r3, [r7, #24]
}
 800e3e2:	bf00      	nop
 800e3e4:	e7fe      	b.n	800e3e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3e6:	f001 fd7d 	bl	800fee4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d01f      	beq.n	800e436 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3f6:	68b9      	ldr	r1, [r7, #8]
 800e3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3fa:	f000 f8f7 	bl	800e5ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	1e5a      	subs	r2, r3, #1
 800e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e404:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00f      	beq.n	800e42e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e410:	3310      	adds	r3, #16
 800e412:	4618      	mov	r0, r3
 800e414:	f000 fe4e 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e418:	4603      	mov	r3, r0
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d007      	beq.n	800e42e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e41e:	4b3d      	ldr	r3, [pc, #244]	; (800e514 <xQueueReceive+0x1bc>)
 800e420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e42e:	f001 fd89 	bl	800ff44 <vPortExitCritical>
				return pdPASS;
 800e432:	2301      	movs	r3, #1
 800e434:	e069      	b.n	800e50a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d103      	bne.n	800e444 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e43c:	f001 fd82 	bl	800ff44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e440:	2300      	movs	r3, #0
 800e442:	e062      	b.n	800e50a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e44a:	f107 0310 	add.w	r3, r7, #16
 800e44e:	4618      	mov	r0, r3
 800e450:	f000 fe94 	bl	800f17c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e454:	2301      	movs	r3, #1
 800e456:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e458:	f001 fd74 	bl	800ff44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e45c:	f000 fc06 	bl	800ec6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e460:	f001 fd40 	bl	800fee4 <vPortEnterCritical>
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e46a:	b25b      	sxtb	r3, r3
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d103      	bne.n	800e47a <xQueueReceive+0x122>
 800e472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e474:	2200      	movs	r2, #0
 800e476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e47c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e480:	b25b      	sxtb	r3, r3
 800e482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e486:	d103      	bne.n	800e490 <xQueueReceive+0x138>
 800e488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e490:	f001 fd58 	bl	800ff44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e494:	1d3a      	adds	r2, r7, #4
 800e496:	f107 0310 	add.w	r3, r7, #16
 800e49a:	4611      	mov	r1, r2
 800e49c:	4618      	mov	r0, r3
 800e49e:	f000 fe83 	bl	800f1a8 <xTaskCheckForTimeOut>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d123      	bne.n	800e4f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4aa:	f000 f917 	bl	800e6dc <prvIsQueueEmpty>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d017      	beq.n	800e4e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	3324      	adds	r3, #36	; 0x24
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 fda9 	bl	800f014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e4c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4c4:	f000 f8b8 	bl	800e638 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4c8:	f000 fbde 	bl	800ec88 <xTaskResumeAll>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d189      	bne.n	800e3e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e4d2:	4b10      	ldr	r3, [pc, #64]	; (800e514 <xQueueReceive+0x1bc>)
 800e4d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4d8:	601a      	str	r2, [r3, #0]
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	e780      	b.n	800e3e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e4e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4e6:	f000 f8a7 	bl	800e638 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4ea:	f000 fbcd 	bl	800ec88 <xTaskResumeAll>
 800e4ee:	e77a      	b.n	800e3e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e4f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4f2:	f000 f8a1 	bl	800e638 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4f6:	f000 fbc7 	bl	800ec88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4fc:	f000 f8ee 	bl	800e6dc <prvIsQueueEmpty>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	f43f af6f 	beq.w	800e3e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e508:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3730      	adds	r7, #48	; 0x30
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	e000ed04 	.word	0xe000ed04

0800e518 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e524:	2300      	movs	r3, #0
 800e526:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e532:	2b00      	cmp	r3, #0
 800e534:	d10d      	bne.n	800e552 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d14d      	bne.n	800e5da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	4618      	mov	r0, r3
 800e544:	f000 ff92 	bl	800f46c <xTaskPriorityDisinherit>
 800e548:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	2200      	movs	r2, #0
 800e54e:	609a      	str	r2, [r3, #8]
 800e550:	e043      	b.n	800e5da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d119      	bne.n	800e58c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	6858      	ldr	r0, [r3, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e560:	461a      	mov	r2, r3
 800e562:	68b9      	ldr	r1, [r7, #8]
 800e564:	f002 fab1 	bl	8010aca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	685a      	ldr	r2, [r3, #4]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e570:	441a      	add	r2, r3
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	689b      	ldr	r3, [r3, #8]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d32b      	bcc.n	800e5da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	605a      	str	r2, [r3, #4]
 800e58a:	e026      	b.n	800e5da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	68d8      	ldr	r0, [r3, #12]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e594:	461a      	mov	r2, r3
 800e596:	68b9      	ldr	r1, [r7, #8]
 800e598:	f002 fa97 	bl	8010aca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	68da      	ldr	r2, [r3, #12]
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5a4:	425b      	negs	r3, r3
 800e5a6:	441a      	add	r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	68da      	ldr	r2, [r3, #12]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d207      	bcs.n	800e5c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	689a      	ldr	r2, [r3, #8]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5c0:	425b      	negs	r3, r3
 800e5c2:	441a      	add	r2, r3
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2b02      	cmp	r3, #2
 800e5cc:	d105      	bne.n	800e5da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e5e2:	697b      	ldr	r3, [r7, #20]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3718      	adds	r7, #24
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d018      	beq.n	800e630 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68da      	ldr	r2, [r3, #12]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e606:	441a      	add	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	68da      	ldr	r2, [r3, #12]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	429a      	cmp	r2, r3
 800e616:	d303      	bcc.n	800e620 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	68d9      	ldr	r1, [r3, #12]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e628:	461a      	mov	r2, r3
 800e62a:	6838      	ldr	r0, [r7, #0]
 800e62c:	f002 fa4d 	bl	8010aca <memcpy>
	}
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e640:	f001 fc50 	bl	800fee4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e64a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e64c:	e011      	b.n	800e672 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e652:	2b00      	cmp	r3, #0
 800e654:	d012      	beq.n	800e67c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	3324      	adds	r3, #36	; 0x24
 800e65a:	4618      	mov	r0, r3
 800e65c:	f000 fd2a 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	d001      	beq.n	800e66a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e666:	f000 fe01 	bl	800f26c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e66a:	7bfb      	ldrb	r3, [r7, #15]
 800e66c:	3b01      	subs	r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e676:	2b00      	cmp	r3, #0
 800e678:	dce9      	bgt.n	800e64e <prvUnlockQueue+0x16>
 800e67a:	e000      	b.n	800e67e <prvUnlockQueue+0x46>
					break;
 800e67c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	22ff      	movs	r2, #255	; 0xff
 800e682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e686:	f001 fc5d 	bl	800ff44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e68a:	f001 fc2b 	bl	800fee4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e694:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e696:	e011      	b.n	800e6bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d012      	beq.n	800e6c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3310      	adds	r3, #16
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f000 fd05 	bl	800f0b4 <xTaskRemoveFromEventList>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e6b0:	f000 fddc 	bl	800f26c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e6b4:	7bbb      	ldrb	r3, [r7, #14]
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e6bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	dce9      	bgt.n	800e698 <prvUnlockQueue+0x60>
 800e6c4:	e000      	b.n	800e6c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e6c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	22ff      	movs	r2, #255	; 0xff
 800e6cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e6d0:	f001 fc38 	bl	800ff44 <vPortExitCritical>
}
 800e6d4:	bf00      	nop
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6e4:	f001 fbfe 	bl	800fee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d102      	bne.n	800e6f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	60fb      	str	r3, [r7, #12]
 800e6f4:	e001      	b.n	800e6fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6fa:	f001 fc23 	bl	800ff44 <vPortExitCritical>

	return xReturn;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
}
 800e700:	4618      	mov	r0, r3
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}

0800e708 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e710:	f001 fbe8 	bl	800fee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d102      	bne.n	800e726 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e720:	2301      	movs	r3, #1
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	e001      	b.n	800e72a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e726:	2300      	movs	r3, #0
 800e728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e72a:	f001 fc0b 	bl	800ff44 <vPortExitCritical>

	return xReturn;
 800e72e:	68fb      	ldr	r3, [r7, #12]
}
 800e730:	4618      	mov	r0, r3
 800e732:	3710      	adds	r7, #16
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}

0800e738 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e742:	2300      	movs	r3, #0
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	e014      	b.n	800e772 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e748:	4a0f      	ldr	r2, [pc, #60]	; (800e788 <vQueueAddToRegistry+0x50>)
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10b      	bne.n	800e76c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e754:	490c      	ldr	r1, [pc, #48]	; (800e788 <vQueueAddToRegistry+0x50>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	683a      	ldr	r2, [r7, #0]
 800e75a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e75e:	4a0a      	ldr	r2, [pc, #40]	; (800e788 <vQueueAddToRegistry+0x50>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	00db      	lsls	r3, r3, #3
 800e764:	4413      	add	r3, r2
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e76a:	e006      	b.n	800e77a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	3301      	adds	r3, #1
 800e770:	60fb      	str	r3, [r7, #12]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2b07      	cmp	r3, #7
 800e776:	d9e7      	bls.n	800e748 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e778:	bf00      	nop
 800e77a:	bf00      	nop
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	2400179c 	.word	0x2400179c

0800e78c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e79c:	f001 fba2 	bl	800fee4 <vPortEnterCritical>
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7a6:	b25b      	sxtb	r3, r3
 800e7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ac:	d103      	bne.n	800e7b6 <vQueueWaitForMessageRestricted+0x2a>
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7bc:	b25b      	sxtb	r3, r3
 800e7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c2:	d103      	bne.n	800e7cc <vQueueWaitForMessageRestricted+0x40>
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7cc:	f001 fbba 	bl	800ff44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d106      	bne.n	800e7e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e7d8:	697b      	ldr	r3, [r7, #20]
 800e7da:	3324      	adds	r3, #36	; 0x24
 800e7dc:	687a      	ldr	r2, [r7, #4]
 800e7de:	68b9      	ldr	r1, [r7, #8]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 fc3b 	bl	800f05c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e7e6:	6978      	ldr	r0, [r7, #20]
 800e7e8:	f7ff ff26 	bl	800e638 <prvUnlockQueue>
	}
 800e7ec:	bf00      	nop
 800e7ee:	3718      	adds	r7, #24
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b08e      	sub	sp, #56	; 0x38
 800e7f8:	af04      	add	r7, sp, #16
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
 800e800:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e804:	2b00      	cmp	r3, #0
 800e806:	d10a      	bne.n	800e81e <xTaskCreateStatic+0x2a>
	__asm volatile
 800e808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80c:	f383 8811 	msr	BASEPRI, r3
 800e810:	f3bf 8f6f 	isb	sy
 800e814:	f3bf 8f4f 	dsb	sy
 800e818:	623b      	str	r3, [r7, #32]
}
 800e81a:	bf00      	nop
 800e81c:	e7fe      	b.n	800e81c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e820:	2b00      	cmp	r3, #0
 800e822:	d10a      	bne.n	800e83a <xTaskCreateStatic+0x46>
	__asm volatile
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	61fb      	str	r3, [r7, #28]
}
 800e836:	bf00      	nop
 800e838:	e7fe      	b.n	800e838 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e83a:	235c      	movs	r3, #92	; 0x5c
 800e83c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	2b5c      	cmp	r3, #92	; 0x5c
 800e842:	d00a      	beq.n	800e85a <xTaskCreateStatic+0x66>
	__asm volatile
 800e844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e848:	f383 8811 	msr	BASEPRI, r3
 800e84c:	f3bf 8f6f 	isb	sy
 800e850:	f3bf 8f4f 	dsb	sy
 800e854:	61bb      	str	r3, [r7, #24]
}
 800e856:	bf00      	nop
 800e858:	e7fe      	b.n	800e858 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e85a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d01e      	beq.n	800e8a0 <xTaskCreateStatic+0xac>
 800e862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01b      	beq.n	800e8a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e870:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e874:	2202      	movs	r2, #2
 800e876:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e87a:	2300      	movs	r3, #0
 800e87c:	9303      	str	r3, [sp, #12]
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	9302      	str	r3, [sp, #8]
 800e882:	f107 0314 	add.w	r3, r7, #20
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	68b9      	ldr	r1, [r7, #8]
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 f850 	bl	800e938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e89a:	f000 f8dd 	bl	800ea58 <prvAddNewTaskToReadyList>
 800e89e:	e001      	b.n	800e8a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e8a4:	697b      	ldr	r3, [r7, #20]
	}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3728      	adds	r7, #40	; 0x28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b08c      	sub	sp, #48	; 0x30
 800e8b2:	af04      	add	r7, sp, #16
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	60b9      	str	r1, [r7, #8]
 800e8b8:	603b      	str	r3, [r7, #0]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f001 fc30 	bl	8010128 <pvPortMalloc>
 800e8c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00e      	beq.n	800e8ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e8d0:	205c      	movs	r0, #92	; 0x5c
 800e8d2:	f001 fc29 	bl	8010128 <pvPortMalloc>
 800e8d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d003      	beq.n	800e8e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	697a      	ldr	r2, [r7, #20]
 800e8e2:	631a      	str	r2, [r3, #48]	; 0x30
 800e8e4:	e005      	b.n	800e8f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e8e6:	6978      	ldr	r0, [r7, #20]
 800e8e8:	f001 fcea 	bl	80102c0 <vPortFree>
 800e8ec:	e001      	b.n	800e8f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d017      	beq.n	800e928 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e900:	88fa      	ldrh	r2, [r7, #6]
 800e902:	2300      	movs	r3, #0
 800e904:	9303      	str	r3, [sp, #12]
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	9302      	str	r3, [sp, #8]
 800e90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90c:	9301      	str	r3, [sp, #4]
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	68b9      	ldr	r1, [r7, #8]
 800e916:	68f8      	ldr	r0, [r7, #12]
 800e918:	f000 f80e 	bl	800e938 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e91c:	69f8      	ldr	r0, [r7, #28]
 800e91e:	f000 f89b 	bl	800ea58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e922:	2301      	movs	r3, #1
 800e924:	61bb      	str	r3, [r7, #24]
 800e926:	e002      	b.n	800e92e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e928:	f04f 33ff 	mov.w	r3, #4294967295
 800e92c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e92e:	69bb      	ldr	r3, [r7, #24]
	}
 800e930:	4618      	mov	r0, r3
 800e932:	3720      	adds	r7, #32
 800e934:	46bd      	mov	sp, r7
 800e936:	bd80      	pop	{r7, pc}

0800e938 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b088      	sub	sp, #32
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	60f8      	str	r0, [r7, #12]
 800e940:	60b9      	str	r1, [r7, #8]
 800e942:	607a      	str	r2, [r7, #4]
 800e944:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e948:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	461a      	mov	r2, r3
 800e950:	21a5      	movs	r1, #165	; 0xa5
 800e952:	f002 f812 	bl	801097a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e95a:	6879      	ldr	r1, [r7, #4]
 800e95c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e960:	440b      	add	r3, r1
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	4413      	add	r3, r2
 800e966:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	f023 0307 	bic.w	r3, r3, #7
 800e96e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e970:	69bb      	ldr	r3, [r7, #24]
 800e972:	f003 0307 	and.w	r3, r3, #7
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00a      	beq.n	800e990 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97e:	f383 8811 	msr	BASEPRI, r3
 800e982:	f3bf 8f6f 	isb	sy
 800e986:	f3bf 8f4f 	dsb	sy
 800e98a:	617b      	str	r3, [r7, #20]
}
 800e98c:	bf00      	nop
 800e98e:	e7fe      	b.n	800e98e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d01f      	beq.n	800e9d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e996:	2300      	movs	r3, #0
 800e998:	61fb      	str	r3, [r7, #28]
 800e99a:	e012      	b.n	800e9c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	7819      	ldrb	r1, [r3, #0]
 800e9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	3334      	adds	r3, #52	; 0x34
 800e9ac:	460a      	mov	r2, r1
 800e9ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	69fb      	ldr	r3, [r7, #28]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d006      	beq.n	800e9ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e9bc:	69fb      	ldr	r3, [r7, #28]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	61fb      	str	r3, [r7, #28]
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	2b0f      	cmp	r3, #15
 800e9c6:	d9e9      	bls.n	800e99c <prvInitialiseNewTask+0x64>
 800e9c8:	e000      	b.n	800e9cc <prvInitialiseNewTask+0x94>
			{
				break;
 800e9ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e9d4:	e003      	b.n	800e9de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e0:	2b37      	cmp	r3, #55	; 0x37
 800e9e2:	d901      	bls.n	800e9e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9e4:	2337      	movs	r3, #55	; 0x37
 800e9e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	3304      	adds	r3, #4
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7ff f978 	bl	800dcf4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ea04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea06:	3318      	adds	r3, #24
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff f973 	bl	800dcf4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ea1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea26:	2200      	movs	r2, #0
 800ea28:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea32:	683a      	ldr	r2, [r7, #0]
 800ea34:	68f9      	ldr	r1, [r7, #12]
 800ea36:	69b8      	ldr	r0, [r7, #24]
 800ea38:	f001 f928 	bl	800fc8c <pxPortInitialiseStack>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea4e:	bf00      	nop
 800ea50:	3720      	adds	r7, #32
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea60:	f001 fa40 	bl	800fee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea64:	4b2d      	ldr	r3, [pc, #180]	; (800eb1c <prvAddNewTaskToReadyList+0xc4>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	4a2c      	ldr	r2, [pc, #176]	; (800eb1c <prvAddNewTaskToReadyList+0xc4>)
 800ea6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea6e:	4b2c      	ldr	r3, [pc, #176]	; (800eb20 <prvAddNewTaskToReadyList+0xc8>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d109      	bne.n	800ea8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea76:	4a2a      	ldr	r2, [pc, #168]	; (800eb20 <prvAddNewTaskToReadyList+0xc8>)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea7c:	4b27      	ldr	r3, [pc, #156]	; (800eb1c <prvAddNewTaskToReadyList+0xc4>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d110      	bne.n	800eaa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea84:	f000 fc16 	bl	800f2b4 <prvInitialiseTaskLists>
 800ea88:	e00d      	b.n	800eaa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea8a:	4b26      	ldr	r3, [pc, #152]	; (800eb24 <prvAddNewTaskToReadyList+0xcc>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d109      	bne.n	800eaa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea92:	4b23      	ldr	r3, [pc, #140]	; (800eb20 <prvAddNewTaskToReadyList+0xc8>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d802      	bhi.n	800eaa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eaa0:	4a1f      	ldr	r2, [pc, #124]	; (800eb20 <prvAddNewTaskToReadyList+0xc8>)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eaa6:	4b20      	ldr	r3, [pc, #128]	; (800eb28 <prvAddNewTaskToReadyList+0xd0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	4a1e      	ldr	r2, [pc, #120]	; (800eb28 <prvAddNewTaskToReadyList+0xd0>)
 800eaae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eab0:	4b1d      	ldr	r3, [pc, #116]	; (800eb28 <prvAddNewTaskToReadyList+0xd0>)
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eabc:	4b1b      	ldr	r3, [pc, #108]	; (800eb2c <prvAddNewTaskToReadyList+0xd4>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d903      	bls.n	800eacc <prvAddNewTaskToReadyList+0x74>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac8:	4a18      	ldr	r2, [pc, #96]	; (800eb2c <prvAddNewTaskToReadyList+0xd4>)
 800eaca:	6013      	str	r3, [r2, #0]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead0:	4613      	mov	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	4413      	add	r3, r2
 800ead6:	009b      	lsls	r3, r3, #2
 800ead8:	4a15      	ldr	r2, [pc, #84]	; (800eb30 <prvAddNewTaskToReadyList+0xd8>)
 800eada:	441a      	add	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3304      	adds	r3, #4
 800eae0:	4619      	mov	r1, r3
 800eae2:	4610      	mov	r0, r2
 800eae4:	f7ff f913 	bl	800dd0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eae8:	f001 fa2c 	bl	800ff44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eaec:	4b0d      	ldr	r3, [pc, #52]	; (800eb24 <prvAddNewTaskToReadyList+0xcc>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d00e      	beq.n	800eb12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eaf4:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <prvAddNewTaskToReadyList+0xc8>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d207      	bcs.n	800eb12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eb02:	4b0c      	ldr	r3, [pc, #48]	; (800eb34 <prvAddNewTaskToReadyList+0xdc>)
 800eb04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb08:	601a      	str	r2, [r3, #0]
 800eb0a:	f3bf 8f4f 	dsb	sy
 800eb0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb12:	bf00      	nop
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	24001cb0 	.word	0x24001cb0
 800eb20:	240017dc 	.word	0x240017dc
 800eb24:	24001cbc 	.word	0x24001cbc
 800eb28:	24001ccc 	.word	0x24001ccc
 800eb2c:	24001cb8 	.word	0x24001cb8
 800eb30:	240017e0 	.word	0x240017e0
 800eb34:	e000ed04 	.word	0xe000ed04

0800eb38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d017      	beq.n	800eb7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb4a:	4b13      	ldr	r3, [pc, #76]	; (800eb98 <vTaskDelay+0x60>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d00a      	beq.n	800eb68 <vTaskDelay+0x30>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	60bb      	str	r3, [r7, #8]
}
 800eb64:	bf00      	nop
 800eb66:	e7fe      	b.n	800eb66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb68:	f000 f880 	bl	800ec6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb6c:	2100      	movs	r1, #0
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fcea 	bl	800f548 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb74:	f000 f888 	bl	800ec88 <xTaskResumeAll>
 800eb78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d107      	bne.n	800eb90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb80:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <vTaskDelay+0x64>)
 800eb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb90:	bf00      	nop
 800eb92:	3710      	adds	r7, #16
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}
 800eb98:	24001cd8 	.word	0x24001cd8
 800eb9c:	e000ed04 	.word	0xe000ed04

0800eba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eba6:	2300      	movs	r3, #0
 800eba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ebae:	463a      	mov	r2, r7
 800ebb0:	1d39      	adds	r1, r7, #4
 800ebb2:	f107 0308 	add.w	r3, r7, #8
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7ff f848 	bl	800dc4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ebbc:	6839      	ldr	r1, [r7, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	68ba      	ldr	r2, [r7, #8]
 800ebc2:	9202      	str	r2, [sp, #8]
 800ebc4:	9301      	str	r3, [sp, #4]
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	9300      	str	r3, [sp, #0]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	460a      	mov	r2, r1
 800ebce:	4921      	ldr	r1, [pc, #132]	; (800ec54 <vTaskStartScheduler+0xb4>)
 800ebd0:	4821      	ldr	r0, [pc, #132]	; (800ec58 <vTaskStartScheduler+0xb8>)
 800ebd2:	f7ff fe0f 	bl	800e7f4 <xTaskCreateStatic>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	4a20      	ldr	r2, [pc, #128]	; (800ec5c <vTaskStartScheduler+0xbc>)
 800ebda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebdc:	4b1f      	ldr	r3, [pc, #124]	; (800ec5c <vTaskStartScheduler+0xbc>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	617b      	str	r3, [r7, #20]
 800ebe8:	e001      	b.n	800ebee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	2b01      	cmp	r3, #1
 800ebf2:	d102      	bne.n	800ebfa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebf4:	f000 fcfc 	bl	800f5f0 <xTimerCreateTimerTask>
 800ebf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d116      	bne.n	800ec2e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ec00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	613b      	str	r3, [r7, #16]
}
 800ec12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ec14:	4b12      	ldr	r3, [pc, #72]	; (800ec60 <vTaskStartScheduler+0xc0>)
 800ec16:	f04f 32ff 	mov.w	r2, #4294967295
 800ec1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ec1c:	4b11      	ldr	r3, [pc, #68]	; (800ec64 <vTaskStartScheduler+0xc4>)
 800ec1e:	2201      	movs	r2, #1
 800ec20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec22:	4b11      	ldr	r3, [pc, #68]	; (800ec68 <vTaskStartScheduler+0xc8>)
 800ec24:	2200      	movs	r2, #0
 800ec26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec28:	f001 f8ba 	bl	800fda0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec2c:	e00e      	b.n	800ec4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec34:	d10a      	bne.n	800ec4c <vTaskStartScheduler+0xac>
	__asm volatile
 800ec36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3a:	f383 8811 	msr	BASEPRI, r3
 800ec3e:	f3bf 8f6f 	isb	sy
 800ec42:	f3bf 8f4f 	dsb	sy
 800ec46:	60fb      	str	r3, [r7, #12]
}
 800ec48:	bf00      	nop
 800ec4a:	e7fe      	b.n	800ec4a <vTaskStartScheduler+0xaa>
}
 800ec4c:	bf00      	nop
 800ec4e:	3718      	adds	r7, #24
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	08011b34 	.word	0x08011b34
 800ec58:	0800f285 	.word	0x0800f285
 800ec5c:	24001cd4 	.word	0x24001cd4
 800ec60:	24001cd0 	.word	0x24001cd0
 800ec64:	24001cbc 	.word	0x24001cbc
 800ec68:	24001cb4 	.word	0x24001cb4

0800ec6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec70:	4b04      	ldr	r3, [pc, #16]	; (800ec84 <vTaskSuspendAll+0x18>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	3301      	adds	r3, #1
 800ec76:	4a03      	ldr	r2, [pc, #12]	; (800ec84 <vTaskSuspendAll+0x18>)
 800ec78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec7a:	bf00      	nop
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr
 800ec84:	24001cd8 	.word	0x24001cd8

0800ec88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec96:	4b42      	ldr	r3, [pc, #264]	; (800eda0 <xTaskResumeAll+0x118>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d10a      	bne.n	800ecb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800ec9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca2:	f383 8811 	msr	BASEPRI, r3
 800eca6:	f3bf 8f6f 	isb	sy
 800ecaa:	f3bf 8f4f 	dsb	sy
 800ecae:	603b      	str	r3, [r7, #0]
}
 800ecb0:	bf00      	nop
 800ecb2:	e7fe      	b.n	800ecb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ecb4:	f001 f916 	bl	800fee4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ecb8:	4b39      	ldr	r3, [pc, #228]	; (800eda0 <xTaskResumeAll+0x118>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	4a38      	ldr	r2, [pc, #224]	; (800eda0 <xTaskResumeAll+0x118>)
 800ecc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecc2:	4b37      	ldr	r3, [pc, #220]	; (800eda0 <xTaskResumeAll+0x118>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d162      	bne.n	800ed90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ecca:	4b36      	ldr	r3, [pc, #216]	; (800eda4 <xTaskResumeAll+0x11c>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d05e      	beq.n	800ed90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecd2:	e02f      	b.n	800ed34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecd4:	4b34      	ldr	r3, [pc, #208]	; (800eda8 <xTaskResumeAll+0x120>)
 800ecd6:	68db      	ldr	r3, [r3, #12]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	3318      	adds	r3, #24
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff f871 	bl	800ddc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7ff f86c 	bl	800ddc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf4:	4b2d      	ldr	r3, [pc, #180]	; (800edac <xTaskResumeAll+0x124>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d903      	bls.n	800ed04 <xTaskResumeAll+0x7c>
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed00:	4a2a      	ldr	r2, [pc, #168]	; (800edac <xTaskResumeAll+0x124>)
 800ed02:	6013      	str	r3, [r2, #0]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4a27      	ldr	r2, [pc, #156]	; (800edb0 <xTaskResumeAll+0x128>)
 800ed12:	441a      	add	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	3304      	adds	r3, #4
 800ed18:	4619      	mov	r1, r3
 800ed1a:	4610      	mov	r0, r2
 800ed1c:	f7fe fff7 	bl	800dd0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed24:	4b23      	ldr	r3, [pc, #140]	; (800edb4 <xTaskResumeAll+0x12c>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d302      	bcc.n	800ed34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ed2e:	4b22      	ldr	r3, [pc, #136]	; (800edb8 <xTaskResumeAll+0x130>)
 800ed30:	2201      	movs	r2, #1
 800ed32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed34:	4b1c      	ldr	r3, [pc, #112]	; (800eda8 <xTaskResumeAll+0x120>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1cb      	bne.n	800ecd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed42:	f000 fb55 	bl	800f3f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed46:	4b1d      	ldr	r3, [pc, #116]	; (800edbc <xTaskResumeAll+0x134>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d010      	beq.n	800ed74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed52:	f000 f847 	bl	800ede4 <xTaskIncrementTick>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d002      	beq.n	800ed62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ed5c:	4b16      	ldr	r3, [pc, #88]	; (800edb8 <xTaskResumeAll+0x130>)
 800ed5e:	2201      	movs	r2, #1
 800ed60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	3b01      	subs	r3, #1
 800ed66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d1f1      	bne.n	800ed52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ed6e:	4b13      	ldr	r3, [pc, #76]	; (800edbc <xTaskResumeAll+0x134>)
 800ed70:	2200      	movs	r2, #0
 800ed72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed74:	4b10      	ldr	r3, [pc, #64]	; (800edb8 <xTaskResumeAll+0x130>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d009      	beq.n	800ed90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed80:	4b0f      	ldr	r3, [pc, #60]	; (800edc0 <xTaskResumeAll+0x138>)
 800ed82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed86:	601a      	str	r2, [r3, #0]
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed90:	f001 f8d8 	bl	800ff44 <vPortExitCritical>

	return xAlreadyYielded;
 800ed94:	68bb      	ldr	r3, [r7, #8]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	24001cd8 	.word	0x24001cd8
 800eda4:	24001cb0 	.word	0x24001cb0
 800eda8:	24001c70 	.word	0x24001c70
 800edac:	24001cb8 	.word	0x24001cb8
 800edb0:	240017e0 	.word	0x240017e0
 800edb4:	240017dc 	.word	0x240017dc
 800edb8:	24001cc4 	.word	0x24001cc4
 800edbc:	24001cc0 	.word	0x24001cc0
 800edc0:	e000ed04 	.word	0xe000ed04

0800edc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edca:	4b05      	ldr	r3, [pc, #20]	; (800ede0 <xTaskGetTickCount+0x1c>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edd0:	687b      	ldr	r3, [r7, #4]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	370c      	adds	r7, #12
 800edd6:	46bd      	mov	sp, r7
 800edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	24001cb4 	.word	0x24001cb4

0800ede4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edea:	2300      	movs	r3, #0
 800edec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edee:	4b4f      	ldr	r3, [pc, #316]	; (800ef2c <xTaskIncrementTick+0x148>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	f040 808f 	bne.w	800ef16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edf8:	4b4d      	ldr	r3, [pc, #308]	; (800ef30 <xTaskIncrementTick+0x14c>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	3301      	adds	r3, #1
 800edfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ee00:	4a4b      	ldr	r2, [pc, #300]	; (800ef30 <xTaskIncrementTick+0x14c>)
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d120      	bne.n	800ee4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ee0c:	4b49      	ldr	r3, [pc, #292]	; (800ef34 <xTaskIncrementTick+0x150>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <xTaskIncrementTick+0x48>
	__asm volatile
 800ee16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1a:	f383 8811 	msr	BASEPRI, r3
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	f3bf 8f4f 	dsb	sy
 800ee26:	603b      	str	r3, [r7, #0]
}
 800ee28:	bf00      	nop
 800ee2a:	e7fe      	b.n	800ee2a <xTaskIncrementTick+0x46>
 800ee2c:	4b41      	ldr	r3, [pc, #260]	; (800ef34 <xTaskIncrementTick+0x150>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	60fb      	str	r3, [r7, #12]
 800ee32:	4b41      	ldr	r3, [pc, #260]	; (800ef38 <xTaskIncrementTick+0x154>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	4a3f      	ldr	r2, [pc, #252]	; (800ef34 <xTaskIncrementTick+0x150>)
 800ee38:	6013      	str	r3, [r2, #0]
 800ee3a:	4a3f      	ldr	r2, [pc, #252]	; (800ef38 <xTaskIncrementTick+0x154>)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6013      	str	r3, [r2, #0]
 800ee40:	4b3e      	ldr	r3, [pc, #248]	; (800ef3c <xTaskIncrementTick+0x158>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	3301      	adds	r3, #1
 800ee46:	4a3d      	ldr	r2, [pc, #244]	; (800ef3c <xTaskIncrementTick+0x158>)
 800ee48:	6013      	str	r3, [r2, #0]
 800ee4a:	f000 fad1 	bl	800f3f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee4e:	4b3c      	ldr	r3, [pc, #240]	; (800ef40 <xTaskIncrementTick+0x15c>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d349      	bcc.n	800eeec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee58:	4b36      	ldr	r3, [pc, #216]	; (800ef34 <xTaskIncrementTick+0x150>)
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d104      	bne.n	800ee6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee62:	4b37      	ldr	r3, [pc, #220]	; (800ef40 <xTaskIncrementTick+0x15c>)
 800ee64:	f04f 32ff 	mov.w	r2, #4294967295
 800ee68:	601a      	str	r2, [r3, #0]
					break;
 800ee6a:	e03f      	b.n	800eeec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee6c:	4b31      	ldr	r3, [pc, #196]	; (800ef34 <xTaskIncrementTick+0x150>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee7c:	693a      	ldr	r2, [r7, #16]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d203      	bcs.n	800ee8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee84:	4a2e      	ldr	r2, [pc, #184]	; (800ef40 <xTaskIncrementTick+0x15c>)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee8a:	e02f      	b.n	800eeec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fe ff99 	bl	800ddc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d004      	beq.n	800eea8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	3318      	adds	r3, #24
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fe ff90 	bl	800ddc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeac:	4b25      	ldr	r3, [pc, #148]	; (800ef44 <xTaskIncrementTick+0x160>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d903      	bls.n	800eebc <xTaskIncrementTick+0xd8>
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb8:	4a22      	ldr	r2, [pc, #136]	; (800ef44 <xTaskIncrementTick+0x160>)
 800eeba:	6013      	str	r3, [r2, #0]
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec0:	4613      	mov	r3, r2
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4a1f      	ldr	r2, [pc, #124]	; (800ef48 <xTaskIncrementTick+0x164>)
 800eeca:	441a      	add	r2, r3
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	3304      	adds	r3, #4
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f7fe ff1b 	bl	800dd0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eedc:	4b1b      	ldr	r3, [pc, #108]	; (800ef4c <xTaskIncrementTick+0x168>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d3b8      	bcc.n	800ee58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eee6:	2301      	movs	r3, #1
 800eee8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eeea:	e7b5      	b.n	800ee58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eeec:	4b17      	ldr	r3, [pc, #92]	; (800ef4c <xTaskIncrementTick+0x168>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef2:	4915      	ldr	r1, [pc, #84]	; (800ef48 <xTaskIncrementTick+0x164>)
 800eef4:	4613      	mov	r3, r2
 800eef6:	009b      	lsls	r3, r3, #2
 800eef8:	4413      	add	r3, r2
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	440b      	add	r3, r1
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d901      	bls.n	800ef08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ef04:	2301      	movs	r3, #1
 800ef06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ef08:	4b11      	ldr	r3, [pc, #68]	; (800ef50 <xTaskIncrementTick+0x16c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d007      	beq.n	800ef20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ef10:	2301      	movs	r3, #1
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	e004      	b.n	800ef20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ef16:	4b0f      	ldr	r3, [pc, #60]	; (800ef54 <xTaskIncrementTick+0x170>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	4a0d      	ldr	r2, [pc, #52]	; (800ef54 <xTaskIncrementTick+0x170>)
 800ef1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ef20:	697b      	ldr	r3, [r7, #20]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3718      	adds	r7, #24
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	24001cd8 	.word	0x24001cd8
 800ef30:	24001cb4 	.word	0x24001cb4
 800ef34:	24001c68 	.word	0x24001c68
 800ef38:	24001c6c 	.word	0x24001c6c
 800ef3c:	24001cc8 	.word	0x24001cc8
 800ef40:	24001cd0 	.word	0x24001cd0
 800ef44:	24001cb8 	.word	0x24001cb8
 800ef48:	240017e0 	.word	0x240017e0
 800ef4c:	240017dc 	.word	0x240017dc
 800ef50:	24001cc4 	.word	0x24001cc4
 800ef54:	24001cc0 	.word	0x24001cc0

0800ef58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef5e:	4b28      	ldr	r3, [pc, #160]	; (800f000 <vTaskSwitchContext+0xa8>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d003      	beq.n	800ef6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef66:	4b27      	ldr	r3, [pc, #156]	; (800f004 <vTaskSwitchContext+0xac>)
 800ef68:	2201      	movs	r2, #1
 800ef6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef6c:	e041      	b.n	800eff2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ef6e:	4b25      	ldr	r3, [pc, #148]	; (800f004 <vTaskSwitchContext+0xac>)
 800ef70:	2200      	movs	r2, #0
 800ef72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef74:	4b24      	ldr	r3, [pc, #144]	; (800f008 <vTaskSwitchContext+0xb0>)
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	e010      	b.n	800ef9e <vTaskSwitchContext+0x46>
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10a      	bne.n	800ef98 <vTaskSwitchContext+0x40>
	__asm volatile
 800ef82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	607b      	str	r3, [r7, #4]
}
 800ef94:	bf00      	nop
 800ef96:	e7fe      	b.n	800ef96 <vTaskSwitchContext+0x3e>
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	60fb      	str	r3, [r7, #12]
 800ef9e:	491b      	ldr	r1, [pc, #108]	; (800f00c <vTaskSwitchContext+0xb4>)
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	4613      	mov	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4413      	add	r3, r2
 800efa8:	009b      	lsls	r3, r3, #2
 800efaa:	440b      	add	r3, r1
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d0e4      	beq.n	800ef7c <vTaskSwitchContext+0x24>
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	4613      	mov	r3, r2
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	4413      	add	r3, r2
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	4a13      	ldr	r2, [pc, #76]	; (800f00c <vTaskSwitchContext+0xb4>)
 800efbe:	4413      	add	r3, r2
 800efc0:	60bb      	str	r3, [r7, #8]
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	685a      	ldr	r2, [r3, #4]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	605a      	str	r2, [r3, #4]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	3308      	adds	r3, #8
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d104      	bne.n	800efe2 <vTaskSwitchContext+0x8a>
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	605a      	str	r2, [r3, #4]
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	4a09      	ldr	r2, [pc, #36]	; (800f010 <vTaskSwitchContext+0xb8>)
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	4a06      	ldr	r2, [pc, #24]	; (800f008 <vTaskSwitchContext+0xb0>)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6013      	str	r3, [r2, #0]
}
 800eff2:	bf00      	nop
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	24001cd8 	.word	0x24001cd8
 800f004:	24001cc4 	.word	0x24001cc4
 800f008:	24001cb8 	.word	0x24001cb8
 800f00c:	240017e0 	.word	0x240017e0
 800f010:	240017dc 	.word	0x240017dc

0800f014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10a      	bne.n	800f03a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f028:	f383 8811 	msr	BASEPRI, r3
 800f02c:	f3bf 8f6f 	isb	sy
 800f030:	f3bf 8f4f 	dsb	sy
 800f034:	60fb      	str	r3, [r7, #12]
}
 800f036:	bf00      	nop
 800f038:	e7fe      	b.n	800f038 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f03a:	4b07      	ldr	r3, [pc, #28]	; (800f058 <vTaskPlaceOnEventList+0x44>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3318      	adds	r3, #24
 800f040:	4619      	mov	r1, r3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7fe fe87 	bl	800dd56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f048:	2101      	movs	r1, #1
 800f04a:	6838      	ldr	r0, [r7, #0]
 800f04c:	f000 fa7c 	bl	800f548 <prvAddCurrentTaskToDelayedList>
}
 800f050:	bf00      	nop
 800f052:	3710      	adds	r7, #16
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	240017dc 	.word	0x240017dc

0800f05c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f072:	f383 8811 	msr	BASEPRI, r3
 800f076:	f3bf 8f6f 	isb	sy
 800f07a:	f3bf 8f4f 	dsb	sy
 800f07e:	617b      	str	r3, [r7, #20]
}
 800f080:	bf00      	nop
 800f082:	e7fe      	b.n	800f082 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f084:	4b0a      	ldr	r3, [pc, #40]	; (800f0b0 <vTaskPlaceOnEventListRestricted+0x54>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	3318      	adds	r3, #24
 800f08a:	4619      	mov	r1, r3
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f7fe fe3e 	bl	800dd0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f098:	f04f 33ff 	mov.w	r3, #4294967295
 800f09c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f09e:	6879      	ldr	r1, [r7, #4]
 800f0a0:	68b8      	ldr	r0, [r7, #8]
 800f0a2:	f000 fa51 	bl	800f548 <prvAddCurrentTaskToDelayedList>
	}
 800f0a6:	bf00      	nop
 800f0a8:	3718      	adds	r7, #24
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	240017dc 	.word	0x240017dc

0800f0b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b086      	sub	sp, #24
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10a      	bne.n	800f0e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	60fb      	str	r3, [r7, #12]
}
 800f0dc:	bf00      	nop
 800f0de:	e7fe      	b.n	800f0de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	3318      	adds	r3, #24
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fe fe6f 	bl	800ddc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0ea:	4b1e      	ldr	r3, [pc, #120]	; (800f164 <xTaskRemoveFromEventList+0xb0>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d11d      	bne.n	800f12e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0f2:	693b      	ldr	r3, [r7, #16]
 800f0f4:	3304      	adds	r3, #4
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fe fe66 	bl	800ddc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f100:	4b19      	ldr	r3, [pc, #100]	; (800f168 <xTaskRemoveFromEventList+0xb4>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d903      	bls.n	800f110 <xTaskRemoveFromEventList+0x5c>
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f10c:	4a16      	ldr	r2, [pc, #88]	; (800f168 <xTaskRemoveFromEventList+0xb4>)
 800f10e:	6013      	str	r3, [r2, #0]
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f114:	4613      	mov	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	4413      	add	r3, r2
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	4a13      	ldr	r2, [pc, #76]	; (800f16c <xTaskRemoveFromEventList+0xb8>)
 800f11e:	441a      	add	r2, r3
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	3304      	adds	r3, #4
 800f124:	4619      	mov	r1, r3
 800f126:	4610      	mov	r0, r2
 800f128:	f7fe fdf1 	bl	800dd0e <vListInsertEnd>
 800f12c:	e005      	b.n	800f13a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	3318      	adds	r3, #24
 800f132:	4619      	mov	r1, r3
 800f134:	480e      	ldr	r0, [pc, #56]	; (800f170 <xTaskRemoveFromEventList+0xbc>)
 800f136:	f7fe fdea 	bl	800dd0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f13e:	4b0d      	ldr	r3, [pc, #52]	; (800f174 <xTaskRemoveFromEventList+0xc0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f144:	429a      	cmp	r2, r3
 800f146:	d905      	bls.n	800f154 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f148:	2301      	movs	r3, #1
 800f14a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f14c:	4b0a      	ldr	r3, [pc, #40]	; (800f178 <xTaskRemoveFromEventList+0xc4>)
 800f14e:	2201      	movs	r2, #1
 800f150:	601a      	str	r2, [r3, #0]
 800f152:	e001      	b.n	800f158 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f154:	2300      	movs	r3, #0
 800f156:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f158:	697b      	ldr	r3, [r7, #20]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	24001cd8 	.word	0x24001cd8
 800f168:	24001cb8 	.word	0x24001cb8
 800f16c:	240017e0 	.word	0x240017e0
 800f170:	24001c70 	.word	0x24001c70
 800f174:	240017dc 	.word	0x240017dc
 800f178:	24001cc4 	.word	0x24001cc4

0800f17c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f184:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <vTaskInternalSetTimeOutState+0x24>)
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f18c:	4b05      	ldr	r3, [pc, #20]	; (800f1a4 <vTaskInternalSetTimeOutState+0x28>)
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	605a      	str	r2, [r3, #4]
}
 800f194:	bf00      	nop
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr
 800f1a0:	24001cc8 	.word	0x24001cc8
 800f1a4:	24001cb4 	.word	0x24001cb4

0800f1a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b088      	sub	sp, #32
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	613b      	str	r3, [r7, #16]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d10a      	bne.n	800f1ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	60fb      	str	r3, [r7, #12]
}
 800f1e6:	bf00      	nop
 800f1e8:	e7fe      	b.n	800f1e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f1ea:	f000 fe7b 	bl	800fee4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1ee:	4b1d      	ldr	r3, [pc, #116]	; (800f264 <xTaskCheckForTimeOut+0xbc>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f206:	d102      	bne.n	800f20e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f208:	2300      	movs	r3, #0
 800f20a:	61fb      	str	r3, [r7, #28]
 800f20c:	e023      	b.n	800f256 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	4b15      	ldr	r3, [pc, #84]	; (800f268 <xTaskCheckForTimeOut+0xc0>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d007      	beq.n	800f22a <xTaskCheckForTimeOut+0x82>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	69ba      	ldr	r2, [r7, #24]
 800f220:	429a      	cmp	r2, r3
 800f222:	d302      	bcc.n	800f22a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f224:	2301      	movs	r3, #1
 800f226:	61fb      	str	r3, [r7, #28]
 800f228:	e015      	b.n	800f256 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	429a      	cmp	r2, r3
 800f232:	d20b      	bcs.n	800f24c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	1ad2      	subs	r2, r2, r3
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff ff9b 	bl	800f17c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f246:	2300      	movs	r3, #0
 800f248:	61fb      	str	r3, [r7, #28]
 800f24a:	e004      	b.n	800f256 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f252:	2301      	movs	r3, #1
 800f254:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f256:	f000 fe75 	bl	800ff44 <vPortExitCritical>

	return xReturn;
 800f25a:	69fb      	ldr	r3, [r7, #28]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3720      	adds	r7, #32
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	24001cb4 	.word	0x24001cb4
 800f268:	24001cc8 	.word	0x24001cc8

0800f26c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f26c:	b480      	push	{r7}
 800f26e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f270:	4b03      	ldr	r3, [pc, #12]	; (800f280 <vTaskMissedYield+0x14>)
 800f272:	2201      	movs	r2, #1
 800f274:	601a      	str	r2, [r3, #0]
}
 800f276:	bf00      	nop
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	24001cc4 	.word	0x24001cc4

0800f284 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f28c:	f000 f852 	bl	800f334 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f290:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <prvIdleTask+0x28>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b01      	cmp	r3, #1
 800f296:	d9f9      	bls.n	800f28c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f298:	4b05      	ldr	r3, [pc, #20]	; (800f2b0 <prvIdleTask+0x2c>)
 800f29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f2a8:	e7f0      	b.n	800f28c <prvIdleTask+0x8>
 800f2aa:	bf00      	nop
 800f2ac:	240017e0 	.word	0x240017e0
 800f2b0:	e000ed04 	.word	0xe000ed04

0800f2b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	607b      	str	r3, [r7, #4]
 800f2be:	e00c      	b.n	800f2da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	4413      	add	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4a12      	ldr	r2, [pc, #72]	; (800f314 <prvInitialiseTaskLists+0x60>)
 800f2cc:	4413      	add	r3, r2
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe fcf0 	bl	800dcb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	607b      	str	r3, [r7, #4]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b37      	cmp	r3, #55	; 0x37
 800f2de:	d9ef      	bls.n	800f2c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2e0:	480d      	ldr	r0, [pc, #52]	; (800f318 <prvInitialiseTaskLists+0x64>)
 800f2e2:	f7fe fce7 	bl	800dcb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2e6:	480d      	ldr	r0, [pc, #52]	; (800f31c <prvInitialiseTaskLists+0x68>)
 800f2e8:	f7fe fce4 	bl	800dcb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2ec:	480c      	ldr	r0, [pc, #48]	; (800f320 <prvInitialiseTaskLists+0x6c>)
 800f2ee:	f7fe fce1 	bl	800dcb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2f2:	480c      	ldr	r0, [pc, #48]	; (800f324 <prvInitialiseTaskLists+0x70>)
 800f2f4:	f7fe fcde 	bl	800dcb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2f8:	480b      	ldr	r0, [pc, #44]	; (800f328 <prvInitialiseTaskLists+0x74>)
 800f2fa:	f7fe fcdb 	bl	800dcb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2fe:	4b0b      	ldr	r3, [pc, #44]	; (800f32c <prvInitialiseTaskLists+0x78>)
 800f300:	4a05      	ldr	r2, [pc, #20]	; (800f318 <prvInitialiseTaskLists+0x64>)
 800f302:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <prvInitialiseTaskLists+0x7c>)
 800f306:	4a05      	ldr	r2, [pc, #20]	; (800f31c <prvInitialiseTaskLists+0x68>)
 800f308:	601a      	str	r2, [r3, #0]
}
 800f30a:	bf00      	nop
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	240017e0 	.word	0x240017e0
 800f318:	24001c40 	.word	0x24001c40
 800f31c:	24001c54 	.word	0x24001c54
 800f320:	24001c70 	.word	0x24001c70
 800f324:	24001c84 	.word	0x24001c84
 800f328:	24001c9c 	.word	0x24001c9c
 800f32c:	24001c68 	.word	0x24001c68
 800f330:	24001c6c 	.word	0x24001c6c

0800f334 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f33a:	e019      	b.n	800f370 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f33c:	f000 fdd2 	bl	800fee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f340:	4b10      	ldr	r3, [pc, #64]	; (800f384 <prvCheckTasksWaitingTermination+0x50>)
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3304      	adds	r3, #4
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fe fd3b 	bl	800ddc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f352:	4b0d      	ldr	r3, [pc, #52]	; (800f388 <prvCheckTasksWaitingTermination+0x54>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	3b01      	subs	r3, #1
 800f358:	4a0b      	ldr	r2, [pc, #44]	; (800f388 <prvCheckTasksWaitingTermination+0x54>)
 800f35a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f35c:	4b0b      	ldr	r3, [pc, #44]	; (800f38c <prvCheckTasksWaitingTermination+0x58>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3b01      	subs	r3, #1
 800f362:	4a0a      	ldr	r2, [pc, #40]	; (800f38c <prvCheckTasksWaitingTermination+0x58>)
 800f364:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f366:	f000 fded 	bl	800ff44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f810 	bl	800f390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f370:	4b06      	ldr	r3, [pc, #24]	; (800f38c <prvCheckTasksWaitingTermination+0x58>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d1e1      	bne.n	800f33c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	24001c84 	.word	0x24001c84
 800f388:	24001cb0 	.word	0x24001cb0
 800f38c:	24001c98 	.word	0x24001c98

0800f390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d108      	bne.n	800f3b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 ff8a 	bl	80102c0 <vPortFree>
				vPortFree( pxTCB );
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 ff87 	bl	80102c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3b2:	e018      	b.n	800f3e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3ba:	2b01      	cmp	r3, #1
 800f3bc:	d103      	bne.n	800f3c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 ff7e 	bl	80102c0 <vPortFree>
	}
 800f3c4:	e00f      	b.n	800f3e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d00a      	beq.n	800f3e6 <prvDeleteTCB+0x56>
	__asm volatile
 800f3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d4:	f383 8811 	msr	BASEPRI, r3
 800f3d8:	f3bf 8f6f 	isb	sy
 800f3dc:	f3bf 8f4f 	dsb	sy
 800f3e0:	60fb      	str	r3, [r7, #12]
}
 800f3e2:	bf00      	nop
 800f3e4:	e7fe      	b.n	800f3e4 <prvDeleteTCB+0x54>
	}
 800f3e6:	bf00      	nop
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3f6:	4b0c      	ldr	r3, [pc, #48]	; (800f428 <prvResetNextTaskUnblockTime+0x38>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d104      	bne.n	800f40a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f400:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <prvResetNextTaskUnblockTime+0x3c>)
 800f402:	f04f 32ff 	mov.w	r2, #4294967295
 800f406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f408:	e008      	b.n	800f41c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f40a:	4b07      	ldr	r3, [pc, #28]	; (800f428 <prvResetNextTaskUnblockTime+0x38>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	4a04      	ldr	r2, [pc, #16]	; (800f42c <prvResetNextTaskUnblockTime+0x3c>)
 800f41a:	6013      	str	r3, [r2, #0]
}
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	24001c68 	.word	0x24001c68
 800f42c:	24001cd0 	.word	0x24001cd0

0800f430 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f436:	4b0b      	ldr	r3, [pc, #44]	; (800f464 <xTaskGetSchedulerState+0x34>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d102      	bne.n	800f444 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f43e:	2301      	movs	r3, #1
 800f440:	607b      	str	r3, [r7, #4]
 800f442:	e008      	b.n	800f456 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f444:	4b08      	ldr	r3, [pc, #32]	; (800f468 <xTaskGetSchedulerState+0x38>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d102      	bne.n	800f452 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f44c:	2302      	movs	r3, #2
 800f44e:	607b      	str	r3, [r7, #4]
 800f450:	e001      	b.n	800f456 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f452:	2300      	movs	r3, #0
 800f454:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f456:	687b      	ldr	r3, [r7, #4]
	}
 800f458:	4618      	mov	r0, r3
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr
 800f464:	24001cbc 	.word	0x24001cbc
 800f468:	24001cd8 	.word	0x24001cd8

0800f46c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f478:	2300      	movs	r3, #0
 800f47a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d056      	beq.n	800f530 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f482:	4b2e      	ldr	r3, [pc, #184]	; (800f53c <xTaskPriorityDisinherit+0xd0>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d00a      	beq.n	800f4a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f490:	f383 8811 	msr	BASEPRI, r3
 800f494:	f3bf 8f6f 	isb	sy
 800f498:	f3bf 8f4f 	dsb	sy
 800f49c:	60fb      	str	r3, [r7, #12]
}
 800f49e:	bf00      	nop
 800f4a0:	e7fe      	b.n	800f4a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10a      	bne.n	800f4c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	60bb      	str	r3, [r7, #8]
}
 800f4bc:	bf00      	nop
 800f4be:	e7fe      	b.n	800f4be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4c4:	1e5a      	subs	r2, r3, #1
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d02c      	beq.n	800f530 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d128      	bne.n	800f530 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	3304      	adds	r3, #4
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fe fc70 	bl	800ddc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f500:	4b0f      	ldr	r3, [pc, #60]	; (800f540 <xTaskPriorityDisinherit+0xd4>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	429a      	cmp	r2, r3
 800f506:	d903      	bls.n	800f510 <xTaskPriorityDisinherit+0xa4>
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f50c:	4a0c      	ldr	r2, [pc, #48]	; (800f540 <xTaskPriorityDisinherit+0xd4>)
 800f50e:	6013      	str	r3, [r2, #0]
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	4613      	mov	r3, r2
 800f516:	009b      	lsls	r3, r3, #2
 800f518:	4413      	add	r3, r2
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	4a09      	ldr	r2, [pc, #36]	; (800f544 <xTaskPriorityDisinherit+0xd8>)
 800f51e:	441a      	add	r2, r3
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	3304      	adds	r3, #4
 800f524:	4619      	mov	r1, r3
 800f526:	4610      	mov	r0, r2
 800f528:	f7fe fbf1 	bl	800dd0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f52c:	2301      	movs	r3, #1
 800f52e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f530:	697b      	ldr	r3, [r7, #20]
	}
 800f532:	4618      	mov	r0, r3
 800f534:	3718      	adds	r7, #24
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	240017dc 	.word	0x240017dc
 800f540:	24001cb8 	.word	0x24001cb8
 800f544:	240017e0 	.word	0x240017e0

0800f548 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f552:	4b21      	ldr	r3, [pc, #132]	; (800f5d8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f558:	4b20      	ldr	r3, [pc, #128]	; (800f5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	3304      	adds	r3, #4
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fe fc32 	bl	800ddc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f56a:	d10a      	bne.n	800f582 <prvAddCurrentTaskToDelayedList+0x3a>
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d007      	beq.n	800f582 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f572:	4b1a      	ldr	r3, [pc, #104]	; (800f5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	3304      	adds	r3, #4
 800f578:	4619      	mov	r1, r3
 800f57a:	4819      	ldr	r0, [pc, #100]	; (800f5e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f57c:	f7fe fbc7 	bl	800dd0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f580:	e026      	b.n	800f5d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f582:	68fa      	ldr	r2, [r7, #12]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4413      	add	r3, r2
 800f588:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f58a:	4b14      	ldr	r3, [pc, #80]	; (800f5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	68ba      	ldr	r2, [r7, #8]
 800f590:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f592:	68ba      	ldr	r2, [r7, #8]
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	429a      	cmp	r2, r3
 800f598:	d209      	bcs.n	800f5ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f59a:	4b12      	ldr	r3, [pc, #72]	; (800f5e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	4b0f      	ldr	r3, [pc, #60]	; (800f5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	3304      	adds	r3, #4
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	4610      	mov	r0, r2
 800f5a8:	f7fe fbd5 	bl	800dd56 <vListInsert>
}
 800f5ac:	e010      	b.n	800f5d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5ae:	4b0e      	ldr	r3, [pc, #56]	; (800f5e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	4b0a      	ldr	r3, [pc, #40]	; (800f5dc <prvAddCurrentTaskToDelayedList+0x94>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3304      	adds	r3, #4
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	f7fe fbcb 	bl	800dd56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5c0:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d202      	bcs.n	800f5d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5ca:	4a08      	ldr	r2, [pc, #32]	; (800f5ec <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	6013      	str	r3, [r2, #0]
}
 800f5d0:	bf00      	nop
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	24001cb4 	.word	0x24001cb4
 800f5dc:	240017dc 	.word	0x240017dc
 800f5e0:	24001c9c 	.word	0x24001c9c
 800f5e4:	24001c6c 	.word	0x24001c6c
 800f5e8:	24001c68 	.word	0x24001c68
 800f5ec:	24001cd0 	.word	0x24001cd0

0800f5f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08a      	sub	sp, #40	; 0x28
 800f5f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5fa:	f000 fb07 	bl	800fc0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5fe:	4b1c      	ldr	r3, [pc, #112]	; (800f670 <xTimerCreateTimerTask+0x80>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d021      	beq.n	800f64a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f606:	2300      	movs	r3, #0
 800f608:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f60a:	2300      	movs	r3, #0
 800f60c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f60e:	1d3a      	adds	r2, r7, #4
 800f610:	f107 0108 	add.w	r1, r7, #8
 800f614:	f107 030c 	add.w	r3, r7, #12
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fe fb31 	bl	800dc80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f61e:	6879      	ldr	r1, [r7, #4]
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	68fa      	ldr	r2, [r7, #12]
 800f624:	9202      	str	r2, [sp, #8]
 800f626:	9301      	str	r3, [sp, #4]
 800f628:	2302      	movs	r3, #2
 800f62a:	9300      	str	r3, [sp, #0]
 800f62c:	2300      	movs	r3, #0
 800f62e:	460a      	mov	r2, r1
 800f630:	4910      	ldr	r1, [pc, #64]	; (800f674 <xTimerCreateTimerTask+0x84>)
 800f632:	4811      	ldr	r0, [pc, #68]	; (800f678 <xTimerCreateTimerTask+0x88>)
 800f634:	f7ff f8de 	bl	800e7f4 <xTaskCreateStatic>
 800f638:	4603      	mov	r3, r0
 800f63a:	4a10      	ldr	r2, [pc, #64]	; (800f67c <xTimerCreateTimerTask+0x8c>)
 800f63c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f63e:	4b0f      	ldr	r3, [pc, #60]	; (800f67c <xTimerCreateTimerTask+0x8c>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f646:	2301      	movs	r3, #1
 800f648:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d10a      	bne.n	800f666 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f654:	f383 8811 	msr	BASEPRI, r3
 800f658:	f3bf 8f6f 	isb	sy
 800f65c:	f3bf 8f4f 	dsb	sy
 800f660:	613b      	str	r3, [r7, #16]
}
 800f662:	bf00      	nop
 800f664:	e7fe      	b.n	800f664 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f666:	697b      	ldr	r3, [r7, #20]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3718      	adds	r7, #24
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}
 800f670:	24001d0c 	.word	0x24001d0c
 800f674:	08011b3c 	.word	0x08011b3c
 800f678:	0800f7b5 	.word	0x0800f7b5
 800f67c:	24001d10 	.word	0x24001d10

0800f680 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b08a      	sub	sp, #40	; 0x28
 800f684:	af00      	add	r7, sp, #0
 800f686:	60f8      	str	r0, [r7, #12]
 800f688:	60b9      	str	r1, [r7, #8]
 800f68a:	607a      	str	r2, [r7, #4]
 800f68c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f68e:	2300      	movs	r3, #0
 800f690:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10a      	bne.n	800f6ae <xTimerGenericCommand+0x2e>
	__asm volatile
 800f698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	623b      	str	r3, [r7, #32]
}
 800f6aa:	bf00      	nop
 800f6ac:	e7fe      	b.n	800f6ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f6ae:	4b1a      	ldr	r3, [pc, #104]	; (800f718 <xTimerGenericCommand+0x98>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d02a      	beq.n	800f70c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	2b05      	cmp	r3, #5
 800f6c6:	dc18      	bgt.n	800f6fa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6c8:	f7ff feb2 	bl	800f430 <xTaskGetSchedulerState>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d109      	bne.n	800f6e6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6d2:	4b11      	ldr	r3, [pc, #68]	; (800f718 <xTimerGenericCommand+0x98>)
 800f6d4:	6818      	ldr	r0, [r3, #0]
 800f6d6:	f107 0110 	add.w	r1, r7, #16
 800f6da:	2300      	movs	r3, #0
 800f6dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6de:	f7fe fca1 	bl	800e024 <xQueueGenericSend>
 800f6e2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6e4:	e012      	b.n	800f70c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6e6:	4b0c      	ldr	r3, [pc, #48]	; (800f718 <xTimerGenericCommand+0x98>)
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f107 0110 	add.w	r1, r7, #16
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f7fe fc97 	bl	800e024 <xQueueGenericSend>
 800f6f6:	6278      	str	r0, [r7, #36]	; 0x24
 800f6f8:	e008      	b.n	800f70c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6fa:	4b07      	ldr	r3, [pc, #28]	; (800f718 <xTimerGenericCommand+0x98>)
 800f6fc:	6818      	ldr	r0, [r3, #0]
 800f6fe:	f107 0110 	add.w	r1, r7, #16
 800f702:	2300      	movs	r3, #0
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	f7fe fd8b 	bl	800e220 <xQueueGenericSendFromISR>
 800f70a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3728      	adds	r7, #40	; 0x28
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	24001d0c 	.word	0x24001d0c

0800f71c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b088      	sub	sp, #32
 800f720:	af02      	add	r7, sp, #8
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f726:	4b22      	ldr	r3, [pc, #136]	; (800f7b0 <prvProcessExpiredTimer+0x94>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	3304      	adds	r3, #4
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe fb47 	bl	800ddc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f740:	f003 0304 	and.w	r3, r3, #4
 800f744:	2b00      	cmp	r3, #0
 800f746:	d022      	beq.n	800f78e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	699a      	ldr	r2, [r3, #24]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	18d1      	adds	r1, r2, r3
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	6978      	ldr	r0, [r7, #20]
 800f756:	f000 f8d1 	bl	800f8fc <prvInsertTimerInActiveList>
 800f75a:	4603      	mov	r3, r0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d01f      	beq.n	800f7a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f760:	2300      	movs	r3, #0
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	2300      	movs	r3, #0
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	2100      	movs	r1, #0
 800f76a:	6978      	ldr	r0, [r7, #20]
 800f76c:	f7ff ff88 	bl	800f680 <xTimerGenericCommand>
 800f770:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d113      	bne.n	800f7a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	60fb      	str	r3, [r7, #12]
}
 800f78a:	bf00      	nop
 800f78c:	e7fe      	b.n	800f78c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f794:	f023 0301 	bic.w	r3, r3, #1
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	6a1b      	ldr	r3, [r3, #32]
 800f7a4:	6978      	ldr	r0, [r7, #20]
 800f7a6:	4798      	blx	r3
}
 800f7a8:	bf00      	nop
 800f7aa:	3718      	adds	r7, #24
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	24001d04 	.word	0x24001d04

0800f7b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7bc:	f107 0308 	add.w	r3, r7, #8
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f000 f857 	bl	800f874 <prvGetNextExpireTime>
 800f7c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f000 f803 	bl	800f7d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7d2:	f000 f8d5 	bl	800f980 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7d6:	e7f1      	b.n	800f7bc <prvTimerTask+0x8>

0800f7d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7e2:	f7ff fa43 	bl	800ec6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7e6:	f107 0308 	add.w	r3, r7, #8
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f000 f866 	bl	800f8bc <prvSampleTimeNow>
 800f7f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d130      	bne.n	800f85a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d10a      	bne.n	800f814 <prvProcessTimerOrBlockTask+0x3c>
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	429a      	cmp	r2, r3
 800f804:	d806      	bhi.n	800f814 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f806:	f7ff fa3f 	bl	800ec88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f80a:	68f9      	ldr	r1, [r7, #12]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7ff ff85 	bl	800f71c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f812:	e024      	b.n	800f85e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d008      	beq.n	800f82c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f81a:	4b13      	ldr	r3, [pc, #76]	; (800f868 <prvProcessTimerOrBlockTask+0x90>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d101      	bne.n	800f828 <prvProcessTimerOrBlockTask+0x50>
 800f824:	2301      	movs	r3, #1
 800f826:	e000      	b.n	800f82a <prvProcessTimerOrBlockTask+0x52>
 800f828:	2300      	movs	r3, #0
 800f82a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f82c:	4b0f      	ldr	r3, [pc, #60]	; (800f86c <prvProcessTimerOrBlockTask+0x94>)
 800f82e:	6818      	ldr	r0, [r3, #0]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	683a      	ldr	r2, [r7, #0]
 800f838:	4619      	mov	r1, r3
 800f83a:	f7fe ffa7 	bl	800e78c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f83e:	f7ff fa23 	bl	800ec88 <xTaskResumeAll>
 800f842:	4603      	mov	r3, r0
 800f844:	2b00      	cmp	r3, #0
 800f846:	d10a      	bne.n	800f85e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f848:	4b09      	ldr	r3, [pc, #36]	; (800f870 <prvProcessTimerOrBlockTask+0x98>)
 800f84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	f3bf 8f4f 	dsb	sy
 800f854:	f3bf 8f6f 	isb	sy
}
 800f858:	e001      	b.n	800f85e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f85a:	f7ff fa15 	bl	800ec88 <xTaskResumeAll>
}
 800f85e:	bf00      	nop
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	24001d08 	.word	0x24001d08
 800f86c:	24001d0c 	.word	0x24001d0c
 800f870:	e000ed04 	.word	0xe000ed04

0800f874 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f874:	b480      	push	{r7}
 800f876:	b085      	sub	sp, #20
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f87c:	4b0e      	ldr	r3, [pc, #56]	; (800f8b8 <prvGetNextExpireTime+0x44>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <prvGetNextExpireTime+0x16>
 800f886:	2201      	movs	r2, #1
 800f888:	e000      	b.n	800f88c <prvGetNextExpireTime+0x18>
 800f88a:	2200      	movs	r2, #0
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d105      	bne.n	800f8a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f898:	4b07      	ldr	r3, [pc, #28]	; (800f8b8 <prvGetNextExpireTime+0x44>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	60fb      	str	r3, [r7, #12]
 800f8a2:	e001      	b.n	800f8a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	24001d04 	.word	0x24001d04

0800f8bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8c4:	f7ff fa7e 	bl	800edc4 <xTaskGetTickCount>
 800f8c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8ca:	4b0b      	ldr	r3, [pc, #44]	; (800f8f8 <prvSampleTimeNow+0x3c>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d205      	bcs.n	800f8e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8d4:	f000 f936 	bl	800fb44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	e002      	b.n	800f8e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8e6:	4a04      	ldr	r2, [pc, #16]	; (800f8f8 <prvSampleTimeNow+0x3c>)
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3710      	adds	r7, #16
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
 800f8f6:	bf00      	nop
 800f8f8:	24001d14 	.word	0x24001d14

0800f8fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b086      	sub	sp, #24
 800f900:	af00      	add	r7, sp, #0
 800f902:	60f8      	str	r0, [r7, #12]
 800f904:	60b9      	str	r1, [r7, #8]
 800f906:	607a      	str	r2, [r7, #4]
 800f908:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f90a:	2300      	movs	r3, #0
 800f90c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	68fa      	ldr	r2, [r7, #12]
 800f918:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f91a:	68ba      	ldr	r2, [r7, #8]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d812      	bhi.n	800f948 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	1ad2      	subs	r2, r2, r3
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	699b      	ldr	r3, [r3, #24]
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d302      	bcc.n	800f936 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f930:	2301      	movs	r3, #1
 800f932:	617b      	str	r3, [r7, #20]
 800f934:	e01b      	b.n	800f96e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f936:	4b10      	ldr	r3, [pc, #64]	; (800f978 <prvInsertTimerInActiveList+0x7c>)
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3304      	adds	r3, #4
 800f93e:	4619      	mov	r1, r3
 800f940:	4610      	mov	r0, r2
 800f942:	f7fe fa08 	bl	800dd56 <vListInsert>
 800f946:	e012      	b.n	800f96e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d206      	bcs.n	800f95e <prvInsertTimerInActiveList+0x62>
 800f950:	68ba      	ldr	r2, [r7, #8]
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	429a      	cmp	r2, r3
 800f956:	d302      	bcc.n	800f95e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f958:	2301      	movs	r3, #1
 800f95a:	617b      	str	r3, [r7, #20]
 800f95c:	e007      	b.n	800f96e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f95e:	4b07      	ldr	r3, [pc, #28]	; (800f97c <prvInsertTimerInActiveList+0x80>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	3304      	adds	r3, #4
 800f966:	4619      	mov	r1, r3
 800f968:	4610      	mov	r0, r2
 800f96a:	f7fe f9f4 	bl	800dd56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f96e:	697b      	ldr	r3, [r7, #20]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	24001d08 	.word	0x24001d08
 800f97c:	24001d04 	.word	0x24001d04

0800f980 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b08e      	sub	sp, #56	; 0x38
 800f984:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f986:	e0ca      	b.n	800fb1e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	da18      	bge.n	800f9c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f98e:	1d3b      	adds	r3, r7, #4
 800f990:	3304      	adds	r3, #4
 800f992:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10a      	bne.n	800f9b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99e:	f383 8811 	msr	BASEPRI, r3
 800f9a2:	f3bf 8f6f 	isb	sy
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	61fb      	str	r3, [r7, #28]
}
 800f9ac:	bf00      	nop
 800f9ae:	e7fe      	b.n	800f9ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9b6:	6850      	ldr	r0, [r2, #4]
 800f9b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9ba:	6892      	ldr	r2, [r2, #8]
 800f9bc:	4611      	mov	r1, r2
 800f9be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	f2c0 80ab 	blt.w	800fb1e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ce:	695b      	ldr	r3, [r3, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d004      	beq.n	800f9de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d6:	3304      	adds	r3, #4
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7fe f9f5 	bl	800ddc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9de:	463b      	mov	r3, r7
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff ff6b 	bl	800f8bc <prvSampleTimeNow>
 800f9e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b09      	cmp	r3, #9
 800f9ec:	f200 8096 	bhi.w	800fb1c <prvProcessReceivedCommands+0x19c>
 800f9f0:	a201      	add	r2, pc, #4	; (adr r2, 800f9f8 <prvProcessReceivedCommands+0x78>)
 800f9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f6:	bf00      	nop
 800f9f8:	0800fa21 	.word	0x0800fa21
 800f9fc:	0800fa21 	.word	0x0800fa21
 800fa00:	0800fa21 	.word	0x0800fa21
 800fa04:	0800fa95 	.word	0x0800fa95
 800fa08:	0800faa9 	.word	0x0800faa9
 800fa0c:	0800faf3 	.word	0x0800faf3
 800fa10:	0800fa21 	.word	0x0800fa21
 800fa14:	0800fa21 	.word	0x0800fa21
 800fa18:	0800fa95 	.word	0x0800fa95
 800fa1c:	0800faa9 	.word	0x0800faa9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa26:	f043 0301 	orr.w	r3, r3, #1
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	18d1      	adds	r1, r2, r3
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa40:	f7ff ff5c 	bl	800f8fc <prvInsertTimerInActiveList>
 800fa44:	4603      	mov	r3, r0
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d069      	beq.n	800fb1e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa58:	f003 0304 	and.w	r3, r3, #4
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d05e      	beq.n	800fb1e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa64:	699b      	ldr	r3, [r3, #24]
 800fa66:	441a      	add	r2, r3
 800fa68:	2300      	movs	r3, #0
 800fa6a:	9300      	str	r3, [sp, #0]
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	2100      	movs	r1, #0
 800fa70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa72:	f7ff fe05 	bl	800f680 <xTimerGenericCommand>
 800fa76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d14f      	bne.n	800fb1e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	61bb      	str	r3, [r7, #24]
}
 800fa90:	bf00      	nop
 800fa92:	e7fe      	b.n	800fa92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa9a:	f023 0301 	bic.w	r3, r3, #1
 800fa9e:	b2da      	uxtb	r2, r3
 800faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800faa6:	e03a      	b.n	800fb1e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800faa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faae:	f043 0301 	orr.w	r3, r3, #1
 800fab2:	b2da      	uxtb	r2, r3
 800fab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800faba:	68ba      	ldr	r2, [r7, #8]
 800fabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d10a      	bne.n	800fade <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800facc:	f383 8811 	msr	BASEPRI, r3
 800fad0:	f3bf 8f6f 	isb	sy
 800fad4:	f3bf 8f4f 	dsb	sy
 800fad8:	617b      	str	r3, [r7, #20]
}
 800fada:	bf00      	nop
 800fadc:	e7fe      	b.n	800fadc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae0:	699a      	ldr	r2, [r3, #24]
 800fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae4:	18d1      	adds	r1, r2, r3
 800fae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800faea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faec:	f7ff ff06 	bl	800f8fc <prvInsertTimerInActiveList>
					break;
 800faf0:	e015      	b.n	800fb1e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faf8:	f003 0302 	and.w	r3, r3, #2
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d103      	bne.n	800fb08 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fb00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb02:	f000 fbdd 	bl	80102c0 <vPortFree>
 800fb06:	e00a      	b.n	800fb1e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb0e:	f023 0301 	bic.w	r3, r3, #1
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fb1a:	e000      	b.n	800fb1e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800fb1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb1e:	4b08      	ldr	r3, [pc, #32]	; (800fb40 <prvProcessReceivedCommands+0x1c0>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	1d39      	adds	r1, r7, #4
 800fb24:	2200      	movs	r2, #0
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7fe fc16 	bl	800e358 <xQueueReceive>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f47f af2a 	bne.w	800f988 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop
 800fb38:	3730      	adds	r7, #48	; 0x30
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	24001d0c 	.word	0x24001d0c

0800fb44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b088      	sub	sp, #32
 800fb48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb4a:	e048      	b.n	800fbde <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb4c:	4b2d      	ldr	r3, [pc, #180]	; (800fc04 <prvSwitchTimerLists+0xc0>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68db      	ldr	r3, [r3, #12]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb56:	4b2b      	ldr	r3, [pc, #172]	; (800fc04 <prvSwitchTimerLists+0xc0>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	3304      	adds	r3, #4
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7fe f92f 	bl	800ddc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	6a1b      	ldr	r3, [r3, #32]
 800fb6e:	68f8      	ldr	r0, [r7, #12]
 800fb70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb78:	f003 0304 	and.w	r3, r3, #4
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d02e      	beq.n	800fbde <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	699b      	ldr	r3, [r3, #24]
 800fb84:	693a      	ldr	r2, [r7, #16]
 800fb86:	4413      	add	r3, r2
 800fb88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb8a:	68ba      	ldr	r2, [r7, #8]
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d90e      	bls.n	800fbb0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb9e:	4b19      	ldr	r3, [pc, #100]	; (800fc04 <prvSwitchTimerLists+0xc0>)
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	3304      	adds	r3, #4
 800fba6:	4619      	mov	r1, r3
 800fba8:	4610      	mov	r0, r2
 800fbaa:	f7fe f8d4 	bl	800dd56 <vListInsert>
 800fbae:	e016      	b.n	800fbde <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	9300      	str	r3, [sp, #0]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	2100      	movs	r1, #0
 800fbba:	68f8      	ldr	r0, [r7, #12]
 800fbbc:	f7ff fd60 	bl	800f680 <xTimerGenericCommand>
 800fbc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10a      	bne.n	800fbde <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbcc:	f383 8811 	msr	BASEPRI, r3
 800fbd0:	f3bf 8f6f 	isb	sy
 800fbd4:	f3bf 8f4f 	dsb	sy
 800fbd8:	603b      	str	r3, [r7, #0]
}
 800fbda:	bf00      	nop
 800fbdc:	e7fe      	b.n	800fbdc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbde:	4b09      	ldr	r3, [pc, #36]	; (800fc04 <prvSwitchTimerLists+0xc0>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1b1      	bne.n	800fb4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbe8:	4b06      	ldr	r3, [pc, #24]	; (800fc04 <prvSwitchTimerLists+0xc0>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbee:	4b06      	ldr	r3, [pc, #24]	; (800fc08 <prvSwitchTimerLists+0xc4>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a04      	ldr	r2, [pc, #16]	; (800fc04 <prvSwitchTimerLists+0xc0>)
 800fbf4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbf6:	4a04      	ldr	r2, [pc, #16]	; (800fc08 <prvSwitchTimerLists+0xc4>)
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	6013      	str	r3, [r2, #0]
}
 800fbfc:	bf00      	nop
 800fbfe:	3718      	adds	r7, #24
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	24001d04 	.word	0x24001d04
 800fc08:	24001d08 	.word	0x24001d08

0800fc0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fc12:	f000 f967 	bl	800fee4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc16:	4b15      	ldr	r3, [pc, #84]	; (800fc6c <prvCheckForValidListAndQueue+0x60>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d120      	bne.n	800fc60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc1e:	4814      	ldr	r0, [pc, #80]	; (800fc70 <prvCheckForValidListAndQueue+0x64>)
 800fc20:	f7fe f848 	bl	800dcb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc24:	4813      	ldr	r0, [pc, #76]	; (800fc74 <prvCheckForValidListAndQueue+0x68>)
 800fc26:	f7fe f845 	bl	800dcb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc2a:	4b13      	ldr	r3, [pc, #76]	; (800fc78 <prvCheckForValidListAndQueue+0x6c>)
 800fc2c:	4a10      	ldr	r2, [pc, #64]	; (800fc70 <prvCheckForValidListAndQueue+0x64>)
 800fc2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc30:	4b12      	ldr	r3, [pc, #72]	; (800fc7c <prvCheckForValidListAndQueue+0x70>)
 800fc32:	4a10      	ldr	r2, [pc, #64]	; (800fc74 <prvCheckForValidListAndQueue+0x68>)
 800fc34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc36:	2300      	movs	r3, #0
 800fc38:	9300      	str	r3, [sp, #0]
 800fc3a:	4b11      	ldr	r3, [pc, #68]	; (800fc80 <prvCheckForValidListAndQueue+0x74>)
 800fc3c:	4a11      	ldr	r2, [pc, #68]	; (800fc84 <prvCheckForValidListAndQueue+0x78>)
 800fc3e:	2110      	movs	r1, #16
 800fc40:	200a      	movs	r0, #10
 800fc42:	f7fe f953 	bl	800deec <xQueueGenericCreateStatic>
 800fc46:	4603      	mov	r3, r0
 800fc48:	4a08      	ldr	r2, [pc, #32]	; (800fc6c <prvCheckForValidListAndQueue+0x60>)
 800fc4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc4c:	4b07      	ldr	r3, [pc, #28]	; (800fc6c <prvCheckForValidListAndQueue+0x60>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d005      	beq.n	800fc60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc54:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <prvCheckForValidListAndQueue+0x60>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	490b      	ldr	r1, [pc, #44]	; (800fc88 <prvCheckForValidListAndQueue+0x7c>)
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7fe fd6c 	bl	800e738 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc60:	f000 f970 	bl	800ff44 <vPortExitCritical>
}
 800fc64:	bf00      	nop
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	24001d0c 	.word	0x24001d0c
 800fc70:	24001cdc 	.word	0x24001cdc
 800fc74:	24001cf0 	.word	0x24001cf0
 800fc78:	24001d04 	.word	0x24001d04
 800fc7c:	24001d08 	.word	0x24001d08
 800fc80:	24001db8 	.word	0x24001db8
 800fc84:	24001d18 	.word	0x24001d18
 800fc88:	08011b44 	.word	0x08011b44

0800fc8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	3b04      	subs	r3, #4
 800fc9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	3b04      	subs	r3, #4
 800fcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	f023 0201 	bic.w	r2, r3, #1
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	3b04      	subs	r3, #4
 800fcba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fcbc:	4a0c      	ldr	r2, [pc, #48]	; (800fcf0 <pxPortInitialiseStack+0x64>)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	3b14      	subs	r3, #20
 800fcc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3b04      	subs	r3, #4
 800fcd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f06f 0202 	mvn.w	r2, #2
 800fcda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	3b20      	subs	r3, #32
 800fce0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fce2:	68fb      	ldr	r3, [r7, #12]
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3714      	adds	r7, #20
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	0800fcf5 	.word	0x0800fcf5

0800fcf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fcfe:	4b12      	ldr	r3, [pc, #72]	; (800fd48 <prvTaskExitError+0x54>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd06:	d00a      	beq.n	800fd1e <prvTaskExitError+0x2a>
	__asm volatile
 800fd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd0c:	f383 8811 	msr	BASEPRI, r3
 800fd10:	f3bf 8f6f 	isb	sy
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	60fb      	str	r3, [r7, #12]
}
 800fd1a:	bf00      	nop
 800fd1c:	e7fe      	b.n	800fd1c <prvTaskExitError+0x28>
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	60bb      	str	r3, [r7, #8]
}
 800fd30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd32:	bf00      	nop
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d0fc      	beq.n	800fd34 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd3a:	bf00      	nop
 800fd3c:	bf00      	nop
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	24000064 	.word	0x24000064
 800fd4c:	00000000 	.word	0x00000000

0800fd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd50:	4b07      	ldr	r3, [pc, #28]	; (800fd70 <pxCurrentTCBConst2>)
 800fd52:	6819      	ldr	r1, [r3, #0]
 800fd54:	6808      	ldr	r0, [r1, #0]
 800fd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd5a:	f380 8809 	msr	PSP, r0
 800fd5e:	f3bf 8f6f 	isb	sy
 800fd62:	f04f 0000 	mov.w	r0, #0
 800fd66:	f380 8811 	msr	BASEPRI, r0
 800fd6a:	4770      	bx	lr
 800fd6c:	f3af 8000 	nop.w

0800fd70 <pxCurrentTCBConst2>:
 800fd70:	240017dc 	.word	0x240017dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd74:	bf00      	nop
 800fd76:	bf00      	nop

0800fd78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd78:	4808      	ldr	r0, [pc, #32]	; (800fd9c <prvPortStartFirstTask+0x24>)
 800fd7a:	6800      	ldr	r0, [r0, #0]
 800fd7c:	6800      	ldr	r0, [r0, #0]
 800fd7e:	f380 8808 	msr	MSP, r0
 800fd82:	f04f 0000 	mov.w	r0, #0
 800fd86:	f380 8814 	msr	CONTROL, r0
 800fd8a:	b662      	cpsie	i
 800fd8c:	b661      	cpsie	f
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	df00      	svc	0
 800fd98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd9a:	bf00      	nop
 800fd9c:	e000ed08 	.word	0xe000ed08

0800fda0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fda6:	4b46      	ldr	r3, [pc, #280]	; (800fec0 <xPortStartScheduler+0x120>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a46      	ldr	r2, [pc, #280]	; (800fec4 <xPortStartScheduler+0x124>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d10a      	bne.n	800fdc6 <xPortStartScheduler+0x26>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	613b      	str	r3, [r7, #16]
}
 800fdc2:	bf00      	nop
 800fdc4:	e7fe      	b.n	800fdc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdc6:	4b3e      	ldr	r3, [pc, #248]	; (800fec0 <xPortStartScheduler+0x120>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a3f      	ldr	r2, [pc, #252]	; (800fec8 <xPortStartScheduler+0x128>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d10a      	bne.n	800fde6 <xPortStartScheduler+0x46>
	__asm volatile
 800fdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd4:	f383 8811 	msr	BASEPRI, r3
 800fdd8:	f3bf 8f6f 	isb	sy
 800fddc:	f3bf 8f4f 	dsb	sy
 800fde0:	60fb      	str	r3, [r7, #12]
}
 800fde2:	bf00      	nop
 800fde4:	e7fe      	b.n	800fde4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fde6:	4b39      	ldr	r3, [pc, #228]	; (800fecc <xPortStartScheduler+0x12c>)
 800fde8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	22ff      	movs	r2, #255	; 0xff
 800fdf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe00:	78fb      	ldrb	r3, [r7, #3]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fe08:	b2da      	uxtb	r2, r3
 800fe0a:	4b31      	ldr	r3, [pc, #196]	; (800fed0 <xPortStartScheduler+0x130>)
 800fe0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe0e:	4b31      	ldr	r3, [pc, #196]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe10:	2207      	movs	r2, #7
 800fe12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe14:	e009      	b.n	800fe2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fe16:	4b2f      	ldr	r3, [pc, #188]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	3b01      	subs	r3, #1
 800fe1c:	4a2d      	ldr	r2, [pc, #180]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe20:	78fb      	ldrb	r3, [r7, #3]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	005b      	lsls	r3, r3, #1
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe2a:	78fb      	ldrb	r3, [r7, #3]
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe32:	2b80      	cmp	r3, #128	; 0x80
 800fe34:	d0ef      	beq.n	800fe16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe36:	4b27      	ldr	r3, [pc, #156]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f1c3 0307 	rsb	r3, r3, #7
 800fe3e:	2b04      	cmp	r3, #4
 800fe40:	d00a      	beq.n	800fe58 <xPortStartScheduler+0xb8>
	__asm volatile
 800fe42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe46:	f383 8811 	msr	BASEPRI, r3
 800fe4a:	f3bf 8f6f 	isb	sy
 800fe4e:	f3bf 8f4f 	dsb	sy
 800fe52:	60bb      	str	r3, [r7, #8]
}
 800fe54:	bf00      	nop
 800fe56:	e7fe      	b.n	800fe56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe58:	4b1e      	ldr	r3, [pc, #120]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	021b      	lsls	r3, r3, #8
 800fe5e:	4a1d      	ldr	r2, [pc, #116]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe62:	4b1c      	ldr	r3, [pc, #112]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe6a:	4a1a      	ldr	r2, [pc, #104]	; (800fed4 <xPortStartScheduler+0x134>)
 800fe6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe76:	4b18      	ldr	r3, [pc, #96]	; (800fed8 <xPortStartScheduler+0x138>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a17      	ldr	r2, [pc, #92]	; (800fed8 <xPortStartScheduler+0x138>)
 800fe7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe82:	4b15      	ldr	r3, [pc, #84]	; (800fed8 <xPortStartScheduler+0x138>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a14      	ldr	r2, [pc, #80]	; (800fed8 <xPortStartScheduler+0x138>)
 800fe88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe8e:	f000 f8dd 	bl	801004c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe92:	4b12      	ldr	r3, [pc, #72]	; (800fedc <xPortStartScheduler+0x13c>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe98:	f000 f8fc 	bl	8010094 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe9c:	4b10      	ldr	r3, [pc, #64]	; (800fee0 <xPortStartScheduler+0x140>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4a0f      	ldr	r2, [pc, #60]	; (800fee0 <xPortStartScheduler+0x140>)
 800fea2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fea6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fea8:	f7ff ff66 	bl	800fd78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800feac:	f7ff f854 	bl	800ef58 <vTaskSwitchContext>
	prvTaskExitError();
 800feb0:	f7ff ff20 	bl	800fcf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3718      	adds	r7, #24
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	e000ed00 	.word	0xe000ed00
 800fec4:	410fc271 	.word	0x410fc271
 800fec8:	410fc270 	.word	0x410fc270
 800fecc:	e000e400 	.word	0xe000e400
 800fed0:	24001e08 	.word	0x24001e08
 800fed4:	24001e0c 	.word	0x24001e0c
 800fed8:	e000ed20 	.word	0xe000ed20
 800fedc:	24000064 	.word	0x24000064
 800fee0:	e000ef34 	.word	0xe000ef34

0800fee4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
	__asm volatile
 800feea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feee:	f383 8811 	msr	BASEPRI, r3
 800fef2:	f3bf 8f6f 	isb	sy
 800fef6:	f3bf 8f4f 	dsb	sy
 800fefa:	607b      	str	r3, [r7, #4]
}
 800fefc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fefe:	4b0f      	ldr	r3, [pc, #60]	; (800ff3c <vPortEnterCritical+0x58>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	3301      	adds	r3, #1
 800ff04:	4a0d      	ldr	r2, [pc, #52]	; (800ff3c <vPortEnterCritical+0x58>)
 800ff06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff08:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <vPortEnterCritical+0x58>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d10f      	bne.n	800ff30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff10:	4b0b      	ldr	r3, [pc, #44]	; (800ff40 <vPortEnterCritical+0x5c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d00a      	beq.n	800ff30 <vPortEnterCritical+0x4c>
	__asm volatile
 800ff1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1e:	f383 8811 	msr	BASEPRI, r3
 800ff22:	f3bf 8f6f 	isb	sy
 800ff26:	f3bf 8f4f 	dsb	sy
 800ff2a:	603b      	str	r3, [r7, #0]
}
 800ff2c:	bf00      	nop
 800ff2e:	e7fe      	b.n	800ff2e <vPortEnterCritical+0x4a>
	}
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	24000064 	.word	0x24000064
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <vPortExitCritical+0x50>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d10a      	bne.n	800ff68 <vPortExitCritical+0x24>
	__asm volatile
 800ff52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff56:	f383 8811 	msr	BASEPRI, r3
 800ff5a:	f3bf 8f6f 	isb	sy
 800ff5e:	f3bf 8f4f 	dsb	sy
 800ff62:	607b      	str	r3, [r7, #4]
}
 800ff64:	bf00      	nop
 800ff66:	e7fe      	b.n	800ff66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff68:	4b0a      	ldr	r3, [pc, #40]	; (800ff94 <vPortExitCritical+0x50>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	3b01      	subs	r3, #1
 800ff6e:	4a09      	ldr	r2, [pc, #36]	; (800ff94 <vPortExitCritical+0x50>)
 800ff70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff72:	4b08      	ldr	r3, [pc, #32]	; (800ff94 <vPortExitCritical+0x50>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d105      	bne.n	800ff86 <vPortExitCritical+0x42>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	f383 8811 	msr	BASEPRI, r3
}
 800ff84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	24000064 	.word	0x24000064
	...

0800ffa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffa0:	f3ef 8009 	mrs	r0, PSP
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	4b15      	ldr	r3, [pc, #84]	; (8010000 <pxCurrentTCBConst>)
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	f01e 0f10 	tst.w	lr, #16
 800ffb0:	bf08      	it	eq
 800ffb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffba:	6010      	str	r0, [r2, #0]
 800ffbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffc4:	f380 8811 	msr	BASEPRI, r0
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f7fe ffc2 	bl	800ef58 <vTaskSwitchContext>
 800ffd4:	f04f 0000 	mov.w	r0, #0
 800ffd8:	f380 8811 	msr	BASEPRI, r0
 800ffdc:	bc09      	pop	{r0, r3}
 800ffde:	6819      	ldr	r1, [r3, #0]
 800ffe0:	6808      	ldr	r0, [r1, #0]
 800ffe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe6:	f01e 0f10 	tst.w	lr, #16
 800ffea:	bf08      	it	eq
 800ffec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fff0:	f380 8809 	msr	PSP, r0
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop
 800fffc:	f3af 8000 	nop.w

08010000 <pxCurrentTCBConst>:
 8010000:	240017dc 	.word	0x240017dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop

08010008 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	607b      	str	r3, [r7, #4]
}
 8010020:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010022:	f7fe fedf 	bl	800ede4 <xTaskIncrementTick>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d003      	beq.n	8010034 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801002c:	4b06      	ldr	r3, [pc, #24]	; (8010048 <xPortSysTickHandler+0x40>)
 801002e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010032:	601a      	str	r2, [r3, #0]
 8010034:	2300      	movs	r3, #0
 8010036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	f383 8811 	msr	BASEPRI, r3
}
 801003e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}
 8010048:	e000ed04 	.word	0xe000ed04

0801004c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801004c:	b480      	push	{r7}
 801004e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010050:	4b0b      	ldr	r3, [pc, #44]	; (8010080 <vPortSetupTimerInterrupt+0x34>)
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010056:	4b0b      	ldr	r3, [pc, #44]	; (8010084 <vPortSetupTimerInterrupt+0x38>)
 8010058:	2200      	movs	r2, #0
 801005a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801005c:	4b0a      	ldr	r3, [pc, #40]	; (8010088 <vPortSetupTimerInterrupt+0x3c>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a0a      	ldr	r2, [pc, #40]	; (801008c <vPortSetupTimerInterrupt+0x40>)
 8010062:	fba2 2303 	umull	r2, r3, r2, r3
 8010066:	099b      	lsrs	r3, r3, #6
 8010068:	4a09      	ldr	r2, [pc, #36]	; (8010090 <vPortSetupTimerInterrupt+0x44>)
 801006a:	3b01      	subs	r3, #1
 801006c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801006e:	4b04      	ldr	r3, [pc, #16]	; (8010080 <vPortSetupTimerInterrupt+0x34>)
 8010070:	2207      	movs	r2, #7
 8010072:	601a      	str	r2, [r3, #0]
}
 8010074:	bf00      	nop
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	e000e010 	.word	0xe000e010
 8010084:	e000e018 	.word	0xe000e018
 8010088:	24000010 	.word	0x24000010
 801008c:	10624dd3 	.word	0x10624dd3
 8010090:	e000e014 	.word	0xe000e014

08010094 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010094:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80100a4 <vPortEnableVFP+0x10>
 8010098:	6801      	ldr	r1, [r0, #0]
 801009a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801009e:	6001      	str	r1, [r0, #0]
 80100a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100a2:	bf00      	nop
 80100a4:	e000ed88 	.word	0xe000ed88

080100a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100a8:	b480      	push	{r7}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100ae:	f3ef 8305 	mrs	r3, IPSR
 80100b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	2b0f      	cmp	r3, #15
 80100b8:	d914      	bls.n	80100e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100ba:	4a17      	ldr	r2, [pc, #92]	; (8010118 <vPortValidateInterruptPriority+0x70>)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	4413      	add	r3, r2
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100c4:	4b15      	ldr	r3, [pc, #84]	; (801011c <vPortValidateInterruptPriority+0x74>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	7afa      	ldrb	r2, [r7, #11]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d20a      	bcs.n	80100e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80100ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	607b      	str	r3, [r7, #4]
}
 80100e0:	bf00      	nop
 80100e2:	e7fe      	b.n	80100e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80100e4:	4b0e      	ldr	r3, [pc, #56]	; (8010120 <vPortValidateInterruptPriority+0x78>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100ec:	4b0d      	ldr	r3, [pc, #52]	; (8010124 <vPortValidateInterruptPriority+0x7c>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d90a      	bls.n	801010a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80100f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f8:	f383 8811 	msr	BASEPRI, r3
 80100fc:	f3bf 8f6f 	isb	sy
 8010100:	f3bf 8f4f 	dsb	sy
 8010104:	603b      	str	r3, [r7, #0]
}
 8010106:	bf00      	nop
 8010108:	e7fe      	b.n	8010108 <vPortValidateInterruptPriority+0x60>
	}
 801010a:	bf00      	nop
 801010c:	3714      	adds	r7, #20
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	e000e3f0 	.word	0xe000e3f0
 801011c:	24001e08 	.word	0x24001e08
 8010120:	e000ed0c 	.word	0xe000ed0c
 8010124:	24001e0c 	.word	0x24001e0c

08010128 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08a      	sub	sp, #40	; 0x28
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010130:	2300      	movs	r3, #0
 8010132:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010134:	f7fe fd9a 	bl	800ec6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010138:	4b5b      	ldr	r3, [pc, #364]	; (80102a8 <pvPortMalloc+0x180>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d101      	bne.n	8010144 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010140:	f000 f920 	bl	8010384 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010144:	4b59      	ldr	r3, [pc, #356]	; (80102ac <pvPortMalloc+0x184>)
 8010146:	681a      	ldr	r2, [r3, #0]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4013      	ands	r3, r2
 801014c:	2b00      	cmp	r3, #0
 801014e:	f040 8093 	bne.w	8010278 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d01d      	beq.n	8010194 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010158:	2208      	movs	r2, #8
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	4413      	add	r3, r2
 801015e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f003 0307 	and.w	r3, r3, #7
 8010166:	2b00      	cmp	r3, #0
 8010168:	d014      	beq.n	8010194 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f023 0307 	bic.w	r3, r3, #7
 8010170:	3308      	adds	r3, #8
 8010172:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f003 0307 	and.w	r3, r3, #7
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00a      	beq.n	8010194 <pvPortMalloc+0x6c>
	__asm volatile
 801017e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010182:	f383 8811 	msr	BASEPRI, r3
 8010186:	f3bf 8f6f 	isb	sy
 801018a:	f3bf 8f4f 	dsb	sy
 801018e:	617b      	str	r3, [r7, #20]
}
 8010190:	bf00      	nop
 8010192:	e7fe      	b.n	8010192 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d06e      	beq.n	8010278 <pvPortMalloc+0x150>
 801019a:	4b45      	ldr	r3, [pc, #276]	; (80102b0 <pvPortMalloc+0x188>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d869      	bhi.n	8010278 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101a4:	4b43      	ldr	r3, [pc, #268]	; (80102b4 <pvPortMalloc+0x18c>)
 80101a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101a8:	4b42      	ldr	r3, [pc, #264]	; (80102b4 <pvPortMalloc+0x18c>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101ae:	e004      	b.n	80101ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d903      	bls.n	80101cc <pvPortMalloc+0xa4>
 80101c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d1f1      	bne.n	80101b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101cc:	4b36      	ldr	r3, [pc, #216]	; (80102a8 <pvPortMalloc+0x180>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d050      	beq.n	8010278 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101d6:	6a3b      	ldr	r3, [r7, #32]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2208      	movs	r2, #8
 80101dc:	4413      	add	r3, r2
 80101de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80101e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	6a3b      	ldr	r3, [r7, #32]
 80101e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80101e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	1ad2      	subs	r2, r2, r3
 80101f0:	2308      	movs	r3, #8
 80101f2:	005b      	lsls	r3, r3, #1
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d91f      	bls.n	8010238 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4413      	add	r3, r2
 80101fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	f003 0307 	and.w	r3, r3, #7
 8010206:	2b00      	cmp	r3, #0
 8010208:	d00a      	beq.n	8010220 <pvPortMalloc+0xf8>
	__asm volatile
 801020a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801020e:	f383 8811 	msr	BASEPRI, r3
 8010212:	f3bf 8f6f 	isb	sy
 8010216:	f3bf 8f4f 	dsb	sy
 801021a:	613b      	str	r3, [r7, #16]
}
 801021c:	bf00      	nop
 801021e:	e7fe      	b.n	801021e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010222:	685a      	ldr	r2, [r3, #4]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	1ad2      	subs	r2, r2, r3
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801022c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010232:	69b8      	ldr	r0, [r7, #24]
 8010234:	f000 f908 	bl	8010448 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010238:	4b1d      	ldr	r3, [pc, #116]	; (80102b0 <pvPortMalloc+0x188>)
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	4a1b      	ldr	r2, [pc, #108]	; (80102b0 <pvPortMalloc+0x188>)
 8010244:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010246:	4b1a      	ldr	r3, [pc, #104]	; (80102b0 <pvPortMalloc+0x188>)
 8010248:	681a      	ldr	r2, [r3, #0]
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <pvPortMalloc+0x190>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	429a      	cmp	r2, r3
 8010250:	d203      	bcs.n	801025a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010252:	4b17      	ldr	r3, [pc, #92]	; (80102b0 <pvPortMalloc+0x188>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4a18      	ldr	r2, [pc, #96]	; (80102b8 <pvPortMalloc+0x190>)
 8010258:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801025a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	4b13      	ldr	r3, [pc, #76]	; (80102ac <pvPortMalloc+0x184>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	431a      	orrs	r2, r3
 8010264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010266:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026a:	2200      	movs	r2, #0
 801026c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801026e:	4b13      	ldr	r3, [pc, #76]	; (80102bc <pvPortMalloc+0x194>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3301      	adds	r3, #1
 8010274:	4a11      	ldr	r2, [pc, #68]	; (80102bc <pvPortMalloc+0x194>)
 8010276:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010278:	f7fe fd06 	bl	800ec88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	f003 0307 	and.w	r3, r3, #7
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00a      	beq.n	801029c <pvPortMalloc+0x174>
	__asm volatile
 8010286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	60fb      	str	r3, [r7, #12]
}
 8010298:	bf00      	nop
 801029a:	e7fe      	b.n	801029a <pvPortMalloc+0x172>
	return pvReturn;
 801029c:	69fb      	ldr	r3, [r7, #28]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3728      	adds	r7, #40	; 0x28
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	24005a18 	.word	0x24005a18
 80102ac:	24005a2c 	.word	0x24005a2c
 80102b0:	24005a1c 	.word	0x24005a1c
 80102b4:	24005a10 	.word	0x24005a10
 80102b8:	24005a20 	.word	0x24005a20
 80102bc:	24005a24 	.word	0x24005a24

080102c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d04d      	beq.n	801036e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102d2:	2308      	movs	r3, #8
 80102d4:	425b      	negs	r3, r3
 80102d6:	697a      	ldr	r2, [r7, #20]
 80102d8:	4413      	add	r3, r2
 80102da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	685a      	ldr	r2, [r3, #4]
 80102e4:	4b24      	ldr	r3, [pc, #144]	; (8010378 <vPortFree+0xb8>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4013      	ands	r3, r2
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10a      	bne.n	8010304 <vPortFree+0x44>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	60fb      	str	r3, [r7, #12]
}
 8010300:	bf00      	nop
 8010302:	e7fe      	b.n	8010302 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d00a      	beq.n	8010322 <vPortFree+0x62>
	__asm volatile
 801030c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010310:	f383 8811 	msr	BASEPRI, r3
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	60bb      	str	r3, [r7, #8]
}
 801031e:	bf00      	nop
 8010320:	e7fe      	b.n	8010320 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	685a      	ldr	r2, [r3, #4]
 8010326:	4b14      	ldr	r3, [pc, #80]	; (8010378 <vPortFree+0xb8>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4013      	ands	r3, r2
 801032c:	2b00      	cmp	r3, #0
 801032e:	d01e      	beq.n	801036e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d11a      	bne.n	801036e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	4b0e      	ldr	r3, [pc, #56]	; (8010378 <vPortFree+0xb8>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	43db      	mvns	r3, r3
 8010342:	401a      	ands	r2, r3
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010348:	f7fe fc90 	bl	800ec6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	685a      	ldr	r2, [r3, #4]
 8010350:	4b0a      	ldr	r3, [pc, #40]	; (801037c <vPortFree+0xbc>)
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4413      	add	r3, r2
 8010356:	4a09      	ldr	r2, [pc, #36]	; (801037c <vPortFree+0xbc>)
 8010358:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801035a:	6938      	ldr	r0, [r7, #16]
 801035c:	f000 f874 	bl	8010448 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010360:	4b07      	ldr	r3, [pc, #28]	; (8010380 <vPortFree+0xc0>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	3301      	adds	r3, #1
 8010366:	4a06      	ldr	r2, [pc, #24]	; (8010380 <vPortFree+0xc0>)
 8010368:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801036a:	f7fe fc8d 	bl	800ec88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801036e:	bf00      	nop
 8010370:	3718      	adds	r7, #24
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	24005a2c 	.word	0x24005a2c
 801037c:	24005a1c 	.word	0x24005a1c
 8010380:	24005a28 	.word	0x24005a28

08010384 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801038a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801038e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010390:	4b27      	ldr	r3, [pc, #156]	; (8010430 <prvHeapInit+0xac>)
 8010392:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f003 0307 	and.w	r3, r3, #7
 801039a:	2b00      	cmp	r3, #0
 801039c:	d00c      	beq.n	80103b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3307      	adds	r3, #7
 80103a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f023 0307 	bic.w	r3, r3, #7
 80103aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	1ad3      	subs	r3, r2, r3
 80103b2:	4a1f      	ldr	r2, [pc, #124]	; (8010430 <prvHeapInit+0xac>)
 80103b4:	4413      	add	r3, r2
 80103b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103bc:	4a1d      	ldr	r2, [pc, #116]	; (8010434 <prvHeapInit+0xb0>)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103c2:	4b1c      	ldr	r3, [pc, #112]	; (8010434 <prvHeapInit+0xb0>)
 80103c4:	2200      	movs	r2, #0
 80103c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68ba      	ldr	r2, [r7, #8]
 80103cc:	4413      	add	r3, r2
 80103ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80103d0:	2208      	movs	r2, #8
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	1a9b      	subs	r3, r3, r2
 80103d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f023 0307 	bic.w	r3, r3, #7
 80103de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	4a15      	ldr	r2, [pc, #84]	; (8010438 <prvHeapInit+0xb4>)
 80103e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103e6:	4b14      	ldr	r3, [pc, #80]	; (8010438 <prvHeapInit+0xb4>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2200      	movs	r2, #0
 80103ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103ee:	4b12      	ldr	r3, [pc, #72]	; (8010438 <prvHeapInit+0xb4>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	68fa      	ldr	r2, [r7, #12]
 80103fe:	1ad2      	subs	r2, r2, r3
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010404:	4b0c      	ldr	r3, [pc, #48]	; (8010438 <prvHeapInit+0xb4>)
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	685b      	ldr	r3, [r3, #4]
 8010410:	4a0a      	ldr	r2, [pc, #40]	; (801043c <prvHeapInit+0xb8>)
 8010412:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	4a09      	ldr	r2, [pc, #36]	; (8010440 <prvHeapInit+0xbc>)
 801041a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801041c:	4b09      	ldr	r3, [pc, #36]	; (8010444 <prvHeapInit+0xc0>)
 801041e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010422:	601a      	str	r2, [r3, #0]
}
 8010424:	bf00      	nop
 8010426:	3714      	adds	r7, #20
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr
 8010430:	24001e10 	.word	0x24001e10
 8010434:	24005a10 	.word	0x24005a10
 8010438:	24005a18 	.word	0x24005a18
 801043c:	24005a20 	.word	0x24005a20
 8010440:	24005a1c 	.word	0x24005a1c
 8010444:	24005a2c 	.word	0x24005a2c

08010448 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010450:	4b28      	ldr	r3, [pc, #160]	; (80104f4 <prvInsertBlockIntoFreeList+0xac>)
 8010452:	60fb      	str	r3, [r7, #12]
 8010454:	e002      	b.n	801045c <prvInsertBlockIntoFreeList+0x14>
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	429a      	cmp	r2, r3
 8010464:	d8f7      	bhi.n	8010456 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	4413      	add	r3, r2
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	429a      	cmp	r2, r3
 8010476:	d108      	bne.n	801048a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	441a      	add	r2, r3
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	441a      	add	r2, r3
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	429a      	cmp	r2, r3
 801049c:	d118      	bne.n	80104d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681a      	ldr	r2, [r3, #0]
 80104a2:	4b15      	ldr	r3, [pc, #84]	; (80104f8 <prvInsertBlockIntoFreeList+0xb0>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d00d      	beq.n	80104c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	441a      	add	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	601a      	str	r2, [r3, #0]
 80104c4:	e008      	b.n	80104d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104c6:	4b0c      	ldr	r3, [pc, #48]	; (80104f8 <prvInsertBlockIntoFreeList+0xb0>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	e003      	b.n	80104d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d002      	beq.n	80104e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104e6:	bf00      	nop
 80104e8:	3714      	adds	r7, #20
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr
 80104f2:	bf00      	nop
 80104f4:	24005a10 	.word	0x24005a10
 80104f8:	24005a18 	.word	0x24005a18

080104fc <srand>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4b10      	ldr	r3, [pc, #64]	; (8010540 <srand+0x44>)
 8010500:	681d      	ldr	r5, [r3, #0]
 8010502:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010504:	4604      	mov	r4, r0
 8010506:	b9b3      	cbnz	r3, 8010536 <srand+0x3a>
 8010508:	2018      	movs	r0, #24
 801050a:	f000 fb57 	bl	8010bbc <malloc>
 801050e:	4602      	mov	r2, r0
 8010510:	6328      	str	r0, [r5, #48]	; 0x30
 8010512:	b920      	cbnz	r0, 801051e <srand+0x22>
 8010514:	4b0b      	ldr	r3, [pc, #44]	; (8010544 <srand+0x48>)
 8010516:	480c      	ldr	r0, [pc, #48]	; (8010548 <srand+0x4c>)
 8010518:	2146      	movs	r1, #70	; 0x46
 801051a:	f000 fae5 	bl	8010ae8 <__assert_func>
 801051e:	490b      	ldr	r1, [pc, #44]	; (801054c <srand+0x50>)
 8010520:	4b0b      	ldr	r3, [pc, #44]	; (8010550 <srand+0x54>)
 8010522:	e9c0 1300 	strd	r1, r3, [r0]
 8010526:	4b0b      	ldr	r3, [pc, #44]	; (8010554 <srand+0x58>)
 8010528:	6083      	str	r3, [r0, #8]
 801052a:	230b      	movs	r3, #11
 801052c:	8183      	strh	r3, [r0, #12]
 801052e:	2100      	movs	r1, #0
 8010530:	2001      	movs	r0, #1
 8010532:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010536:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010538:	2200      	movs	r2, #0
 801053a:	611c      	str	r4, [r3, #16]
 801053c:	615a      	str	r2, [r3, #20]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	240000c0 	.word	0x240000c0
 8010544:	080145e4 	.word	0x080145e4
 8010548:	080145fb 	.word	0x080145fb
 801054c:	abcd330e 	.word	0xabcd330e
 8010550:	e66d1234 	.word	0xe66d1234
 8010554:	0005deec 	.word	0x0005deec

08010558 <rand>:
 8010558:	4b16      	ldr	r3, [pc, #88]	; (80105b4 <rand+0x5c>)
 801055a:	b510      	push	{r4, lr}
 801055c:	681c      	ldr	r4, [r3, #0]
 801055e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010560:	b9b3      	cbnz	r3, 8010590 <rand+0x38>
 8010562:	2018      	movs	r0, #24
 8010564:	f000 fb2a 	bl	8010bbc <malloc>
 8010568:	4602      	mov	r2, r0
 801056a:	6320      	str	r0, [r4, #48]	; 0x30
 801056c:	b920      	cbnz	r0, 8010578 <rand+0x20>
 801056e:	4b12      	ldr	r3, [pc, #72]	; (80105b8 <rand+0x60>)
 8010570:	4812      	ldr	r0, [pc, #72]	; (80105bc <rand+0x64>)
 8010572:	2152      	movs	r1, #82	; 0x52
 8010574:	f000 fab8 	bl	8010ae8 <__assert_func>
 8010578:	4911      	ldr	r1, [pc, #68]	; (80105c0 <rand+0x68>)
 801057a:	4b12      	ldr	r3, [pc, #72]	; (80105c4 <rand+0x6c>)
 801057c:	e9c0 1300 	strd	r1, r3, [r0]
 8010580:	4b11      	ldr	r3, [pc, #68]	; (80105c8 <rand+0x70>)
 8010582:	6083      	str	r3, [r0, #8]
 8010584:	230b      	movs	r3, #11
 8010586:	8183      	strh	r3, [r0, #12]
 8010588:	2100      	movs	r1, #0
 801058a:	2001      	movs	r0, #1
 801058c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010590:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010592:	480e      	ldr	r0, [pc, #56]	; (80105cc <rand+0x74>)
 8010594:	690b      	ldr	r3, [r1, #16]
 8010596:	694c      	ldr	r4, [r1, #20]
 8010598:	4a0d      	ldr	r2, [pc, #52]	; (80105d0 <rand+0x78>)
 801059a:	4358      	muls	r0, r3
 801059c:	fb02 0004 	mla	r0, r2, r4, r0
 80105a0:	fba3 3202 	umull	r3, r2, r3, r2
 80105a4:	3301      	adds	r3, #1
 80105a6:	eb40 0002 	adc.w	r0, r0, r2
 80105aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80105ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80105b2:	bd10      	pop	{r4, pc}
 80105b4:	240000c0 	.word	0x240000c0
 80105b8:	080145e4 	.word	0x080145e4
 80105bc:	080145fb 	.word	0x080145fb
 80105c0:	abcd330e 	.word	0xabcd330e
 80105c4:	e66d1234 	.word	0xe66d1234
 80105c8:	0005deec 	.word	0x0005deec
 80105cc:	5851f42d 	.word	0x5851f42d
 80105d0:	4c957f2d 	.word	0x4c957f2d

080105d4 <std>:
 80105d4:	2300      	movs	r3, #0
 80105d6:	b510      	push	{r4, lr}
 80105d8:	4604      	mov	r4, r0
 80105da:	e9c0 3300 	strd	r3, r3, [r0]
 80105de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105e2:	6083      	str	r3, [r0, #8]
 80105e4:	8181      	strh	r1, [r0, #12]
 80105e6:	6643      	str	r3, [r0, #100]	; 0x64
 80105e8:	81c2      	strh	r2, [r0, #14]
 80105ea:	6183      	str	r3, [r0, #24]
 80105ec:	4619      	mov	r1, r3
 80105ee:	2208      	movs	r2, #8
 80105f0:	305c      	adds	r0, #92	; 0x5c
 80105f2:	f000 f9c2 	bl	801097a <memset>
 80105f6:	4b0d      	ldr	r3, [pc, #52]	; (801062c <std+0x58>)
 80105f8:	6263      	str	r3, [r4, #36]	; 0x24
 80105fa:	4b0d      	ldr	r3, [pc, #52]	; (8010630 <std+0x5c>)
 80105fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80105fe:	4b0d      	ldr	r3, [pc, #52]	; (8010634 <std+0x60>)
 8010600:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010602:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <std+0x64>)
 8010604:	6323      	str	r3, [r4, #48]	; 0x30
 8010606:	4b0d      	ldr	r3, [pc, #52]	; (801063c <std+0x68>)
 8010608:	6224      	str	r4, [r4, #32]
 801060a:	429c      	cmp	r4, r3
 801060c:	d006      	beq.n	801061c <std+0x48>
 801060e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8010612:	4294      	cmp	r4, r2
 8010614:	d002      	beq.n	801061c <std+0x48>
 8010616:	33d0      	adds	r3, #208	; 0xd0
 8010618:	429c      	cmp	r4, r3
 801061a:	d105      	bne.n	8010628 <std+0x54>
 801061c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010624:	f000 ba4e 	b.w	8010ac4 <__retarget_lock_init_recursive>
 8010628:	bd10      	pop	{r4, pc}
 801062a:	bf00      	nop
 801062c:	080108f5 	.word	0x080108f5
 8010630:	08010917 	.word	0x08010917
 8010634:	0801094f 	.word	0x0801094f
 8010638:	08010973 	.word	0x08010973
 801063c:	24005a30 	.word	0x24005a30

08010640 <stdio_exit_handler>:
 8010640:	4a02      	ldr	r2, [pc, #8]	; (801064c <stdio_exit_handler+0xc>)
 8010642:	4903      	ldr	r1, [pc, #12]	; (8010650 <stdio_exit_handler+0x10>)
 8010644:	4803      	ldr	r0, [pc, #12]	; (8010654 <stdio_exit_handler+0x14>)
 8010646:	f000 b869 	b.w	801071c <_fwalk_sglue>
 801064a:	bf00      	nop
 801064c:	24000068 	.word	0x24000068
 8010650:	08011401 	.word	0x08011401
 8010654:	24000074 	.word	0x24000074

08010658 <cleanup_stdio>:
 8010658:	6841      	ldr	r1, [r0, #4]
 801065a:	4b0c      	ldr	r3, [pc, #48]	; (801068c <cleanup_stdio+0x34>)
 801065c:	4299      	cmp	r1, r3
 801065e:	b510      	push	{r4, lr}
 8010660:	4604      	mov	r4, r0
 8010662:	d001      	beq.n	8010668 <cleanup_stdio+0x10>
 8010664:	f000 fecc 	bl	8011400 <_fflush_r>
 8010668:	68a1      	ldr	r1, [r4, #8]
 801066a:	4b09      	ldr	r3, [pc, #36]	; (8010690 <cleanup_stdio+0x38>)
 801066c:	4299      	cmp	r1, r3
 801066e:	d002      	beq.n	8010676 <cleanup_stdio+0x1e>
 8010670:	4620      	mov	r0, r4
 8010672:	f000 fec5 	bl	8011400 <_fflush_r>
 8010676:	68e1      	ldr	r1, [r4, #12]
 8010678:	4b06      	ldr	r3, [pc, #24]	; (8010694 <cleanup_stdio+0x3c>)
 801067a:	4299      	cmp	r1, r3
 801067c:	d004      	beq.n	8010688 <cleanup_stdio+0x30>
 801067e:	4620      	mov	r0, r4
 8010680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010684:	f000 bebc 	b.w	8011400 <_fflush_r>
 8010688:	bd10      	pop	{r4, pc}
 801068a:	bf00      	nop
 801068c:	24005a30 	.word	0x24005a30
 8010690:	24005a98 	.word	0x24005a98
 8010694:	24005b00 	.word	0x24005b00

08010698 <global_stdio_init.part.0>:
 8010698:	b510      	push	{r4, lr}
 801069a:	4b0b      	ldr	r3, [pc, #44]	; (80106c8 <global_stdio_init.part.0+0x30>)
 801069c:	4c0b      	ldr	r4, [pc, #44]	; (80106cc <global_stdio_init.part.0+0x34>)
 801069e:	4a0c      	ldr	r2, [pc, #48]	; (80106d0 <global_stdio_init.part.0+0x38>)
 80106a0:	601a      	str	r2, [r3, #0]
 80106a2:	4620      	mov	r0, r4
 80106a4:	2200      	movs	r2, #0
 80106a6:	2104      	movs	r1, #4
 80106a8:	f7ff ff94 	bl	80105d4 <std>
 80106ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80106b0:	2201      	movs	r2, #1
 80106b2:	2109      	movs	r1, #9
 80106b4:	f7ff ff8e 	bl	80105d4 <std>
 80106b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80106bc:	2202      	movs	r2, #2
 80106be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106c2:	2112      	movs	r1, #18
 80106c4:	f7ff bf86 	b.w	80105d4 <std>
 80106c8:	24005b68 	.word	0x24005b68
 80106cc:	24005a30 	.word	0x24005a30
 80106d0:	08010641 	.word	0x08010641

080106d4 <__sfp_lock_acquire>:
 80106d4:	4801      	ldr	r0, [pc, #4]	; (80106dc <__sfp_lock_acquire+0x8>)
 80106d6:	f000 b9f6 	b.w	8010ac6 <__retarget_lock_acquire_recursive>
 80106da:	bf00      	nop
 80106dc:	24005b71 	.word	0x24005b71

080106e0 <__sfp_lock_release>:
 80106e0:	4801      	ldr	r0, [pc, #4]	; (80106e8 <__sfp_lock_release+0x8>)
 80106e2:	f000 b9f1 	b.w	8010ac8 <__retarget_lock_release_recursive>
 80106e6:	bf00      	nop
 80106e8:	24005b71 	.word	0x24005b71

080106ec <__sinit>:
 80106ec:	b510      	push	{r4, lr}
 80106ee:	4604      	mov	r4, r0
 80106f0:	f7ff fff0 	bl	80106d4 <__sfp_lock_acquire>
 80106f4:	6a23      	ldr	r3, [r4, #32]
 80106f6:	b11b      	cbz	r3, 8010700 <__sinit+0x14>
 80106f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106fc:	f7ff bff0 	b.w	80106e0 <__sfp_lock_release>
 8010700:	4b04      	ldr	r3, [pc, #16]	; (8010714 <__sinit+0x28>)
 8010702:	6223      	str	r3, [r4, #32]
 8010704:	4b04      	ldr	r3, [pc, #16]	; (8010718 <__sinit+0x2c>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d1f5      	bne.n	80106f8 <__sinit+0xc>
 801070c:	f7ff ffc4 	bl	8010698 <global_stdio_init.part.0>
 8010710:	e7f2      	b.n	80106f8 <__sinit+0xc>
 8010712:	bf00      	nop
 8010714:	08010659 	.word	0x08010659
 8010718:	24005b68 	.word	0x24005b68

0801071c <_fwalk_sglue>:
 801071c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010720:	4607      	mov	r7, r0
 8010722:	4688      	mov	r8, r1
 8010724:	4614      	mov	r4, r2
 8010726:	2600      	movs	r6, #0
 8010728:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801072c:	f1b9 0901 	subs.w	r9, r9, #1
 8010730:	d505      	bpl.n	801073e <_fwalk_sglue+0x22>
 8010732:	6824      	ldr	r4, [r4, #0]
 8010734:	2c00      	cmp	r4, #0
 8010736:	d1f7      	bne.n	8010728 <_fwalk_sglue+0xc>
 8010738:	4630      	mov	r0, r6
 801073a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801073e:	89ab      	ldrh	r3, [r5, #12]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d907      	bls.n	8010754 <_fwalk_sglue+0x38>
 8010744:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010748:	3301      	adds	r3, #1
 801074a:	d003      	beq.n	8010754 <_fwalk_sglue+0x38>
 801074c:	4629      	mov	r1, r5
 801074e:	4638      	mov	r0, r7
 8010750:	47c0      	blx	r8
 8010752:	4306      	orrs	r6, r0
 8010754:	3568      	adds	r5, #104	; 0x68
 8010756:	e7e9      	b.n	801072c <_fwalk_sglue+0x10>

08010758 <setvbuf>:
 8010758:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801075c:	461d      	mov	r5, r3
 801075e:	4b54      	ldr	r3, [pc, #336]	; (80108b0 <setvbuf+0x158>)
 8010760:	681f      	ldr	r7, [r3, #0]
 8010762:	4604      	mov	r4, r0
 8010764:	460e      	mov	r6, r1
 8010766:	4690      	mov	r8, r2
 8010768:	b127      	cbz	r7, 8010774 <setvbuf+0x1c>
 801076a:	6a3b      	ldr	r3, [r7, #32]
 801076c:	b913      	cbnz	r3, 8010774 <setvbuf+0x1c>
 801076e:	4638      	mov	r0, r7
 8010770:	f7ff ffbc 	bl	80106ec <__sinit>
 8010774:	f1b8 0f02 	cmp.w	r8, #2
 8010778:	d006      	beq.n	8010788 <setvbuf+0x30>
 801077a:	f1b8 0f01 	cmp.w	r8, #1
 801077e:	f200 8094 	bhi.w	80108aa <setvbuf+0x152>
 8010782:	2d00      	cmp	r5, #0
 8010784:	f2c0 8091 	blt.w	80108aa <setvbuf+0x152>
 8010788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801078a:	07da      	lsls	r2, r3, #31
 801078c:	d405      	bmi.n	801079a <setvbuf+0x42>
 801078e:	89a3      	ldrh	r3, [r4, #12]
 8010790:	059b      	lsls	r3, r3, #22
 8010792:	d402      	bmi.n	801079a <setvbuf+0x42>
 8010794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010796:	f000 f996 	bl	8010ac6 <__retarget_lock_acquire_recursive>
 801079a:	4621      	mov	r1, r4
 801079c:	4638      	mov	r0, r7
 801079e:	f000 fe2f 	bl	8011400 <_fflush_r>
 80107a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107a4:	b141      	cbz	r1, 80107b8 <setvbuf+0x60>
 80107a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107aa:	4299      	cmp	r1, r3
 80107ac:	d002      	beq.n	80107b4 <setvbuf+0x5c>
 80107ae:	4638      	mov	r0, r7
 80107b0:	f000 f9b8 	bl	8010b24 <_free_r>
 80107b4:	2300      	movs	r3, #0
 80107b6:	6363      	str	r3, [r4, #52]	; 0x34
 80107b8:	2300      	movs	r3, #0
 80107ba:	61a3      	str	r3, [r4, #24]
 80107bc:	6063      	str	r3, [r4, #4]
 80107be:	89a3      	ldrh	r3, [r4, #12]
 80107c0:	0618      	lsls	r0, r3, #24
 80107c2:	d503      	bpl.n	80107cc <setvbuf+0x74>
 80107c4:	6921      	ldr	r1, [r4, #16]
 80107c6:	4638      	mov	r0, r7
 80107c8:	f000 f9ac 	bl	8010b24 <_free_r>
 80107cc:	89a3      	ldrh	r3, [r4, #12]
 80107ce:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80107d2:	f023 0303 	bic.w	r3, r3, #3
 80107d6:	f1b8 0f02 	cmp.w	r8, #2
 80107da:	81a3      	strh	r3, [r4, #12]
 80107dc:	d05f      	beq.n	801089e <setvbuf+0x146>
 80107de:	ab01      	add	r3, sp, #4
 80107e0:	466a      	mov	r2, sp
 80107e2:	4621      	mov	r1, r4
 80107e4:	4638      	mov	r0, r7
 80107e6:	f000 fe45 	bl	8011474 <__swhatbuf_r>
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	4318      	orrs	r0, r3
 80107ee:	81a0      	strh	r0, [r4, #12]
 80107f0:	bb2d      	cbnz	r5, 801083e <setvbuf+0xe6>
 80107f2:	9d00      	ldr	r5, [sp, #0]
 80107f4:	4628      	mov	r0, r5
 80107f6:	f000 f9e1 	bl	8010bbc <malloc>
 80107fa:	4606      	mov	r6, r0
 80107fc:	2800      	cmp	r0, #0
 80107fe:	d150      	bne.n	80108a2 <setvbuf+0x14a>
 8010800:	f8dd 9000 	ldr.w	r9, [sp]
 8010804:	45a9      	cmp	r9, r5
 8010806:	d13e      	bne.n	8010886 <setvbuf+0x12e>
 8010808:	f04f 35ff 	mov.w	r5, #4294967295
 801080c:	2200      	movs	r2, #0
 801080e:	60a2      	str	r2, [r4, #8]
 8010810:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8010814:	6022      	str	r2, [r4, #0]
 8010816:	6122      	str	r2, [r4, #16]
 8010818:	2201      	movs	r2, #1
 801081a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801081e:	6162      	str	r2, [r4, #20]
 8010820:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010822:	f043 0302 	orr.w	r3, r3, #2
 8010826:	07d1      	lsls	r1, r2, #31
 8010828:	81a3      	strh	r3, [r4, #12]
 801082a:	d404      	bmi.n	8010836 <setvbuf+0xde>
 801082c:	059b      	lsls	r3, r3, #22
 801082e:	d402      	bmi.n	8010836 <setvbuf+0xde>
 8010830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010832:	f000 f949 	bl	8010ac8 <__retarget_lock_release_recursive>
 8010836:	4628      	mov	r0, r5
 8010838:	b003      	add	sp, #12
 801083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801083e:	2e00      	cmp	r6, #0
 8010840:	d0d8      	beq.n	80107f4 <setvbuf+0x9c>
 8010842:	6a3b      	ldr	r3, [r7, #32]
 8010844:	b913      	cbnz	r3, 801084c <setvbuf+0xf4>
 8010846:	4638      	mov	r0, r7
 8010848:	f7ff ff50 	bl	80106ec <__sinit>
 801084c:	f1b8 0f01 	cmp.w	r8, #1
 8010850:	bf08      	it	eq
 8010852:	89a3      	ldrheq	r3, [r4, #12]
 8010854:	6026      	str	r6, [r4, #0]
 8010856:	bf04      	itt	eq
 8010858:	f043 0301 	orreq.w	r3, r3, #1
 801085c:	81a3      	strheq	r3, [r4, #12]
 801085e:	89a3      	ldrh	r3, [r4, #12]
 8010860:	f013 0208 	ands.w	r2, r3, #8
 8010864:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010868:	d01d      	beq.n	80108a6 <setvbuf+0x14e>
 801086a:	07da      	lsls	r2, r3, #31
 801086c:	bf41      	itttt	mi
 801086e:	2200      	movmi	r2, #0
 8010870:	426d      	negmi	r5, r5
 8010872:	60a2      	strmi	r2, [r4, #8]
 8010874:	61a5      	strmi	r5, [r4, #24]
 8010876:	bf58      	it	pl
 8010878:	60a5      	strpl	r5, [r4, #8]
 801087a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801087c:	f015 0501 	ands.w	r5, r5, #1
 8010880:	d0d4      	beq.n	801082c <setvbuf+0xd4>
 8010882:	2500      	movs	r5, #0
 8010884:	e7d7      	b.n	8010836 <setvbuf+0xde>
 8010886:	4648      	mov	r0, r9
 8010888:	f000 f998 	bl	8010bbc <malloc>
 801088c:	4606      	mov	r6, r0
 801088e:	2800      	cmp	r0, #0
 8010890:	d0ba      	beq.n	8010808 <setvbuf+0xb0>
 8010892:	89a3      	ldrh	r3, [r4, #12]
 8010894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010898:	81a3      	strh	r3, [r4, #12]
 801089a:	464d      	mov	r5, r9
 801089c:	e7d1      	b.n	8010842 <setvbuf+0xea>
 801089e:	2500      	movs	r5, #0
 80108a0:	e7b4      	b.n	801080c <setvbuf+0xb4>
 80108a2:	46a9      	mov	r9, r5
 80108a4:	e7f5      	b.n	8010892 <setvbuf+0x13a>
 80108a6:	60a2      	str	r2, [r4, #8]
 80108a8:	e7e7      	b.n	801087a <setvbuf+0x122>
 80108aa:	f04f 35ff 	mov.w	r5, #4294967295
 80108ae:	e7c2      	b.n	8010836 <setvbuf+0xde>
 80108b0:	240000c0 	.word	0x240000c0

080108b4 <siprintf>:
 80108b4:	b40e      	push	{r1, r2, r3}
 80108b6:	b500      	push	{lr}
 80108b8:	b09c      	sub	sp, #112	; 0x70
 80108ba:	ab1d      	add	r3, sp, #116	; 0x74
 80108bc:	9002      	str	r0, [sp, #8]
 80108be:	9006      	str	r0, [sp, #24]
 80108c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108c4:	4809      	ldr	r0, [pc, #36]	; (80108ec <siprintf+0x38>)
 80108c6:	9107      	str	r1, [sp, #28]
 80108c8:	9104      	str	r1, [sp, #16]
 80108ca:	4909      	ldr	r1, [pc, #36]	; (80108f0 <siprintf+0x3c>)
 80108cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80108d0:	9105      	str	r1, [sp, #20]
 80108d2:	6800      	ldr	r0, [r0, #0]
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	a902      	add	r1, sp, #8
 80108d8:	f000 fa7e 	bl	8010dd8 <_svfiprintf_r>
 80108dc:	9b02      	ldr	r3, [sp, #8]
 80108de:	2200      	movs	r2, #0
 80108e0:	701a      	strb	r2, [r3, #0]
 80108e2:	b01c      	add	sp, #112	; 0x70
 80108e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108e8:	b003      	add	sp, #12
 80108ea:	4770      	bx	lr
 80108ec:	240000c0 	.word	0x240000c0
 80108f0:	ffff0208 	.word	0xffff0208

080108f4 <__sread>:
 80108f4:	b510      	push	{r4, lr}
 80108f6:	460c      	mov	r4, r1
 80108f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108fc:	f000 f894 	bl	8010a28 <_read_r>
 8010900:	2800      	cmp	r0, #0
 8010902:	bfab      	itete	ge
 8010904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010906:	89a3      	ldrhlt	r3, [r4, #12]
 8010908:	181b      	addge	r3, r3, r0
 801090a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801090e:	bfac      	ite	ge
 8010910:	6563      	strge	r3, [r4, #84]	; 0x54
 8010912:	81a3      	strhlt	r3, [r4, #12]
 8010914:	bd10      	pop	{r4, pc}

08010916 <__swrite>:
 8010916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801091a:	461f      	mov	r7, r3
 801091c:	898b      	ldrh	r3, [r1, #12]
 801091e:	05db      	lsls	r3, r3, #23
 8010920:	4605      	mov	r5, r0
 8010922:	460c      	mov	r4, r1
 8010924:	4616      	mov	r6, r2
 8010926:	d505      	bpl.n	8010934 <__swrite+0x1e>
 8010928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801092c:	2302      	movs	r3, #2
 801092e:	2200      	movs	r2, #0
 8010930:	f000 f868 	bl	8010a04 <_lseek_r>
 8010934:	89a3      	ldrh	r3, [r4, #12]
 8010936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801093a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801093e:	81a3      	strh	r3, [r4, #12]
 8010940:	4632      	mov	r2, r6
 8010942:	463b      	mov	r3, r7
 8010944:	4628      	mov	r0, r5
 8010946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801094a:	f000 b87f 	b.w	8010a4c <_write_r>

0801094e <__sseek>:
 801094e:	b510      	push	{r4, lr}
 8010950:	460c      	mov	r4, r1
 8010952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010956:	f000 f855 	bl	8010a04 <_lseek_r>
 801095a:	1c43      	adds	r3, r0, #1
 801095c:	89a3      	ldrh	r3, [r4, #12]
 801095e:	bf15      	itete	ne
 8010960:	6560      	strne	r0, [r4, #84]	; 0x54
 8010962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801096a:	81a3      	strheq	r3, [r4, #12]
 801096c:	bf18      	it	ne
 801096e:	81a3      	strhne	r3, [r4, #12]
 8010970:	bd10      	pop	{r4, pc}

08010972 <__sclose>:
 8010972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010976:	f000 b823 	b.w	80109c0 <_close_r>

0801097a <memset>:
 801097a:	4402      	add	r2, r0
 801097c:	4603      	mov	r3, r0
 801097e:	4293      	cmp	r3, r2
 8010980:	d100      	bne.n	8010984 <memset+0xa>
 8010982:	4770      	bx	lr
 8010984:	f803 1b01 	strb.w	r1, [r3], #1
 8010988:	e7f9      	b.n	801097e <memset+0x4>
	...

0801098c <time>:
 801098c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801098e:	4b0b      	ldr	r3, [pc, #44]	; (80109bc <time+0x30>)
 8010990:	2200      	movs	r2, #0
 8010992:	4669      	mov	r1, sp
 8010994:	4604      	mov	r4, r0
 8010996:	6818      	ldr	r0, [r3, #0]
 8010998:	f000 f822 	bl	80109e0 <_gettimeofday_r>
 801099c:	2800      	cmp	r0, #0
 801099e:	bfbe      	ittt	lt
 80109a0:	f04f 32ff 	movlt.w	r2, #4294967295
 80109a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80109a8:	e9cd 2300 	strdlt	r2, r3, [sp]
 80109ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109b0:	b10c      	cbz	r4, 80109b6 <time+0x2a>
 80109b2:	e9c4 0100 	strd	r0, r1, [r4]
 80109b6:	b004      	add	sp, #16
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	bf00      	nop
 80109bc:	240000c0 	.word	0x240000c0

080109c0 <_close_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4d06      	ldr	r5, [pc, #24]	; (80109dc <_close_r+0x1c>)
 80109c4:	2300      	movs	r3, #0
 80109c6:	4604      	mov	r4, r0
 80109c8:	4608      	mov	r0, r1
 80109ca:	602b      	str	r3, [r5, #0]
 80109cc:	f7f0 fa36 	bl	8000e3c <_close>
 80109d0:	1c43      	adds	r3, r0, #1
 80109d2:	d102      	bne.n	80109da <_close_r+0x1a>
 80109d4:	682b      	ldr	r3, [r5, #0]
 80109d6:	b103      	cbz	r3, 80109da <_close_r+0x1a>
 80109d8:	6023      	str	r3, [r4, #0]
 80109da:	bd38      	pop	{r3, r4, r5, pc}
 80109dc:	24005b6c 	.word	0x24005b6c

080109e0 <_gettimeofday_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	4d07      	ldr	r5, [pc, #28]	; (8010a00 <_gettimeofday_r+0x20>)
 80109e4:	2300      	movs	r3, #0
 80109e6:	4604      	mov	r4, r0
 80109e8:	4608      	mov	r0, r1
 80109ea:	4611      	mov	r1, r2
 80109ec:	602b      	str	r3, [r5, #0]
 80109ee:	f001 f84b 	bl	8011a88 <_gettimeofday>
 80109f2:	1c43      	adds	r3, r0, #1
 80109f4:	d102      	bne.n	80109fc <_gettimeofday_r+0x1c>
 80109f6:	682b      	ldr	r3, [r5, #0]
 80109f8:	b103      	cbz	r3, 80109fc <_gettimeofday_r+0x1c>
 80109fa:	6023      	str	r3, [r4, #0]
 80109fc:	bd38      	pop	{r3, r4, r5, pc}
 80109fe:	bf00      	nop
 8010a00:	24005b6c 	.word	0x24005b6c

08010a04 <_lseek_r>:
 8010a04:	b538      	push	{r3, r4, r5, lr}
 8010a06:	4d07      	ldr	r5, [pc, #28]	; (8010a24 <_lseek_r+0x20>)
 8010a08:	4604      	mov	r4, r0
 8010a0a:	4608      	mov	r0, r1
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	2200      	movs	r2, #0
 8010a10:	602a      	str	r2, [r5, #0]
 8010a12:	461a      	mov	r2, r3
 8010a14:	f7f0 fa29 	bl	8000e6a <_lseek>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d102      	bne.n	8010a22 <_lseek_r+0x1e>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	b103      	cbz	r3, 8010a22 <_lseek_r+0x1e>
 8010a20:	6023      	str	r3, [r4, #0]
 8010a22:	bd38      	pop	{r3, r4, r5, pc}
 8010a24:	24005b6c 	.word	0x24005b6c

08010a28 <_read_r>:
 8010a28:	b538      	push	{r3, r4, r5, lr}
 8010a2a:	4d07      	ldr	r5, [pc, #28]	; (8010a48 <_read_r+0x20>)
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	4608      	mov	r0, r1
 8010a30:	4611      	mov	r1, r2
 8010a32:	2200      	movs	r2, #0
 8010a34:	602a      	str	r2, [r5, #0]
 8010a36:	461a      	mov	r2, r3
 8010a38:	f7f0 fa44 	bl	8000ec4 <_read>
 8010a3c:	1c43      	adds	r3, r0, #1
 8010a3e:	d102      	bne.n	8010a46 <_read_r+0x1e>
 8010a40:	682b      	ldr	r3, [r5, #0]
 8010a42:	b103      	cbz	r3, 8010a46 <_read_r+0x1e>
 8010a44:	6023      	str	r3, [r4, #0]
 8010a46:	bd38      	pop	{r3, r4, r5, pc}
 8010a48:	24005b6c 	.word	0x24005b6c

08010a4c <_write_r>:
 8010a4c:	b538      	push	{r3, r4, r5, lr}
 8010a4e:	4d07      	ldr	r5, [pc, #28]	; (8010a6c <_write_r+0x20>)
 8010a50:	4604      	mov	r4, r0
 8010a52:	4608      	mov	r0, r1
 8010a54:	4611      	mov	r1, r2
 8010a56:	2200      	movs	r2, #0
 8010a58:	602a      	str	r2, [r5, #0]
 8010a5a:	461a      	mov	r2, r3
 8010a5c:	f7f0 fa5a 	bl	8000f14 <_write>
 8010a60:	1c43      	adds	r3, r0, #1
 8010a62:	d102      	bne.n	8010a6a <_write_r+0x1e>
 8010a64:	682b      	ldr	r3, [r5, #0]
 8010a66:	b103      	cbz	r3, 8010a6a <_write_r+0x1e>
 8010a68:	6023      	str	r3, [r4, #0]
 8010a6a:	bd38      	pop	{r3, r4, r5, pc}
 8010a6c:	24005b6c 	.word	0x24005b6c

08010a70 <__errno>:
 8010a70:	4b01      	ldr	r3, [pc, #4]	; (8010a78 <__errno+0x8>)
 8010a72:	6818      	ldr	r0, [r3, #0]
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	240000c0 	.word	0x240000c0

08010a7c <__libc_init_array>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	4d0d      	ldr	r5, [pc, #52]	; (8010ab4 <__libc_init_array+0x38>)
 8010a80:	4c0d      	ldr	r4, [pc, #52]	; (8010ab8 <__libc_init_array+0x3c>)
 8010a82:	1b64      	subs	r4, r4, r5
 8010a84:	10a4      	asrs	r4, r4, #2
 8010a86:	2600      	movs	r6, #0
 8010a88:	42a6      	cmp	r6, r4
 8010a8a:	d109      	bne.n	8010aa0 <__libc_init_array+0x24>
 8010a8c:	4d0b      	ldr	r5, [pc, #44]	; (8010abc <__libc_init_array+0x40>)
 8010a8e:	4c0c      	ldr	r4, [pc, #48]	; (8010ac0 <__libc_init_array+0x44>)
 8010a90:	f001 f802 	bl	8011a98 <_init>
 8010a94:	1b64      	subs	r4, r4, r5
 8010a96:	10a4      	asrs	r4, r4, #2
 8010a98:	2600      	movs	r6, #0
 8010a9a:	42a6      	cmp	r6, r4
 8010a9c:	d105      	bne.n	8010aaa <__libc_init_array+0x2e>
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}
 8010aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aa4:	4798      	blx	r3
 8010aa6:	3601      	adds	r6, #1
 8010aa8:	e7ee      	b.n	8010a88 <__libc_init_array+0xc>
 8010aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8010aae:	4798      	blx	r3
 8010ab0:	3601      	adds	r6, #1
 8010ab2:	e7f2      	b.n	8010a9a <__libc_init_array+0x1e>
 8010ab4:	080146cc 	.word	0x080146cc
 8010ab8:	080146cc 	.word	0x080146cc
 8010abc:	080146cc 	.word	0x080146cc
 8010ac0:	080146d0 	.word	0x080146d0

08010ac4 <__retarget_lock_init_recursive>:
 8010ac4:	4770      	bx	lr

08010ac6 <__retarget_lock_acquire_recursive>:
 8010ac6:	4770      	bx	lr

08010ac8 <__retarget_lock_release_recursive>:
 8010ac8:	4770      	bx	lr

08010aca <memcpy>:
 8010aca:	440a      	add	r2, r1
 8010acc:	4291      	cmp	r1, r2
 8010ace:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ad2:	d100      	bne.n	8010ad6 <memcpy+0xc>
 8010ad4:	4770      	bx	lr
 8010ad6:	b510      	push	{r4, lr}
 8010ad8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010adc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ae0:	4291      	cmp	r1, r2
 8010ae2:	d1f9      	bne.n	8010ad8 <memcpy+0xe>
 8010ae4:	bd10      	pop	{r4, pc}
	...

08010ae8 <__assert_func>:
 8010ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aea:	4614      	mov	r4, r2
 8010aec:	461a      	mov	r2, r3
 8010aee:	4b09      	ldr	r3, [pc, #36]	; (8010b14 <__assert_func+0x2c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	4605      	mov	r5, r0
 8010af4:	68d8      	ldr	r0, [r3, #12]
 8010af6:	b14c      	cbz	r4, 8010b0c <__assert_func+0x24>
 8010af8:	4b07      	ldr	r3, [pc, #28]	; (8010b18 <__assert_func+0x30>)
 8010afa:	9100      	str	r1, [sp, #0]
 8010afc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b00:	4906      	ldr	r1, [pc, #24]	; (8010b1c <__assert_func+0x34>)
 8010b02:	462b      	mov	r3, r5
 8010b04:	f000 fca4 	bl	8011450 <fiprintf>
 8010b08:	f000 fd62 	bl	80115d0 <abort>
 8010b0c:	4b04      	ldr	r3, [pc, #16]	; (8010b20 <__assert_func+0x38>)
 8010b0e:	461c      	mov	r4, r3
 8010b10:	e7f3      	b.n	8010afa <__assert_func+0x12>
 8010b12:	bf00      	nop
 8010b14:	240000c0 	.word	0x240000c0
 8010b18:	08014653 	.word	0x08014653
 8010b1c:	08014660 	.word	0x08014660
 8010b20:	0801468e 	.word	0x0801468e

08010b24 <_free_r>:
 8010b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b26:	2900      	cmp	r1, #0
 8010b28:	d044      	beq.n	8010bb4 <_free_r+0x90>
 8010b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b2e:	9001      	str	r0, [sp, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	f1a1 0404 	sub.w	r4, r1, #4
 8010b36:	bfb8      	it	lt
 8010b38:	18e4      	addlt	r4, r4, r3
 8010b3a:	f000 f8e7 	bl	8010d0c <__malloc_lock>
 8010b3e:	4a1e      	ldr	r2, [pc, #120]	; (8010bb8 <_free_r+0x94>)
 8010b40:	9801      	ldr	r0, [sp, #4]
 8010b42:	6813      	ldr	r3, [r2, #0]
 8010b44:	b933      	cbnz	r3, 8010b54 <_free_r+0x30>
 8010b46:	6063      	str	r3, [r4, #4]
 8010b48:	6014      	str	r4, [r2, #0]
 8010b4a:	b003      	add	sp, #12
 8010b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b50:	f000 b8e2 	b.w	8010d18 <__malloc_unlock>
 8010b54:	42a3      	cmp	r3, r4
 8010b56:	d908      	bls.n	8010b6a <_free_r+0x46>
 8010b58:	6825      	ldr	r5, [r4, #0]
 8010b5a:	1961      	adds	r1, r4, r5
 8010b5c:	428b      	cmp	r3, r1
 8010b5e:	bf01      	itttt	eq
 8010b60:	6819      	ldreq	r1, [r3, #0]
 8010b62:	685b      	ldreq	r3, [r3, #4]
 8010b64:	1949      	addeq	r1, r1, r5
 8010b66:	6021      	streq	r1, [r4, #0]
 8010b68:	e7ed      	b.n	8010b46 <_free_r+0x22>
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	b10b      	cbz	r3, 8010b74 <_free_r+0x50>
 8010b70:	42a3      	cmp	r3, r4
 8010b72:	d9fa      	bls.n	8010b6a <_free_r+0x46>
 8010b74:	6811      	ldr	r1, [r2, #0]
 8010b76:	1855      	adds	r5, r2, r1
 8010b78:	42a5      	cmp	r5, r4
 8010b7a:	d10b      	bne.n	8010b94 <_free_r+0x70>
 8010b7c:	6824      	ldr	r4, [r4, #0]
 8010b7e:	4421      	add	r1, r4
 8010b80:	1854      	adds	r4, r2, r1
 8010b82:	42a3      	cmp	r3, r4
 8010b84:	6011      	str	r1, [r2, #0]
 8010b86:	d1e0      	bne.n	8010b4a <_free_r+0x26>
 8010b88:	681c      	ldr	r4, [r3, #0]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	6053      	str	r3, [r2, #4]
 8010b8e:	440c      	add	r4, r1
 8010b90:	6014      	str	r4, [r2, #0]
 8010b92:	e7da      	b.n	8010b4a <_free_r+0x26>
 8010b94:	d902      	bls.n	8010b9c <_free_r+0x78>
 8010b96:	230c      	movs	r3, #12
 8010b98:	6003      	str	r3, [r0, #0]
 8010b9a:	e7d6      	b.n	8010b4a <_free_r+0x26>
 8010b9c:	6825      	ldr	r5, [r4, #0]
 8010b9e:	1961      	adds	r1, r4, r5
 8010ba0:	428b      	cmp	r3, r1
 8010ba2:	bf04      	itt	eq
 8010ba4:	6819      	ldreq	r1, [r3, #0]
 8010ba6:	685b      	ldreq	r3, [r3, #4]
 8010ba8:	6063      	str	r3, [r4, #4]
 8010baa:	bf04      	itt	eq
 8010bac:	1949      	addeq	r1, r1, r5
 8010bae:	6021      	streq	r1, [r4, #0]
 8010bb0:	6054      	str	r4, [r2, #4]
 8010bb2:	e7ca      	b.n	8010b4a <_free_r+0x26>
 8010bb4:	b003      	add	sp, #12
 8010bb6:	bd30      	pop	{r4, r5, pc}
 8010bb8:	24005b74 	.word	0x24005b74

08010bbc <malloc>:
 8010bbc:	4b02      	ldr	r3, [pc, #8]	; (8010bc8 <malloc+0xc>)
 8010bbe:	4601      	mov	r1, r0
 8010bc0:	6818      	ldr	r0, [r3, #0]
 8010bc2:	f000 b823 	b.w	8010c0c <_malloc_r>
 8010bc6:	bf00      	nop
 8010bc8:	240000c0 	.word	0x240000c0

08010bcc <sbrk_aligned>:
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	4e0e      	ldr	r6, [pc, #56]	; (8010c08 <sbrk_aligned+0x3c>)
 8010bd0:	460c      	mov	r4, r1
 8010bd2:	6831      	ldr	r1, [r6, #0]
 8010bd4:	4605      	mov	r5, r0
 8010bd6:	b911      	cbnz	r1, 8010bde <sbrk_aligned+0x12>
 8010bd8:	f000 fcea 	bl	80115b0 <_sbrk_r>
 8010bdc:	6030      	str	r0, [r6, #0]
 8010bde:	4621      	mov	r1, r4
 8010be0:	4628      	mov	r0, r5
 8010be2:	f000 fce5 	bl	80115b0 <_sbrk_r>
 8010be6:	1c43      	adds	r3, r0, #1
 8010be8:	d00a      	beq.n	8010c00 <sbrk_aligned+0x34>
 8010bea:	1cc4      	adds	r4, r0, #3
 8010bec:	f024 0403 	bic.w	r4, r4, #3
 8010bf0:	42a0      	cmp	r0, r4
 8010bf2:	d007      	beq.n	8010c04 <sbrk_aligned+0x38>
 8010bf4:	1a21      	subs	r1, r4, r0
 8010bf6:	4628      	mov	r0, r5
 8010bf8:	f000 fcda 	bl	80115b0 <_sbrk_r>
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d101      	bne.n	8010c04 <sbrk_aligned+0x38>
 8010c00:	f04f 34ff 	mov.w	r4, #4294967295
 8010c04:	4620      	mov	r0, r4
 8010c06:	bd70      	pop	{r4, r5, r6, pc}
 8010c08:	24005b78 	.word	0x24005b78

08010c0c <_malloc_r>:
 8010c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c10:	1ccd      	adds	r5, r1, #3
 8010c12:	f025 0503 	bic.w	r5, r5, #3
 8010c16:	3508      	adds	r5, #8
 8010c18:	2d0c      	cmp	r5, #12
 8010c1a:	bf38      	it	cc
 8010c1c:	250c      	movcc	r5, #12
 8010c1e:	2d00      	cmp	r5, #0
 8010c20:	4607      	mov	r7, r0
 8010c22:	db01      	blt.n	8010c28 <_malloc_r+0x1c>
 8010c24:	42a9      	cmp	r1, r5
 8010c26:	d905      	bls.n	8010c34 <_malloc_r+0x28>
 8010c28:	230c      	movs	r3, #12
 8010c2a:	603b      	str	r3, [r7, #0]
 8010c2c:	2600      	movs	r6, #0
 8010c2e:	4630      	mov	r0, r6
 8010c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010d08 <_malloc_r+0xfc>
 8010c38:	f000 f868 	bl	8010d0c <__malloc_lock>
 8010c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8010c40:	461c      	mov	r4, r3
 8010c42:	bb5c      	cbnz	r4, 8010c9c <_malloc_r+0x90>
 8010c44:	4629      	mov	r1, r5
 8010c46:	4638      	mov	r0, r7
 8010c48:	f7ff ffc0 	bl	8010bcc <sbrk_aligned>
 8010c4c:	1c43      	adds	r3, r0, #1
 8010c4e:	4604      	mov	r4, r0
 8010c50:	d155      	bne.n	8010cfe <_malloc_r+0xf2>
 8010c52:	f8d8 4000 	ldr.w	r4, [r8]
 8010c56:	4626      	mov	r6, r4
 8010c58:	2e00      	cmp	r6, #0
 8010c5a:	d145      	bne.n	8010ce8 <_malloc_r+0xdc>
 8010c5c:	2c00      	cmp	r4, #0
 8010c5e:	d048      	beq.n	8010cf2 <_malloc_r+0xe6>
 8010c60:	6823      	ldr	r3, [r4, #0]
 8010c62:	4631      	mov	r1, r6
 8010c64:	4638      	mov	r0, r7
 8010c66:	eb04 0903 	add.w	r9, r4, r3
 8010c6a:	f000 fca1 	bl	80115b0 <_sbrk_r>
 8010c6e:	4581      	cmp	r9, r0
 8010c70:	d13f      	bne.n	8010cf2 <_malloc_r+0xe6>
 8010c72:	6821      	ldr	r1, [r4, #0]
 8010c74:	1a6d      	subs	r5, r5, r1
 8010c76:	4629      	mov	r1, r5
 8010c78:	4638      	mov	r0, r7
 8010c7a:	f7ff ffa7 	bl	8010bcc <sbrk_aligned>
 8010c7e:	3001      	adds	r0, #1
 8010c80:	d037      	beq.n	8010cf2 <_malloc_r+0xe6>
 8010c82:	6823      	ldr	r3, [r4, #0]
 8010c84:	442b      	add	r3, r5
 8010c86:	6023      	str	r3, [r4, #0]
 8010c88:	f8d8 3000 	ldr.w	r3, [r8]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d038      	beq.n	8010d02 <_malloc_r+0xf6>
 8010c90:	685a      	ldr	r2, [r3, #4]
 8010c92:	42a2      	cmp	r2, r4
 8010c94:	d12b      	bne.n	8010cee <_malloc_r+0xe2>
 8010c96:	2200      	movs	r2, #0
 8010c98:	605a      	str	r2, [r3, #4]
 8010c9a:	e00f      	b.n	8010cbc <_malloc_r+0xb0>
 8010c9c:	6822      	ldr	r2, [r4, #0]
 8010c9e:	1b52      	subs	r2, r2, r5
 8010ca0:	d41f      	bmi.n	8010ce2 <_malloc_r+0xd6>
 8010ca2:	2a0b      	cmp	r2, #11
 8010ca4:	d917      	bls.n	8010cd6 <_malloc_r+0xca>
 8010ca6:	1961      	adds	r1, r4, r5
 8010ca8:	42a3      	cmp	r3, r4
 8010caa:	6025      	str	r5, [r4, #0]
 8010cac:	bf18      	it	ne
 8010cae:	6059      	strne	r1, [r3, #4]
 8010cb0:	6863      	ldr	r3, [r4, #4]
 8010cb2:	bf08      	it	eq
 8010cb4:	f8c8 1000 	streq.w	r1, [r8]
 8010cb8:	5162      	str	r2, [r4, r5]
 8010cba:	604b      	str	r3, [r1, #4]
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	f104 060b 	add.w	r6, r4, #11
 8010cc2:	f000 f829 	bl	8010d18 <__malloc_unlock>
 8010cc6:	f026 0607 	bic.w	r6, r6, #7
 8010cca:	1d23      	adds	r3, r4, #4
 8010ccc:	1af2      	subs	r2, r6, r3
 8010cce:	d0ae      	beq.n	8010c2e <_malloc_r+0x22>
 8010cd0:	1b9b      	subs	r3, r3, r6
 8010cd2:	50a3      	str	r3, [r4, r2]
 8010cd4:	e7ab      	b.n	8010c2e <_malloc_r+0x22>
 8010cd6:	42a3      	cmp	r3, r4
 8010cd8:	6862      	ldr	r2, [r4, #4]
 8010cda:	d1dd      	bne.n	8010c98 <_malloc_r+0x8c>
 8010cdc:	f8c8 2000 	str.w	r2, [r8]
 8010ce0:	e7ec      	b.n	8010cbc <_malloc_r+0xb0>
 8010ce2:	4623      	mov	r3, r4
 8010ce4:	6864      	ldr	r4, [r4, #4]
 8010ce6:	e7ac      	b.n	8010c42 <_malloc_r+0x36>
 8010ce8:	4634      	mov	r4, r6
 8010cea:	6876      	ldr	r6, [r6, #4]
 8010cec:	e7b4      	b.n	8010c58 <_malloc_r+0x4c>
 8010cee:	4613      	mov	r3, r2
 8010cf0:	e7cc      	b.n	8010c8c <_malloc_r+0x80>
 8010cf2:	230c      	movs	r3, #12
 8010cf4:	603b      	str	r3, [r7, #0]
 8010cf6:	4638      	mov	r0, r7
 8010cf8:	f000 f80e 	bl	8010d18 <__malloc_unlock>
 8010cfc:	e797      	b.n	8010c2e <_malloc_r+0x22>
 8010cfe:	6025      	str	r5, [r4, #0]
 8010d00:	e7dc      	b.n	8010cbc <_malloc_r+0xb0>
 8010d02:	605b      	str	r3, [r3, #4]
 8010d04:	deff      	udf	#255	; 0xff
 8010d06:	bf00      	nop
 8010d08:	24005b74 	.word	0x24005b74

08010d0c <__malloc_lock>:
 8010d0c:	4801      	ldr	r0, [pc, #4]	; (8010d14 <__malloc_lock+0x8>)
 8010d0e:	f7ff beda 	b.w	8010ac6 <__retarget_lock_acquire_recursive>
 8010d12:	bf00      	nop
 8010d14:	24005b70 	.word	0x24005b70

08010d18 <__malloc_unlock>:
 8010d18:	4801      	ldr	r0, [pc, #4]	; (8010d20 <__malloc_unlock+0x8>)
 8010d1a:	f7ff bed5 	b.w	8010ac8 <__retarget_lock_release_recursive>
 8010d1e:	bf00      	nop
 8010d20:	24005b70 	.word	0x24005b70

08010d24 <__ssputs_r>:
 8010d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d28:	688e      	ldr	r6, [r1, #8]
 8010d2a:	461f      	mov	r7, r3
 8010d2c:	42be      	cmp	r6, r7
 8010d2e:	680b      	ldr	r3, [r1, #0]
 8010d30:	4682      	mov	sl, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	4690      	mov	r8, r2
 8010d36:	d82c      	bhi.n	8010d92 <__ssputs_r+0x6e>
 8010d38:	898a      	ldrh	r2, [r1, #12]
 8010d3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d3e:	d026      	beq.n	8010d8e <__ssputs_r+0x6a>
 8010d40:	6965      	ldr	r5, [r4, #20]
 8010d42:	6909      	ldr	r1, [r1, #16]
 8010d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d48:	eba3 0901 	sub.w	r9, r3, r1
 8010d4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d50:	1c7b      	adds	r3, r7, #1
 8010d52:	444b      	add	r3, r9
 8010d54:	106d      	asrs	r5, r5, #1
 8010d56:	429d      	cmp	r5, r3
 8010d58:	bf38      	it	cc
 8010d5a:	461d      	movcc	r5, r3
 8010d5c:	0553      	lsls	r3, r2, #21
 8010d5e:	d527      	bpl.n	8010db0 <__ssputs_r+0x8c>
 8010d60:	4629      	mov	r1, r5
 8010d62:	f7ff ff53 	bl	8010c0c <_malloc_r>
 8010d66:	4606      	mov	r6, r0
 8010d68:	b360      	cbz	r0, 8010dc4 <__ssputs_r+0xa0>
 8010d6a:	6921      	ldr	r1, [r4, #16]
 8010d6c:	464a      	mov	r2, r9
 8010d6e:	f7ff feac 	bl	8010aca <memcpy>
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d7c:	81a3      	strh	r3, [r4, #12]
 8010d7e:	6126      	str	r6, [r4, #16]
 8010d80:	6165      	str	r5, [r4, #20]
 8010d82:	444e      	add	r6, r9
 8010d84:	eba5 0509 	sub.w	r5, r5, r9
 8010d88:	6026      	str	r6, [r4, #0]
 8010d8a:	60a5      	str	r5, [r4, #8]
 8010d8c:	463e      	mov	r6, r7
 8010d8e:	42be      	cmp	r6, r7
 8010d90:	d900      	bls.n	8010d94 <__ssputs_r+0x70>
 8010d92:	463e      	mov	r6, r7
 8010d94:	6820      	ldr	r0, [r4, #0]
 8010d96:	4632      	mov	r2, r6
 8010d98:	4641      	mov	r1, r8
 8010d9a:	f000 fbcd 	bl	8011538 <memmove>
 8010d9e:	68a3      	ldr	r3, [r4, #8]
 8010da0:	1b9b      	subs	r3, r3, r6
 8010da2:	60a3      	str	r3, [r4, #8]
 8010da4:	6823      	ldr	r3, [r4, #0]
 8010da6:	4433      	add	r3, r6
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	2000      	movs	r0, #0
 8010dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db0:	462a      	mov	r2, r5
 8010db2:	f000 fc14 	bl	80115de <_realloc_r>
 8010db6:	4606      	mov	r6, r0
 8010db8:	2800      	cmp	r0, #0
 8010dba:	d1e0      	bne.n	8010d7e <__ssputs_r+0x5a>
 8010dbc:	6921      	ldr	r1, [r4, #16]
 8010dbe:	4650      	mov	r0, sl
 8010dc0:	f7ff feb0 	bl	8010b24 <_free_r>
 8010dc4:	230c      	movs	r3, #12
 8010dc6:	f8ca 3000 	str.w	r3, [sl]
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd0:	81a3      	strh	r3, [r4, #12]
 8010dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd6:	e7e9      	b.n	8010dac <__ssputs_r+0x88>

08010dd8 <_svfiprintf_r>:
 8010dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	4698      	mov	r8, r3
 8010dde:	898b      	ldrh	r3, [r1, #12]
 8010de0:	061b      	lsls	r3, r3, #24
 8010de2:	b09d      	sub	sp, #116	; 0x74
 8010de4:	4607      	mov	r7, r0
 8010de6:	460d      	mov	r5, r1
 8010de8:	4614      	mov	r4, r2
 8010dea:	d50e      	bpl.n	8010e0a <_svfiprintf_r+0x32>
 8010dec:	690b      	ldr	r3, [r1, #16]
 8010dee:	b963      	cbnz	r3, 8010e0a <_svfiprintf_r+0x32>
 8010df0:	2140      	movs	r1, #64	; 0x40
 8010df2:	f7ff ff0b 	bl	8010c0c <_malloc_r>
 8010df6:	6028      	str	r0, [r5, #0]
 8010df8:	6128      	str	r0, [r5, #16]
 8010dfa:	b920      	cbnz	r0, 8010e06 <_svfiprintf_r+0x2e>
 8010dfc:	230c      	movs	r3, #12
 8010dfe:	603b      	str	r3, [r7, #0]
 8010e00:	f04f 30ff 	mov.w	r0, #4294967295
 8010e04:	e0d0      	b.n	8010fa8 <_svfiprintf_r+0x1d0>
 8010e06:	2340      	movs	r3, #64	; 0x40
 8010e08:	616b      	str	r3, [r5, #20]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e0e:	2320      	movs	r3, #32
 8010e10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e14:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e18:	2330      	movs	r3, #48	; 0x30
 8010e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010fc0 <_svfiprintf_r+0x1e8>
 8010e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e22:	f04f 0901 	mov.w	r9, #1
 8010e26:	4623      	mov	r3, r4
 8010e28:	469a      	mov	sl, r3
 8010e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e2e:	b10a      	cbz	r2, 8010e34 <_svfiprintf_r+0x5c>
 8010e30:	2a25      	cmp	r2, #37	; 0x25
 8010e32:	d1f9      	bne.n	8010e28 <_svfiprintf_r+0x50>
 8010e34:	ebba 0b04 	subs.w	fp, sl, r4
 8010e38:	d00b      	beq.n	8010e52 <_svfiprintf_r+0x7a>
 8010e3a:	465b      	mov	r3, fp
 8010e3c:	4622      	mov	r2, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	4638      	mov	r0, r7
 8010e42:	f7ff ff6f 	bl	8010d24 <__ssputs_r>
 8010e46:	3001      	adds	r0, #1
 8010e48:	f000 80a9 	beq.w	8010f9e <_svfiprintf_r+0x1c6>
 8010e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e4e:	445a      	add	r2, fp
 8010e50:	9209      	str	r2, [sp, #36]	; 0x24
 8010e52:	f89a 3000 	ldrb.w	r3, [sl]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	f000 80a1 	beq.w	8010f9e <_svfiprintf_r+0x1c6>
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e66:	f10a 0a01 	add.w	sl, sl, #1
 8010e6a:	9304      	str	r3, [sp, #16]
 8010e6c:	9307      	str	r3, [sp, #28]
 8010e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e72:	931a      	str	r3, [sp, #104]	; 0x68
 8010e74:	4654      	mov	r4, sl
 8010e76:	2205      	movs	r2, #5
 8010e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e7c:	4850      	ldr	r0, [pc, #320]	; (8010fc0 <_svfiprintf_r+0x1e8>)
 8010e7e:	f7ef fa2f 	bl	80002e0 <memchr>
 8010e82:	9a04      	ldr	r2, [sp, #16]
 8010e84:	b9d8      	cbnz	r0, 8010ebe <_svfiprintf_r+0xe6>
 8010e86:	06d0      	lsls	r0, r2, #27
 8010e88:	bf44      	itt	mi
 8010e8a:	2320      	movmi	r3, #32
 8010e8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e90:	0711      	lsls	r1, r2, #28
 8010e92:	bf44      	itt	mi
 8010e94:	232b      	movmi	r3, #43	; 0x2b
 8010e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8010ea0:	d015      	beq.n	8010ece <_svfiprintf_r+0xf6>
 8010ea2:	9a07      	ldr	r2, [sp, #28]
 8010ea4:	4654      	mov	r4, sl
 8010ea6:	2000      	movs	r0, #0
 8010ea8:	f04f 0c0a 	mov.w	ip, #10
 8010eac:	4621      	mov	r1, r4
 8010eae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eb2:	3b30      	subs	r3, #48	; 0x30
 8010eb4:	2b09      	cmp	r3, #9
 8010eb6:	d94d      	bls.n	8010f54 <_svfiprintf_r+0x17c>
 8010eb8:	b1b0      	cbz	r0, 8010ee8 <_svfiprintf_r+0x110>
 8010eba:	9207      	str	r2, [sp, #28]
 8010ebc:	e014      	b.n	8010ee8 <_svfiprintf_r+0x110>
 8010ebe:	eba0 0308 	sub.w	r3, r0, r8
 8010ec2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ec6:	4313      	orrs	r3, r2
 8010ec8:	9304      	str	r3, [sp, #16]
 8010eca:	46a2      	mov	sl, r4
 8010ecc:	e7d2      	b.n	8010e74 <_svfiprintf_r+0x9c>
 8010ece:	9b03      	ldr	r3, [sp, #12]
 8010ed0:	1d19      	adds	r1, r3, #4
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	9103      	str	r1, [sp, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	bfbb      	ittet	lt
 8010eda:	425b      	neglt	r3, r3
 8010edc:	f042 0202 	orrlt.w	r2, r2, #2
 8010ee0:	9307      	strge	r3, [sp, #28]
 8010ee2:	9307      	strlt	r3, [sp, #28]
 8010ee4:	bfb8      	it	lt
 8010ee6:	9204      	strlt	r2, [sp, #16]
 8010ee8:	7823      	ldrb	r3, [r4, #0]
 8010eea:	2b2e      	cmp	r3, #46	; 0x2e
 8010eec:	d10c      	bne.n	8010f08 <_svfiprintf_r+0x130>
 8010eee:	7863      	ldrb	r3, [r4, #1]
 8010ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ef2:	d134      	bne.n	8010f5e <_svfiprintf_r+0x186>
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	1d1a      	adds	r2, r3, #4
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	9203      	str	r2, [sp, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	bfb8      	it	lt
 8010f00:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f04:	3402      	adds	r4, #2
 8010f06:	9305      	str	r3, [sp, #20]
 8010f08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010fd0 <_svfiprintf_r+0x1f8>
 8010f0c:	7821      	ldrb	r1, [r4, #0]
 8010f0e:	2203      	movs	r2, #3
 8010f10:	4650      	mov	r0, sl
 8010f12:	f7ef f9e5 	bl	80002e0 <memchr>
 8010f16:	b138      	cbz	r0, 8010f28 <_svfiprintf_r+0x150>
 8010f18:	9b04      	ldr	r3, [sp, #16]
 8010f1a:	eba0 000a 	sub.w	r0, r0, sl
 8010f1e:	2240      	movs	r2, #64	; 0x40
 8010f20:	4082      	lsls	r2, r0
 8010f22:	4313      	orrs	r3, r2
 8010f24:	3401      	adds	r4, #1
 8010f26:	9304      	str	r3, [sp, #16]
 8010f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f2c:	4825      	ldr	r0, [pc, #148]	; (8010fc4 <_svfiprintf_r+0x1ec>)
 8010f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f32:	2206      	movs	r2, #6
 8010f34:	f7ef f9d4 	bl	80002e0 <memchr>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d038      	beq.n	8010fae <_svfiprintf_r+0x1d6>
 8010f3c:	4b22      	ldr	r3, [pc, #136]	; (8010fc8 <_svfiprintf_r+0x1f0>)
 8010f3e:	bb1b      	cbnz	r3, 8010f88 <_svfiprintf_r+0x1b0>
 8010f40:	9b03      	ldr	r3, [sp, #12]
 8010f42:	3307      	adds	r3, #7
 8010f44:	f023 0307 	bic.w	r3, r3, #7
 8010f48:	3308      	adds	r3, #8
 8010f4a:	9303      	str	r3, [sp, #12]
 8010f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f4e:	4433      	add	r3, r6
 8010f50:	9309      	str	r3, [sp, #36]	; 0x24
 8010f52:	e768      	b.n	8010e26 <_svfiprintf_r+0x4e>
 8010f54:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f58:	460c      	mov	r4, r1
 8010f5a:	2001      	movs	r0, #1
 8010f5c:	e7a6      	b.n	8010eac <_svfiprintf_r+0xd4>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	3401      	adds	r4, #1
 8010f62:	9305      	str	r3, [sp, #20]
 8010f64:	4619      	mov	r1, r3
 8010f66:	f04f 0c0a 	mov.w	ip, #10
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f70:	3a30      	subs	r2, #48	; 0x30
 8010f72:	2a09      	cmp	r2, #9
 8010f74:	d903      	bls.n	8010f7e <_svfiprintf_r+0x1a6>
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d0c6      	beq.n	8010f08 <_svfiprintf_r+0x130>
 8010f7a:	9105      	str	r1, [sp, #20]
 8010f7c:	e7c4      	b.n	8010f08 <_svfiprintf_r+0x130>
 8010f7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f82:	4604      	mov	r4, r0
 8010f84:	2301      	movs	r3, #1
 8010f86:	e7f0      	b.n	8010f6a <_svfiprintf_r+0x192>
 8010f88:	ab03      	add	r3, sp, #12
 8010f8a:	9300      	str	r3, [sp, #0]
 8010f8c:	462a      	mov	r2, r5
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <_svfiprintf_r+0x1f4>)
 8010f90:	a904      	add	r1, sp, #16
 8010f92:	4638      	mov	r0, r7
 8010f94:	f3af 8000 	nop.w
 8010f98:	1c42      	adds	r2, r0, #1
 8010f9a:	4606      	mov	r6, r0
 8010f9c:	d1d6      	bne.n	8010f4c <_svfiprintf_r+0x174>
 8010f9e:	89ab      	ldrh	r3, [r5, #12]
 8010fa0:	065b      	lsls	r3, r3, #25
 8010fa2:	f53f af2d 	bmi.w	8010e00 <_svfiprintf_r+0x28>
 8010fa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010fa8:	b01d      	add	sp, #116	; 0x74
 8010faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fae:	ab03      	add	r3, sp, #12
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <_svfiprintf_r+0x1f4>)
 8010fb6:	a904      	add	r1, sp, #16
 8010fb8:	4638      	mov	r0, r7
 8010fba:	f000 f879 	bl	80110b0 <_printf_i>
 8010fbe:	e7eb      	b.n	8010f98 <_svfiprintf_r+0x1c0>
 8010fc0:	0801468f 	.word	0x0801468f
 8010fc4:	08014699 	.word	0x08014699
 8010fc8:	00000000 	.word	0x00000000
 8010fcc:	08010d25 	.word	0x08010d25
 8010fd0:	08014695 	.word	0x08014695

08010fd4 <_printf_common>:
 8010fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fd8:	4616      	mov	r6, r2
 8010fda:	4699      	mov	r9, r3
 8010fdc:	688a      	ldr	r2, [r1, #8]
 8010fde:	690b      	ldr	r3, [r1, #16]
 8010fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	bfb8      	it	lt
 8010fe8:	4613      	movlt	r3, r2
 8010fea:	6033      	str	r3, [r6, #0]
 8010fec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	460c      	mov	r4, r1
 8010ff4:	b10a      	cbz	r2, 8010ffa <_printf_common+0x26>
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	6033      	str	r3, [r6, #0]
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	0699      	lsls	r1, r3, #26
 8010ffe:	bf42      	ittt	mi
 8011000:	6833      	ldrmi	r3, [r6, #0]
 8011002:	3302      	addmi	r3, #2
 8011004:	6033      	strmi	r3, [r6, #0]
 8011006:	6825      	ldr	r5, [r4, #0]
 8011008:	f015 0506 	ands.w	r5, r5, #6
 801100c:	d106      	bne.n	801101c <_printf_common+0x48>
 801100e:	f104 0a19 	add.w	sl, r4, #25
 8011012:	68e3      	ldr	r3, [r4, #12]
 8011014:	6832      	ldr	r2, [r6, #0]
 8011016:	1a9b      	subs	r3, r3, r2
 8011018:	42ab      	cmp	r3, r5
 801101a:	dc26      	bgt.n	801106a <_printf_common+0x96>
 801101c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011020:	1e13      	subs	r3, r2, #0
 8011022:	6822      	ldr	r2, [r4, #0]
 8011024:	bf18      	it	ne
 8011026:	2301      	movne	r3, #1
 8011028:	0692      	lsls	r2, r2, #26
 801102a:	d42b      	bmi.n	8011084 <_printf_common+0xb0>
 801102c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011030:	4649      	mov	r1, r9
 8011032:	4638      	mov	r0, r7
 8011034:	47c0      	blx	r8
 8011036:	3001      	adds	r0, #1
 8011038:	d01e      	beq.n	8011078 <_printf_common+0xa4>
 801103a:	6823      	ldr	r3, [r4, #0]
 801103c:	6922      	ldr	r2, [r4, #16]
 801103e:	f003 0306 	and.w	r3, r3, #6
 8011042:	2b04      	cmp	r3, #4
 8011044:	bf02      	ittt	eq
 8011046:	68e5      	ldreq	r5, [r4, #12]
 8011048:	6833      	ldreq	r3, [r6, #0]
 801104a:	1aed      	subeq	r5, r5, r3
 801104c:	68a3      	ldr	r3, [r4, #8]
 801104e:	bf0c      	ite	eq
 8011050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011054:	2500      	movne	r5, #0
 8011056:	4293      	cmp	r3, r2
 8011058:	bfc4      	itt	gt
 801105a:	1a9b      	subgt	r3, r3, r2
 801105c:	18ed      	addgt	r5, r5, r3
 801105e:	2600      	movs	r6, #0
 8011060:	341a      	adds	r4, #26
 8011062:	42b5      	cmp	r5, r6
 8011064:	d11a      	bne.n	801109c <_printf_common+0xc8>
 8011066:	2000      	movs	r0, #0
 8011068:	e008      	b.n	801107c <_printf_common+0xa8>
 801106a:	2301      	movs	r3, #1
 801106c:	4652      	mov	r2, sl
 801106e:	4649      	mov	r1, r9
 8011070:	4638      	mov	r0, r7
 8011072:	47c0      	blx	r8
 8011074:	3001      	adds	r0, #1
 8011076:	d103      	bne.n	8011080 <_printf_common+0xac>
 8011078:	f04f 30ff 	mov.w	r0, #4294967295
 801107c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011080:	3501      	adds	r5, #1
 8011082:	e7c6      	b.n	8011012 <_printf_common+0x3e>
 8011084:	18e1      	adds	r1, r4, r3
 8011086:	1c5a      	adds	r2, r3, #1
 8011088:	2030      	movs	r0, #48	; 0x30
 801108a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801108e:	4422      	add	r2, r4
 8011090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011094:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011098:	3302      	adds	r3, #2
 801109a:	e7c7      	b.n	801102c <_printf_common+0x58>
 801109c:	2301      	movs	r3, #1
 801109e:	4622      	mov	r2, r4
 80110a0:	4649      	mov	r1, r9
 80110a2:	4638      	mov	r0, r7
 80110a4:	47c0      	blx	r8
 80110a6:	3001      	adds	r0, #1
 80110a8:	d0e6      	beq.n	8011078 <_printf_common+0xa4>
 80110aa:	3601      	adds	r6, #1
 80110ac:	e7d9      	b.n	8011062 <_printf_common+0x8e>
	...

080110b0 <_printf_i>:
 80110b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80110b4:	7e0f      	ldrb	r7, [r1, #24]
 80110b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80110b8:	2f78      	cmp	r7, #120	; 0x78
 80110ba:	4691      	mov	r9, r2
 80110bc:	4680      	mov	r8, r0
 80110be:	460c      	mov	r4, r1
 80110c0:	469a      	mov	sl, r3
 80110c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80110c6:	d807      	bhi.n	80110d8 <_printf_i+0x28>
 80110c8:	2f62      	cmp	r7, #98	; 0x62
 80110ca:	d80a      	bhi.n	80110e2 <_printf_i+0x32>
 80110cc:	2f00      	cmp	r7, #0
 80110ce:	f000 80d4 	beq.w	801127a <_printf_i+0x1ca>
 80110d2:	2f58      	cmp	r7, #88	; 0x58
 80110d4:	f000 80c0 	beq.w	8011258 <_printf_i+0x1a8>
 80110d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80110e0:	e03a      	b.n	8011158 <_printf_i+0xa8>
 80110e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80110e6:	2b15      	cmp	r3, #21
 80110e8:	d8f6      	bhi.n	80110d8 <_printf_i+0x28>
 80110ea:	a101      	add	r1, pc, #4	; (adr r1, 80110f0 <_printf_i+0x40>)
 80110ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110f0:	08011149 	.word	0x08011149
 80110f4:	0801115d 	.word	0x0801115d
 80110f8:	080110d9 	.word	0x080110d9
 80110fc:	080110d9 	.word	0x080110d9
 8011100:	080110d9 	.word	0x080110d9
 8011104:	080110d9 	.word	0x080110d9
 8011108:	0801115d 	.word	0x0801115d
 801110c:	080110d9 	.word	0x080110d9
 8011110:	080110d9 	.word	0x080110d9
 8011114:	080110d9 	.word	0x080110d9
 8011118:	080110d9 	.word	0x080110d9
 801111c:	08011261 	.word	0x08011261
 8011120:	08011189 	.word	0x08011189
 8011124:	0801121b 	.word	0x0801121b
 8011128:	080110d9 	.word	0x080110d9
 801112c:	080110d9 	.word	0x080110d9
 8011130:	08011283 	.word	0x08011283
 8011134:	080110d9 	.word	0x080110d9
 8011138:	08011189 	.word	0x08011189
 801113c:	080110d9 	.word	0x080110d9
 8011140:	080110d9 	.word	0x080110d9
 8011144:	08011223 	.word	0x08011223
 8011148:	682b      	ldr	r3, [r5, #0]
 801114a:	1d1a      	adds	r2, r3, #4
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	602a      	str	r2, [r5, #0]
 8011150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011158:	2301      	movs	r3, #1
 801115a:	e09f      	b.n	801129c <_printf_i+0x1ec>
 801115c:	6820      	ldr	r0, [r4, #0]
 801115e:	682b      	ldr	r3, [r5, #0]
 8011160:	0607      	lsls	r7, r0, #24
 8011162:	f103 0104 	add.w	r1, r3, #4
 8011166:	6029      	str	r1, [r5, #0]
 8011168:	d501      	bpl.n	801116e <_printf_i+0xbe>
 801116a:	681e      	ldr	r6, [r3, #0]
 801116c:	e003      	b.n	8011176 <_printf_i+0xc6>
 801116e:	0646      	lsls	r6, r0, #25
 8011170:	d5fb      	bpl.n	801116a <_printf_i+0xba>
 8011172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011176:	2e00      	cmp	r6, #0
 8011178:	da03      	bge.n	8011182 <_printf_i+0xd2>
 801117a:	232d      	movs	r3, #45	; 0x2d
 801117c:	4276      	negs	r6, r6
 801117e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011182:	485a      	ldr	r0, [pc, #360]	; (80112ec <_printf_i+0x23c>)
 8011184:	230a      	movs	r3, #10
 8011186:	e012      	b.n	80111ae <_printf_i+0xfe>
 8011188:	682b      	ldr	r3, [r5, #0]
 801118a:	6820      	ldr	r0, [r4, #0]
 801118c:	1d19      	adds	r1, r3, #4
 801118e:	6029      	str	r1, [r5, #0]
 8011190:	0605      	lsls	r5, r0, #24
 8011192:	d501      	bpl.n	8011198 <_printf_i+0xe8>
 8011194:	681e      	ldr	r6, [r3, #0]
 8011196:	e002      	b.n	801119e <_printf_i+0xee>
 8011198:	0641      	lsls	r1, r0, #25
 801119a:	d5fb      	bpl.n	8011194 <_printf_i+0xe4>
 801119c:	881e      	ldrh	r6, [r3, #0]
 801119e:	4853      	ldr	r0, [pc, #332]	; (80112ec <_printf_i+0x23c>)
 80111a0:	2f6f      	cmp	r7, #111	; 0x6f
 80111a2:	bf0c      	ite	eq
 80111a4:	2308      	moveq	r3, #8
 80111a6:	230a      	movne	r3, #10
 80111a8:	2100      	movs	r1, #0
 80111aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80111ae:	6865      	ldr	r5, [r4, #4]
 80111b0:	60a5      	str	r5, [r4, #8]
 80111b2:	2d00      	cmp	r5, #0
 80111b4:	bfa2      	ittt	ge
 80111b6:	6821      	ldrge	r1, [r4, #0]
 80111b8:	f021 0104 	bicge.w	r1, r1, #4
 80111bc:	6021      	strge	r1, [r4, #0]
 80111be:	b90e      	cbnz	r6, 80111c4 <_printf_i+0x114>
 80111c0:	2d00      	cmp	r5, #0
 80111c2:	d04b      	beq.n	801125c <_printf_i+0x1ac>
 80111c4:	4615      	mov	r5, r2
 80111c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80111ca:	fb03 6711 	mls	r7, r3, r1, r6
 80111ce:	5dc7      	ldrb	r7, [r0, r7]
 80111d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80111d4:	4637      	mov	r7, r6
 80111d6:	42bb      	cmp	r3, r7
 80111d8:	460e      	mov	r6, r1
 80111da:	d9f4      	bls.n	80111c6 <_printf_i+0x116>
 80111dc:	2b08      	cmp	r3, #8
 80111de:	d10b      	bne.n	80111f8 <_printf_i+0x148>
 80111e0:	6823      	ldr	r3, [r4, #0]
 80111e2:	07de      	lsls	r6, r3, #31
 80111e4:	d508      	bpl.n	80111f8 <_printf_i+0x148>
 80111e6:	6923      	ldr	r3, [r4, #16]
 80111e8:	6861      	ldr	r1, [r4, #4]
 80111ea:	4299      	cmp	r1, r3
 80111ec:	bfde      	ittt	le
 80111ee:	2330      	movle	r3, #48	; 0x30
 80111f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80111f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80111f8:	1b52      	subs	r2, r2, r5
 80111fa:	6122      	str	r2, [r4, #16]
 80111fc:	f8cd a000 	str.w	sl, [sp]
 8011200:	464b      	mov	r3, r9
 8011202:	aa03      	add	r2, sp, #12
 8011204:	4621      	mov	r1, r4
 8011206:	4640      	mov	r0, r8
 8011208:	f7ff fee4 	bl	8010fd4 <_printf_common>
 801120c:	3001      	adds	r0, #1
 801120e:	d14a      	bne.n	80112a6 <_printf_i+0x1f6>
 8011210:	f04f 30ff 	mov.w	r0, #4294967295
 8011214:	b004      	add	sp, #16
 8011216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801121a:	6823      	ldr	r3, [r4, #0]
 801121c:	f043 0320 	orr.w	r3, r3, #32
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	4833      	ldr	r0, [pc, #204]	; (80112f0 <_printf_i+0x240>)
 8011224:	2778      	movs	r7, #120	; 0x78
 8011226:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	6829      	ldr	r1, [r5, #0]
 801122e:	061f      	lsls	r7, r3, #24
 8011230:	f851 6b04 	ldr.w	r6, [r1], #4
 8011234:	d402      	bmi.n	801123c <_printf_i+0x18c>
 8011236:	065f      	lsls	r7, r3, #25
 8011238:	bf48      	it	mi
 801123a:	b2b6      	uxthmi	r6, r6
 801123c:	07df      	lsls	r7, r3, #31
 801123e:	bf48      	it	mi
 8011240:	f043 0320 	orrmi.w	r3, r3, #32
 8011244:	6029      	str	r1, [r5, #0]
 8011246:	bf48      	it	mi
 8011248:	6023      	strmi	r3, [r4, #0]
 801124a:	b91e      	cbnz	r6, 8011254 <_printf_i+0x1a4>
 801124c:	6823      	ldr	r3, [r4, #0]
 801124e:	f023 0320 	bic.w	r3, r3, #32
 8011252:	6023      	str	r3, [r4, #0]
 8011254:	2310      	movs	r3, #16
 8011256:	e7a7      	b.n	80111a8 <_printf_i+0xf8>
 8011258:	4824      	ldr	r0, [pc, #144]	; (80112ec <_printf_i+0x23c>)
 801125a:	e7e4      	b.n	8011226 <_printf_i+0x176>
 801125c:	4615      	mov	r5, r2
 801125e:	e7bd      	b.n	80111dc <_printf_i+0x12c>
 8011260:	682b      	ldr	r3, [r5, #0]
 8011262:	6826      	ldr	r6, [r4, #0]
 8011264:	6961      	ldr	r1, [r4, #20]
 8011266:	1d18      	adds	r0, r3, #4
 8011268:	6028      	str	r0, [r5, #0]
 801126a:	0635      	lsls	r5, r6, #24
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	d501      	bpl.n	8011274 <_printf_i+0x1c4>
 8011270:	6019      	str	r1, [r3, #0]
 8011272:	e002      	b.n	801127a <_printf_i+0x1ca>
 8011274:	0670      	lsls	r0, r6, #25
 8011276:	d5fb      	bpl.n	8011270 <_printf_i+0x1c0>
 8011278:	8019      	strh	r1, [r3, #0]
 801127a:	2300      	movs	r3, #0
 801127c:	6123      	str	r3, [r4, #16]
 801127e:	4615      	mov	r5, r2
 8011280:	e7bc      	b.n	80111fc <_printf_i+0x14c>
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	1d1a      	adds	r2, r3, #4
 8011286:	602a      	str	r2, [r5, #0]
 8011288:	681d      	ldr	r5, [r3, #0]
 801128a:	6862      	ldr	r2, [r4, #4]
 801128c:	2100      	movs	r1, #0
 801128e:	4628      	mov	r0, r5
 8011290:	f7ef f826 	bl	80002e0 <memchr>
 8011294:	b108      	cbz	r0, 801129a <_printf_i+0x1ea>
 8011296:	1b40      	subs	r0, r0, r5
 8011298:	6060      	str	r0, [r4, #4]
 801129a:	6863      	ldr	r3, [r4, #4]
 801129c:	6123      	str	r3, [r4, #16]
 801129e:	2300      	movs	r3, #0
 80112a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80112a4:	e7aa      	b.n	80111fc <_printf_i+0x14c>
 80112a6:	6923      	ldr	r3, [r4, #16]
 80112a8:	462a      	mov	r2, r5
 80112aa:	4649      	mov	r1, r9
 80112ac:	4640      	mov	r0, r8
 80112ae:	47d0      	blx	sl
 80112b0:	3001      	adds	r0, #1
 80112b2:	d0ad      	beq.n	8011210 <_printf_i+0x160>
 80112b4:	6823      	ldr	r3, [r4, #0]
 80112b6:	079b      	lsls	r3, r3, #30
 80112b8:	d413      	bmi.n	80112e2 <_printf_i+0x232>
 80112ba:	68e0      	ldr	r0, [r4, #12]
 80112bc:	9b03      	ldr	r3, [sp, #12]
 80112be:	4298      	cmp	r0, r3
 80112c0:	bfb8      	it	lt
 80112c2:	4618      	movlt	r0, r3
 80112c4:	e7a6      	b.n	8011214 <_printf_i+0x164>
 80112c6:	2301      	movs	r3, #1
 80112c8:	4632      	mov	r2, r6
 80112ca:	4649      	mov	r1, r9
 80112cc:	4640      	mov	r0, r8
 80112ce:	47d0      	blx	sl
 80112d0:	3001      	adds	r0, #1
 80112d2:	d09d      	beq.n	8011210 <_printf_i+0x160>
 80112d4:	3501      	adds	r5, #1
 80112d6:	68e3      	ldr	r3, [r4, #12]
 80112d8:	9903      	ldr	r1, [sp, #12]
 80112da:	1a5b      	subs	r3, r3, r1
 80112dc:	42ab      	cmp	r3, r5
 80112de:	dcf2      	bgt.n	80112c6 <_printf_i+0x216>
 80112e0:	e7eb      	b.n	80112ba <_printf_i+0x20a>
 80112e2:	2500      	movs	r5, #0
 80112e4:	f104 0619 	add.w	r6, r4, #25
 80112e8:	e7f5      	b.n	80112d6 <_printf_i+0x226>
 80112ea:	bf00      	nop
 80112ec:	080146a0 	.word	0x080146a0
 80112f0:	080146b1 	.word	0x080146b1

080112f4 <__sflush_r>:
 80112f4:	898a      	ldrh	r2, [r1, #12]
 80112f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112fa:	4605      	mov	r5, r0
 80112fc:	0710      	lsls	r0, r2, #28
 80112fe:	460c      	mov	r4, r1
 8011300:	d458      	bmi.n	80113b4 <__sflush_r+0xc0>
 8011302:	684b      	ldr	r3, [r1, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	dc05      	bgt.n	8011314 <__sflush_r+0x20>
 8011308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801130a:	2b00      	cmp	r3, #0
 801130c:	dc02      	bgt.n	8011314 <__sflush_r+0x20>
 801130e:	2000      	movs	r0, #0
 8011310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011316:	2e00      	cmp	r6, #0
 8011318:	d0f9      	beq.n	801130e <__sflush_r+0x1a>
 801131a:	2300      	movs	r3, #0
 801131c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011320:	682f      	ldr	r7, [r5, #0]
 8011322:	6a21      	ldr	r1, [r4, #32]
 8011324:	602b      	str	r3, [r5, #0]
 8011326:	d032      	beq.n	801138e <__sflush_r+0x9a>
 8011328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	075a      	lsls	r2, r3, #29
 801132e:	d505      	bpl.n	801133c <__sflush_r+0x48>
 8011330:	6863      	ldr	r3, [r4, #4]
 8011332:	1ac0      	subs	r0, r0, r3
 8011334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011336:	b10b      	cbz	r3, 801133c <__sflush_r+0x48>
 8011338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801133a:	1ac0      	subs	r0, r0, r3
 801133c:	2300      	movs	r3, #0
 801133e:	4602      	mov	r2, r0
 8011340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011342:	6a21      	ldr	r1, [r4, #32]
 8011344:	4628      	mov	r0, r5
 8011346:	47b0      	blx	r6
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	89a3      	ldrh	r3, [r4, #12]
 801134c:	d106      	bne.n	801135c <__sflush_r+0x68>
 801134e:	6829      	ldr	r1, [r5, #0]
 8011350:	291d      	cmp	r1, #29
 8011352:	d82b      	bhi.n	80113ac <__sflush_r+0xb8>
 8011354:	4a29      	ldr	r2, [pc, #164]	; (80113fc <__sflush_r+0x108>)
 8011356:	410a      	asrs	r2, r1
 8011358:	07d6      	lsls	r6, r2, #31
 801135a:	d427      	bmi.n	80113ac <__sflush_r+0xb8>
 801135c:	2200      	movs	r2, #0
 801135e:	6062      	str	r2, [r4, #4]
 8011360:	04d9      	lsls	r1, r3, #19
 8011362:	6922      	ldr	r2, [r4, #16]
 8011364:	6022      	str	r2, [r4, #0]
 8011366:	d504      	bpl.n	8011372 <__sflush_r+0x7e>
 8011368:	1c42      	adds	r2, r0, #1
 801136a:	d101      	bne.n	8011370 <__sflush_r+0x7c>
 801136c:	682b      	ldr	r3, [r5, #0]
 801136e:	b903      	cbnz	r3, 8011372 <__sflush_r+0x7e>
 8011370:	6560      	str	r0, [r4, #84]	; 0x54
 8011372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011374:	602f      	str	r7, [r5, #0]
 8011376:	2900      	cmp	r1, #0
 8011378:	d0c9      	beq.n	801130e <__sflush_r+0x1a>
 801137a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801137e:	4299      	cmp	r1, r3
 8011380:	d002      	beq.n	8011388 <__sflush_r+0x94>
 8011382:	4628      	mov	r0, r5
 8011384:	f7ff fbce 	bl	8010b24 <_free_r>
 8011388:	2000      	movs	r0, #0
 801138a:	6360      	str	r0, [r4, #52]	; 0x34
 801138c:	e7c0      	b.n	8011310 <__sflush_r+0x1c>
 801138e:	2301      	movs	r3, #1
 8011390:	4628      	mov	r0, r5
 8011392:	47b0      	blx	r6
 8011394:	1c41      	adds	r1, r0, #1
 8011396:	d1c8      	bne.n	801132a <__sflush_r+0x36>
 8011398:	682b      	ldr	r3, [r5, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d0c5      	beq.n	801132a <__sflush_r+0x36>
 801139e:	2b1d      	cmp	r3, #29
 80113a0:	d001      	beq.n	80113a6 <__sflush_r+0xb2>
 80113a2:	2b16      	cmp	r3, #22
 80113a4:	d101      	bne.n	80113aa <__sflush_r+0xb6>
 80113a6:	602f      	str	r7, [r5, #0]
 80113a8:	e7b1      	b.n	801130e <__sflush_r+0x1a>
 80113aa:	89a3      	ldrh	r3, [r4, #12]
 80113ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113b0:	81a3      	strh	r3, [r4, #12]
 80113b2:	e7ad      	b.n	8011310 <__sflush_r+0x1c>
 80113b4:	690f      	ldr	r7, [r1, #16]
 80113b6:	2f00      	cmp	r7, #0
 80113b8:	d0a9      	beq.n	801130e <__sflush_r+0x1a>
 80113ba:	0793      	lsls	r3, r2, #30
 80113bc:	680e      	ldr	r6, [r1, #0]
 80113be:	bf08      	it	eq
 80113c0:	694b      	ldreq	r3, [r1, #20]
 80113c2:	600f      	str	r7, [r1, #0]
 80113c4:	bf18      	it	ne
 80113c6:	2300      	movne	r3, #0
 80113c8:	eba6 0807 	sub.w	r8, r6, r7
 80113cc:	608b      	str	r3, [r1, #8]
 80113ce:	f1b8 0f00 	cmp.w	r8, #0
 80113d2:	dd9c      	ble.n	801130e <__sflush_r+0x1a>
 80113d4:	6a21      	ldr	r1, [r4, #32]
 80113d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113d8:	4643      	mov	r3, r8
 80113da:	463a      	mov	r2, r7
 80113dc:	4628      	mov	r0, r5
 80113de:	47b0      	blx	r6
 80113e0:	2800      	cmp	r0, #0
 80113e2:	dc06      	bgt.n	80113f2 <__sflush_r+0xfe>
 80113e4:	89a3      	ldrh	r3, [r4, #12]
 80113e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ea:	81a3      	strh	r3, [r4, #12]
 80113ec:	f04f 30ff 	mov.w	r0, #4294967295
 80113f0:	e78e      	b.n	8011310 <__sflush_r+0x1c>
 80113f2:	4407      	add	r7, r0
 80113f4:	eba8 0800 	sub.w	r8, r8, r0
 80113f8:	e7e9      	b.n	80113ce <__sflush_r+0xda>
 80113fa:	bf00      	nop
 80113fc:	dfbffffe 	.word	0xdfbffffe

08011400 <_fflush_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	690b      	ldr	r3, [r1, #16]
 8011404:	4605      	mov	r5, r0
 8011406:	460c      	mov	r4, r1
 8011408:	b913      	cbnz	r3, 8011410 <_fflush_r+0x10>
 801140a:	2500      	movs	r5, #0
 801140c:	4628      	mov	r0, r5
 801140e:	bd38      	pop	{r3, r4, r5, pc}
 8011410:	b118      	cbz	r0, 801141a <_fflush_r+0x1a>
 8011412:	6a03      	ldr	r3, [r0, #32]
 8011414:	b90b      	cbnz	r3, 801141a <_fflush_r+0x1a>
 8011416:	f7ff f969 	bl	80106ec <__sinit>
 801141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d0f3      	beq.n	801140a <_fflush_r+0xa>
 8011422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011424:	07d0      	lsls	r0, r2, #31
 8011426:	d404      	bmi.n	8011432 <_fflush_r+0x32>
 8011428:	0599      	lsls	r1, r3, #22
 801142a:	d402      	bmi.n	8011432 <_fflush_r+0x32>
 801142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801142e:	f7ff fb4a 	bl	8010ac6 <__retarget_lock_acquire_recursive>
 8011432:	4628      	mov	r0, r5
 8011434:	4621      	mov	r1, r4
 8011436:	f7ff ff5d 	bl	80112f4 <__sflush_r>
 801143a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801143c:	07da      	lsls	r2, r3, #31
 801143e:	4605      	mov	r5, r0
 8011440:	d4e4      	bmi.n	801140c <_fflush_r+0xc>
 8011442:	89a3      	ldrh	r3, [r4, #12]
 8011444:	059b      	lsls	r3, r3, #22
 8011446:	d4e1      	bmi.n	801140c <_fflush_r+0xc>
 8011448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801144a:	f7ff fb3d 	bl	8010ac8 <__retarget_lock_release_recursive>
 801144e:	e7dd      	b.n	801140c <_fflush_r+0xc>

08011450 <fiprintf>:
 8011450:	b40e      	push	{r1, r2, r3}
 8011452:	b503      	push	{r0, r1, lr}
 8011454:	4601      	mov	r1, r0
 8011456:	ab03      	add	r3, sp, #12
 8011458:	4805      	ldr	r0, [pc, #20]	; (8011470 <fiprintf+0x20>)
 801145a:	f853 2b04 	ldr.w	r2, [r3], #4
 801145e:	6800      	ldr	r0, [r0, #0]
 8011460:	9301      	str	r3, [sp, #4]
 8011462:	f000 f915 	bl	8011690 <_vfiprintf_r>
 8011466:	b002      	add	sp, #8
 8011468:	f85d eb04 	ldr.w	lr, [sp], #4
 801146c:	b003      	add	sp, #12
 801146e:	4770      	bx	lr
 8011470:	240000c0 	.word	0x240000c0

08011474 <__swhatbuf_r>:
 8011474:	b570      	push	{r4, r5, r6, lr}
 8011476:	460c      	mov	r4, r1
 8011478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801147c:	2900      	cmp	r1, #0
 801147e:	b096      	sub	sp, #88	; 0x58
 8011480:	4615      	mov	r5, r2
 8011482:	461e      	mov	r6, r3
 8011484:	da0d      	bge.n	80114a2 <__swhatbuf_r+0x2e>
 8011486:	89a3      	ldrh	r3, [r4, #12]
 8011488:	f013 0f80 	tst.w	r3, #128	; 0x80
 801148c:	f04f 0100 	mov.w	r1, #0
 8011490:	bf0c      	ite	eq
 8011492:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011496:	2340      	movne	r3, #64	; 0x40
 8011498:	2000      	movs	r0, #0
 801149a:	6031      	str	r1, [r6, #0]
 801149c:	602b      	str	r3, [r5, #0]
 801149e:	b016      	add	sp, #88	; 0x58
 80114a0:	bd70      	pop	{r4, r5, r6, pc}
 80114a2:	466a      	mov	r2, sp
 80114a4:	f000 f862 	bl	801156c <_fstat_r>
 80114a8:	2800      	cmp	r0, #0
 80114aa:	dbec      	blt.n	8011486 <__swhatbuf_r+0x12>
 80114ac:	9901      	ldr	r1, [sp, #4]
 80114ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80114b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80114b6:	4259      	negs	r1, r3
 80114b8:	4159      	adcs	r1, r3
 80114ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114be:	e7eb      	b.n	8011498 <__swhatbuf_r+0x24>

080114c0 <__smakebuf_r>:
 80114c0:	898b      	ldrh	r3, [r1, #12]
 80114c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114c4:	079d      	lsls	r5, r3, #30
 80114c6:	4606      	mov	r6, r0
 80114c8:	460c      	mov	r4, r1
 80114ca:	d507      	bpl.n	80114dc <__smakebuf_r+0x1c>
 80114cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114d0:	6023      	str	r3, [r4, #0]
 80114d2:	6123      	str	r3, [r4, #16]
 80114d4:	2301      	movs	r3, #1
 80114d6:	6163      	str	r3, [r4, #20]
 80114d8:	b002      	add	sp, #8
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	ab01      	add	r3, sp, #4
 80114de:	466a      	mov	r2, sp
 80114e0:	f7ff ffc8 	bl	8011474 <__swhatbuf_r>
 80114e4:	9900      	ldr	r1, [sp, #0]
 80114e6:	4605      	mov	r5, r0
 80114e8:	4630      	mov	r0, r6
 80114ea:	f7ff fb8f 	bl	8010c0c <_malloc_r>
 80114ee:	b948      	cbnz	r0, 8011504 <__smakebuf_r+0x44>
 80114f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114f4:	059a      	lsls	r2, r3, #22
 80114f6:	d4ef      	bmi.n	80114d8 <__smakebuf_r+0x18>
 80114f8:	f023 0303 	bic.w	r3, r3, #3
 80114fc:	f043 0302 	orr.w	r3, r3, #2
 8011500:	81a3      	strh	r3, [r4, #12]
 8011502:	e7e3      	b.n	80114cc <__smakebuf_r+0xc>
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	6020      	str	r0, [r4, #0]
 8011508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801150c:	81a3      	strh	r3, [r4, #12]
 801150e:	9b00      	ldr	r3, [sp, #0]
 8011510:	6163      	str	r3, [r4, #20]
 8011512:	9b01      	ldr	r3, [sp, #4]
 8011514:	6120      	str	r0, [r4, #16]
 8011516:	b15b      	cbz	r3, 8011530 <__smakebuf_r+0x70>
 8011518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801151c:	4630      	mov	r0, r6
 801151e:	f000 f837 	bl	8011590 <_isatty_r>
 8011522:	b128      	cbz	r0, 8011530 <__smakebuf_r+0x70>
 8011524:	89a3      	ldrh	r3, [r4, #12]
 8011526:	f023 0303 	bic.w	r3, r3, #3
 801152a:	f043 0301 	orr.w	r3, r3, #1
 801152e:	81a3      	strh	r3, [r4, #12]
 8011530:	89a3      	ldrh	r3, [r4, #12]
 8011532:	431d      	orrs	r5, r3
 8011534:	81a5      	strh	r5, [r4, #12]
 8011536:	e7cf      	b.n	80114d8 <__smakebuf_r+0x18>

08011538 <memmove>:
 8011538:	4288      	cmp	r0, r1
 801153a:	b510      	push	{r4, lr}
 801153c:	eb01 0402 	add.w	r4, r1, r2
 8011540:	d902      	bls.n	8011548 <memmove+0x10>
 8011542:	4284      	cmp	r4, r0
 8011544:	4623      	mov	r3, r4
 8011546:	d807      	bhi.n	8011558 <memmove+0x20>
 8011548:	1e43      	subs	r3, r0, #1
 801154a:	42a1      	cmp	r1, r4
 801154c:	d008      	beq.n	8011560 <memmove+0x28>
 801154e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011556:	e7f8      	b.n	801154a <memmove+0x12>
 8011558:	4402      	add	r2, r0
 801155a:	4601      	mov	r1, r0
 801155c:	428a      	cmp	r2, r1
 801155e:	d100      	bne.n	8011562 <memmove+0x2a>
 8011560:	bd10      	pop	{r4, pc}
 8011562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801156a:	e7f7      	b.n	801155c <memmove+0x24>

0801156c <_fstat_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4d07      	ldr	r5, [pc, #28]	; (801158c <_fstat_r+0x20>)
 8011570:	2300      	movs	r3, #0
 8011572:	4604      	mov	r4, r0
 8011574:	4608      	mov	r0, r1
 8011576:	4611      	mov	r1, r2
 8011578:	602b      	str	r3, [r5, #0]
 801157a:	f7ef fc87 	bl	8000e8c <_fstat>
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	d102      	bne.n	8011588 <_fstat_r+0x1c>
 8011582:	682b      	ldr	r3, [r5, #0]
 8011584:	b103      	cbz	r3, 8011588 <_fstat_r+0x1c>
 8011586:	6023      	str	r3, [r4, #0]
 8011588:	bd38      	pop	{r3, r4, r5, pc}
 801158a:	bf00      	nop
 801158c:	24005b6c 	.word	0x24005b6c

08011590 <_isatty_r>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4d06      	ldr	r5, [pc, #24]	; (80115ac <_isatty_r+0x1c>)
 8011594:	2300      	movs	r3, #0
 8011596:	4604      	mov	r4, r0
 8011598:	4608      	mov	r0, r1
 801159a:	602b      	str	r3, [r5, #0]
 801159c:	f7ef fc38 	bl	8000e10 <_isatty>
 80115a0:	1c43      	adds	r3, r0, #1
 80115a2:	d102      	bne.n	80115aa <_isatty_r+0x1a>
 80115a4:	682b      	ldr	r3, [r5, #0]
 80115a6:	b103      	cbz	r3, 80115aa <_isatty_r+0x1a>
 80115a8:	6023      	str	r3, [r4, #0]
 80115aa:	bd38      	pop	{r3, r4, r5, pc}
 80115ac:	24005b6c 	.word	0x24005b6c

080115b0 <_sbrk_r>:
 80115b0:	b538      	push	{r3, r4, r5, lr}
 80115b2:	4d06      	ldr	r5, [pc, #24]	; (80115cc <_sbrk_r+0x1c>)
 80115b4:	2300      	movs	r3, #0
 80115b6:	4604      	mov	r4, r0
 80115b8:	4608      	mov	r0, r1
 80115ba:	602b      	str	r3, [r5, #0]
 80115bc:	f7f0 fb7c 	bl	8001cb8 <_sbrk>
 80115c0:	1c43      	adds	r3, r0, #1
 80115c2:	d102      	bne.n	80115ca <_sbrk_r+0x1a>
 80115c4:	682b      	ldr	r3, [r5, #0]
 80115c6:	b103      	cbz	r3, 80115ca <_sbrk_r+0x1a>
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	bd38      	pop	{r3, r4, r5, pc}
 80115cc:	24005b6c 	.word	0x24005b6c

080115d0 <abort>:
 80115d0:	b508      	push	{r3, lr}
 80115d2:	2006      	movs	r0, #6
 80115d4:	f000 fa34 	bl	8011a40 <raise>
 80115d8:	2001      	movs	r0, #1
 80115da:	f7f0 fb62 	bl	8001ca2 <_exit>

080115de <_realloc_r>:
 80115de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e2:	4680      	mov	r8, r0
 80115e4:	4614      	mov	r4, r2
 80115e6:	460e      	mov	r6, r1
 80115e8:	b921      	cbnz	r1, 80115f4 <_realloc_r+0x16>
 80115ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ee:	4611      	mov	r1, r2
 80115f0:	f7ff bb0c 	b.w	8010c0c <_malloc_r>
 80115f4:	b92a      	cbnz	r2, 8011602 <_realloc_r+0x24>
 80115f6:	f7ff fa95 	bl	8010b24 <_free_r>
 80115fa:	4625      	mov	r5, r4
 80115fc:	4628      	mov	r0, r5
 80115fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011602:	f000 fa39 	bl	8011a78 <_malloc_usable_size_r>
 8011606:	4284      	cmp	r4, r0
 8011608:	4607      	mov	r7, r0
 801160a:	d802      	bhi.n	8011612 <_realloc_r+0x34>
 801160c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011610:	d812      	bhi.n	8011638 <_realloc_r+0x5a>
 8011612:	4621      	mov	r1, r4
 8011614:	4640      	mov	r0, r8
 8011616:	f7ff faf9 	bl	8010c0c <_malloc_r>
 801161a:	4605      	mov	r5, r0
 801161c:	2800      	cmp	r0, #0
 801161e:	d0ed      	beq.n	80115fc <_realloc_r+0x1e>
 8011620:	42bc      	cmp	r4, r7
 8011622:	4622      	mov	r2, r4
 8011624:	4631      	mov	r1, r6
 8011626:	bf28      	it	cs
 8011628:	463a      	movcs	r2, r7
 801162a:	f7ff fa4e 	bl	8010aca <memcpy>
 801162e:	4631      	mov	r1, r6
 8011630:	4640      	mov	r0, r8
 8011632:	f7ff fa77 	bl	8010b24 <_free_r>
 8011636:	e7e1      	b.n	80115fc <_realloc_r+0x1e>
 8011638:	4635      	mov	r5, r6
 801163a:	e7df      	b.n	80115fc <_realloc_r+0x1e>

0801163c <__sfputc_r>:
 801163c:	6893      	ldr	r3, [r2, #8]
 801163e:	3b01      	subs	r3, #1
 8011640:	2b00      	cmp	r3, #0
 8011642:	b410      	push	{r4}
 8011644:	6093      	str	r3, [r2, #8]
 8011646:	da08      	bge.n	801165a <__sfputc_r+0x1e>
 8011648:	6994      	ldr	r4, [r2, #24]
 801164a:	42a3      	cmp	r3, r4
 801164c:	db01      	blt.n	8011652 <__sfputc_r+0x16>
 801164e:	290a      	cmp	r1, #10
 8011650:	d103      	bne.n	801165a <__sfputc_r+0x1e>
 8011652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011656:	f000 b935 	b.w	80118c4 <__swbuf_r>
 801165a:	6813      	ldr	r3, [r2, #0]
 801165c:	1c58      	adds	r0, r3, #1
 801165e:	6010      	str	r0, [r2, #0]
 8011660:	7019      	strb	r1, [r3, #0]
 8011662:	4608      	mov	r0, r1
 8011664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011668:	4770      	bx	lr

0801166a <__sfputs_r>:
 801166a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166c:	4606      	mov	r6, r0
 801166e:	460f      	mov	r7, r1
 8011670:	4614      	mov	r4, r2
 8011672:	18d5      	adds	r5, r2, r3
 8011674:	42ac      	cmp	r4, r5
 8011676:	d101      	bne.n	801167c <__sfputs_r+0x12>
 8011678:	2000      	movs	r0, #0
 801167a:	e007      	b.n	801168c <__sfputs_r+0x22>
 801167c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011680:	463a      	mov	r2, r7
 8011682:	4630      	mov	r0, r6
 8011684:	f7ff ffda 	bl	801163c <__sfputc_r>
 8011688:	1c43      	adds	r3, r0, #1
 801168a:	d1f3      	bne.n	8011674 <__sfputs_r+0xa>
 801168c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011690 <_vfiprintf_r>:
 8011690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011694:	460d      	mov	r5, r1
 8011696:	b09d      	sub	sp, #116	; 0x74
 8011698:	4614      	mov	r4, r2
 801169a:	4698      	mov	r8, r3
 801169c:	4606      	mov	r6, r0
 801169e:	b118      	cbz	r0, 80116a8 <_vfiprintf_r+0x18>
 80116a0:	6a03      	ldr	r3, [r0, #32]
 80116a2:	b90b      	cbnz	r3, 80116a8 <_vfiprintf_r+0x18>
 80116a4:	f7ff f822 	bl	80106ec <__sinit>
 80116a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116aa:	07d9      	lsls	r1, r3, #31
 80116ac:	d405      	bmi.n	80116ba <_vfiprintf_r+0x2a>
 80116ae:	89ab      	ldrh	r3, [r5, #12]
 80116b0:	059a      	lsls	r2, r3, #22
 80116b2:	d402      	bmi.n	80116ba <_vfiprintf_r+0x2a>
 80116b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116b6:	f7ff fa06 	bl	8010ac6 <__retarget_lock_acquire_recursive>
 80116ba:	89ab      	ldrh	r3, [r5, #12]
 80116bc:	071b      	lsls	r3, r3, #28
 80116be:	d501      	bpl.n	80116c4 <_vfiprintf_r+0x34>
 80116c0:	692b      	ldr	r3, [r5, #16]
 80116c2:	b99b      	cbnz	r3, 80116ec <_vfiprintf_r+0x5c>
 80116c4:	4629      	mov	r1, r5
 80116c6:	4630      	mov	r0, r6
 80116c8:	f000 f93a 	bl	8011940 <__swsetup_r>
 80116cc:	b170      	cbz	r0, 80116ec <_vfiprintf_r+0x5c>
 80116ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116d0:	07dc      	lsls	r4, r3, #31
 80116d2:	d504      	bpl.n	80116de <_vfiprintf_r+0x4e>
 80116d4:	f04f 30ff 	mov.w	r0, #4294967295
 80116d8:	b01d      	add	sp, #116	; 0x74
 80116da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116de:	89ab      	ldrh	r3, [r5, #12]
 80116e0:	0598      	lsls	r0, r3, #22
 80116e2:	d4f7      	bmi.n	80116d4 <_vfiprintf_r+0x44>
 80116e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116e6:	f7ff f9ef 	bl	8010ac8 <__retarget_lock_release_recursive>
 80116ea:	e7f3      	b.n	80116d4 <_vfiprintf_r+0x44>
 80116ec:	2300      	movs	r3, #0
 80116ee:	9309      	str	r3, [sp, #36]	; 0x24
 80116f0:	2320      	movs	r3, #32
 80116f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80116fa:	2330      	movs	r3, #48	; 0x30
 80116fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80118b0 <_vfiprintf_r+0x220>
 8011700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011704:	f04f 0901 	mov.w	r9, #1
 8011708:	4623      	mov	r3, r4
 801170a:	469a      	mov	sl, r3
 801170c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011710:	b10a      	cbz	r2, 8011716 <_vfiprintf_r+0x86>
 8011712:	2a25      	cmp	r2, #37	; 0x25
 8011714:	d1f9      	bne.n	801170a <_vfiprintf_r+0x7a>
 8011716:	ebba 0b04 	subs.w	fp, sl, r4
 801171a:	d00b      	beq.n	8011734 <_vfiprintf_r+0xa4>
 801171c:	465b      	mov	r3, fp
 801171e:	4622      	mov	r2, r4
 8011720:	4629      	mov	r1, r5
 8011722:	4630      	mov	r0, r6
 8011724:	f7ff ffa1 	bl	801166a <__sfputs_r>
 8011728:	3001      	adds	r0, #1
 801172a:	f000 80a9 	beq.w	8011880 <_vfiprintf_r+0x1f0>
 801172e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011730:	445a      	add	r2, fp
 8011732:	9209      	str	r2, [sp, #36]	; 0x24
 8011734:	f89a 3000 	ldrb.w	r3, [sl]
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 80a1 	beq.w	8011880 <_vfiprintf_r+0x1f0>
 801173e:	2300      	movs	r3, #0
 8011740:	f04f 32ff 	mov.w	r2, #4294967295
 8011744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011748:	f10a 0a01 	add.w	sl, sl, #1
 801174c:	9304      	str	r3, [sp, #16]
 801174e:	9307      	str	r3, [sp, #28]
 8011750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011754:	931a      	str	r3, [sp, #104]	; 0x68
 8011756:	4654      	mov	r4, sl
 8011758:	2205      	movs	r2, #5
 801175a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801175e:	4854      	ldr	r0, [pc, #336]	; (80118b0 <_vfiprintf_r+0x220>)
 8011760:	f7ee fdbe 	bl	80002e0 <memchr>
 8011764:	9a04      	ldr	r2, [sp, #16]
 8011766:	b9d8      	cbnz	r0, 80117a0 <_vfiprintf_r+0x110>
 8011768:	06d1      	lsls	r1, r2, #27
 801176a:	bf44      	itt	mi
 801176c:	2320      	movmi	r3, #32
 801176e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011772:	0713      	lsls	r3, r2, #28
 8011774:	bf44      	itt	mi
 8011776:	232b      	movmi	r3, #43	; 0x2b
 8011778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801177c:	f89a 3000 	ldrb.w	r3, [sl]
 8011780:	2b2a      	cmp	r3, #42	; 0x2a
 8011782:	d015      	beq.n	80117b0 <_vfiprintf_r+0x120>
 8011784:	9a07      	ldr	r2, [sp, #28]
 8011786:	4654      	mov	r4, sl
 8011788:	2000      	movs	r0, #0
 801178a:	f04f 0c0a 	mov.w	ip, #10
 801178e:	4621      	mov	r1, r4
 8011790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011794:	3b30      	subs	r3, #48	; 0x30
 8011796:	2b09      	cmp	r3, #9
 8011798:	d94d      	bls.n	8011836 <_vfiprintf_r+0x1a6>
 801179a:	b1b0      	cbz	r0, 80117ca <_vfiprintf_r+0x13a>
 801179c:	9207      	str	r2, [sp, #28]
 801179e:	e014      	b.n	80117ca <_vfiprintf_r+0x13a>
 80117a0:	eba0 0308 	sub.w	r3, r0, r8
 80117a4:	fa09 f303 	lsl.w	r3, r9, r3
 80117a8:	4313      	orrs	r3, r2
 80117aa:	9304      	str	r3, [sp, #16]
 80117ac:	46a2      	mov	sl, r4
 80117ae:	e7d2      	b.n	8011756 <_vfiprintf_r+0xc6>
 80117b0:	9b03      	ldr	r3, [sp, #12]
 80117b2:	1d19      	adds	r1, r3, #4
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	9103      	str	r1, [sp, #12]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	bfbb      	ittet	lt
 80117bc:	425b      	neglt	r3, r3
 80117be:	f042 0202 	orrlt.w	r2, r2, #2
 80117c2:	9307      	strge	r3, [sp, #28]
 80117c4:	9307      	strlt	r3, [sp, #28]
 80117c6:	bfb8      	it	lt
 80117c8:	9204      	strlt	r2, [sp, #16]
 80117ca:	7823      	ldrb	r3, [r4, #0]
 80117cc:	2b2e      	cmp	r3, #46	; 0x2e
 80117ce:	d10c      	bne.n	80117ea <_vfiprintf_r+0x15a>
 80117d0:	7863      	ldrb	r3, [r4, #1]
 80117d2:	2b2a      	cmp	r3, #42	; 0x2a
 80117d4:	d134      	bne.n	8011840 <_vfiprintf_r+0x1b0>
 80117d6:	9b03      	ldr	r3, [sp, #12]
 80117d8:	1d1a      	adds	r2, r3, #4
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	9203      	str	r2, [sp, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	bfb8      	it	lt
 80117e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80117e6:	3402      	adds	r4, #2
 80117e8:	9305      	str	r3, [sp, #20]
 80117ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80118c0 <_vfiprintf_r+0x230>
 80117ee:	7821      	ldrb	r1, [r4, #0]
 80117f0:	2203      	movs	r2, #3
 80117f2:	4650      	mov	r0, sl
 80117f4:	f7ee fd74 	bl	80002e0 <memchr>
 80117f8:	b138      	cbz	r0, 801180a <_vfiprintf_r+0x17a>
 80117fa:	9b04      	ldr	r3, [sp, #16]
 80117fc:	eba0 000a 	sub.w	r0, r0, sl
 8011800:	2240      	movs	r2, #64	; 0x40
 8011802:	4082      	lsls	r2, r0
 8011804:	4313      	orrs	r3, r2
 8011806:	3401      	adds	r4, #1
 8011808:	9304      	str	r3, [sp, #16]
 801180a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801180e:	4829      	ldr	r0, [pc, #164]	; (80118b4 <_vfiprintf_r+0x224>)
 8011810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011814:	2206      	movs	r2, #6
 8011816:	f7ee fd63 	bl	80002e0 <memchr>
 801181a:	2800      	cmp	r0, #0
 801181c:	d03f      	beq.n	801189e <_vfiprintf_r+0x20e>
 801181e:	4b26      	ldr	r3, [pc, #152]	; (80118b8 <_vfiprintf_r+0x228>)
 8011820:	bb1b      	cbnz	r3, 801186a <_vfiprintf_r+0x1da>
 8011822:	9b03      	ldr	r3, [sp, #12]
 8011824:	3307      	adds	r3, #7
 8011826:	f023 0307 	bic.w	r3, r3, #7
 801182a:	3308      	adds	r3, #8
 801182c:	9303      	str	r3, [sp, #12]
 801182e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011830:	443b      	add	r3, r7
 8011832:	9309      	str	r3, [sp, #36]	; 0x24
 8011834:	e768      	b.n	8011708 <_vfiprintf_r+0x78>
 8011836:	fb0c 3202 	mla	r2, ip, r2, r3
 801183a:	460c      	mov	r4, r1
 801183c:	2001      	movs	r0, #1
 801183e:	e7a6      	b.n	801178e <_vfiprintf_r+0xfe>
 8011840:	2300      	movs	r3, #0
 8011842:	3401      	adds	r4, #1
 8011844:	9305      	str	r3, [sp, #20]
 8011846:	4619      	mov	r1, r3
 8011848:	f04f 0c0a 	mov.w	ip, #10
 801184c:	4620      	mov	r0, r4
 801184e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011852:	3a30      	subs	r2, #48	; 0x30
 8011854:	2a09      	cmp	r2, #9
 8011856:	d903      	bls.n	8011860 <_vfiprintf_r+0x1d0>
 8011858:	2b00      	cmp	r3, #0
 801185a:	d0c6      	beq.n	80117ea <_vfiprintf_r+0x15a>
 801185c:	9105      	str	r1, [sp, #20]
 801185e:	e7c4      	b.n	80117ea <_vfiprintf_r+0x15a>
 8011860:	fb0c 2101 	mla	r1, ip, r1, r2
 8011864:	4604      	mov	r4, r0
 8011866:	2301      	movs	r3, #1
 8011868:	e7f0      	b.n	801184c <_vfiprintf_r+0x1bc>
 801186a:	ab03      	add	r3, sp, #12
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	462a      	mov	r2, r5
 8011870:	4b12      	ldr	r3, [pc, #72]	; (80118bc <_vfiprintf_r+0x22c>)
 8011872:	a904      	add	r1, sp, #16
 8011874:	4630      	mov	r0, r6
 8011876:	f3af 8000 	nop.w
 801187a:	4607      	mov	r7, r0
 801187c:	1c78      	adds	r0, r7, #1
 801187e:	d1d6      	bne.n	801182e <_vfiprintf_r+0x19e>
 8011880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011882:	07d9      	lsls	r1, r3, #31
 8011884:	d405      	bmi.n	8011892 <_vfiprintf_r+0x202>
 8011886:	89ab      	ldrh	r3, [r5, #12]
 8011888:	059a      	lsls	r2, r3, #22
 801188a:	d402      	bmi.n	8011892 <_vfiprintf_r+0x202>
 801188c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801188e:	f7ff f91b 	bl	8010ac8 <__retarget_lock_release_recursive>
 8011892:	89ab      	ldrh	r3, [r5, #12]
 8011894:	065b      	lsls	r3, r3, #25
 8011896:	f53f af1d 	bmi.w	80116d4 <_vfiprintf_r+0x44>
 801189a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801189c:	e71c      	b.n	80116d8 <_vfiprintf_r+0x48>
 801189e:	ab03      	add	r3, sp, #12
 80118a0:	9300      	str	r3, [sp, #0]
 80118a2:	462a      	mov	r2, r5
 80118a4:	4b05      	ldr	r3, [pc, #20]	; (80118bc <_vfiprintf_r+0x22c>)
 80118a6:	a904      	add	r1, sp, #16
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7ff fc01 	bl	80110b0 <_printf_i>
 80118ae:	e7e4      	b.n	801187a <_vfiprintf_r+0x1ea>
 80118b0:	0801468f 	.word	0x0801468f
 80118b4:	08014699 	.word	0x08014699
 80118b8:	00000000 	.word	0x00000000
 80118bc:	0801166b 	.word	0x0801166b
 80118c0:	08014695 	.word	0x08014695

080118c4 <__swbuf_r>:
 80118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c6:	460e      	mov	r6, r1
 80118c8:	4614      	mov	r4, r2
 80118ca:	4605      	mov	r5, r0
 80118cc:	b118      	cbz	r0, 80118d6 <__swbuf_r+0x12>
 80118ce:	6a03      	ldr	r3, [r0, #32]
 80118d0:	b90b      	cbnz	r3, 80118d6 <__swbuf_r+0x12>
 80118d2:	f7fe ff0b 	bl	80106ec <__sinit>
 80118d6:	69a3      	ldr	r3, [r4, #24]
 80118d8:	60a3      	str	r3, [r4, #8]
 80118da:	89a3      	ldrh	r3, [r4, #12]
 80118dc:	071a      	lsls	r2, r3, #28
 80118de:	d525      	bpl.n	801192c <__swbuf_r+0x68>
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	b31b      	cbz	r3, 801192c <__swbuf_r+0x68>
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	6922      	ldr	r2, [r4, #16]
 80118e8:	1a98      	subs	r0, r3, r2
 80118ea:	6963      	ldr	r3, [r4, #20]
 80118ec:	b2f6      	uxtb	r6, r6
 80118ee:	4283      	cmp	r3, r0
 80118f0:	4637      	mov	r7, r6
 80118f2:	dc04      	bgt.n	80118fe <__swbuf_r+0x3a>
 80118f4:	4621      	mov	r1, r4
 80118f6:	4628      	mov	r0, r5
 80118f8:	f7ff fd82 	bl	8011400 <_fflush_r>
 80118fc:	b9e0      	cbnz	r0, 8011938 <__swbuf_r+0x74>
 80118fe:	68a3      	ldr	r3, [r4, #8]
 8011900:	3b01      	subs	r3, #1
 8011902:	60a3      	str	r3, [r4, #8]
 8011904:	6823      	ldr	r3, [r4, #0]
 8011906:	1c5a      	adds	r2, r3, #1
 8011908:	6022      	str	r2, [r4, #0]
 801190a:	701e      	strb	r6, [r3, #0]
 801190c:	6962      	ldr	r2, [r4, #20]
 801190e:	1c43      	adds	r3, r0, #1
 8011910:	429a      	cmp	r2, r3
 8011912:	d004      	beq.n	801191e <__swbuf_r+0x5a>
 8011914:	89a3      	ldrh	r3, [r4, #12]
 8011916:	07db      	lsls	r3, r3, #31
 8011918:	d506      	bpl.n	8011928 <__swbuf_r+0x64>
 801191a:	2e0a      	cmp	r6, #10
 801191c:	d104      	bne.n	8011928 <__swbuf_r+0x64>
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	f7ff fd6d 	bl	8011400 <_fflush_r>
 8011926:	b938      	cbnz	r0, 8011938 <__swbuf_r+0x74>
 8011928:	4638      	mov	r0, r7
 801192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801192c:	4621      	mov	r1, r4
 801192e:	4628      	mov	r0, r5
 8011930:	f000 f806 	bl	8011940 <__swsetup_r>
 8011934:	2800      	cmp	r0, #0
 8011936:	d0d5      	beq.n	80118e4 <__swbuf_r+0x20>
 8011938:	f04f 37ff 	mov.w	r7, #4294967295
 801193c:	e7f4      	b.n	8011928 <__swbuf_r+0x64>
	...

08011940 <__swsetup_r>:
 8011940:	b538      	push	{r3, r4, r5, lr}
 8011942:	4b2a      	ldr	r3, [pc, #168]	; (80119ec <__swsetup_r+0xac>)
 8011944:	4605      	mov	r5, r0
 8011946:	6818      	ldr	r0, [r3, #0]
 8011948:	460c      	mov	r4, r1
 801194a:	b118      	cbz	r0, 8011954 <__swsetup_r+0x14>
 801194c:	6a03      	ldr	r3, [r0, #32]
 801194e:	b90b      	cbnz	r3, 8011954 <__swsetup_r+0x14>
 8011950:	f7fe fecc 	bl	80106ec <__sinit>
 8011954:	89a3      	ldrh	r3, [r4, #12]
 8011956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801195a:	0718      	lsls	r0, r3, #28
 801195c:	d422      	bmi.n	80119a4 <__swsetup_r+0x64>
 801195e:	06d9      	lsls	r1, r3, #27
 8011960:	d407      	bmi.n	8011972 <__swsetup_r+0x32>
 8011962:	2309      	movs	r3, #9
 8011964:	602b      	str	r3, [r5, #0]
 8011966:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801196a:	81a3      	strh	r3, [r4, #12]
 801196c:	f04f 30ff 	mov.w	r0, #4294967295
 8011970:	e034      	b.n	80119dc <__swsetup_r+0x9c>
 8011972:	0758      	lsls	r0, r3, #29
 8011974:	d512      	bpl.n	801199c <__swsetup_r+0x5c>
 8011976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011978:	b141      	cbz	r1, 801198c <__swsetup_r+0x4c>
 801197a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801197e:	4299      	cmp	r1, r3
 8011980:	d002      	beq.n	8011988 <__swsetup_r+0x48>
 8011982:	4628      	mov	r0, r5
 8011984:	f7ff f8ce 	bl	8010b24 <_free_r>
 8011988:	2300      	movs	r3, #0
 801198a:	6363      	str	r3, [r4, #52]	; 0x34
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011992:	81a3      	strh	r3, [r4, #12]
 8011994:	2300      	movs	r3, #0
 8011996:	6063      	str	r3, [r4, #4]
 8011998:	6923      	ldr	r3, [r4, #16]
 801199a:	6023      	str	r3, [r4, #0]
 801199c:	89a3      	ldrh	r3, [r4, #12]
 801199e:	f043 0308 	orr.w	r3, r3, #8
 80119a2:	81a3      	strh	r3, [r4, #12]
 80119a4:	6923      	ldr	r3, [r4, #16]
 80119a6:	b94b      	cbnz	r3, 80119bc <__swsetup_r+0x7c>
 80119a8:	89a3      	ldrh	r3, [r4, #12]
 80119aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119b2:	d003      	beq.n	80119bc <__swsetup_r+0x7c>
 80119b4:	4621      	mov	r1, r4
 80119b6:	4628      	mov	r0, r5
 80119b8:	f7ff fd82 	bl	80114c0 <__smakebuf_r>
 80119bc:	89a0      	ldrh	r0, [r4, #12]
 80119be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119c2:	f010 0301 	ands.w	r3, r0, #1
 80119c6:	d00a      	beq.n	80119de <__swsetup_r+0x9e>
 80119c8:	2300      	movs	r3, #0
 80119ca:	60a3      	str	r3, [r4, #8]
 80119cc:	6963      	ldr	r3, [r4, #20]
 80119ce:	425b      	negs	r3, r3
 80119d0:	61a3      	str	r3, [r4, #24]
 80119d2:	6923      	ldr	r3, [r4, #16]
 80119d4:	b943      	cbnz	r3, 80119e8 <__swsetup_r+0xa8>
 80119d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119da:	d1c4      	bne.n	8011966 <__swsetup_r+0x26>
 80119dc:	bd38      	pop	{r3, r4, r5, pc}
 80119de:	0781      	lsls	r1, r0, #30
 80119e0:	bf58      	it	pl
 80119e2:	6963      	ldrpl	r3, [r4, #20]
 80119e4:	60a3      	str	r3, [r4, #8]
 80119e6:	e7f4      	b.n	80119d2 <__swsetup_r+0x92>
 80119e8:	2000      	movs	r0, #0
 80119ea:	e7f7      	b.n	80119dc <__swsetup_r+0x9c>
 80119ec:	240000c0 	.word	0x240000c0

080119f0 <_raise_r>:
 80119f0:	291f      	cmp	r1, #31
 80119f2:	b538      	push	{r3, r4, r5, lr}
 80119f4:	4604      	mov	r4, r0
 80119f6:	460d      	mov	r5, r1
 80119f8:	d904      	bls.n	8011a04 <_raise_r+0x14>
 80119fa:	2316      	movs	r3, #22
 80119fc:	6003      	str	r3, [r0, #0]
 80119fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011a06:	b112      	cbz	r2, 8011a0e <_raise_r+0x1e>
 8011a08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a0c:	b94b      	cbnz	r3, 8011a22 <_raise_r+0x32>
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f000 f830 	bl	8011a74 <_getpid_r>
 8011a14:	462a      	mov	r2, r5
 8011a16:	4601      	mov	r1, r0
 8011a18:	4620      	mov	r0, r4
 8011a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a1e:	f000 b817 	b.w	8011a50 <_kill_r>
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	d00a      	beq.n	8011a3c <_raise_r+0x4c>
 8011a26:	1c59      	adds	r1, r3, #1
 8011a28:	d103      	bne.n	8011a32 <_raise_r+0x42>
 8011a2a:	2316      	movs	r3, #22
 8011a2c:	6003      	str	r3, [r0, #0]
 8011a2e:	2001      	movs	r0, #1
 8011a30:	e7e7      	b.n	8011a02 <_raise_r+0x12>
 8011a32:	2400      	movs	r4, #0
 8011a34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a38:	4628      	mov	r0, r5
 8011a3a:	4798      	blx	r3
 8011a3c:	2000      	movs	r0, #0
 8011a3e:	e7e0      	b.n	8011a02 <_raise_r+0x12>

08011a40 <raise>:
 8011a40:	4b02      	ldr	r3, [pc, #8]	; (8011a4c <raise+0xc>)
 8011a42:	4601      	mov	r1, r0
 8011a44:	6818      	ldr	r0, [r3, #0]
 8011a46:	f7ff bfd3 	b.w	80119f0 <_raise_r>
 8011a4a:	bf00      	nop
 8011a4c:	240000c0 	.word	0x240000c0

08011a50 <_kill_r>:
 8011a50:	b538      	push	{r3, r4, r5, lr}
 8011a52:	4d07      	ldr	r5, [pc, #28]	; (8011a70 <_kill_r+0x20>)
 8011a54:	2300      	movs	r3, #0
 8011a56:	4604      	mov	r4, r0
 8011a58:	4608      	mov	r0, r1
 8011a5a:	4611      	mov	r1, r2
 8011a5c:	602b      	str	r3, [r5, #0]
 8011a5e:	f7f0 f910 	bl	8001c82 <_kill>
 8011a62:	1c43      	adds	r3, r0, #1
 8011a64:	d102      	bne.n	8011a6c <_kill_r+0x1c>
 8011a66:	682b      	ldr	r3, [r5, #0]
 8011a68:	b103      	cbz	r3, 8011a6c <_kill_r+0x1c>
 8011a6a:	6023      	str	r3, [r4, #0]
 8011a6c:	bd38      	pop	{r3, r4, r5, pc}
 8011a6e:	bf00      	nop
 8011a70:	24005b6c 	.word	0x24005b6c

08011a74 <_getpid_r>:
 8011a74:	f7f0 b8fd 	b.w	8001c72 <_getpid>

08011a78 <_malloc_usable_size_r>:
 8011a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a7c:	1f18      	subs	r0, r3, #4
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	bfbc      	itt	lt
 8011a82:	580b      	ldrlt	r3, [r1, r0]
 8011a84:	18c0      	addlt	r0, r0, r3
 8011a86:	4770      	bx	lr

08011a88 <_gettimeofday>:
 8011a88:	4b02      	ldr	r3, [pc, #8]	; (8011a94 <_gettimeofday+0xc>)
 8011a8a:	2258      	movs	r2, #88	; 0x58
 8011a8c:	601a      	str	r2, [r3, #0]
 8011a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a92:	4770      	bx	lr
 8011a94:	24005b6c 	.word	0x24005b6c

08011a98 <_init>:
 8011a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a9a:	bf00      	nop
 8011a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a9e:	bc08      	pop	{r3}
 8011aa0:	469e      	mov	lr, r3
 8011aa2:	4770      	bx	lr

08011aa4 <_fini>:
 8011aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa6:	bf00      	nop
 8011aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aaa:	bc08      	pop	{r3}
 8011aac:	469e      	mov	lr, r3
 8011aae:	4770      	bx	lr

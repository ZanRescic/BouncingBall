
STM32H750B-DK_BSP_C_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  08011a90  08011a90  00021a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080146a0  080146a0  000246a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080146a8  080146a8  000246a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080146ac  080146ac  000246ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c4  24000000  080146b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005ab8  240000c4  08014774  000300c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24005b7c  08014774  00035b7c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300f2  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003ab09  00000000  00000000  00030135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006db1  00000000  00000000  0006ac3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b90  00000000  00000000  000719f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021e2  00000000  00000000  00074580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004361d  00000000  00000000  00076762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b042  00000000  00000000  000b9d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ac61b  00000000  00000000  000f4dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c544  00000000  00000000  002a13dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000091  00000000  00000000  002ad920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c4 	.word	0x240000c4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011a78 	.word	0x08011a78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c8 	.word	0x240000c8
 80002dc:	08011a78 	.word	0x08011a78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <Init_TIM3>:
/*
 * Init and start TIM3 in Interrupt mode
 *
 * */

HAL_StatusTypeDef Init_TIM3(TIM_HandleTypeDef* TIMHandle) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b092      	sub	sp, #72	; 0x48
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

	RCC_ClkInitTypeDef    clkconfig;
	volatile uint32_t uwTimclock = 0U;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint32_t uwPrescalerValue = 0U;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
	volatile uint32_t uwAPB1Prescaler = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
	volatile uint32_t HCLKFreq;
	volatile uint32_t APB1Freq;
	volatile uint32_t APB2Freq;

	/*Configure the TIM3 IRQ priority */
	HAL_NVIC_SetPriority(TIM3_IRQn, TICK_INT_PRIORITY, 0U);
 8000690:	2200      	movs	r2, #0
 8000692:	210f      	movs	r1, #15
 8000694:	201d      	movs	r0, #29
 8000696:	f004 fa28 	bl	8004aea <HAL_NVIC_SetPriority>
	/* Enable the TIM3 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800069a:	201d      	movs	r0, #29
 800069c:	f004 fa3f 	bl	8004b1e <HAL_NVIC_EnableIRQ>
	/* Enable TIM6 clock */
	__HAL_RCC_TIM3_CLK_ENABLE();
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <Init_TIM3+0xc4>)
 80006a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006a6:	4a26      	ldr	r2, [pc, #152]	; (8000740 <Init_TIM3+0xc4>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80006b0:	4b23      	ldr	r3, [pc, #140]	; (8000740 <Init_TIM3+0xc4>)
 80006b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]

	// Find out the TIM3 CLK frequency:
    SysClockFreq = HAL_RCC_GetSysClockFreq();
 80006be:	f008 fedd 	bl	800947c <HAL_RCC_GetSysClockFreq>
 80006c2:	4603      	mov	r3, r0
 80006c4:	61bb      	str	r3, [r7, #24]
	HCLKFreq = HAL_RCC_GetHCLKFreq();
 80006c6:	f009 f853 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 80006ca:	4603      	mov	r3, r0
 80006cc:	617b      	str	r3, [r7, #20]
	APB1Freq = HAL_RCC_GetPCLK1Freq();
 80006ce:	f009 f87f 	bl	80097d0 <HAL_RCC_GetPCLK1Freq>
 80006d2:	4603      	mov	r3, r0
 80006d4:	613b      	str	r3, [r7, #16]
	//APB2Freq = HAL_RCC_GetPCLK2Freq();
	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006d8:	61fb      	str	r3, [r7, #28]
	/* Compute TIMERs clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <Init_TIM3+0x6a>
	{
		uwTimclock = APB1Freq; // if PPRE1 bits in RCC_CFGR are 0XX (APB1 Prescaler = 1), then TIMs run at APB1 clk)
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
 80006e4:	e002      	b.n	80006ec <Init_TIM3+0x70>
	}
	else
	{
	  uwTimclock = 2*APB1Freq; // if PPRE1 bits in RCC_CFGR are 1XX (APB1 Prescaler > 1), then TIMs run at 2*APB1 clk)
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Compute the prescaler value to have TIM3 counter clock equal to 1 MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <Init_TIM3+0xc8>)
 80006f0:	fba2 2303 	umull	r2, r3, r2, r3
 80006f4:	0c9b      	lsrs	r3, r3, #18
 80006f6:	3b01      	subs	r3, #1
 80006f8:	623b      	str	r3, [r7, #32]
	/* Initialize TIM3 */
	TIMHandle->Instance = TIM3;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <Init_TIM3+0xcc>)
 80006fe:	601a      	str	r2, [r3, #0]
	TIMHandle->Init.Period = 65535U;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000706:	60da      	str	r2, [r3, #12]
	TIMHandle->Init.Prescaler = uwPrescalerValue;
 8000708:	6a3a      	ldr	r2, [r7, #32]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	605a      	str	r2, [r3, #4]
	TIMHandle->Init.ClockDivision = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	TIMHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
	TIMHandle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]

	if(HAL_TIM_Base_Init(TIMHandle) == HAL_OK)
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f00a ff50 	bl	800b5c6 <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <Init_TIM3+0xba>
	{
		/* Start the TIM time Base generation in interrupt mode */
		//return HAL_TIM_Base_Start_IT(TIMHandle);
		return HAL_TIM_Base_Start(TIMHandle);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f00a ffab 	bl	800b688 <HAL_TIM_Base_Start>
 8000732:	4603      	mov	r3, r0
 8000734:	e000      	b.n	8000738 <Init_TIM3+0xbc>
	}
	/* Return function status */
	return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3748      	adds	r7, #72	; 0x48
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024400 	.word	0x58024400
 8000744:	431bde83 	.word	0x431bde83
 8000748:	40000400 	.word	0x40000400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
  */
  HAL_Init();
 8000750:	f004 f81e 	bl	8004790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8000754:	f000 fa82 	bl	8000c5c <SystemClock_Config>
  //MX_ADC3_Init();

  /* USER CODE BEGIN 2 */

  /* Configure the User push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000758:	2101      	movs	r1, #1
 800075a:	2000      	movs	r0, #0
 800075c:	f002 f854 	bl	8002808 <BSP_PB_Init>

  /* Configure TIM3 timebase */
  Init_TIM3(&TIM3Handle);
 8000760:	4848      	ldr	r0, [pc, #288]	; (8000884 <main+0x138>)
 8000762:	f7ff ff8b 	bl	800067c <Init_TIM3>

  /* Init UART3*/
  if (USART3_Init(&UART3Handle) != HAL_OK){
 8000766:	4848      	ldr	r0, [pc, #288]	; (8000888 <main+0x13c>)
 8000768:	f001 fb52 	bl	8001e10 <USART3_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <main+0x2a>
	  Error_Handler();
 8000772:	f000 fb1a 	bl	8000daa <Error_Handler>
  }
  RetargetInit(&UART3Handle);
 8000776:	4844      	ldr	r0, [pc, #272]	; (8000888 <main+0x13c>)
 8000778:	f000 fb20 	bl	8000dbc <RetargetInit>

  //Drawing content
  Init_LCD_TS();
 800077c:	f000 f8a8 	bl	80008d0 <Init_LCD_TS>
  Display_InitialContent();
 8000780:	f000 f8d4 	bl	800092c <Display_InitialContent>
  DrawBall(true);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f917 	bl	80009b8 <DrawBall>
  while (1){

	  /* Get Touch screen position */
	  BSP_TS_GetState(0, &TS_State);
 800078a:	4940      	ldr	r1, [pc, #256]	; (800088c <main+0x140>)
 800078c:	2000      	movs	r0, #0
 800078e:	f003 fe87 	bl	80044a0 <BSP_TS_GetState>

	  /* Get the x & y coords */
	  x = TS_State.TouchX;
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <main+0x140>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	b29a      	uxth	r2, r3
 8000798:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <main+0x144>)
 800079a:	801a      	strh	r2, [r3, #0]
	  y = TS_State.TouchY;
 800079c:	4b3b      	ldr	r3, [pc, #236]	; (800088c <main+0x140>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4b3c      	ldr	r3, [pc, #240]	; (8000894 <main+0x148>)
 80007a4:	801a      	strh	r2, [r3, #0]

	  if ((y >= ball.y-10 && y <= ball.y+10) && (x >= ball.x-10 && x <= ball.x+10)) {
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <main+0x148>)
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <main+0x14c>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	3b0a      	subs	r3, #10
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dbe9      	blt.n	800078a <main+0x3e>
 80007b6:	4b37      	ldr	r3, [pc, #220]	; (8000894 <main+0x148>)
 80007b8:	881b      	ldrh	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <main+0x14c>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	330a      	adds	r3, #10
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dce1      	bgt.n	800078a <main+0x3e>
 80007c6:	4b32      	ldr	r3, [pc, #200]	; (8000890 <main+0x144>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	4b32      	ldr	r3, [pc, #200]	; (8000898 <main+0x14c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b0a      	subs	r3, #10
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dbd9      	blt.n	800078a <main+0x3e>
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <main+0x144>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <main+0x14c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	330a      	adds	r3, #10
 80007e2:	429a      	cmp	r2, r3
 80007e4:	dcd1      	bgt.n	800078a <main+0x3e>
		  UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 80007e6:	482d      	ldr	r0, [pc, #180]	; (800089c <main+0x150>)
 80007e8:	f000 fcc6 	bl	8001178 <UTIL_LCD_Clear>
		  /* Start the game timer */
		  start_time = HAL_GetTick(); // Get the current tick count
 80007ec:	f004 f856 	bl	800489c <HAL_GetTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <main+0x154>)
 80007f4:	6013      	str	r3, [r2, #0]

		  PlayGame();
 80007f6:	f000 f915 	bl	8000a24 <PlayGame>

		  /* Time played */
		  time_elapsed = HAL_GetTick() - start_time;
 80007fa:	f004 f84f 	bl	800489c <HAL_GetTick>
 80007fe:	4602      	mov	r2, r0
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <main+0x154>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	4a27      	ldr	r2, [pc, #156]	; (80008a4 <main+0x158>)
 8000808:	6013      	str	r3, [r2, #0]
		  break;
 800080a:	bf00      	nop
	  }
  }


  /* Game score displayed */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 800080c:	4823      	ldr	r0, [pc, #140]	; (800089c <main+0x150>)
 800080e:	f000 fcb3 	bl	8001178 <UTIL_LCD_Clear>

  sprintf((char*)time_str, "Score: %d", counter);
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <main+0x15c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	4924      	ldr	r1, [pc, #144]	; (80008ac <main+0x160>)
 800081a:	4825      	ldr	r0, [pc, #148]	; (80008b0 <main+0x164>)
 800081c:	f010 f83a 	bl	8010894 <siprintf>
  UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)time_str, CENTER_MODE);
 8000820:	2301      	movs	r3, #1
 8000822:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <main+0x164>)
 8000824:	210f      	movs	r1, #15
 8000826:	2000      	movs	r0, #0
 8000828:	f000 fcf2 	bl	8001210 <UTIL_LCD_DisplayStringAt>

  sprintf((char *)time_str, "Time: %lu s", (time_elapsed / 1000));
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <main+0x158>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <main+0x168>)
 8000832:	fba2 2303 	umull	r2, r3, r2, r3
 8000836:	099b      	lsrs	r3, r3, #6
 8000838:	461a      	mov	r2, r3
 800083a:	491f      	ldr	r1, [pc, #124]	; (80008b8 <main+0x16c>)
 800083c:	481c      	ldr	r0, [pc, #112]	; (80008b0 <main+0x164>)
 800083e:	f010 f829 	bl	8010894 <siprintf>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)time_str, CENTER_MODE);
 8000842:	2301      	movs	r3, #1
 8000844:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <main+0x164>)
 8000846:	212d      	movs	r1, #45	; 0x2d
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fce1 	bl	8001210 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DisplayStringAt(0, 75, (uint8_t *)"To play again click on", CENTER_MODE);
 800084e:	2301      	movs	r3, #1
 8000850:	4a1a      	ldr	r2, [pc, #104]	; (80008bc <main+0x170>)
 8000852:	214b      	movs	r1, #75	; 0x4b
 8000854:	2000      	movs	r0, #0
 8000856:	f000 fcdb 	bl	8001210 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 95, (uint8_t *)"the reset button", CENTER_MODE);
 800085a:	2301      	movs	r3, #1
 800085c:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <main+0x174>)
 800085e:	215f      	movs	r1, #95	; 0x5f
 8000860:	2000      	movs	r0, #0
 8000862:	f000 fcd5 	bl	8001210 <UTIL_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000866:	f00d f8e7 	bl	800da38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800086a:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <main+0x178>)
 800086c:	2100      	movs	r1, #0
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <main+0x17c>)
 8000870:	f00d f92c 	bl	800dacc <osThreadNew>
 8000874:	4603      	mov	r3, r0
 8000876:	4a15      	ldr	r2, [pc, #84]	; (80008cc <main+0x180>)
 8000878:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800087a:	f00d f901 	bl	800da80 <osKernelStart>
 800087e:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000880:	4618      	mov	r0, r3
 8000882:	bd80      	pop	{r7, pc}
 8000884:	240001b8 	.word	0x240001b8
 8000888:	24000124 	.word	0x24000124
 800088c:	24000118 	.word	0x24000118
 8000890:	240000f0 	.word	0x240000f0
 8000894:	240000f2 	.word	0x240000f2
 8000898:	24000204 	.word	0x24000204
 800089c:	ff8080ff 	.word	0xff8080ff
 80008a0:	240000f8 	.word	0x240000f8
 80008a4:	240000fc 	.word	0x240000fc
 80008a8:	24000114 	.word	0x24000114
 80008ac:	08011a9c 	.word	0x08011a9c
 80008b0:	24000100 	.word	0x24000100
 80008b4:	10624dd3 	.word	0x10624dd3
 80008b8:	08011aa8 	.word	0x08011aa8
 80008bc:	08011ab4 	.word	0x08011ab4
 80008c0:	08011acc 	.word	0x08011acc
 80008c4:	08011b28 	.word	0x08011b28
 80008c8:	08000d89 	.word	0x08000d89
 80008cc:	240000e0 	.word	0x240000e0

080008d0 <Init_LCD_TS>:


static void Init_LCD_TS(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
	/*LCD Init*/
	BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 80008d6:	2101      	movs	r1, #1
 80008d8:	2000      	movs	r0, #0
 80008da:	f002 fca3 	bl	8003224 <BSP_LCD_Init>
	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 80008de:	4810      	ldr	r0, [pc, #64]	; (8000920 <Init_LCD_TS+0x50>)
 80008e0:	f000 fb32 	bl	8000f48 <UTIL_LCD_SetFuncDriver>
	BSP_LCD_GetXSize(0, &x_size);
 80008e4:	490f      	ldr	r1, [pc, #60]	; (8000924 <Init_LCD_TS+0x54>)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f002 fe78 	bl	80035dc <BSP_LCD_GetXSize>
	BSP_LCD_GetYSize(0, &y_size);
 80008ec:	490e      	ldr	r1, [pc, #56]	; (8000928 <Init_LCD_TS+0x58>)
 80008ee:	2000      	movs	r0, #0
 80008f0:	f002 fe92 	bl	8003618 <BSP_LCD_GetYSize>

	/*TS Init*/
	TS_Init_t *TS_Init;
	TS_Init->Width = x_size;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <Init_LCD_TS+0x54>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	601a      	str	r2, [r3, #0]
	TS_Init->Height = y_size;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <Init_LCD_TS+0x58>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	605a      	str	r2, [r3, #4]
	TS_Init->Orientation = TS_SWAP_XY;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2208      	movs	r2, #8
 8000908:	609a      	str	r2, [r3, #8]
	TS_Init->Accuracy = 1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	60da      	str	r2, [r3, #12]
	BSP_TS_Init(0, TS_Init);
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	2000      	movs	r0, #0
 8000914:	f003 fd1e 	bl	8004354 <BSP_TS_Init>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	0801457c 	.word	0x0801457c
 8000924:	240000e8 	.word	0x240000e8
 8000928:	240000ec 	.word	0x240000ec

0800092c <Display_InitialContent>:

static void Display_InitialContent(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af02      	add	r7, sp, #8
	/*Get width & height*/
	BSP_LCD_GetXSize(0, &x_size);
 8000932:	491a      	ldr	r1, [pc, #104]	; (800099c <Display_InitialContent+0x70>)
 8000934:	2000      	movs	r0, #0
 8000936:	f002 fe51 	bl	80035dc <BSP_LCD_GetXSize>
	BSP_LCD_GetYSize(0, &y_size);
 800093a:	4919      	ldr	r1, [pc, #100]	; (80009a0 <Display_InitialContent+0x74>)
 800093c:	2000      	movs	r0, #0
 800093e:	f002 fe6b 	bl	8003618 <BSP_LCD_GetYSize>

	/* Clear the LCD */
	UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_LIGHTBLUE);
 8000942:	4818      	ldr	r0, [pc, #96]	; (80009a4 <Display_InitialContent+0x78>)
 8000944:	f000 fb6a 	bl	800101c <UTIL_LCD_SetBackColor>
	UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 8000948:	4816      	ldr	r0, [pc, #88]	; (80009a4 <Display_InitialContent+0x78>)
 800094a:	f000 fc15 	bl	8001178 <UTIL_LCD_Clear>
	BSP_LCD_FillRect(0, 0, 0, x_size, y_size, UTIL_LCD_COLOR_LIGHTBLUE);
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <Display_InitialContent+0x70>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <Display_InitialContent+0x74>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4913      	ldr	r1, [pc, #76]	; (80009a4 <Display_InitialContent+0x78>)
 8000958:	9101      	str	r1, [sp, #4]
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	4613      	mov	r3, r2
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f003 f826 	bl	80039b4 <BSP_LCD_FillRect>

	/* Set the LCD Text Color */
	UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8000968:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800096c:	f000 fb42 	bl	8000ff4 <UTIL_LCD_SetTextColor>

	/* Display LCD messages */
	UTIL_LCD_SetFont(&Font24);
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <Display_InitialContent+0x7c>)
 8000972:	f000 fb67 	bl	8001044 <UTIL_LCD_SetFont>
	UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)"BOUNCING BALL", CENTER_MODE);
 8000976:	2301      	movs	r3, #1
 8000978:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <Display_InitialContent+0x80>)
 800097a:	210f      	movs	r1, #15
 800097c:	2000      	movs	r0, #0
 800097e:	f000 fc47 	bl	8001210 <UTIL_LCD_DisplayStringAt>

	UTIL_LCD_SetFont(&Font20);
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <Display_InitialContent+0x84>)
 8000984:	f000 fb5e 	bl	8001044 <UTIL_LCD_SetFont>
	UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"Click on the ball to start", CENTER_MODE);
 8000988:	2301      	movs	r3, #1
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <Display_InitialContent+0x88>)
 800098c:	212d      	movs	r1, #45	; 0x2d
 800098e:	2000      	movs	r0, #0
 8000990:	f000 fc3e 	bl	8001210 <UTIL_LCD_DisplayStringAt>

}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	240000e8 	.word	0x240000e8
 80009a0:	240000ec 	.word	0x240000ec
 80009a4:	ff8080ff 	.word	0xff8080ff
 80009a8:	24000000 	.word	0x24000000
 80009ac:	08011ae0 	.word	0x08011ae0
 80009b0:	24000008 	.word	0x24000008
 80009b4:	08011af0 	.word	0x08011af0

080009b8 <DrawBall>:

static void DrawBall(bool b)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	if (b){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d015      	beq.n	80009f4 <DrawBall+0x3c>
		/*Create ball object*/
		ball.radius = 22;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <DrawBall+0x60>)
 80009ca:	2216      	movs	r2, #22
 80009cc:	611a      	str	r2, [r3, #16]
		ball.x = x_size/2;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <DrawBall+0x64>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <DrawBall+0x60>)
 80009d8:	601a      	str	r2, [r3, #0]
		ball.y = y_size/2+50;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <DrawBall+0x68>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	085b      	lsrs	r3, r3, #1
 80009e0:	3332      	adds	r3, #50	; 0x32
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <DrawBall+0x60>)
 80009e6:	605a      	str	r2, [r3, #4]
		ball.vx = 0;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <DrawBall+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
		ball.vy = 0;
 80009ee:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <DrawBall+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
	}

	/*Draw ball*/
	UTIL_LCD_FillCircle(ball.x, ball.y, ball.radius, UTIL_LCD_COLOR_BLACK);
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <DrawBall+0x60>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <DrawBall+0x60>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <DrawBall+0x60>)
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	461a      	mov	r2, r3
 8000a06:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a0a:	f000 fdf3 	bl	80015f4 <UTIL_LCD_FillCircle>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	24000204 	.word	0x24000204
 8000a1c:	240000e8 	.word	0x240000e8
 8000a20:	240000ec 	.word	0x240000ec

08000a24 <PlayGame>:

static void PlayGame(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
	srand(time(0));
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f00f ff9e 	bl	801096c <time>
 8000a30:	4602      	mov	r2, r0
 8000a32:	460b      	mov	r3, r1
 8000a34:	4613      	mov	r3, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00f fd50 	bl	80104dc <srand>
	int lower = -5, upper = 5;
 8000a3c:	f06f 0304 	mvn.w	r3, #4
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	2305      	movs	r3, #5
 8000a44:	60bb      	str	r3, [r7, #8]
	int random_number;
	while(1){
		/* Get Touch screen position */
		BSP_TS_GetState(0, &TS_State);
 8000a46:	496f      	ldr	r1, [pc, #444]	; (8000c04 <PlayGame+0x1e0>)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f003 fd29 	bl	80044a0 <BSP_TS_GetState>

		/*Get the x & y coords*/
		x = TS_State.TouchX;
 8000a4e:	4b6d      	ldr	r3, [pc, #436]	; (8000c04 <PlayGame+0x1e0>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	4b6c      	ldr	r3, [pc, #432]	; (8000c08 <PlayGame+0x1e4>)
 8000a56:	801a      	strh	r2, [r3, #0]
		y = TS_State.TouchY;
 8000a58:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <PlayGame+0x1e0>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b6b      	ldr	r3, [pc, #428]	; (8000c0c <PlayGame+0x1e8>)
 8000a60:	801a      	strh	r2, [r3, #0]

		/* Update the ball's position */
		ball.vy += 1; // gravity
 8000a62:	4b6b      	ldr	r3, [pc, #428]	; (8000c10 <PlayGame+0x1ec>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	3301      	adds	r3, #1
 8000a68:	4a69      	ldr	r2, [pc, #420]	; (8000c10 <PlayGame+0x1ec>)
 8000a6a:	60d3      	str	r3, [r2, #12]
		ball.x += ball.vx;
 8000a6c:	4b68      	ldr	r3, [pc, #416]	; (8000c10 <PlayGame+0x1ec>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	4b67      	ldr	r3, [pc, #412]	; (8000c10 <PlayGame+0x1ec>)
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	4413      	add	r3, r2
 8000a76:	4a66      	ldr	r2, [pc, #408]	; (8000c10 <PlayGame+0x1ec>)
 8000a78:	6013      	str	r3, [r2, #0]
		ball.y += ball.vy;
 8000a7a:	4b65      	ldr	r3, [pc, #404]	; (8000c10 <PlayGame+0x1ec>)
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <PlayGame+0x1ec>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <PlayGame+0x1ec>)
 8000a86:	6053      	str	r3, [r2, #4]

		UTIL_LCD_Clear(UTIL_LCD_COLOR_LIGHTBLUE);
 8000a88:	4862      	ldr	r0, [pc, #392]	; (8000c14 <PlayGame+0x1f0>)
 8000a8a:	f000 fb75 	bl	8001178 <UTIL_LCD_Clear>

		/*Draw ball and score*/
		sprintf((char*)time_str, "%d", counter);
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <PlayGame+0x1f4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4961      	ldr	r1, [pc, #388]	; (8000c1c <PlayGame+0x1f8>)
 8000a96:	4862      	ldr	r0, [pc, #392]	; (8000c20 <PlayGame+0x1fc>)
 8000a98:	f00f fefc 	bl	8010894 <siprintf>
		UTIL_LCD_DisplayStringAt(0, 15, (uint8_t *)time_str, CENTER_MODE);
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	4a60      	ldr	r2, [pc, #384]	; (8000c20 <PlayGame+0x1fc>)
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 fbb4 	bl	8001210 <UTIL_LCD_DisplayStringAt>
		DrawBall(false);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff ff85 	bl	80009b8 <DrawBall>

		/*Check if the ball is touched*/
		if ((y >= ball.y-ball.radius/2 && y <= ball.y+ball.radius/2) && (x >= ball.x-ball.radius/2 && x <= ball.x+ball.radius/2)) {
 8000aae:	4b57      	ldr	r3, [pc, #348]	; (8000c0c <PlayGame+0x1e8>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <PlayGame+0x1ec>)
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4b55      	ldr	r3, [pc, #340]	; (8000c10 <PlayGame+0x1ec>)
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	da00      	bge.n	8000ac2 <PlayGame+0x9e>
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	105b      	asrs	r3, r3, #1
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4299      	cmp	r1, r3
 8000aca:	db5d      	blt.n	8000b88 <PlayGame+0x164>
 8000acc:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <PlayGame+0x1e8>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4b4f      	ldr	r3, [pc, #316]	; (8000c10 <PlayGame+0x1ec>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <PlayGame+0x1ec>)
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da00      	bge.n	8000ae0 <PlayGame+0xbc>
 8000ade:	3301      	adds	r3, #1
 8000ae0:	105b      	asrs	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	dc4f      	bgt.n	8000b88 <PlayGame+0x164>
 8000ae8:	4b47      	ldr	r3, [pc, #284]	; (8000c08 <PlayGame+0x1e4>)
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4b48      	ldr	r3, [pc, #288]	; (8000c10 <PlayGame+0x1ec>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <PlayGame+0x1ec>)
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	da00      	bge.n	8000afc <PlayGame+0xd8>
 8000afa:	3301      	adds	r3, #1
 8000afc:	105b      	asrs	r3, r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	4413      	add	r3, r2
 8000b02:	4299      	cmp	r1, r3
 8000b04:	db40      	blt.n	8000b88 <PlayGame+0x164>
 8000b06:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <PlayGame+0x1e4>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <PlayGame+0x1ec>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <PlayGame+0x1ec>)
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <PlayGame+0xf6>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	dc32      	bgt.n	8000b88 <PlayGame+0x164>
			/*Random generator for horizontal bounce*/
			random_number = (rand() % (upper - lower + 1)) + lower;
 8000b22:	f00f fd09 	bl	8010538 <rand>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	1acb      	subs	r3, r1, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b34:	fb01 f303 	mul.w	r3, r1, r3
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	607b      	str	r3, [r7, #4]

			ball.vy += -10; // kick the ball up
 8000b40:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <PlayGame+0x1ec>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	3b0a      	subs	r3, #10
 8000b46:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <PlayGame+0x1ec>)
 8000b48:	60d3      	str	r3, [r2, #12]
			ball.vx += random_number; // kick the ball sideways
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <PlayGame+0x1ec>)
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a2f      	ldr	r2, [pc, #188]	; (8000c10 <PlayGame+0x1ec>)
 8000b54:	6093      	str	r3, [r2, #8]
			if(x != px && y != py){
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <PlayGame+0x1e4>)
 8000b58:	881a      	ldrh	r2, [r3, #0]
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <PlayGame+0x200>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d012      	beq.n	8000b88 <PlayGame+0x164>
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <PlayGame+0x1e8>)
 8000b64:	881a      	ldrh	r2, [r3, #0]
 8000b66:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <PlayGame+0x204>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d00c      	beq.n	8000b88 <PlayGame+0x164>
				counter += 1; // count the bounces
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <PlayGame+0x1f4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <PlayGame+0x1f4>)
 8000b76:	6013      	str	r3, [r2, #0]
				px = x;
 8000b78:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <PlayGame+0x1e4>)
 8000b7a:	881a      	ldrh	r2, [r3, #0]
 8000b7c:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <PlayGame+0x200>)
 8000b7e:	801a      	strh	r2, [r3, #0]
				py = y;
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <PlayGame+0x1e8>)
 8000b82:	881a      	ldrh	r2, [r3, #0]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <PlayGame+0x204>)
 8000b86:	801a      	strh	r2, [r3, #0]
			}
		}
		/* Check for collisions with screen boundaries*/
		if (ball.x - ball.radius < 0) {
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <PlayGame+0x1ec>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <PlayGame+0x1ec>)
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	da04      	bge.n	8000ba0 <PlayGame+0x17c>
			ball.vx += 4; // bounce horizontally
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <PlayGame+0x1ec>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <PlayGame+0x1ec>)
 8000b9e:	6093      	str	r3, [r2, #8]
		}
		if (ball.x + ball.radius > x_size) {
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <PlayGame+0x1ec>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <PlayGame+0x1ec>)
 8000ba6:	691b      	ldr	r3, [r3, #16]
 8000ba8:	4413      	add	r3, r2
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <PlayGame+0x208>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d904      	bls.n	8000bbe <PlayGame+0x19a>
			ball.vx += -4; // bounce horizontally
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <PlayGame+0x1ec>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	3b04      	subs	r3, #4
 8000bba:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <PlayGame+0x1ec>)
 8000bbc:	6093      	str	r3, [r2, #8]
		}
		if (ball.y - ball.radius < 0) {
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <PlayGame+0x1ec>)
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <PlayGame+0x1ec>)
 8000bc4:	691b      	ldr	r3, [r3, #16]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da02      	bge.n	8000bd2 <PlayGame+0x1ae>
			ball.vy = 4; // bounce vertically
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <PlayGame+0x1ec>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	60da      	str	r2, [r3, #12]
		}
		if (ball.y + ball.radius/2 > y_size+20) {
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <PlayGame+0x1ec>)
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <PlayGame+0x1ec>)
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	da00      	bge.n	8000be0 <PlayGame+0x1bc>
 8000bde:	3301      	adds	r3, #1
 8000be0:	105b      	asrs	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <PlayGame+0x20c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3314      	adds	r3, #20
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d803      	bhi.n	8000bf8 <PlayGame+0x1d4>
			break; //game over
		}
		HAL_Delay(26); // control frame rate
 8000bf0:	201a      	movs	r0, #26
 8000bf2:	f003 fe5f 	bl	80048b4 <HAL_Delay>
		BSP_TS_GetState(0, &TS_State);
 8000bf6:	e726      	b.n	8000a46 <PlayGame+0x22>
			break; //game over
 8000bf8:	bf00      	nop
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24000118 	.word	0x24000118
 8000c08:	240000f0 	.word	0x240000f0
 8000c0c:	240000f2 	.word	0x240000f2
 8000c10:	24000204 	.word	0x24000204
 8000c14:	ff8080ff 	.word	0xff8080ff
 8000c18:	24000114 	.word	0x24000114
 8000c1c:	08011b0c 	.word	0x08011b0c
 8000c20:	24000100 	.word	0x24000100
 8000c24:	240000f4 	.word	0x240000f4
 8000c28:	240000f6 	.word	0x240000f6
 8000c2c:	240000e8 	.word	0x240000e8
 8000c30:	240000ec 	.word	0x240000ec

08000c34 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <BSP_PB_Callback+0x24>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	601a      	str	r2, [r3, #0]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	240000e4 	.word	0x240000e4

08000c5c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b09e      	sub	sp, #120	; 0x78
 8000c60:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f007 fdbd 	bl	80087e8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b42      	ldr	r3, [pc, #264]	; (8000d7c <SystemClock_Config+0x120>)
 8000c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c76:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <SystemClock_Config+0x120>)
 8000c78:	f023 0301 	bic.w	r3, r3, #1
 8000c7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c7e:	4b3f      	ldr	r3, [pc, #252]	; (8000d7c <SystemClock_Config+0x120>)
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	4b3d      	ldr	r3, [pc, #244]	; (8000d80 <SystemClock_Config+0x124>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a3c      	ldr	r2, [pc, #240]	; (8000d80 <SystemClock_Config+0x124>)
 8000c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <SystemClock_Config+0x124>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca0:	bf00      	nop
 8000ca2:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <SystemClock_Config+0x124>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cae:	d1f8      	bne.n	8000ca2 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000cce:	23a0      	movs	r3, #160	; 0xa0
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 fdb4 	bl	800885c <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000cfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d02:	f000 f852 	bl	8000daa <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 8000d06:	233f      	movs	r3, #63	; 0x3f
 8000d08:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d12:	2308      	movs	r3, #8
 8000d14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d16:	2340      	movs	r3, #64	; 0x40
 8000d18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d1a:	2340      	movs	r3, #64	; 0x40
 8000d1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d22:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d24:	2340      	movs	r3, #64	; 0x40
 8000d26:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f008 f9ee 	bl	8009110 <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8000d3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d42:	f000 f832 	bl	8000daa <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <SystemClock_Config+0x128>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <SystemClock_Config+0x128>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <SystemClock_Config+0x128>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SystemClock_Config+0x128>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <SystemClock_Config+0x128>)
 8000d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8000d70:	f003 fdd0 	bl	8004914 <HAL_EnableCompensationCell>
}
 8000d74:	bf00      	nop
 8000d76:	3778      	adds	r7, #120	; 0x78
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58000400 	.word	0x58000400
 8000d80:	58024800 	.word	0x58024800
 8000d84:	58024400 	.word	0x58024400

08000d88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000d90:	20c8      	movs	r0, #200	; 0xc8
 8000d92:	f00c ff2d 	bl	800dbf0 <osDelay>
    //HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
    BSP_LED_On(LED_GREEN);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f001 fcfa 	bl	8002790 <BSP_LED_On>
    osDelay(200);
 8000d9c:	20c8      	movs	r0, #200	; 0xc8
 8000d9e:	f00c ff27 	bl	800dbf0 <osDelay>
    //HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
    BSP_LED_Off(LED_GREEN);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f001 fd12 	bl	80027cc <BSP_LED_Off>
    osDelay(200);
 8000da8:	e7f2      	b.n	8000d90 <StartDefaultTask+0x8>

08000daa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dae:	b672      	cpsid	i
}
 8000db0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  BSP_LED_On(LED_RED);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f001 fcec 	bl	8002790 <BSP_LED_On>
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0xe>
	...

08000dbc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <RetargetInit+0x28>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <RetargetInit+0x2c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	6898      	ldr	r0, [r3, #8]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f00f fcaf 	bl	8010738 <setvbuf>
}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000218 	.word	0x24000218
 8000de8:	240000c0 	.word	0x240000c0

08000dec <_isatty>:

int _isatty(int fd) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db04      	blt.n	8000e04 <_isatty+0x18>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	dc01      	bgt.n	8000e04 <_isatty+0x18>
    return 1;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e005      	b.n	8000e10 <_isatty+0x24>

  errno = EBADF;
 8000e04:	f00f fe24 	bl	8010a50 <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2209      	movs	r2, #9
 8000e0c:	601a      	str	r2, [r3, #0]
  return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_close>:

int _close(int fd) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db04      	blt.n	8000e30 <_close+0x18>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	dc01      	bgt.n	8000e30 <_close+0x18>
    return 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e006      	b.n	8000e3e <_close+0x26>

  errno = EBADF;
 8000e30:	f00f fe0e 	bl	8010a50 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2209      	movs	r2, #9
 8000e38:	601a      	str	r2, [r3, #0]
  return -1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000e52:	f00f fdfd 	bl	8010a50 <__errno>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2209      	movs	r2, #9
 8000e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_fstat>:



int _fstat(int fd, struct stat* st) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db08      	blt.n	8000e8a <_fstat+0x22>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	dc05      	bgt.n	8000e8a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e84:	605a      	str	r2, [r3, #4]
    return 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e005      	b.n	8000e96 <_fstat+0x2e>
  }

  errno = EBADF;
 8000e8a:	f00f fde1 	bl	8010a50 <__errno>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2209      	movs	r2, #9
 8000e92:	601a      	str	r2, [r3, #0]
  return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <_read>:


int _read(int fd, char* ptr, int len) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d110      	bne.n	8000ed4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <_read+0x4c>)
 8000eb4:	6818      	ldr	r0, [r3, #0]
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	2201      	movs	r2, #1
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	f00b f801 	bl	800bec4 <HAL_UART_Receive>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <_read+0x30>
      return 1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e008      	b.n	8000ee2 <_read+0x42>
    else
      return EIO;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	e006      	b.n	8000ee2 <_read+0x42>
  }
  errno = EBADF;
 8000ed4:	f00f fdbc 	bl	8010a50 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2209      	movs	r2, #9
 8000edc:	601a      	str	r2, [r3, #0]
  return -1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	24000218 	.word	0x24000218

08000ef0 <_write>:

int _write(int fd, char* ptr, int len) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d002      	beq.n	8000f08 <_write+0x18>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d111      	bne.n	8000f2c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <_write+0x54>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	f00a ff47 	bl	800bda8 <HAL_UART_Transmit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <_write+0x38>
      return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	e008      	b.n	8000f3a <_write+0x4a>
    else
      return EIO;
 8000f28:	2305      	movs	r3, #5
 8000f2a:	e006      	b.n	8000f3a <_write+0x4a>
  }
  errno = EBADF;
 8000f2c:	f00f fd90 	bl	8010a50 <__errno>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2209      	movs	r2, #9
 8000f34:	601a      	str	r2, [r3, #0]
  return -1;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24000218 	.word	0x24000218

08000f48 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f56:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	4a20      	ldr	r2, [pc, #128]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f5e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f66:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f6e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f76:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f7e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f86:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f8e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f96:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000f9e:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fa6:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <UTIL_LCD_SetFuncDriver+0xa0>)
 8000fba:	4611      	mov	r1, r2
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a09      	ldr	r2, [pc, #36]	; (8000fec <UTIL_LCD_SetFuncDriver+0xa4>)
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	2000      	movs	r0, #0
 8000fca:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <UTIL_LCD_SetFuncDriver+0x98>)
 8000fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <UTIL_LCD_SetFuncDriver+0xa8>)
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	4798      	blx	r3
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400025c 	.word	0x2400025c
 8000fe4:	2400021c 	.word	0x2400021c
 8000fe8:	24000230 	.word	0x24000230
 8000fec:	24000234 	.word	0x24000234
 8000ff0:	24000238 	.word	0x24000238

08000ff4 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <UTIL_LCD_SetTextColor+0x24>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <UTIL_LCD_SetTextColor+0x24>)
 8001002:	015b      	lsls	r3, r3, #5
 8001004:	4413      	add	r3, r2
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2400021c 	.word	0x2400021c

0800101c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <UTIL_LCD_SetBackColor+0x24>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <UTIL_LCD_SetBackColor+0x24>)
 800102a:	015b      	lsls	r3, r3, #5
 800102c:	4413      	add	r3, r2
 800102e:	3304      	adds	r3, #4
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	601a      	str	r2, [r3, #0]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	2400021c 	.word	0x2400021c

08001044 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <UTIL_LCD_SetFont+0x24>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <UTIL_LCD_SetFont+0x24>)
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	4413      	add	r3, r2
 8001056:	3308      	adds	r3, #8
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	2400021c 	.word	0x2400021c

0800106c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b087      	sub	sp, #28
 8001070:	af02      	add	r7, sp, #8
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <UTIL_LCD_FillRGBRect+0x30>)
 800107c:	685c      	ldr	r4, [r3, #4]
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <UTIL_LCD_FillRGBRect+0x34>)
 8001080:	6918      	ldr	r0, [r3, #16]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	47a0      	blx	r4
}
 8001092:	bf00      	nop
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bd90      	pop	{r4, r7, pc}
 800109a:	bf00      	nop
 800109c:	2400025c 	.word	0x2400025c
 80010a0:	2400021c 	.word	0x2400021c

080010a4 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <UTIL_LCD_DrawHLine+0x64>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d118      	bne.n	80010ec <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <UTIL_LCD_DrawHLine+0x68>)
 80010bc:	689c      	ldr	r4, [r3, #8]
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <UTIL_LCD_DrawHLine+0x64>)
 80010c0:	6918      	ldr	r0, [r3, #16]
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	f003 021f 	and.w	r2, r3, #31
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	0a9b      	lsrs	r3, r3, #10
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80010d4:	431a      	orrs	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	0cdb      	lsrs	r3, r3, #19
 80010da:	02db      	lsls	r3, r3, #11
 80010dc:	b29b      	uxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80010ea:	e009      	b.n	8001100 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <UTIL_LCD_DrawHLine+0x68>)
 80010ee:	689c      	ldr	r4, [r3, #8]
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <UTIL_LCD_DrawHLine+0x64>)
 80010f2:	6918      	ldr	r0, [r3, #16]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	47a0      	blx	r4
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	2400021c 	.word	0x2400021c
 800110c:	2400025c 	.word	0x2400025c

08001110 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	603a      	str	r2, [r7, #0]
 800111a:	80fb      	strh	r3, [r7, #6]
 800111c:	460b      	mov	r3, r1
 800111e:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <UTIL_LCD_SetPixel+0x60>)
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d117      	bne.n	8001158 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <UTIL_LCD_SetPixel+0x64>)
 800112a:	699c      	ldr	r4, [r3, #24]
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <UTIL_LCD_SetPixel+0x60>)
 800112e:	6918      	ldr	r0, [r3, #16]
 8001130:	88f9      	ldrh	r1, [r7, #6]
 8001132:	88bd      	ldrh	r5, [r7, #4]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	08db      	lsrs	r3, r3, #3
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	0a9b      	lsrs	r3, r3, #10
 8001140:	015b      	lsls	r3, r3, #5
 8001142:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001146:	431a      	orrs	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	0cdb      	lsrs	r3, r3, #19
 800114c:	02db      	lsls	r3, r3, #11
 800114e:	b29b      	uxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	462a      	mov	r2, r5
 8001154:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 8001156:	e007      	b.n	8001168 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <UTIL_LCD_SetPixel+0x64>)
 800115a:	699c      	ldr	r4, [r3, #24]
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <UTIL_LCD_SetPixel+0x60>)
 800115e:	6918      	ldr	r0, [r3, #16]
 8001160:	88f9      	ldrh	r1, [r7, #6]
 8001162:	88ba      	ldrh	r2, [r7, #4]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	47a0      	blx	r4
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bdb0      	pop	{r4, r5, r7, pc}
 8001170:	2400021c 	.word	0x2400021c
 8001174:	2400025c 	.word	0x2400025c

08001178 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <UTIL_LCD_Clear+0x28>)
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <UTIL_LCD_Clear+0x28>)
 8001186:	6999      	ldr	r1, [r3, #24]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	460b      	mov	r3, r1
 800118e:	2100      	movs	r1, #0
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f9f5 	bl	8001580 <UTIL_LCD_FillRect>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2400021c 	.word	0x2400021c

080011a4 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	4613      	mov	r3, r2
 80011b0:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <UTIL_LCD_DisplayChar+0x68>)
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <UTIL_LCD_DisplayChar+0x68>)
 80011b8:	015b      	lsls	r3, r3, #5
 80011ba:	4413      	add	r3, r2
 80011bc:	3308      	adds	r3, #8
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80011c6:	4911      	ldr	r1, [pc, #68]	; (800120c <UTIL_LCD_DisplayChar+0x68>)
 80011c8:	68c9      	ldr	r1, [r1, #12]
 80011ca:	4810      	ldr	r0, [pc, #64]	; (800120c <UTIL_LCD_DisplayChar+0x68>)
 80011cc:	0149      	lsls	r1, r1, #5
 80011ce:	4401      	add	r1, r0
 80011d0:	3108      	adds	r1, #8
 80011d2:	6809      	ldr	r1, [r1, #0]
 80011d4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80011d6:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <UTIL_LCD_DisplayChar+0x68>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	480b      	ldr	r0, [pc, #44]	; (800120c <UTIL_LCD_DisplayChar+0x68>)
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4403      	add	r3, r0
 80011e4:	3308      	adds	r3, #8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	889b      	ldrh	r3, [r3, #4]
 80011ea:	3307      	adds	r3, #7
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da00      	bge.n	80011f2 <UTIL_LCD_DisplayChar+0x4e>
 80011f0:	3307      	adds	r3, #7
 80011f2:	10db      	asrs	r3, r3, #3
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 faa4 	bl	800174c <DrawChar>
}
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2400021c 	.word	0x2400021c

08001210 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 800121e:	2301      	movs	r3, #1
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8001232:	e002      	b.n	800123a <UTIL_LCD_DisplayStringAt+0x2a>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	3301      	adds	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	61ba      	str	r2, [r7, #24]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d1f6      	bne.n	8001234 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a47      	ldr	r2, [pc, #284]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 800124c:	68d2      	ldr	r2, [r2, #12]
 800124e:	4946      	ldr	r1, [pc, #280]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 8001250:	0152      	lsls	r2, r2, #5
 8001252:	440a      	add	r2, r1
 8001254:	3208      	adds	r2, #8
 8001256:	6812      	ldr	r2, [r2, #0]
 8001258:	8892      	ldrh	r2, [r2, #4]
 800125a:	fbb3 f3f2 	udiv	r3, r3, r2
 800125e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d018      	beq.n	8001298 <UTIL_LCD_DisplayStringAt+0x88>
 8001266:	2b03      	cmp	r3, #3
 8001268:	dc2a      	bgt.n	80012c0 <UTIL_LCD_DisplayStringAt+0xb0>
 800126a:	2b01      	cmp	r3, #1
 800126c:	d002      	beq.n	8001274 <UTIL_LCD_DisplayStringAt+0x64>
 800126e:	2b02      	cmp	r3, #2
 8001270:	d015      	beq.n	800129e <UTIL_LCD_DisplayStringAt+0x8e>
 8001272:	e025      	b.n	80012c0 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	4a3b      	ldr	r2, [pc, #236]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 800127c:	68d2      	ldr	r2, [r2, #12]
 800127e:	493a      	ldr	r1, [pc, #232]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 8001280:	0152      	lsls	r2, r2, #5
 8001282:	440a      	add	r2, r1
 8001284:	3208      	adds	r2, #8
 8001286:	6812      	ldr	r2, [r2, #0]
 8001288:	8892      	ldrh	r2, [r2, #4]
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	085b      	lsrs	r3, r3, #1
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001296:	e016      	b.n	80012c6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800129c:	e013      	b.n	80012c6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	4a30      	ldr	r2, [pc, #192]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 80012a6:	68d2      	ldr	r2, [r2, #12]
 80012a8:	492f      	ldr	r1, [pc, #188]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 80012aa:	0152      	lsls	r2, r2, #5
 80012ac:	440a      	add	r2, r1
 80012ae:	3208      	adds	r2, #8
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	8892      	ldrh	r2, [r2, #4]
 80012b4:	fb03 f202 	mul.w	r2, r3, r2
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012be:	e002      	b.n	80012c6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80012c4:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <UTIL_LCD_DisplayStringAt+0xc4>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012d2:	d31b      	bcc.n	800130c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80012d8:	e018      	b.n	800130c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e4:	f7ff ff5e 	bl	80011a4 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	4413      	add	r3, r2
 80012f2:	3308      	adds	r3, #8
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	889b      	ldrh	r3, [r3, #4]
 80012f8:	461a      	mov	r2, r3
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	4413      	add	r3, r2
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
    i++;
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	3301      	adds	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf14      	ite	ne
 8001314:	2301      	movne	r3, #1
 8001316:	2300      	moveq	r3, #0
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 800131c:	6959      	ldr	r1, [r3, #20]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	4403      	add	r3, r0
 8001328:	3308      	adds	r3, #8
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	fb00 f303 	mul.w	r3, r0, r3
 8001336:	1acb      	subs	r3, r1, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	490b      	ldr	r1, [pc, #44]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 800133c:	68c9      	ldr	r1, [r1, #12]
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <UTIL_LCD_DisplayStringAt+0x158>)
 8001340:	0149      	lsls	r1, r1, #5
 8001342:	4401      	add	r1, r0
 8001344:	3108      	adds	r1, #8
 8001346:	6809      	ldr	r1, [r1, #0]
 8001348:	8889      	ldrh	r1, [r1, #4]
 800134a:	428b      	cmp	r3, r1
 800134c:	bf2c      	ite	cs
 800134e:	2301      	movcs	r3, #1
 8001350:	2300      	movcc	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4013      	ands	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1be      	bne.n	80012da <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2400021c 	.word	0x2400021c

0800136c <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	f1c3 0303 	rsb	r3, r3, #3
 8001382:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 800138c:	e0eb      	b.n	8001566 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	1ad2      	subs	r2, r2, r3
 8001394:	4b79      	ldr	r3, [pc, #484]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	429a      	cmp	r2, r3
 800139a:	d22d      	bcs.n	80013f8 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	441a      	add	r2, r3
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d20f      	bcs.n	80013ca <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	4413      	add	r3, r2
 80013b4:	b298      	uxth	r0, r3
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	4619      	mov	r1, r3
 80013c6:	f7ff fea3 	bl	8001110 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	1ad2      	subs	r2, r2, r3
 80013d0:	4b6a      	ldr	r3, [pc, #424]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d20f      	bcs.n	80013f8 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	b298      	uxth	r0, r3
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fe8c 	bl	8001110 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	1ad2      	subs	r2, r2, r3
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	429a      	cmp	r2, r3
 8001404:	d22d      	bcs.n	8001462 <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	441a      	add	r2, r3
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	d20f      	bcs.n	8001434 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	b29a      	uxth	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	b29b      	uxth	r3, r3
 800141c:	4413      	add	r3, r2
 800141e:	b298      	uxth	r0, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	b29a      	uxth	r2, r3
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	b29b      	uxth	r3, r3
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fe6e 	bl	8001110 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	429a      	cmp	r2, r3
 8001440:	d20f      	bcs.n	8001462 <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	b29a      	uxth	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	b29b      	uxth	r3, r3
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b298      	uxth	r0, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	b29a      	uxth	r2, r3
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	b29b      	uxth	r3, r3
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	b29b      	uxth	r3, r3
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fe57 	bl	8001110 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	441a      	add	r2, r3
 8001468:	4b44      	ldr	r3, [pc, #272]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	429a      	cmp	r2, r3
 800146e:	d22d      	bcs.n	80014cc <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	441a      	add	r2, r3
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	429a      	cmp	r2, r3
 800147c:	d20f      	bcs.n	800149e <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	b29a      	uxth	r2, r3
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	b29b      	uxth	r3, r3
 8001486:	4413      	add	r3, r2
 8001488:	b298      	uxth	r0, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	b29a      	uxth	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	b29b      	uxth	r3, r3
 8001492:	4413      	add	r3, r2
 8001494:	b29b      	uxth	r3, r3
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fe39 	bl	8001110 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	1ad2      	subs	r2, r2, r3
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d20f      	bcs.n	80014cc <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b298      	uxth	r0, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fe22 	bl	8001110 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	441a      	add	r2, r3
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d22d      	bcs.n	8001536 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	441a      	add	r2, r3
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d20f      	bcs.n	8001508 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b298      	uxth	r0, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b29b      	uxth	r3, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	4619      	mov	r1, r3
 8001504:	f7ff fe04 	bl	8001110 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	1ad2      	subs	r2, r2, r3
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <UTIL_LCD_DrawCircle+0x210>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	429a      	cmp	r2, r3
 8001514:	d20f      	bcs.n	8001536 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	b29a      	uxth	r2, r3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	b29b      	uxth	r3, r3
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	b298      	uxth	r0, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	b29a      	uxth	r2, r3
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	b29b      	uxth	r3, r3
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fded 	bl	8001110 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	2b00      	cmp	r3, #0
 800153a:	da06      	bge.n	800154a <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	009a      	lsls	r2, r3, #2
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	4413      	add	r3, r2
 8001544:	3306      	adds	r3, #6
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	e00a      	b.n	8001560 <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	009a      	lsls	r2, r3, #2
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	330a      	adds	r3, #10
 8001558:	61fb      	str	r3, [r7, #28]
      current_y--;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3b01      	subs	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	3301      	adds	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	429a      	cmp	r2, r3
 800156c:	f67f af0f 	bls.w	800138e <UTIL_LCD_DrawCircle+0x22>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2400021c 	.word	0x2400021c

08001580 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b087      	sub	sp, #28
 8001584:	af02      	add	r7, sp, #8
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800158e:	4b17      	ldr	r3, [pc, #92]	; (80015ec <UTIL_LCD_FillRect+0x6c>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d11a      	bne.n	80015cc <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <UTIL_LCD_FillRect+0x70>)
 8001598:	691c      	ldr	r4, [r3, #16]
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <UTIL_LCD_FillRect+0x6c>)
 800159c:	6918      	ldr	r0, [r3, #16]
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	f003 021f 	and.w	r2, r3, #31
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	0a9b      	lsrs	r3, r3, #10
 80015aa:	015b      	lsls	r3, r3, #5
 80015ac:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80015b0:	431a      	orrs	r2, r3
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	0cdb      	lsrs	r3, r3, #19
 80015b6:	02db      	lsls	r3, r3, #11
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80015ca:	e00b      	b.n	80015e4 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <UTIL_LCD_FillRect+0x70>)
 80015ce:	691c      	ldr	r4, [r3, #16]
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <UTIL_LCD_FillRect+0x6c>)
 80015d2:	6918      	ldr	r0, [r3, #16]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	68f9      	ldr	r1, [r7, #12]
 80015e2:	47a0      	blx	r4
}
 80015e4:	bf00      	nop
 80015e6:	3714      	adds	r7, #20
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd90      	pop	{r4, r7, pc}
 80015ec:	2400021c 	.word	0x2400021c
 80015f0:	2400025c 	.word	0x2400025c

080015f4 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	f1c3 0303 	rsb	r3, r3, #3
 800160a:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8001614:	e08b      	b.n	800172e <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d036      	beq.n	800168a <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d31c      	bcc.n	800165e <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8001624:	68ba      	ldr	r2, [r7, #8]
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	18d0      	adds	r0, r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005a      	lsls	r2, r3, #1
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	441a      	add	r2, r3
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	4601      	mov	r1, r0
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fd32 	bl	80010a4 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8001640:	68ba      	ldr	r2, [r7, #8]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad0      	subs	r0, r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005a      	lsls	r2, r3, #1
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	441a      	add	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	4601      	mov	r1, r0
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fd24 	bl	80010a4 <UTIL_LCD_DrawHLine>
 800165c:	e015      	b.n	800168a <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad0      	subs	r0, r2, r3
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	18d1      	adds	r1, r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005a      	lsls	r2, r3, #1
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f7ff fd18 	bl	80010a4 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	1ad0      	subs	r0, r2, r3
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad1      	subs	r1, r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005a      	lsls	r2, r3, #1
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f7ff fd0d 	bl	80010a4 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d036      	beq.n	80016fe <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d31c      	bcc.n	80016d2 <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1ad0      	subs	r0, r2, r3
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	005a      	lsls	r2, r3, #1
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	1acb      	subs	r3, r1, r3
 80016a8:	441a      	add	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	4601      	mov	r1, r0
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fcf8 	bl	80010a4 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	18d0      	adds	r0, r2, r3
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	005a      	lsls	r2, r3, #1
 80016be:	68f9      	ldr	r1, [r7, #12]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1acb      	subs	r3, r1, r3
 80016c4:	441a      	add	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	4601      	mov	r1, r0
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fcea 	bl	80010a4 <UTIL_LCD_DrawHLine>
 80016d0:	e015      	b.n	80016fe <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad0      	subs	r0, r2, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	1ad1      	subs	r1, r2, r3
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	005a      	lsls	r2, r3, #1
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f7ff fcde 	bl	80010a4 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad0      	subs	r0, r2, r3
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	18d1      	adds	r1, r2, r3
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	005a      	lsls	r2, r3, #1
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f7ff fcd3 	bl	80010a4 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	2b00      	cmp	r3, #0
 8001702:	da06      	bge.n	8001712 <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	009a      	lsls	r2, r3, #2
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	4413      	add	r3, r2
 800170c:	3306      	adds	r3, #6
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	e00a      	b.n	8001728 <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	009a      	lsls	r2, r3, #2
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	330a      	adds	r3, #10
 8001720:	61fb      	str	r3, [r7, #28]
      current_y--;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3b01      	subs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	3301      	adds	r3, #1
 800172c:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	429a      	cmp	r2, r3
 8001734:	f67f af6f 	bls.w	8001616 <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fe14 	bl	800136c <UTIL_LCD_DrawCircle>
}
 8001744:	bf00      	nop
 8001746:	3720      	adds	r7, #32
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0b2      	sub	sp, #200	; 0xc8
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001764:	4ba5      	ldr	r3, [pc, #660]	; (80019fc <DrawChar+0x2b0>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4aa4      	ldr	r2, [pc, #656]	; (80019fc <DrawChar+0x2b0>)
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	4413      	add	r3, r2
 800176e:	3308      	adds	r3, #8
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	88db      	ldrh	r3, [r3, #6]
 8001774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001778:	4ba0      	ldr	r3, [pc, #640]	; (80019fc <DrawChar+0x2b0>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	4a9f      	ldr	r2, [pc, #636]	; (80019fc <DrawChar+0x2b0>)
 800177e:	015b      	lsls	r3, r3, #5
 8001780:	4413      	add	r3, r2
 8001782:	3308      	adds	r3, #8
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	889b      	ldrh	r3, [r3, #4]
 8001788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800178c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001790:	3307      	adds	r3, #7
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017a6:	e11c      	b.n	80019e2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80017a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ac:	3307      	adds	r3, #7
 80017ae:	08db      	lsrs	r3, r3, #3
 80017b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 80017c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017c4:	3307      	adds	r3, #7
 80017c6:	08db      	lsrs	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d002      	beq.n	80017d2 <DrawChar+0x86>
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d006      	beq.n	80017de <DrawChar+0x92>
 80017d0:	e011      	b.n	80017f6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80017dc:	e01d      	b.n	800181a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80017de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80017ea:	3201      	adds	r2, #1
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80017f4:	e011      	b.n	800181a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80017f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001802:	3301      	adds	r3, #1
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	021b      	lsls	r3, r3, #8
 8001808:	4313      	orrs	r3, r2
 800180a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800180e:	3202      	adds	r2, #2
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	4313      	orrs	r3, r2
 8001814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001818:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800181a:	4b78      	ldr	r3, [pc, #480]	; (80019fc <DrawChar+0x2b0>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4a77      	ldr	r2, [pc, #476]	; (80019fc <DrawChar+0x2b0>)
 8001820:	015b      	lsls	r3, r3, #5
 8001822:	4413      	add	r3, r2
 8001824:	331c      	adds	r3, #28
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b02      	cmp	r3, #2
 800182a:	f040 808c 	bne.w	8001946 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001834:	e074      	b.n	8001920 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001836:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800183a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800183e:	1ad2      	subs	r2, r2, r3
 8001840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001844:	4413      	add	r3, r2
 8001846:	3b01      	subs	r3, #1
 8001848:	2201      	movs	r2, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	461a      	mov	r2, r3
 8001850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d02d      	beq.n	80018b6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800185a:	4b68      	ldr	r3, [pc, #416]	; (80019fc <DrawChar+0x2b0>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4a67      	ldr	r2, [pc, #412]	; (80019fc <DrawChar+0x2b0>)
 8001860:	015b      	lsls	r3, r3, #5
 8001862:	4413      	add	r3, r2
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	b29b      	uxth	r3, r3
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b62      	ldr	r3, [pc, #392]	; (80019fc <DrawChar+0x2b0>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4961      	ldr	r1, [pc, #388]	; (80019fc <DrawChar+0x2b0>)
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	440b      	add	r3, r1
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0a9b      	lsrs	r3, r3, #10
 800187e:	b29b      	uxth	r3, r3
 8001880:	015b      	lsls	r3, r3, #5
 8001882:	b29b      	uxth	r3, r3
 8001884:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001888:	b29b      	uxth	r3, r3
 800188a:	4313      	orrs	r3, r2
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b5b      	ldr	r3, [pc, #364]	; (80019fc <DrawChar+0x2b0>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	495a      	ldr	r1, [pc, #360]	; (80019fc <DrawChar+0x2b0>)
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	440b      	add	r3, r1
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	0cdb      	lsrs	r3, r3, #19
 800189c:	b29b      	uxth	r3, r3
 800189e:	02db      	lsls	r3, r3, #11
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	33c0      	adds	r3, #192	; 0xc0
 80018ae:	443b      	add	r3, r7
 80018b0:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80018b4:	e02f      	b.n	8001916 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80018b6:	4b51      	ldr	r3, [pc, #324]	; (80019fc <DrawChar+0x2b0>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a50      	ldr	r2, [pc, #320]	; (80019fc <DrawChar+0x2b0>)
 80018bc:	015b      	lsls	r3, r3, #5
 80018be:	4413      	add	r3, r2
 80018c0:	3304      	adds	r3, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <DrawChar+0x2b0>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	494a      	ldr	r1, [pc, #296]	; (80019fc <DrawChar+0x2b0>)
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	440b      	add	r3, r1
 80018d8:	3304      	adds	r3, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	0a9b      	lsrs	r3, r3, #10
 80018de:	b29b      	uxth	r3, r3
 80018e0:	015b      	lsls	r3, r3, #5
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <DrawChar+0x2b0>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	4942      	ldr	r1, [pc, #264]	; (80019fc <DrawChar+0x2b0>)
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	440b      	add	r3, r1
 80018f8:	3304      	adds	r3, #4
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0cdb      	lsrs	r3, r3, #19
 80018fe:	b29b      	uxth	r3, r3
 8001900:	02db      	lsls	r3, r3, #11
 8001902:	b29b      	uxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b29a      	uxth	r2, r3
 8001908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	33c0      	adds	r3, #192	; 0xc0
 8001910:	443b      	add	r3, r7
 8001912:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800191a:	3301      	adds	r3, #1
 800191c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001920:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001928:	429a      	cmp	r2, r3
 800192a:	d384      	bcc.n	8001836 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	1c4b      	adds	r3, r1, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001936:	2301      	movs	r3, #1
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff fb94 	bl	800106c <UTIL_LCD_FillRGBRect>
 8001944:	e048      	b.n	80019d8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800194c:	e032      	b.n	80019b4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800194e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001956:	1ad2      	subs	r2, r2, r3
 8001958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800195c:	4413      	add	r3, r2
 800195e:	3b01      	subs	r3, #1
 8001960:	2201      	movs	r2, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	461a      	mov	r2, r3
 8001968:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <DrawChar+0x2b0>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	4a21      	ldr	r2, [pc, #132]	; (80019fc <DrawChar+0x2b0>)
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4413      	add	r3, r2
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	33c0      	adds	r3, #192	; 0xc0
 8001986:	443b      	add	r3, r7
 8001988:	f843 2cac 	str.w	r2, [r3, #-172]
 800198c:	e00d      	b.n	80019aa <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <DrawChar+0x2b0>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <DrawChar+0x2b0>)
 8001994:	015b      	lsls	r3, r3, #5
 8001996:	4413      	add	r3, r2
 8001998:	3304      	adds	r3, #4
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	33c0      	adds	r3, #192	; 0xc0
 80019a4:	443b      	add	r3, r7
 80019a6:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80019aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019ae:	3301      	adds	r3, #1
 80019b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80019b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3c6      	bcc.n	800194e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	1c4b      	adds	r3, r1, #1
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	f107 0214 	add.w	r2, r7, #20
 80019ca:	2301      	movs	r3, #1
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f7ff fb4a 	bl	800106c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80019d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80019dc:	3301      	adds	r3, #1
 80019de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80019e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019ea:	429a      	cmp	r2, r3
 80019ec:	f4ff aedc 	bcc.w	80017a8 <DrawChar+0x5c>
    }
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	37c0      	adds	r7, #192	; 0xc0
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2400021c 	.word	0x2400021c

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_MspInit+0x74>)
 8001a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_MspInit+0x74>)
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_MspInit+0x74>)
 8001a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	210f      	movs	r1, #15
 8001a28:	f06f 0001 	mvn.w	r0, #1
 8001a2c:	f003 f85d 	bl	8004aea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  // Init PE3:
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_MspInit+0x74>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_MspInit+0x74>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_MspInit+0x74>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0310 	and.w	r3, r3, #16
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a52:	2301      	movs	r3, #1
 8001a54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <HAL_MspInit+0x78>)
 8001a66:	f005 f83d 	bl	8006ae4 <HAL_GPIO_Init>

  /* USER CODE END MspInit 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	58024400 	.word	0x58024400
 8001a78:	58021000 	.word	0x58021000

08001a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0ba      	sub	sp, #232	; 0xe8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	22c0      	movs	r2, #192	; 0xc0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00e ff5c 	bl	801095a <memset>
  if(huart->Instance==USART3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_UART_MspInit+0x104>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d164      	bne.n	8001b76 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aac:	f04f 0202 	mov.w	r2, #2
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f007 feb0 	bl	8009828 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ace:	f7ff f96c 	bl	8000daa <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <HAL_UART_MspInit+0x108>)
 8001ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <HAL_UART_MspInit+0x108>)
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <HAL_UART_MspInit+0x108>)
 8001ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_UART_MspInit+0x108>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <HAL_UART_MspInit+0x108>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_UART_MspInit+0x108>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA11     ------> USART3_RX
    PA10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	2303      	movs	r3, #3
 8001b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4814      	ldr	r0, [pc, #80]	; (8001b88 <HAL_UART_MspInit+0x10c>)
 8001b36:	f004 ffd5 	bl	8006ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b54:	2307      	movs	r3, #7
 8001b56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4809      	ldr	r0, [pc, #36]	; (8001b88 <HAL_UART_MspInit+0x10c>)
 8001b62:	f004 ffbf 	bl	8006ae4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2027      	movs	r0, #39	; 0x27
 8001b6c:	f002 ffbd 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b70:	2027      	movs	r0, #39	; 0x27
 8001b72:	f002 ffd4 	bl	8004b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	37e8      	adds	r7, #232	; 0xe8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40004800 	.word	0x40004800
 8001b84:	58024400 	.word	0x58024400
 8001b88:	58020400 	.word	0x58020400

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbc:	f002 fe5a 	bl	8004874 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001bc0:	f00d fc24 	bl	800f40c <xTaskGetSchedulerState>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bca:	f00e fa0d 	bl	800ffe8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
BSP_PB_IRQHandler(BUTTON_USER);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 fe88 	bl	80028ec <BSP_PB_IRQHandler>
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <TIM3_IRQHandler>:
/**
  * @brief  This function handles TIM3 interrupt requests.
  * @param  None
  * @retval None
  */
void TIM3_IRQHandler(void){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TIM3Handle);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <TIM3_IRQHandler+0x10>)
 8001be6:	f009 fe86 	bl	800b8f6 <HAL_TIM_IRQHandler>
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	240001b8 	.word	0x240001b8

08001bf4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UART3Handle);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <USART3_IRQHandler+0x10>)
 8001bfa:	f00a fa2b 	bl	800c054 <HAL_UART_IRQHandler>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	24000124 	.word	0x24000124

08001c08 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f000 fe87 	bl	8002920 <BSP_AUDIO_OUT_IRQHandler>
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <DMA2_Stream4_IRQHandler+0x14>)
 8001c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fcfa 	bl	800561c <HAL_DMA_IRQHandler>
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	2400033c 	.word	0x2400033c

08001c30 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001c34:	2130      	movs	r1, #48	; 0x30
 8001c36:	2001      	movs	r0, #1
 8001c38:	f000 fe86 	bl	8002948 <BSP_AUDIO_IN_IRQHandler>

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  BSP_SDRAM_IRQHandler(0);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f002 fa71 	bl	800412c <BSP_SDRAM_IRQHandler>

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  return 1;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <_kill>:

int _kill(int pid, int sig)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c68:	f00e fef2 	bl	8010a50 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2216      	movs	r2, #22
 8001c70:	601a      	str	r2, [r3, #0]
  return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_exit>:

void _exit (int status)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c86:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ffe7 	bl	8001c5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c90:	e7fe      	b.n	8001c90 <_exit+0x12>
	...

08001c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <_sbrk+0x5c>)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <_sbrk+0x60>)
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <_sbrk+0x64>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d102      	bne.n	8001cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <_sbrk+0x64>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <_sbrk+0x68>)
 8001cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d207      	bcs.n	8001cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cc4:	f00e fec4 	bl	8010a50 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	220c      	movs	r2, #12
 8001ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e009      	b.n	8001ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <_sbrk+0x64>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <_sbrk+0x64>)
 8001ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	24080000 	.word	0x24080000
 8001cf4:	00000400 	.word	0x00000400
 8001cf8:	24000288 	.word	0x24000288
 8001cfc:	24005b80 	.word	0x24005b80

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d04:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <SystemInit+0xe4>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a36      	ldr	r2, [pc, #216]	; (8001de4 <SystemInit+0xe4>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <SystemInit+0xe8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d807      	bhi.n	8001d30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <SystemInit+0xe8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 030f 	bic.w	r3, r3, #15
 8001d28:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <SystemInit+0xe8>)
 8001d2a:	f043 0307 	orr.w	r3, r3, #7
 8001d2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <SystemInit+0xec>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <SystemInit+0xec>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <SystemInit+0xec>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <SystemInit+0xec>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4929      	ldr	r1, [pc, #164]	; (8001dec <SystemInit+0xec>)
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <SystemInit+0xf0>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <SystemInit+0xe8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d007      	beq.n	8001d6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <SystemInit+0xe8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 030f 	bic.w	r3, r3, #15
 8001d62:	4a21      	ldr	r2, [pc, #132]	; (8001de8 <SystemInit+0xe8>)
 8001d64:	f043 0307 	orr.w	r3, r3, #7
 8001d68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d6a:	4b20      	ldr	r3, [pc, #128]	; (8001dec <SystemInit+0xec>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d70:	4b1e      	ldr	r3, [pc, #120]	; (8001dec <SystemInit+0xec>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <SystemInit+0xec>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <SystemInit+0xec>)
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <SystemInit+0xf4>)
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <SystemInit+0xec>)
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <SystemInit+0xf8>)
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <SystemInit+0xec>)
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <SystemInit+0xfc>)
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <SystemInit+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <SystemInit+0xec>)
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <SystemInit+0xfc>)
 8001d98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d9a:	4b14      	ldr	r3, [pc, #80]	; (8001dec <SystemInit+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <SystemInit+0xec>)
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <SystemInit+0xfc>)
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <SystemInit+0xec>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <SystemInit+0xec>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <SystemInit+0xec>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <SystemInit+0xec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <SystemInit+0x100>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <SystemInit+0x104>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dca:	d202      	bcs.n	8001dd2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <SystemInit+0x108>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <SystemInit+0x10c>)
 8001dd4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dd8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00
 8001de8:	52002000 	.word	0x52002000
 8001dec:	58024400 	.word	0x58024400
 8001df0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001df4:	02020200 	.word	0x02020200
 8001df8:	01ff0000 	.word	0x01ff0000
 8001dfc:	01010280 	.word	0x01010280
 8001e00:	5c001000 	.word	0x5c001000
 8001e04:	ffff0000 	.word	0xffff0000
 8001e08:	51008108 	.word	0x51008108
 8001e0c:	52004000 	.word	0x52004000

08001e10 <USART3_Init>:
/* Private function prototypes -----------------------------------------------*/

/* Private functions ---------------------------------------------------------*/

HAL_StatusTypeDef USART3_Init(UART_HandleTypeDef* huart3)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  huart3->Instance = USART3;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <USART3_Init+0x50>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3->Init.BaudRate = 115200;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart3->Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart3->Init.StopBits = UART_STOPBITS_1;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart3->Init.Parity = UART_PARITY_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart3->Init.Mode = UART_MODE_TX_RX;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart3->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  //huart1->Init.OverSampling = UART_OVERSAMPLING_16;
  //huart1->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  //huart1->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(huart3) != HAL_OK)
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f009 ff5f 	bl	800bd08 <HAL_UART_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <USART3_Init+0x44>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <USART3_Init+0x46>
  }

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40004800 	.word	0x40004800

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e68:	f7ff ff4a 	bl	8001d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	; (8001ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	; (8001eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f00e fde3 	bl	8010a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7fe fc59 	bl	800074c <main>
  bx  lr
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ea0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ea4:	240000c4 	.word	0x240000c4
  ldr r2, =_sidata
 8001ea8:	080146b0 	.word	0x080146b0
  ldr r2, =_sbss
 8001eac:	240000c4 	.word	0x240000c4
  ldr r4, =_ebss
 8001eb0:	24005b7c 	.word	0x24005b7c

08001eb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC3_IRQHandler>
	...

08001eb8 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e02c      	b.n	8001f2a <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	891a      	ldrh	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a0c      	ldr	r2, [pc, #48]	; (8001f34 <FT5336_RegisterBusIO+0x7c>)
 8001f04:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <FT5336_RegisterBusIO+0x80>)
 8001f0a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4798      	blx	r3
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	e002      	b.n	8001f2a <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	08002331 	.word	0x08002331
 8001f38:	08002365 	.word	0x08002365

08001f3c <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2205      	movs	r2, #5
 8001f56:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f5e:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001f66:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10d      	bne.n	8001fa8 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f987 	bl	80022a6 <FT5336_DisableIT>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d103      	bne.n	8001fdc <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f103 0218 	add.w	r2, r3, #24
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 fa25 	bl	8002452 <ft5336_radian_value>
 8002008:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f103 0218 	add.w	r2, r3, #24
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f000 fa2b 	bl	8002474 <ft5336_offset_left_right>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f103 0218 	add.w	r2, r3, #24
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4619      	mov	r1, r3
 8002034:	4610      	mov	r0, r2
 8002036:	f000 fa2e 	bl	8002496 <ft5336_offset_up_down>
 800203a:	4602      	mov	r2, r0
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f103 0218 	add.w	r2, r3, #24
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f000 fa31 	bl	80024b8 <ft5336_disatnce_left_right>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4413      	add	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f103 0218 	add.w	r2, r3, #24
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f000 fa34 	bl	80024da <ft5336_distance_up_down>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f103 0218 	add.w	r2, r3, #24
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f000 fa37 	bl	80024fc <ft5336_distance_zoom>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d002      	beq.n	80020a2 <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
 80020a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3318      	adds	r3, #24
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f000 fa3f 	bl	8002540 <ft5336_chip_id>
 80020c2:	4603      	mov	r3, r0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f908 	bl	80022f0 <FT5336_DetectTouch>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 0018 	add.w	r0, r3, #24
 80020ee:	f107 0208 	add.w	r2, r7, #8
 80020f2:	2304      	movs	r3, #4
 80020f4:	2103      	movs	r1, #3
 80020f6:	f000 f94f 	bl	8002398 <ft5336_read_reg>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 8002100:	f04f 33ff 	mov.w	r3, #4294967295
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	e00f      	b.n	8002128 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8002108:	7a3b      	ldrb	r3, [r7, #8]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002110:	7a7a      	ldrb	r2, [r7, #9]
 8002112:	431a      	orrs	r2, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8002118:	7abb      	ldrb	r3, [r7, #10]
 800211a:	021b      	lsls	r3, r3, #8
 800211c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002120:	7afa      	ldrb	r2, [r7, #11]
 8002122:	431a      	orrs	r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002128:	68fb      	ldr	r3, [r7, #12]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b08c      	sub	sp, #48	; 0x30
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8d5 	bl	80022f0 <FT5336_DetectTouch>
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f103 0018 	add.w	r0, r3, #24
 8002154:	f107 0208 	add.w	r2, r7, #8
 8002158:	231e      	movs	r3, #30
 800215a:	2103      	movs	r1, #3
 800215c:	f000 f91c 	bl	8002398 <ft5336_read_reg>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800216c:	e077      	b.n	800225e <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
 8002172:	e071      	b.n	8002258 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8002174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	3330      	adds	r3, #48	; 0x30
 8002180:	443b      	add	r3, r7
 8002182:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800218c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	3301      	adds	r3, #1
 8002198:	3330      	adds	r3, #48	; 0x30
 800219a:	443b      	add	r3, r7
 800219c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021a0:	ea41 0203 	orr.w	r2, r1, r3
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 80021ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	3302      	adds	r3, #2
 80021ba:	3330      	adds	r3, #48	; 0x30
 80021bc:	443b      	add	r3, r7
 80021be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 80021c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	3303      	adds	r3, #3
 80021d4:	3330      	adds	r3, #48	; 0x30
 80021d6:	443b      	add	r3, r7
 80021d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021dc:	4319      	orrs	r1, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e2:	3206      	adds	r2, #6
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 80021e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	3330      	adds	r3, #48	; 0x30
 80021f4:	443b      	add	r3, r7
 80021f6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002204:	3210      	adds	r2, #16
 8002206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800220a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	3304      	adds	r3, #4
 8002216:	3330      	adds	r3, #48	; 0x30
 8002218:	443b      	add	r3, r7
 800221a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800221e:	4619      	mov	r1, r3
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	330a      	adds	r3, #10
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800222c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	3305      	adds	r3, #5
 8002238:	3330      	adds	r3, #48	; 0x30
 800223a:	443b      	add	r3, r7
 800223c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002240:	091b      	lsrs	r3, r3, #4
 8002242:	b2db      	uxtb	r3, r3
 8002244:	4619      	mov	r1, r3
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	3314      	adds	r3, #20
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	3301      	adds	r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	2b04      	cmp	r3, #4
 800225c:	d98a      	bls.n	8002174 <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002260:	4618      	mov	r0, r3
 8002262:	3730      	adds	r7, #48	; 0x30
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3318      	adds	r3, #24
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f8bb 	bl	80023f4 <ft5336_gest_id>
 800227e:	4603      	mov	r3, r0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3318      	adds	r3, #24
 8002294:	2101      	movs	r1, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f941 	bl	800251e <ft5336_g_mode>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3318      	adds	r3, #24
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f932 	bl	800251e <ft5336_g_mode>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3318      	adds	r3, #24
 80022fc:	f107 020b 	add.w	r2, r7, #11
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f886 	bl	8002414 <ft5336_td_status>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e007      	b.n	8002326 <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	2b05      	cmp	r3, #5
 800231a:	d902      	bls.n	8002322 <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e001      	b.n	8002326 <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8002322:	7afb      	ldrb	r3, [r7, #11]
 8002324:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	460b      	mov	r3, r1
 800233e:	72fb      	strb	r3, [r7, #11]
 8002340:	4613      	mov	r3, r2
 8002342:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	691c      	ldr	r4, [r3, #16]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	8918      	ldrh	r0, [r3, #8]
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	b299      	uxth	r1, r3
 8002354:	893b      	ldrh	r3, [r7, #8]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	47a0      	blx	r4
 800235a:	4603      	mov	r3, r0
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd90      	pop	{r4, r7, pc}

08002364 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	460b      	mov	r3, r1
 8002372:	72fb      	strb	r3, [r7, #11]
 8002374:	4613      	mov	r3, r2
 8002376:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	68dc      	ldr	r4, [r3, #12]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	8918      	ldrh	r0, [r3, #8]
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	b299      	uxth	r1, r3
 8002388:	893b      	ldrh	r3, [r7, #8]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	47a0      	blx	r4
 800238e:	4603      	mov	r3, r0
}
 8002390:	4618      	mov	r0, r3
 8002392:	371c      	adds	r7, #28
 8002394:	46bd      	mov	sp, r7
 8002396:	bd90      	pop	{r4, r7, pc}

08002398 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	460b      	mov	r3, r1
 80023a6:	72fb      	strb	r3, [r7, #11]
 80023a8:	4613      	mov	r3, r2
 80023aa:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685c      	ldr	r4, [r3, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6898      	ldr	r0, [r3, #8]
 80023b4:	893b      	ldrh	r3, [r7, #8]
 80023b6:	7af9      	ldrb	r1, [r7, #11]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	47a0      	blx	r4
 80023bc:	4603      	mov	r3, r0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}

080023c6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80023c6:	b590      	push	{r4, r7, lr}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	461a      	mov	r2, r3
 80023d2:	460b      	mov	r3, r1
 80023d4:	72fb      	strb	r3, [r7, #11]
 80023d6:	4613      	mov	r3, r2
 80023d8:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681c      	ldr	r4, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6898      	ldr	r0, [r3, #8]
 80023e2:	893b      	ldrh	r3, [r7, #8]
 80023e4:	7af9      	ldrb	r1, [r7, #11]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	47a0      	blx	r4
 80023ea:	4603      	mov	r3, r0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}

080023f4 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80023fe:	2301      	movs	r3, #1
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	2101      	movs	r1, #1
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ffc7 	bl	8002398 <ft5336_read_reg>
 800240a:	4603      	mov	r3, r0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800241e:	2301      	movs	r3, #1
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	2102      	movs	r1, #2
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ffb7 	bl	8002398 <ft5336_read_reg>
 800242a:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	b2da      	uxtb	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	460b      	mov	r3, r1
 800245c:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800245e:	1cfa      	adds	r2, r7, #3
 8002460:	2301      	movs	r3, #1
 8002462:	2191      	movs	r1, #145	; 0x91
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ffae 	bl	80023c6 <ft5336_write_reg>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	460b      	mov	r3, r1
 800247e:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8002480:	1cfa      	adds	r2, r7, #3
 8002482:	2301      	movs	r3, #1
 8002484:	2192      	movs	r1, #146	; 0x92
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ff9d 	bl	80023c6 <ft5336_write_reg>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 80024a2:	1cfa      	adds	r2, r7, #3
 80024a4:	2301      	movs	r3, #1
 80024a6:	2193      	movs	r1, #147	; 0x93
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff ff8c 	bl	80023c6 <ft5336_write_reg>
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 80024c4:	1cfa      	adds	r2, r7, #3
 80024c6:	2301      	movs	r3, #1
 80024c8:	2194      	movs	r1, #148	; 0x94
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ff7b 	bl	80023c6 <ft5336_write_reg>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 80024e6:	1cfa      	adds	r2, r7, #3
 80024e8:	2301      	movs	r3, #1
 80024ea:	2195      	movs	r1, #149	; 0x95
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff6a 	bl	80023c6 <ft5336_write_reg>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8002508:	1cfa      	adds	r2, r7, #3
 800250a:	2301      	movs	r3, #1
 800250c:	2196      	movs	r1, #150	; 0x96
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff59 	bl	80023c6 <ft5336_write_reg>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800252a:	1cfa      	adds	r2, r7, #3
 800252c:	2301      	movs	r3, #1
 800252e:	21a4      	movs	r1, #164	; 0xa4
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff48 	bl	80023c6 <ft5336_write_reg>
 8002536:	4603      	mov	r3, r0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800254a:	2301      	movs	r3, #1
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	21a8      	movs	r1, #168	; 0xa8
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff21 	bl	8002398 <ft5336_read_reg>
 8002556:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d107      	bne.n	800256e <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f832 	bl	80025f8 <MT48LC4M32B2_ClockEnable>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d128      	bne.n	80025ec <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800259a:	2001      	movs	r0, #1
 800259c:	f000 f8e2 	bl	8002764 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f84a 	bl	8002640 <MT48LC4M32B2_Precharge>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d11c      	bne.n	80025ec <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f897 	bl	80026f0 <MT48LC4M32B2_RefreshMode>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f85c 	bl	8002688 <MT48LC4M32B2_ModeRegConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8ad 	bl	800273c <MT48LC4M32B2_RefreshRate>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 80025ec:	68fb      	ldr	r3, [r7, #12]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MT48LC4M32B2_ClockEnable+0x44>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <MT48LC4M32B2_ClockEnable+0x44>)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MT48LC4M32B2_ClockEnable+0x44>)
 8002610:	2201      	movs	r2, #1
 8002612:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MT48LC4M32B2_ClockEnable+0x44>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800261a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261e:	4907      	ldr	r1, [pc, #28]	; (800263c <MT48LC4M32B2_ClockEnable+0x44>)
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f008 ff73 	bl	800b50c <HAL_SDRAM_SendCommand>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	e000      	b.n	8002634 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002632:	2300      	movs	r3, #0
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2400028c 	.word	0x2400028c

08002640 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <MT48LC4M32B2_Precharge+0x44>)
 800264c:	2202      	movs	r2, #2
 800264e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002650:	4a0c      	ldr	r2, [pc, #48]	; (8002684 <MT48LC4M32B2_Precharge+0x44>)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <MT48LC4M32B2_Precharge+0x44>)
 8002658:	2201      	movs	r2, #1
 800265a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <MT48LC4M32B2_Precharge+0x44>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8002662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002666:	4907      	ldr	r1, [pc, #28]	; (8002684 <MT48LC4M32B2_Precharge+0x44>)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f008 ff4f 	bl	800b50c <HAL_SDRAM_SendCommand>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	e000      	b.n	800267c <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800267a:	2300      	movs	r3, #0
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2400028c 	.word	0x2400028c

08002688 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800269a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80026a0:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80026a6:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026b2:	2204      	movs	r2, #4
 80026b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026bc:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80026c4:	4a09      	ldr	r2, [pc, #36]	; (80026ec <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80026ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ce:	4907      	ldr	r1, [pc, #28]	; (80026ec <MT48LC4M32B2_ModeRegConfig+0x64>)
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f008 ff1b 	bl	800b50c <HAL_SDRAM_SendCommand>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
 80026e0:	e000      	b.n	80026e4 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80026e2:	2300      	movs	r3, #0
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	2400028c 	.word	0x2400028c

080026f0 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 80026fc:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <MT48LC4M32B2_RefreshMode+0x48>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8002702:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <MT48LC4M32B2_RefreshMode+0x48>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <MT48LC4M32B2_RefreshMode+0x48>)
 800270a:	2208      	movs	r2, #8
 800270c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <MT48LC4M32B2_RefreshMode+0x48>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8002714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <MT48LC4M32B2_RefreshMode+0x48>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f008 fef6 	bl	800b50c <HAL_SDRAM_SendCommand>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	e000      	b.n	800272e <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800272c:	2300      	movs	r3, #0
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2400028c 	.word	0x2400028c

0800273c <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8002746:	6839      	ldr	r1, [r7, #0]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f008 ff14 	bl	800b576 <HAL_SDRAM_ProgramRefreshRate>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 8002754:	f04f 33ff 	mov.w	r3, #4294967295
 8002758:	e000      	b.n	800275c <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800275a:	2300      	movs	r3, #0
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800276c:	f002 f896 	bl	800489c <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8002772:	bf00      	nop
 8002774:	f002 f892 	bl	800489c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d8f7      	bhi.n	8002774 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800279e:	79fb      	ldrb	r3, [r7, #7]
 80027a0:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <BSP_LED_On+0x34>)
 80027a2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <BSP_LED_On+0x38>)
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2200      	movs	r2, #0
 80027b2:	4619      	mov	r1, r3
 80027b4:	f004 fc50 	bl	8007058 <HAL_GPIO_WritePin>
  return ret;
 80027b8:	68fb      	ldr	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	24000048 	.word	0x24000048
 80027c8:	080144ec 	.word	0x080144ec

080027cc <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	4a08      	ldr	r2, [pc, #32]	; (8002800 <BSP_LED_Off+0x34>)
 80027de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <BSP_LED_Off+0x38>)
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	2201      	movs	r2, #1
 80027ee:	4619      	mov	r1, r3
 80027f0:	f004 fc32 	bl	8007058 <HAL_GPIO_WritePin>
  return ret;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	24000048 	.word	0x24000048
 8002804:	080144ec 	.word	0x080144ec

08002808 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	460a      	mov	r2, r1
 8002812:	71fb      	strb	r3, [r7, #7]
 8002814:	4613      	mov	r3, r2
 8002816:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002818:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <BSP_PB_Init+0xcc>)
 800281a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281e:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <BSP_PB_Init+0xcc>)
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <BSP_PB_Init+0xcc>)
 800282a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800283c:	2302      	movs	r3, #2
 800283e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002844:	79bb      	ldrb	r3, [r7, #6]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <BSP_PB_Init+0xd0>)
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	f107 020c 	add.w	r2, r7, #12
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f004 f941 	bl	8006ae4 <HAL_GPIO_Init>
 8002862:	e031      	b.n	80028c8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002864:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002868:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <BSP_PB_Init+0xd0>)
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	f107 020c 	add.w	r2, r7, #12
 8002876:	4611      	mov	r1, r2
 8002878:	4618      	mov	r0, r3
 800287a:	f004 f933 	bl	8006ae4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <BSP_PB_Init+0xd4>)
 8002884:	441a      	add	r2, r3
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	4915      	ldr	r1, [pc, #84]	; (80028e0 <BSP_PB_Init+0xd8>)
 800288a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f004 f8e2 	bl	8006a5a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4a10      	ldr	r2, [pc, #64]	; (80028dc <BSP_PB_Init+0xd4>)
 800289c:	1898      	adds	r0, r3, r2
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <BSP_PB_Init+0xdc>)
 80028a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a6:	461a      	mov	r2, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	f004 f8b7 	bl	8006a1c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80028ae:	2028      	movs	r0, #40	; 0x28
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4a0d      	ldr	r2, [pc, #52]	; (80028e8 <BSP_PB_Init+0xe0>)
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	f002 f915 	bl	8004aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80028c0:	2328      	movs	r3, #40	; 0x28
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 f92b 	bl	8004b1e <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
 80028d8:	24000050 	.word	0x24000050
 80028dc:	2400029c 	.word	0x2400029c
 80028e0:	080144f4 	.word	0x080144f4
 80028e4:	24000054 	.word	0x24000054
 80028e8:	24000058 	.word	0x24000058

080028ec <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <BSP_PB_IRQHandler+0x20>)
 80028fc:	4413      	add	r3, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f004 f8c0 	bl	8006a84 <HAL_EXTI_IRQHandler>
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2400029c 	.word	0x2400029c

08002910 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe f98d 	bl	8000c34 <BSP_PB_Callback>
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d105      	bne.n	800293a <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8002930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002934:	4618      	mov	r0, r3
 8002936:	f002 fe71 	bl	800561c <HAL_DMA_IRQHandler>
  }
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	240002a4 	.word	0x240002a4

08002948 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b30      	cmp	r3, #48	; 0x30
 8002956:	d002      	beq.n	800295e <BSP_AUDIO_IN_IRQHandler+0x16>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8002960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fe59 	bl	800561c <HAL_DMA_IRQHandler>
  }

}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2400033c 	.word	0x2400033c

08002978 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <BSP_I2C4_Init+0x64>)
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <BSP_I2C4_Init+0x68>)
 8002986:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <BSP_I2C4_Init+0x6c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d11f      	bne.n	80029d0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <BSP_I2C4_Init+0x6c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3301      	adds	r3, #1
 8002996:	4a13      	ldr	r2, [pc, #76]	; (80029e4 <BSP_I2C4_Init+0x6c>)
 8002998:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800299a:	4810      	ldr	r0, [pc, #64]	; (80029dc <BSP_I2C4_Init+0x64>)
 800299c:	f004 fe78 	bl	8007690 <HAL_I2C_GetState>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d114      	bne.n	80029d0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 80029a6:	480d      	ldr	r0, [pc, #52]	; (80029dc <BSP_I2C4_Init+0x64>)
 80029a8:	f000 fb60 	bl	800306c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80029ac:	f006 ff26 	bl	80097fc <HAL_RCC_GetPCLK2Freq>
 80029b0:	4603      	mov	r3, r0
 80029b2:	490d      	ldr	r1, [pc, #52]	; (80029e8 <BSP_I2C4_Init+0x70>)
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f8e3 	bl	8002b80 <I2C_GetTiming>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4619      	mov	r1, r3
 80029be:	4807      	ldr	r0, [pc, #28]	; (80029dc <BSP_I2C4_Init+0x64>)
 80029c0:	f000 f838 	bl	8002a34 <MX_I2C4_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80029ca:	f06f 0307 	mvn.w	r3, #7
 80029ce:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	24000ddc 	.word	0x24000ddc
 80029e0:	58001c00 	.word	0x58001c00
 80029e4:	240003d4 	.word	0x240003d4
 80029e8:	000186a0 	.word	0x000186a0

080029ec <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <BSP_I2C4_DeInit+0x40>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <BSP_I2C4_DeInit+0x40>)
 80029fe:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <BSP_I2C4_DeInit+0x40>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8002a08:	4809      	ldr	r0, [pc, #36]	; (8002a30 <BSP_I2C4_DeInit+0x44>)
 8002a0a:	f000 fb9b 	bl	8003144 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8002a0e:	4808      	ldr	r0, [pc, #32]	; (8002a30 <BSP_I2C4_DeInit+0x44>)
 8002a10:	f004 fbcc 	bl	80071ac <HAL_I2C_DeInit>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002a1a:	f06f 0307 	mvn.w	r3, #7
 8002a1e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	240003d4 	.word	0x240003d4
 8002a30:	24000ddc 	.word	0x24000ddc

08002a34 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f004 fb0a 	bl	800708c <HAL_I2C_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	e014      	b.n	8002aae <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f005 f8d2 	bl	8007c34 <HAL_I2CEx_ConfigAnalogFilter>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	e008      	b.n	8002aae <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f005 f913 	bl	8007cca <HAL_I2CEx_ConfigDigitalFilter>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60ba      	str	r2, [r7, #8]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	81fb      	strh	r3, [r7, #14]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	81bb      	strh	r3, [r7, #12]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002ace:	89b9      	ldrh	r1, [r7, #12]
 8002ad0:	89f8      	ldrh	r0, [r7, #14]
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f000 fb57 	bl	800318c <I2C4_WriteReg>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d102      	bne.n	8002aea <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00c      	b.n	8002b04 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002aea:	4809      	ldr	r0, [pc, #36]	; (8002b10 <BSP_I2C4_WriteReg+0x58>)
 8002aec:	f004 fdde 	bl	80076ac <HAL_I2C_GetError>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d103      	bne.n	8002afe <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002af6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e002      	b.n	8002b04 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002afe:	f06f 0303 	mvn.w	r3, #3
 8002b02:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002b04:	697b      	ldr	r3, [r7, #20]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	24000ddc 	.word	0x24000ddc

08002b14 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60ba      	str	r2, [r7, #8]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	81fb      	strh	r3, [r7, #14]
 8002b22:	460b      	mov	r3, r1
 8002b24:	81bb      	strh	r3, [r7, #12]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002b2a:	89b9      	ldrh	r1, [r7, #12]
 8002b2c:	89f8      	ldrh	r0, [r7, #14]
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f000 fb4f 	bl	80031d8 <I2C4_ReadReg>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e00c      	b.n	8002b60 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8002b46:	4809      	ldr	r0, [pc, #36]	; (8002b6c <BSP_I2C4_ReadReg+0x58>)
 8002b48:	f004 fdb0 	bl	80076ac <HAL_I2C_GetError>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d103      	bne.n	8002b5a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002b52:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e002      	b.n	8002b60 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002b5a:	f06f 0303 	mvn.w	r3, #3
 8002b5e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8002b60:	697b      	ldr	r3, [r7, #20]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	24000ddc 	.word	0x24000ddc

08002b70 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002b74:	f001 fe92 	bl	800489c <HAL_GetTick>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d06b      	beq.n	8002c6c <I2C_GetTiming+0xec>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d068      	beq.n	8002c6c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	e060      	b.n	8002c62 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002ba0:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <I2C_GetTiming+0xf8>)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d352      	bcc.n	8002c5c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002bb6:	4a30      	ldr	r2, [pc, #192]	; (8002c78 <I2C_GetTiming+0xf8>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d847      	bhi.n	8002c5c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f856 	bl	8002c80 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002bd4:	6939      	ldr	r1, [r7, #16]
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f940 	bl	8002e5c <I2C_Compute_SCLL_SCLH>
 8002bdc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b7f      	cmp	r3, #127	; 0x7f
 8002be2:	d842      	bhi.n	8002c6a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002be4:	4925      	ldr	r1, [pc, #148]	; (8002c7c <I2C_GetTiming+0xfc>)
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002bf6:	4821      	ldr	r0, [pc, #132]	; (8002c7c <I2C_GetTiming+0xfc>)
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4403      	add	r3, r0
 8002c04:	3304      	adds	r3, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	051b      	lsls	r3, r3, #20
 8002c0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002c0e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002c10:	481a      	ldr	r0, [pc, #104]	; (8002c7c <I2C_GetTiming+0xfc>)
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4403      	add	r3, r0
 8002c1e:	3308      	adds	r3, #8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8002c28:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8002c2a:	4814      	ldr	r0, [pc, #80]	; (8002c7c <I2C_GetTiming+0xfc>)
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4403      	add	r3, r0
 8002c38:	330c      	adds	r3, #12
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8002c40:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002c42:	480e      	ldr	r0, [pc, #56]	; (8002c7c <I2C_GetTiming+0xfc>)
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4403      	add	r3, r0
 8002c50:	3310      	adds	r3, #16
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8002c56:	430b      	orrs	r3, r1
 8002c58:	617b      	str	r3, [r7, #20]
        }
        break;
 8002c5a:	e006      	b.n	8002c6a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d99b      	bls.n	8002ba0 <I2C_GetTiming+0x20>
 8002c68:	e000      	b.n	8002c6c <I2C_GetTiming+0xec>
        break;
 8002c6a:	bf00      	nop
      }
    }
  }

  return ret;
 8002c6c:	697b      	ldr	r3, [r7, #20]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	080144f8 	.word	0x080144f8
 8002c7c:	240003d8 	.word	0x240003d8

08002c80 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b08f      	sub	sp, #60	; 0x3c
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002c8a:	2310      	movs	r3, #16
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	085a      	lsrs	r2, r3, #1
 8002c92:	4b6e      	ldr	r3, [pc, #440]	; (8002e4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002c94:	4413      	add	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c9c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002c9e:	2332      	movs	r3, #50	; 0x32
 8002ca0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002ca2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002ca6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002ca8:	4a69      	ldr	r2, [pc, #420]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	212c      	movs	r1, #44	; 0x2c
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3324      	adds	r3, #36	; 0x24
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	212c      	movs	r1, #44	; 0x2c
 8002cc0:	fb01 f303 	mul.w	r3, r1, r3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002cce:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002cd0:	495f      	ldr	r1, [pc, #380]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	202c      	movs	r0, #44	; 0x2c
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3328      	adds	r3, #40	; 0x28
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	69f9      	ldr	r1, [r7, #28]
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002cec:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3310      	adds	r3, #16
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	4a54      	ldr	r2, [pc, #336]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3320      	adds	r3, #32
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002d10:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002d12:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002d14:	494e      	ldr	r1, [pc, #312]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	202c      	movs	r0, #44	; 0x2c
 8002d1a:	fb00 f303 	mul.w	r3, r0, r3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3328      	adds	r3, #40	; 0x28
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3304      	adds	r3, #4
 8002d26:	69f9      	ldr	r1, [r7, #28]
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002d30:	4a47      	ldr	r2, [pc, #284]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	4a43      	ldr	r2, [pc, #268]	; (8002e50 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	212c      	movs	r1, #44	; 0x2c
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3314      	adds	r3, #20
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4403      	add	r3, r0
 8002d54:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	dc01      	bgt.n	8002d60 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	dc01      	bgt.n	8002d6a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6e:	e062      	b.n	8002e36 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	e059      	b.n	8002e2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	3301      	adds	r3, #1
 8002d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d7c:	3201      	adds	r2, #1
 8002d7e:	fb03 f202 	mul.w	r2, r3, r2
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d348      	bcc.n	8002e24 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	623b      	str	r3, [r7, #32]
 8002d96:	e042      	b.n	8002e1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	fb03 f202 	mul.w	r2, r3, r2
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d332      	bcc.n	8002e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d82e      	bhi.n	8002e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8002dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d02a      	beq.n	8002e18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4924      	ldr	r1, [pc, #144]	; (8002e58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dd4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	491f      	ldr	r1, [pc, #124]	; (8002e58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3304      	adds	r3, #4
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002dec:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4919      	ldr	r1, [pc, #100]	; (8002e58 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	6a3a      	ldr	r2, [r7, #32]
 8002e00:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	4a11      	ldr	r2, [pc, #68]	; (8002e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e0e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b7f      	cmp	r3, #127	; 0x7f
 8002e16:	d812      	bhi.n	8002e3e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	623b      	str	r3, [r7, #32]
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	2b0f      	cmp	r3, #15
 8002e22:	d9b9      	bls.n	8002d98 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	3301      	adds	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b0f      	cmp	r3, #15
 8002e2e:	d9a2      	bls.n	8002d76 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	3301      	adds	r3, #1
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d999      	bls.n	8002d70 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002e3c:	e000      	b.n	8002e40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002e3e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002e40:	373c      	adds	r7, #60	; 0x3c
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	3b9aca00 	.word	0x3b9aca00
 8002e50:	080144f8 	.word	0x080144f8
 8002e54:	24000dd8 	.word	0x24000dd8
 8002e58:	240003d8 	.word	0x240003d8

08002e5c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b093      	sub	sp, #76	; 0x4c
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	085a      	lsrs	r2, r3, #1
 8002e70:	4b7a      	ldr	r3, [pc, #488]	; (800305c <I2C_Compute_SCLL_SCLH+0x200>)
 8002e72:	4413      	add	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8002e7c:	4a78      	ldr	r2, [pc, #480]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	085a      	lsrs	r2, r3, #1
 8002e8c:	4b73      	ldr	r3, [pc, #460]	; (800305c <I2C_Compute_SCLL_SCLH+0x200>)
 8002e8e:	4413      	add	r3, r2
 8002e90:	4973      	ldr	r1, [pc, #460]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	202c      	movs	r0, #44	; 0x2c
 8002e96:	fb00 f202 	mul.w	r2, r0, r2
 8002e9a:	440a      	add	r2, r1
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002ea4:	2332      	movs	r3, #50	; 0x32
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002ea8:	4a6d      	ldr	r2, [pc, #436]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3328      	adds	r3, #40	; 0x28
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8002ec0:	4a67      	ldr	r2, [pc, #412]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a62      	ldr	r2, [pc, #392]	; (800305c <I2C_Compute_SCLL_SCLH+0x200>)
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8002ed8:	4a61      	ldr	r2, [pc, #388]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5c      	ldr	r2, [pc, #368]	; (800305c <I2C_Compute_SCLL_SCLH+0x200>)
 8002eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eee:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef8:	e0a3      	b.n	8003042 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8002efa:	495a      	ldr	r1, [pc, #360]	; (8003064 <I2C_Compute_SCLL_SCLH+0x208>)
 8002efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8002f14:	2300      	movs	r3, #0
 8002f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f18:	e08c      	b.n	8003034 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	441a      	add	r2, r3
 8002f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f22:	3301      	adds	r3, #1
 8002f24:	6979      	ldr	r1, [r7, #20]
 8002f26:	fb03 f101 	mul.w	r1, r3, r1
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	4413      	add	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002f34:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	212c      	movs	r1, #44	; 0x2c
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	3318      	adds	r3, #24
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d971      	bls.n	800302e <I2C_Compute_SCLL_SCLH+0x1d2>
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d268      	bcs.n	800302e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f60:	e062      	b.n	8003028 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	441a      	add	r2, r3
 8002f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	6979      	ldr	r1, [r7, #20]
 8002f6e:	fb03 f101 	mul.w	r1, r3, r1
 8002f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	440b      	add	r3, r1
 8002f78:	4413      	add	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	441a      	add	r2, r3
 8002f82:	4937      	ldr	r1, [pc, #220]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	202c      	movs	r0, #44	; 0x2c
 8002f88:	fb00 f303 	mul.w	r3, r0, r3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3320      	adds	r3, #32
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	441a      	add	r2, r3
 8002f94:	4932      	ldr	r1, [pc, #200]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	202c      	movs	r0, #44	; 0x2c
 8002f9a:	fb00 f303 	mul.w	r3, r0, r3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3324      	adds	r3, #36	; 0x24
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d338      	bcc.n	8003022 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d834      	bhi.n	8003022 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002fb8:	4a29      	ldr	r2, [pc, #164]	; (8003060 <I2C_Compute_SCLL_SCLH+0x204>)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	331c      	adds	r3, #28
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d329      	bcc.n	8003022 <I2C_Compute_SCLL_SCLH+0x1c6>
 8002fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d225      	bcs.n	8003022 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da02      	bge.n	8002fea <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d917      	bls.n	8003022 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8002ff6:	491b      	ldr	r1, [pc, #108]	; (8003064 <I2C_Compute_SCLL_SCLH+0x208>)
 8002ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3310      	adds	r3, #16
 8003006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003008:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800300a:	4916      	ldr	r1, [pc, #88]	; (8003064 <I2C_Compute_SCLL_SCLH+0x208>)
 800300c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	330c      	adds	r3, #12
 800301a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800301c:	601a      	str	r2, [r3, #0]
              ret = count;
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	3301      	adds	r3, #1
 8003026:	63bb      	str	r3, [r7, #56]	; 0x38
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	2bff      	cmp	r3, #255	; 0xff
 800302c:	d999      	bls.n	8002f62 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800302e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003030:	3301      	adds	r3, #1
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	f67f af6f 	bls.w	8002f1a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	3301      	adds	r3, #1
 8003040:	637b      	str	r3, [r7, #52]	; 0x34
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <I2C_Compute_SCLL_SCLH+0x20c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003048:	429a      	cmp	r2, r3
 800304a:	f4ff af56 	bcc.w	8002efa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800304e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8003050:	4618      	mov	r0, r3
 8003052:	374c      	adds	r7, #76	; 0x4c
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	3b9aca00 	.word	0x3b9aca00
 8003060:	080144f8 	.word	0x080144f8
 8003064:	240003d8 	.word	0x240003d8
 8003068:	24000dd8 	.word	0x24000dd8

0800306c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003074:	4b31      	ldr	r3, [pc, #196]	; (800313c <I2C4_MspInit+0xd0>)
 8003076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800307a:	4a30      	ldr	r2, [pc, #192]	; (800313c <I2C4_MspInit+0xd0>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003084:	4b2d      	ldr	r3, [pc, #180]	; (800313c <I2C4_MspInit+0xd0>)
 8003086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003092:	4b2a      	ldr	r3, [pc, #168]	; (800313c <I2C4_MspInit+0xd0>)
 8003094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003098:	4a28      	ldr	r2, [pc, #160]	; (800313c <I2C4_MspInit+0xd0>)
 800309a:	f043 0308 	orr.w	r3, r3, #8
 800309e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030a2:	4b26      	ldr	r3, [pc, #152]	; (800313c <I2C4_MspInit+0xd0>)
 80030a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 80030b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80030b6:	2312      	movs	r3, #18
 80030b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80030be:	2302      	movs	r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80030c2:	2304      	movs	r3, #4
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	481c      	ldr	r0, [pc, #112]	; (8003140 <I2C4_MspInit+0xd4>)
 80030ce:	f003 fd09 	bl	8006ae4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80030d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80030d8:	2312      	movs	r3, #18
 80030da:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80030e0:	2302      	movs	r3, #2
 80030e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80030e4:	2304      	movs	r3, #4
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80030e8:	f107 0314 	add.w	r3, r7, #20
 80030ec:	4619      	mov	r1, r3
 80030ee:	4814      	ldr	r0, [pc, #80]	; (8003140 <I2C4_MspInit+0xd4>)
 80030f0:	f003 fcf8 	bl	8006ae4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80030f4:	4b11      	ldr	r3, [pc, #68]	; (800313c <I2C4_MspInit+0xd0>)
 80030f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030fa:	4a10      	ldr	r2, [pc, #64]	; (800313c <I2C4_MspInit+0xd0>)
 80030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <I2C4_MspInit+0xd0>)
 8003106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <I2C4_MspInit+0xd0>)
 8003114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <I2C4_MspInit+0xd0>)
 800311a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <I2C4_MspInit+0xd0>)
 8003124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003128:	4a04      	ldr	r2, [pc, #16]	; (800313c <I2C4_MspInit+0xd0>)
 800312a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8003132:	bf00      	nop
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	58024400 	.word	0x58024400
 8003140:	58020c00 	.word	0x58020c00

08003144 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800314c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003150:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4619      	mov	r1, r3
 8003156:	480b      	ldr	r0, [pc, #44]	; (8003184 <I2C4_MspDeInit+0x40>)
 8003158:	f003 fe74 	bl	8006e44 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800315c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003160:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4619      	mov	r1, r3
 8003166:	4807      	ldr	r0, [pc, #28]	; (8003184 <I2C4_MspDeInit+0x40>)
 8003168:	f003 fe6c 	bl	8006e44 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <I2C4_MspDeInit+0x44>)
 800316e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <I2C4_MspDeInit+0x44>)
 8003174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003178:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800317c:	bf00      	nop
 800317e:	3720      	adds	r7, #32
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	58020c00 	.word	0x58020c00
 8003188:	58024400 	.word	0x58024400

0800318c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af04      	add	r7, sp, #16
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	4603      	mov	r3, r0
 8003196:	81fb      	strh	r3, [r7, #14]
 8003198:	460b      	mov	r3, r1
 800319a:	81bb      	strh	r3, [r7, #12]
 800319c:	4613      	mov	r3, r2
 800319e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80031a0:	8978      	ldrh	r0, [r7, #10]
 80031a2:	89ba      	ldrh	r2, [r7, #12]
 80031a4:	89f9      	ldrh	r1, [r7, #14]
 80031a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	8b3b      	ldrh	r3, [r7, #24]
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	4603      	mov	r3, r0
 80031b6:	4807      	ldr	r0, [pc, #28]	; (80031d4 <I2C4_WriteReg+0x48>)
 80031b8:	f004 f83c 	bl	8007234 <HAL_I2C_Mem_Write>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e001      	b.n	80031ca <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80031c6:	f06f 0307 	mvn.w	r3, #7
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	24000ddc 	.word	0x24000ddc

080031d8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af04      	add	r7, sp, #16
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	4603      	mov	r3, r0
 80031e2:	81fb      	strh	r3, [r7, #14]
 80031e4:	460b      	mov	r3, r1
 80031e6:	81bb      	strh	r3, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80031ec:	8978      	ldrh	r0, [r7, #10]
 80031ee:	89ba      	ldrh	r2, [r7, #12]
 80031f0:	89f9      	ldrh	r1, [r7, #14]
 80031f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f6:	9302      	str	r3, [sp, #8]
 80031f8:	8b3b      	ldrh	r3, [r7, #24]
 80031fa:	9301      	str	r3, [sp, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	4807      	ldr	r0, [pc, #28]	; (8003220 <I2C4_ReadReg+0x48>)
 8003204:	f004 f92a 	bl	800745c <HAL_I2C_Mem_Read>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800320e:	2300      	movs	r3, #0
 8003210:	e001      	b.n	8003216 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003212:	f06f 0307 	mvn.w	r3, #7
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	24000ddc 	.word	0x24000ddc

08003224 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af02      	add	r7, sp, #8
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800322e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003238:	2200      	movs	r2, #0
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f805 	bl	800324c <BSP_LCD_InitEx>
 8003242:	4603      	mov	r3, r0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b09e      	sub	sp, #120	; 0x78
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800325a:	2300      	movs	r3, #0
 800325c:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d808      	bhi.n	800327a <BSP_LCD_InitEx+0x2e>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <BSP_LCD_InitEx+0x2e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d006      	beq.n	8003282 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800327a:	f06f 0301 	mvn.w	r3, #1
 800327e:	677b      	str	r3, [r7, #116]	; 0x74
 8003280:	e0a8      	b.n	80033d4 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d109      	bne.n	800329c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8003288:	2302      	movs	r3, #2
 800328a:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 800328c:	4a54      	ldr	r2, [pc, #336]	; (80033e0 <BSP_LCD_InitEx+0x194>)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	015b      	lsls	r3, r3, #5
 8003292:	4413      	add	r3, r2
 8003294:	3310      	adds	r3, #16
 8003296:	2202      	movs	r2, #2
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e008      	b.n	80032ae <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800329c:	2300      	movs	r3, #0
 800329e:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 80032a0:	4a4f      	ldr	r2, [pc, #316]	; (80033e0 <BSP_LCD_InitEx+0x194>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	015b      	lsls	r3, r3, #5
 80032a6:	4413      	add	r3, r2
 80032a8:	3310      	adds	r3, #16
 80032aa:	2204      	movs	r2, #4
 80032ac:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80032ae:	4a4c      	ldr	r2, [pc, #304]	; (80033e0 <BSP_LCD_InitEx+0x194>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <BSP_LCD_InitEx+0x194>)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	015b      	lsls	r3, r3, #5
 80032c2:	4413      	add	r3, r2
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80032c8:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <BSP_LCD_InitEx+0x194>)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	015b      	lsls	r3, r3, #5
 80032ce:	4413      	add	r3, r2
 80032d0:	3304      	adds	r3, #4
 80032d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032d6:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <BSP_LCD_InitEx+0x198>)
 80032da:	4a43      	ldr	r2, [pc, #268]	; (80033e8 <BSP_LCD_InitEx+0x19c>)
 80032dc:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <BSP_LCD_InitEx+0x1a0>)
 80032e0:	4a43      	ldr	r2, [pc, #268]	; (80033f0 <BSP_LCD_InitEx+0x1a4>)
 80032e2:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80032e4:	483f      	ldr	r0, [pc, #252]	; (80033e4 <BSP_LCD_InitEx+0x198>)
 80032e6:	f000 fd1b 	bl	8003d20 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80032ea:	4840      	ldr	r0, [pc, #256]	; (80033ec <BSP_LCD_InitEx+0x1a0>)
 80032ec:	f000 fde4 	bl	8003eb8 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <BSP_LCD_InitEx+0x1a8>)
 80032f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 80032f4:	4b40      	ldr	r3, [pc, #256]	; (80033f8 <BSP_LCD_InitEx+0x1ac>)
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 80032f8:	2370      	movs	r3, #112	; 0x70
 80032fa:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80032fc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003300:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003304:	4611      	mov	r1, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fdd6 	bl	8001eb8 <FT5336_RegisterBusIO>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	da03      	bge.n	800331a <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003312:	f06f 0304 	mvn.w	r3, #4
 8003316:	677b      	str	r3, [r7, #116]	; 0x74
 8003318:	e02b      	b.n	8003372 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 800331a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800331e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fec1 	bl	80020ac <FT5336_ReadID>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	da03      	bge.n	8003338 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003330:	f06f 0304 	mvn.w	r3, #4
 8003334:	677b      	str	r3, [r7, #116]	; 0x74
 8003336:	e01c      	b.n	8003372 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8003338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333a:	2b51      	cmp	r3, #81	; 0x51
 800333c:	d003      	beq.n	8003346 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800333e:	f06f 0306 	mvn.w	r3, #6
 8003342:	677b      	str	r3, [r7, #116]	; 0x74
 8003344:	e015      	b.n	8003372 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8003346:	4827      	ldr	r0, [pc, #156]	; (80033e4 <BSP_LCD_InitEx+0x198>)
 8003348:	f000 f8e8 	bl	800351c <MX_LTDC_ClockConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003352:	f06f 0303 	mvn.w	r3, #3
 8003356:	677b      	str	r3, [r7, #116]	; 0x74
 8003358:	e00b      	b.n	8003372 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800335a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800335e:	6839      	ldr	r1, [r7, #0]
 8003360:	4820      	ldr	r0, [pc, #128]	; (80033e4 <BSP_LCD_InitEx+0x198>)
 8003362:	f000 f84d 	bl	8003400 <MX_LTDC_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800336c:	f06f 0303 	mvn.w	r3, #3
 8003370:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8003372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003374:	2b00      	cmp	r3, #0
 8003376:	d12d      	bne.n	80033d4 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8003378:	2000      	movs	r0, #0
 800337a:	f000 fe2f 	bl	8003fdc <BSP_SDRAM_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8003384:	f06f 0303 	mvn.w	r3, #3
 8003388:	e025      	b.n	80033d6 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8003396:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800339a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 800339c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 80033a0:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	461a      	mov	r2, r3
 80033ac:	2100      	movs	r1, #0
 80033ae:	480d      	ldr	r0, [pc, #52]	; (80033e4 <BSP_LCD_InitEx+0x198>)
 80033b0:	f000 f872 	bl	8003498 <MX_LTDC_ConfigLayer>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80033ba:	f06f 0303 	mvn.w	r3, #3
 80033be:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80033c0:	480e      	ldr	r0, [pc, #56]	; (80033fc <BSP_LCD_InitEx+0x1b0>)
 80033c2:	f000 fde1 	bl	8003f88 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80033c6:	4a06      	ldr	r2, [pc, #24]	; (80033e0 <BSP_LCD_InitEx+0x194>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	015b      	lsls	r3, r3, #5
 80033cc:	4413      	add	r3, r2
 80033ce:	3318      	adds	r3, #24
 80033d0:	2201      	movs	r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80033d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3778      	adds	r7, #120	; 0x78
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	24000f8c 	.word	0x24000f8c
 80033e4:	24000ee4 	.word	0x24000ee4
 80033e8:	50001000 	.word	0x50001000
 80033ec:	24000e7c 	.word	0x24000e7c
 80033f0:	52001000 	.word	0x52001000
 80033f4:	08002979 	.word	0x08002979
 80033f8:	08002b15 	.word	0x08002b15
 80033fc:	24000e30 	.word	0x24000e30

08003400 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a21      	ldr	r2, [pc, #132]	; (8003494 <MX_LTDC_Init+0x94>)
 8003410:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2228      	movs	r2, #40	; 0x28
 800342e:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	222a      	movs	r2, #42	; 0x2a
 8003434:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2209      	movs	r2, #9
 800344e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	220b      	movs	r2, #11
 8003454:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f103 020b 	add.w	r2, r3, #11
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f103 020d 	add.w	r2, r3, #13
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22ff      	movs	r2, #255	; 0xff
 800346e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	22ff      	movs	r2, #255	; 0xff
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f004 fc6e 	bl	8007d64 <HAL_LTDC_Init>
 8003488:	4603      	mov	r3, r0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	50001000 	.word	0x50001000

08003498 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b092      	sub	sp, #72	; 0x48
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80034c2:	23ff      	movs	r3, #255	; 0xff
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80034ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80034d0:	2307      	movs	r3, #7
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	4619      	mov	r1, r3
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f004 fd03 	bl	8007f18 <HAL_LTDC_ConfigLayer>
 8003512:	4603      	mov	r3, r0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3748      	adds	r7, #72	; 0x48
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0b2      	sub	sp, #200	; 0xc8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8003524:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8003530:	2305      	movs	r3, #5
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8003534:	23a0      	movs	r3, #160	; 0xa0
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003538:	2302      	movs	r3, #2
 800353a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800353c:	2302      	movs	r3, #2
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8003540:	2353      	movs	r3, #83	; 0x53
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	4618      	mov	r0, r3
 8003552:	f006 f969 	bl	8009828 <HAL_RCCEx_PeriphCLKConfig>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	37c8      	adds	r7, #200	; 0xc8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003574:	f06f 0301 	mvn.w	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e007      	b.n	800358c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <BSP_LCD_GetPixelFormat+0x3c>)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	015b      	lsls	r3, r3, #5
 8003582:	4413      	add	r3, r2
 8003584:	330c      	adds	r3, #12
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800358c:	68fb      	ldr	r3, [r7, #12]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	24000f8c 	.word	0x24000f8c

080035a0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035b4:	f06f 0301 	mvn.w	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e006      	b.n	80035ca <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 80035bc:	4a06      	ldr	r2, [pc, #24]	; (80035d8 <BSP_LCD_SetActiveLayer+0x38>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	015b      	lsls	r3, r3, #5
 80035c2:	4413      	add	r3, r2
 80035c4:	3308      	adds	r3, #8
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80035ca:	68fb      	ldr	r3, [r7, #12]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	24000f8c 	.word	0x24000f8c

080035dc <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80035f0:	f06f 0301 	mvn.w	r3, #1
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e006      	b.n	8003606 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80035f8:	4a06      	ldr	r2, [pc, #24]	; (8003614 <BSP_LCD_GetXSize+0x38>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	015b      	lsls	r3, r3, #5
 80035fe:	4413      	add	r3, r2
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003606:	68fb      	ldr	r3, [r7, #12]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	24000f8c 	.word	0x24000f8c

08003618 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800362c:	f06f 0301 	mvn.w	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e007      	b.n	8003644 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8003634:	4a07      	ldr	r2, [pc, #28]	; (8003654 <BSP_LCD_GetYSize+0x3c>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	015b      	lsls	r3, r3, #5
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003644:	68fb      	ldr	r3, [r7, #12]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	24000f8c 	.word	0x24000f8c

08003658 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	; 0x38
 800365c:	af02      	add	r7, sp, #8
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	330a      	adds	r3, #10
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	330b      	adds	r3, #11
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	441a      	add	r2, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	441a      	add	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	330d      	adds	r3, #13
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	4413      	add	r3, r2
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	3312      	adds	r3, #18
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	3313      	adds	r3, #19
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	441a      	add	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	3314      	adds	r3, #20
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	041b      	lsls	r3, r3, #16
 80036ac:	441a      	add	r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3315      	adds	r3, #21
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	061b      	lsls	r3, r3, #24
 80036b6:	4413      	add	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	3316      	adds	r3, #22
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	3317      	adds	r3, #23
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	441a      	add	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3318      	adds	r3, #24
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	441a      	add	r2, r3
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	3319      	adds	r3, #25
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	4413      	add	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	331c      	adds	r3, #28
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	331d      	adds	r3, #29
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	4413      	add	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80036f6:	4a37      	ldr	r2, [pc, #220]	; (80037d4 <BSP_LCD_DrawBitmap+0x17c>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	015b      	lsls	r3, r3, #5
 80036fc:	4413      	add	r3, r2
 80036fe:	3308      	adds	r3, #8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <BSP_LCD_DrawBitmap+0x180>)
 8003704:	2134      	movs	r1, #52	; 0x34
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4930      	ldr	r1, [pc, #192]	; (80037d4 <BSP_LCD_DrawBitmap+0x17c>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	015b      	lsls	r3, r3, #5
 8003716:	440b      	add	r3, r1
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	fb03 f101 	mul.w	r1, r3, r1
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	440b      	add	r3, r1
 8003724:	482b      	ldr	r0, [pc, #172]	; (80037d4 <BSP_LCD_DrawBitmap+0x17c>)
 8003726:	68f9      	ldr	r1, [r7, #12]
 8003728:	0149      	lsls	r1, r1, #5
 800372a:	4401      	add	r1, r0
 800372c:	3110      	adds	r1, #16
 800372e:	6809      	ldr	r1, [r1, #0]
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	3b20      	subs	r3, #32
 800373c:	2b07      	cmp	r3, #7
 800373e:	d802      	bhi.n	8003746 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
 8003744:	e008      	b.n	8003758 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3b10      	subs	r3, #16
 800374a:	2b07      	cmp	r3, #7
 800374c:	d802      	bhi.n	8003754 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800374e:	2302      	movs	r3, #2
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	e001      	b.n	8003758 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8003754:	2301      	movs	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3b01      	subs	r3, #1
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	08d2      	lsrs	r2, r2, #3
 8003766:	fb03 f202 	mul.w	r2, r3, r2
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	4413      	add	r3, r2
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4413      	add	r3, r2
 8003772:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003774:	2300      	movs	r3, #0
 8003776:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003778:	e023      	b.n	80037c2 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 800377a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	6a39      	ldr	r1, [r7, #32]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fa77 	bl	8003c78 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <BSP_LCD_DrawBitmap+0x17c>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	015b      	lsls	r3, r3, #5
 8003790:	4413      	add	r3, r2
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	490f      	ldr	r1, [pc, #60]	; (80037d4 <BSP_LCD_DrawBitmap+0x17c>)
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	0152      	lsls	r2, r2, #5
 800379a:	440a      	add	r2, r1
 800379c:	3210      	adds	r2, #16
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	fb02 f303 	mul.w	r3, r2, r3
 80037a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037a6:	4413      	add	r3, r2
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	fb02 f303 	mul.w	r3, r2, r3
 80037b4:	425b      	negs	r3, r3
 80037b6:	6a3a      	ldr	r2, [r7, #32]
 80037b8:	4413      	add	r3, r2
 80037ba:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037be:	3301      	adds	r3, #1
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d3d7      	bcc.n	800377a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 80037ca:	69fb      	ldr	r3, [r7, #28]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3730      	adds	r7, #48	; 0x30
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	24000f8c 	.word	0x24000f8c
 80037d8:	24000ee4 	.word	0x24000ee4

080037dc <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	e032      	b.n	800385a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e028      	b.n	800384c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	021b      	lsls	r3, r3, #8
 8003808:	431a      	orrs	r2, r3
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3302      	adds	r3, #2
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	041b      	lsls	r3, r3, #16
 8003812:	431a      	orrs	r2, r3
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	3303      	adds	r3, #3
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	441a      	add	r2, r3
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f95e 	bl	8003af0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8003834:	4a0d      	ldr	r2, [pc, #52]	; (800386c <BSP_LCD_FillRGBRect+0x90>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	015b      	lsls	r3, r3, #5
 800383a:	4413      	add	r3, r2
 800383c:	3310      	adds	r3, #16
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4413      	add	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3301      	adds	r3, #1
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	429a      	cmp	r2, r3
 8003852:	d3d2      	bcc.n	80037fa <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3301      	adds	r3, #1
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	429a      	cmp	r2, r3
 8003860:	d3c8      	bcc.n	80037f4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	24000f8c 	.word	0x24000f8c

08003870 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800387e:	4a21      	ldr	r2, [pc, #132]	; (8003904 <BSP_LCD_DrawHLine+0x94>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015b      	lsls	r3, r3, #5
 8003884:	4413      	add	r3, r2
 8003886:	3308      	adds	r3, #8
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1f      	ldr	r2, [pc, #124]	; (8003908 <BSP_LCD_DrawHLine+0x98>)
 800388c:	2134      	movs	r1, #52	; 0x34
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	335c      	adds	r3, #92	; 0x5c
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	491a      	ldr	r1, [pc, #104]	; (8003904 <BSP_LCD_DrawHLine+0x94>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	015b      	lsls	r3, r3, #5
 800389e:	440b      	add	r3, r1
 80038a0:	3310      	adds	r3, #16
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4817      	ldr	r0, [pc, #92]	; (8003904 <BSP_LCD_DrawHLine+0x94>)
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	0149      	lsls	r1, r1, #5
 80038aa:	4401      	add	r1, r0
 80038ac:	6809      	ldr	r1, [r1, #0]
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	fb01 f000 	mul.w	r0, r1, r0
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	4401      	add	r1, r0
 80038b8:	fb01 f303 	mul.w	r3, r1, r3
 80038bc:	4413      	add	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	441a      	add	r2, r3
 80038c6:	490f      	ldr	r1, [pc, #60]	; (8003904 <BSP_LCD_DrawHLine+0x94>)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	440b      	add	r3, r1
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d907      	bls.n	80038e4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80038d4:	4a0b      	ldr	r2, [pc, #44]	; (8003904 <BSP_LCD_DrawHLine+0x94>)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015b      	lsls	r3, r3, #5
 80038da:	4413      	add	r3, r2
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80038e4:	6979      	ldr	r1, [r7, #20]
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2300      	movs	r3, #0
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2301      	movs	r3, #1
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f956 	bl	8003ba4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	24000f8c 	.word	0x24000f8c
 8003908:	24000ee4 	.word	0x24000ee4

0800390c <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800391a:	4a24      	ldr	r2, [pc, #144]	; (80039ac <BSP_LCD_DrawVLine+0xa0>)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	015b      	lsls	r3, r3, #5
 8003920:	4413      	add	r3, r2
 8003922:	3308      	adds	r3, #8
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <BSP_LCD_DrawVLine+0xa4>)
 8003928:	2134      	movs	r1, #52	; 0x34
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	335c      	adds	r3, #92	; 0x5c
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	491d      	ldr	r1, [pc, #116]	; (80039ac <BSP_LCD_DrawVLine+0xa0>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	015b      	lsls	r3, r3, #5
 800393a:	440b      	add	r3, r1
 800393c:	3310      	adds	r3, #16
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	481a      	ldr	r0, [pc, #104]	; (80039ac <BSP_LCD_DrawVLine+0xa0>)
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	0149      	lsls	r1, r1, #5
 8003946:	4401      	add	r1, r0
 8003948:	6809      	ldr	r1, [r1, #0]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	fb01 f000 	mul.w	r0, r1, r0
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	4401      	add	r1, r0
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	441a      	add	r2, r3
 8003962:	4912      	ldr	r1, [pc, #72]	; (80039ac <BSP_LCD_DrawVLine+0xa0>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	015b      	lsls	r3, r3, #5
 8003968:	440b      	add	r3, r1
 800396a:	3304      	adds	r3, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d908      	bls.n	8003984 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <BSP_LCD_DrawVLine+0xa0>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	015b      	lsls	r3, r3, #5
 8003978:	4413      	add	r3, r2
 800397a:	3304      	adds	r3, #4
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8003984:	6979      	ldr	r1, [r7, #20]
 8003986:	4a09      	ldr	r2, [pc, #36]	; (80039ac <BSP_LCD_DrawVLine+0xa0>)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	015b      	lsls	r3, r3, #5
 800398c:	4413      	add	r3, r2
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3b01      	subs	r3, #1
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	9201      	str	r2, [sp, #4]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2201      	movs	r2, #1
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f901 	bl	8003ba4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	24000f8c 	.word	0x24000f8c
 80039b0:	24000ee4 	.word	0x24000ee4

080039b4 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <BSP_LCD_FillRect+0x7c>)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	015b      	lsls	r3, r3, #5
 80039c8:	4413      	add	r3, r2
 80039ca:	3308      	adds	r3, #8
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <BSP_LCD_FillRect+0x80>)
 80039d0:	2134      	movs	r1, #52	; 0x34
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	335c      	adds	r3, #92	; 0x5c
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4914      	ldr	r1, [pc, #80]	; (8003a30 <BSP_LCD_FillRect+0x7c>)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	015b      	lsls	r3, r3, #5
 80039e2:	440b      	add	r3, r1
 80039e4:	3310      	adds	r3, #16
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4811      	ldr	r0, [pc, #68]	; (8003a30 <BSP_LCD_FillRect+0x7c>)
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	0149      	lsls	r1, r1, #5
 80039ee:	4401      	add	r1, r0
 80039f0:	6809      	ldr	r1, [r1, #0]
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	fb01 f000 	mul.w	r0, r1, r0
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4401      	add	r1, r0
 80039fc:	fb01 f303 	mul.w	r3, r1, r3
 8003a00:	4413      	add	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <BSP_LCD_FillRect+0x7c>)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015b      	lsls	r3, r3, #5
 8003a0c:	4413      	add	r3, r2
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	9201      	str	r2, [sp, #4]
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f8c0 	bl	8003ba4 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	24000f8c 	.word	0x24000f8c
 8003a34:	24000ee4 	.word	0x24000ee4

08003a38 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003a46:	4a28      	ldr	r2, [pc, #160]	; (8003ae8 <BSP_LCD_ReadPixel+0xb0>)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	015b      	lsls	r3, r3, #5
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3308      	adds	r3, #8
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a26      	ldr	r2, [pc, #152]	; (8003aec <BSP_LCD_ReadPixel+0xb4>)
 8003a54:	2134      	movs	r1, #52	; 0x34
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3348      	adds	r3, #72	; 0x48
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d11c      	bne.n	8003a9e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003a64:	4a20      	ldr	r2, [pc, #128]	; (8003ae8 <BSP_LCD_ReadPixel+0xb0>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	015b      	lsls	r3, r3, #5
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <BSP_LCD_ReadPixel+0xb4>)
 8003a72:	2134      	movs	r1, #52	; 0x34
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	335c      	adds	r3, #92	; 0x5c
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	491a      	ldr	r1, [pc, #104]	; (8003ae8 <BSP_LCD_ReadPixel+0xb0>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015b      	lsls	r3, r3, #5
 8003a84:	440b      	add	r3, r1
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	fb03 f101 	mul.w	r1, r3, r1
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	440b      	add	r3, r1
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e01d      	b.n	8003ada <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <BSP_LCD_ReadPixel+0xb0>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	015b      	lsls	r3, r3, #5
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a10      	ldr	r2, [pc, #64]	; (8003aec <BSP_LCD_ReadPixel+0xb4>)
 8003aac:	2134      	movs	r1, #52	; 0x34
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	335c      	adds	r3, #92	; 0x5c
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	490b      	ldr	r1, [pc, #44]	; (8003ae8 <BSP_LCD_ReadPixel+0xb0>)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015b      	lsls	r3, r3, #5
 8003abe:	440b      	add	r3, r1
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	fb03 f101 	mul.w	r1, r3, r1
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	440b      	add	r3, r1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	24000f8c 	.word	0x24000f8c
 8003aec:	24000ee4 	.word	0x24000ee4

08003af0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003afe:	4a27      	ldr	r2, [pc, #156]	; (8003b9c <BSP_LCD_WritePixel+0xac>)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	015b      	lsls	r3, r3, #5
 8003b04:	4413      	add	r3, r2
 8003b06:	3308      	adds	r3, #8
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a25      	ldr	r2, [pc, #148]	; (8003ba0 <BSP_LCD_WritePixel+0xb0>)
 8003b0c:	2134      	movs	r1, #52	; 0x34
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	3348      	adds	r3, #72	; 0x48
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d11c      	bne.n	8003b56 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8003b1c:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <BSP_LCD_WritePixel+0xac>)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	015b      	lsls	r3, r3, #5
 8003b22:	4413      	add	r3, r2
 8003b24:	3308      	adds	r3, #8
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1d      	ldr	r2, [pc, #116]	; (8003ba0 <BSP_LCD_WritePixel+0xb0>)
 8003b2a:	2134      	movs	r1, #52	; 0x34
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	335c      	adds	r3, #92	; 0x5c
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4919      	ldr	r1, [pc, #100]	; (8003b9c <BSP_LCD_WritePixel+0xac>)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	015b      	lsls	r3, r3, #5
 8003b3c:	440b      	add	r3, r1
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	fb03 f101 	mul.w	r1, r3, r1
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	440b      	add	r3, r1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	e01b      	b.n	8003b8e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8003b56:	4a11      	ldr	r2, [pc, #68]	; (8003b9c <BSP_LCD_WritePixel+0xac>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	015b      	lsls	r3, r3, #5
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3308      	adds	r3, #8
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a0f      	ldr	r2, [pc, #60]	; (8003ba0 <BSP_LCD_WritePixel+0xb0>)
 8003b64:	2134      	movs	r1, #52	; 0x34
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	335c      	adds	r3, #92	; 0x5c
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	490a      	ldr	r1, [pc, #40]	; (8003b9c <BSP_LCD_WritePixel+0xac>)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	015b      	lsls	r3, r3, #5
 8003b76:	440b      	add	r3, r1
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	fb03 f101 	mul.w	r1, r3, r1
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	440b      	add	r3, r1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	24000f8c 	.word	0x24000f8c
 8003ba0:	24000ee4 	.word	0x24000ee4

08003ba4 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8003bb6:	4a2d      	ldr	r2, [pc, #180]	; (8003c6c <LL_FillBuffer+0xc8>)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	015b      	lsls	r3, r3, #5
 8003bbc:	4413      	add	r3, r2
 8003bbe:	330c      	adds	r3, #12
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d129      	bne.n	8003c1a <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	0adb      	lsrs	r3, r3, #11
 8003bce:	f003 021f 	and.w	r2, r3, #31
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	3317      	adds	r3, #23
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	0419      	lsls	r1, r3, #16
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bea:	4613      	mov	r3, r2
 8003bec:	01db      	lsls	r3, r3, #7
 8003bee:	4413      	add	r3, r2
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3321      	adds	r3, #33	; 0x21
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	021b      	lsls	r3, r3, #8
 8003bfa:	4319      	orrs	r1, r3
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	f003 021f 	and.w	r2, r3, #31
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	3317      	adds	r3, #23
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	430b      	orrs	r3, r1
 8003c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c16:	613b      	str	r3, [r7, #16]
    break;
 8003c18:	e002      	b.n	8003c20 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
    break;
 8003c1e:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8003c20:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c26:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003c28:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8003c2e:	4a10      	ldr	r2, [pc, #64]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c36:	4a0f      	ldr	r2, [pc, #60]	; (8003c74 <LL_FillBuffer+0xd0>)
 8003c38:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003c3a:	480d      	ldr	r0, [pc, #52]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c3c:	f002 fc18 	bl	8006470 <HAL_DMA2D_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10e      	bne.n	8003c64 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	4807      	ldr	r0, [pc, #28]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c52:	f002 fc7b 	bl	800654c <HAL_DMA2D_Start>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003c5c:	2132      	movs	r1, #50	; 0x32
 8003c5e:	4804      	ldr	r0, [pc, #16]	; (8003c70 <LL_FillBuffer+0xcc>)
 8003c60:	f002 fc9f 	bl	80065a2 <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	24000f8c 	.word	0x24000f8c
 8003c70:	24000e7c 	.word	0x24000e7c
 8003c74:	52001000 	.word	0x52001000

08003c78 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8003c86:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <LL_ConvertLineToRGB+0x9c>)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	4413      	add	r3, r2
 8003c8e:	330c      	adds	r3, #12
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d102      	bne.n	8003c9c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8003c96:	2302      	movs	r3, #2
 8003c98:	617b      	str	r3, [r7, #20]
    break;
 8003c9a:	e002      	b.n	8003ca2 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
    break;
 8003ca0:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003ca4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ca8:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003cb6:	4b18      	ldr	r3, [pc, #96]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cbe:	22ff      	movs	r2, #255	; 0xff
 8003cc0:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cd0:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <LL_ConvertLineToRGB+0xa4>)
 8003cd2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8003cd4:	4810      	ldr	r0, [pc, #64]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cd6:	f002 fbcb 	bl	8006470 <HAL_DMA2D_Init>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d115      	bne.n	8003d0c <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	480d      	ldr	r0, [pc, #52]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003ce4:	f002 fd46 	bl	8006774 <HAL_DMA2D_ConfigLayer>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10e      	bne.n	8003d0c <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	4807      	ldr	r0, [pc, #28]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003cfa:	f002 fc27 	bl	800654c <HAL_DMA2D_Start>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8003d04:	2132      	movs	r1, #50	; 0x32
 8003d06:	4804      	ldr	r0, [pc, #16]	; (8003d18 <LL_ConvertLineToRGB+0xa0>)
 8003d08:	f002 fc4b 	bl	80065a2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	24000f8c 	.word	0x24000f8c
 8003d18:	24000e7c 	.word	0x24000e7c
 8003d1c:	52001000 	.word	0x52001000

08003d20 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08e      	sub	sp, #56	; 0x38
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <LTDC_MspInit+0x17c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	f040 80b0 	bne.w	8003e94 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003d34:	4b5a      	ldr	r3, [pc, #360]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d3a:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d44:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	623b      	str	r3, [r7, #32]
 8003d50:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d58:	4a51      	ldr	r2, [pc, #324]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d62:	4b4f      	ldr	r3, [pc, #316]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d70:	4b4b      	ldr	r3, [pc, #300]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d76:	4a4a      	ldr	r2, [pc, #296]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d80:	4b47      	ldr	r3, [pc, #284]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d8e:	4b44      	ldr	r3, [pc, #272]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d94:	4a42      	ldr	r2, [pc, #264]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003dac:	4b3c      	ldr	r3, [pc, #240]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db2:	4a3b      	ldr	r2, [pc, #236]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dbc:	4b38      	ldr	r3, [pc, #224]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dca:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd0:	4a33      	ldr	r2, [pc, #204]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003dd2:	f043 0308 	orr.w	r3, r3, #8
 8003dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dda:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 8003de8:	f24d 2303 	movw	r3, #53763	; 0xd203
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dee:	2302      	movs	r3, #2
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003df6:	2302      	movs	r3, #2
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003dfa:	230e      	movs	r3, #14
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e02:	4619      	mov	r1, r3
 8003e04:	4827      	ldr	r0, [pc, #156]	; (8003ea4 <LTDC_MspInit+0x184>)
 8003e06:	f002 fe6d 	bl	8006ae4 <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 8003e0a:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e10:	230e      	movs	r3, #14
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4823      	ldr	r0, [pc, #140]	; (8003ea8 <LTDC_MspInit+0x188>)
 8003e1c:	f002 fe62 	bl	8006ae4 <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003e20:	23ff      	movs	r3, #255	; 0xff
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e24:	230e      	movs	r3, #14
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	481f      	ldr	r0, [pc, #124]	; (8003eac <LTDC_MspInit+0x18c>)
 8003e30:	f002 fe58 	bl	8006ae4 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8003e34:	f240 2302 	movw	r3, #514	; 0x202
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003e42:	2302      	movs	r3, #2
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003e46:	230e      	movs	r3, #14
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8003e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4817      	ldr	r0, [pc, #92]	; (8003eb0 <LTDC_MspInit+0x190>)
 8003e52:	f002 fe47 	bl	8006ae4 <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e62:	4619      	mov	r1, r3
 8003e64:	4813      	ldr	r0, [pc, #76]	; (8003eb4 <LTDC_MspInit+0x194>)
 8003e66:	f002 fe3d 	bl	8006ae4 <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	4811      	ldr	r0, [pc, #68]	; (8003eb4 <LTDC_MspInit+0x194>)
 8003e70:	f003 f8f2 	bl	8007058 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003e7c:	f043 0308 	orr.w	r3, r3, #8
 8003e80:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8a:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <LTDC_MspInit+0x180>)
 8003e8c:	f023 0308 	bic.w	r3, r3, #8
 8003e90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8003e94:	bf00      	nop
 8003e96:	3738      	adds	r7, #56	; 0x38
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	50001000 	.word	0x50001000
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	58022000 	.word	0x58022000
 8003ea8:	58022400 	.word	0x58022400
 8003eac:	58022800 	.word	0x58022800
 8003eb0:	58021c00 	.word	0x58021c00
 8003eb4:	58020c00 	.word	0x58020c00

08003eb8 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <DMA2D_MspInit+0x54>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d11a      	bne.n	8003f00 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003ecc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003ed2:	f043 0310 	orr.w	r3, r3, #16
 8003ed6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003eda:	4b0d      	ldr	r3, [pc, #52]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003eea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eec:	4a08      	ldr	r2, [pc, #32]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003eee:	f043 0310 	orr.w	r3, r3, #16
 8003ef2:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef8:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <DMA2D_MspInit+0x58>)
 8003efa:	f023 0310 	bic.w	r3, r3, #16
 8003efe:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	52001000 	.word	0x52001000
 8003f10:	58024400 	.word	0x58024400

08003f14 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003f1c:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <TIMx_PWM_MspInit+0x6c>)
 8003f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <TIMx_PWM_MspInit+0x6c>)
 8003f24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <TIMx_PWM_MspInit+0x6c>)
 8003f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <TIMx_PWM_MspInit+0x6c>)
 8003f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <TIMx_PWM_MspInit+0x6c>)
 8003f42:	f043 0302 	orr.w	r3, r3, #2
 8003f46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	; (8003f80 <TIMx_PWM_MspInit+0x6c>)
 8003f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8003f60:	2301      	movs	r3, #1
 8003f62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8003f64:	2303      	movs	r3, #3
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 8003f6c:	f107 0314 	add.w	r3, r7, #20
 8003f70:	4619      	mov	r1, r3
 8003f72:	4804      	ldr	r0, [pc, #16]	; (8003f84 <TIMx_PWM_MspInit+0x70>)
 8003f74:	f002 fdb6 	bl	8006ae4 <HAL_GPIO_Init>
}
 8003f78:	bf00      	nop
 8003f7a:	3728      	adds	r7, #40	; 0x28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	58024400 	.word	0x58024400
 8003f84:	58022800 	.word	0x58022800

08003f88 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <TIMx_PWM_Init+0x50>)
 8003f94:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f007 fc3d 	bl	800b816 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ffb9 	bl	8003f14 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003fae:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f007 fbcd 	bl	800b768 <HAL_TIM_PWM_Init>
}
 8003fce:	bf00      	nop
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40010400 	.word	0x40010400

08003fdc <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8003fee:	f06f 0301 	mvn.w	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e044      	b.n	8004080 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2234      	movs	r2, #52	; 0x34
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	4a23      	ldr	r2, [pc, #140]	; (800408c <BSP_SDRAM_Init+0xb0>)
 8004000:	4413      	add	r3, r2
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f8a8 	bl	8004158 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2234      	movs	r2, #52	; 0x34
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	4a1e      	ldr	r2, [pc, #120]	; (800408c <BSP_SDRAM_Init+0xb0>)
 8004012:	4413      	add	r3, r2
 8004014:	2210      	movs	r2, #16
 8004016:	2104      	movs	r1, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f83b 	bl	8004094 <MX_SDRAM_BANK2_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8004024:	f04f 33ff 	mov.w	r3, #4294967295
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e029      	b.n	8004080 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800402c:	4b18      	ldr	r3, [pc, #96]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 800402e:	2208      	movs	r2, #8
 8004030:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8004032:	4b17      	ldr	r3, [pc, #92]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 8004034:	2203      	movs	r2, #3
 8004036:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 800403a:	f240 6203 	movw	r2, #1539	; 0x603
 800403e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8004040:	4b13      	ldr	r3, [pc, #76]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 8004042:	2200      	movs	r2, #0
 8004044:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 800404e:	2230      	movs	r2, #48	; 0x30
 8004050:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 800405a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2234      	movs	r2, #52	; 0x34
 8004064:	fb02 f303 	mul.w	r3, r2, r3
 8004068:	4a08      	ldr	r2, [pc, #32]	; (800408c <BSP_SDRAM_Init+0xb0>)
 800406a:	4413      	add	r3, r2
 800406c:	4908      	ldr	r1, [pc, #32]	; (8004090 <BSP_SDRAM_Init+0xb4>)
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fa82 	bl	8002578 <MT48LC4M32B2_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800407a:	f06f 0304 	mvn.w	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8004080:	68fb      	ldr	r3, [r7, #12]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	24000fac 	.word	0x24000fac
 8004090:	24000fe0 	.word	0x24000fe0

08004094 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <MX_SDRAM_BANK2_Init+0x90>)
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <MX_SDRAM_BANK2_Init+0x94>)
 80040a4:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2201      	movs	r2, #1
 80040aa:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040be:	4b19      	ldr	r3, [pc, #100]	; (8004124 <MX_SDRAM_BANK2_Init+0x90>)
 80040c0:	2240      	movs	r2, #64	; 0x40
 80040c2:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80040ca:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e0:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 80040e8:	2302      	movs	r3, #2
 80040ea:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80040ec:	2307      	movs	r3, #7
 80040ee:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 80040f0:	2304      	movs	r3, #4
 80040f2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 80040f4:	2307      	movs	r3, #7
 80040f6:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80040f8:	2302      	movs	r3, #2
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 8004100:	2302      	movs	r3, #2
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	4619      	mov	r1, r3
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f007 f9b8 	bl	800b480 <HAL_SDRAM_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3730      	adds	r7, #48	; 0x30
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	24000fac 	.word	0x24000fac
 8004128:	52004140 	.word	0x52004140

0800412c <BSP_SDRAM_IRQHandler>:
  * @brief  This function handles SDRAM MDMA interrupt request.
  * @param  Instance SDRAM instance
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8004134:	4a07      	ldr	r2, [pc, #28]	; (8004154 <BSP_SDRAM_IRQHandler+0x28>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2134      	movs	r1, #52	; 0x34
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3330      	adds	r3, #48	; 0x30
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f004 f963 	bl	8008410 <HAL_MDMA_IRQHandler>
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	24000fac 	.word	0x24000fac

08004158 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b08e      	sub	sp, #56	; 0x38
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004160:	4b73      	ldr	r3, [pc, #460]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004162:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004166:	4a72      	ldr	r2, [pc, #456]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800416c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004170:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004172:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004176:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800417a:	623b      	str	r3, [r7, #32]
 800417c:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800417e:	4b6c      	ldr	r3, [pc, #432]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004180:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004184:	4a6a      	ldr	r2, [pc, #424]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800418e:	4b68      	ldr	r3, [pc, #416]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004190:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800419c:	4b64      	ldr	r3, [pc, #400]	; (8004330 <SDRAM_MspInit+0x1d8>)
 800419e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041a2:	4a63      	ldr	r2, [pc, #396]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041a4:	f043 0308 	orr.w	r3, r3, #8
 80041a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ac:	4b60      	ldr	r3, [pc, #384]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ba:	4b5d      	ldr	r3, [pc, #372]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c0:	4a5b      	ldr	r2, [pc, #364]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041c2:	f043 0310 	orr.w	r3, r3, #16
 80041c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041ca:	4b59      	ldr	r3, [pc, #356]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d0:	f003 0310 	and.w	r3, r3, #16
 80041d4:	617b      	str	r3, [r7, #20]
 80041d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041d8:	4b55      	ldr	r3, [pc, #340]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041de:	4a54      	ldr	r2, [pc, #336]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041e0:	f043 0320 	orr.w	r3, r3, #32
 80041e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041e8:	4b51      	ldr	r3, [pc, #324]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80041f6:	4b4e      	ldr	r3, [pc, #312]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041fc:	4a4c      	ldr	r2, [pc, #304]	; (8004330 <SDRAM_MspInit+0x1d8>)
 80041fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004206:	4b4a      	ldr	r3, [pc, #296]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004214:	4b46      	ldr	r3, [pc, #280]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800421a:	4a45      	ldr	r2, [pc, #276]	; (8004330 <SDRAM_MspInit+0x1d8>)
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004224:	4b42      	ldr	r3, [pc, #264]	; (8004330 <SDRAM_MspInit+0x1d8>)
 8004226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004232:	2302      	movs	r3, #2
 8004234:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004236:	2301      	movs	r3, #1
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800423a:	2303      	movs	r3, #3
 800423c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800423e:	230c      	movs	r3, #12
 8004240:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8004242:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800424c:	4619      	mov	r1, r3
 800424e:	4839      	ldr	r0, [pc, #228]	; (8004334 <SDRAM_MspInit+0x1dc>)
 8004250:	f002 fc48 	bl	8006ae4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004254:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800425a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800425e:	4619      	mov	r1, r3
 8004260:	4835      	ldr	r0, [pc, #212]	; (8004338 <SDRAM_MspInit+0x1e0>)
 8004262:	f002 fc3f 	bl	8006ae4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004266:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800426c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004270:	4619      	mov	r1, r3
 8004272:	4832      	ldr	r0, [pc, #200]	; (800433c <SDRAM_MspInit+0x1e4>)
 8004274:	f002 fc36 	bl	8006ae4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 8004278:	f248 1333 	movw	r3, #33075	; 0x8133
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800427e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004282:	4619      	mov	r1, r3
 8004284:	482e      	ldr	r0, [pc, #184]	; (8004340 <SDRAM_MspInit+0x1e8>)
 8004286:	f002 fc2d 	bl	8006ae4 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800428a:	23e0      	movs	r3, #224	; 0xe0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800428e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004292:	4619      	mov	r1, r3
 8004294:	482b      	ldr	r0, [pc, #172]	; (8004344 <SDRAM_MspInit+0x1ec>)
 8004296:	f002 fc25 	bl	8006ae4 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800429a:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <SDRAM_MspInit+0x1f0>)
 800429c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042a0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 80042a2:	4b29      	ldr	r3, [pc, #164]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 80042aa:	4b27      	ldr	r3, [pc, #156]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042b8:	f240 2202 	movw	r2, #514	; 0x202
 80042bc:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 80042be:	4b22      	ldr	r3, [pc, #136]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042c0:	f640 0208 	movw	r2, #2056	; 0x808
 80042c4:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042c8:	2220      	movs	r2, #32
 80042ca:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80042cc:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042dc:	2200      	movs	r2, #0
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80042ec:	4b16      	ldr	r3, [pc, #88]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <SDRAM_MspInit+0x1f0>)
 80042fa:	4a14      	ldr	r2, [pc, #80]	; (800434c <SDRAM_MspInit+0x1f4>)
 80042fc:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80042fe:	4b14      	ldr	r3, [pc, #80]	; (8004350 <SDRAM_MspInit+0x1f8>)
 8004300:	4a11      	ldr	r2, [pc, #68]	; (8004348 <SDRAM_MspInit+0x1f0>)
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
 8004304:	4b10      	ldr	r3, [pc, #64]	; (8004348 <SDRAM_MspInit+0x1f0>)
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <SDRAM_MspInit+0x1f8>)
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800430a:	480f      	ldr	r0, [pc, #60]	; (8004348 <SDRAM_MspInit+0x1f0>)
 800430c:	f004 f828 	bl	8008360 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 8004310:	480d      	ldr	r0, [pc, #52]	; (8004348 <SDRAM_MspInit+0x1f0>)
 8004312:	f003 ffd9 	bl	80082c8 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 8004316:	2200      	movs	r2, #0
 8004318:	210f      	movs	r1, #15
 800431a:	207a      	movs	r0, #122	; 0x7a
 800431c:	f000 fbe5 	bl	8004aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8004320:	207a      	movs	r0, #122	; 0x7a
 8004322:	f000 fbfc 	bl	8004b1e <HAL_NVIC_EnableIRQ>
}
 8004326:	bf00      	nop
 8004328:	3738      	adds	r7, #56	; 0x38
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	58024400 	.word	0x58024400
 8004334:	58020c00 	.word	0x58020c00
 8004338:	58021000 	.word	0x58021000
 800433c:	58021400 	.word	0x58021400
 8004340:	58021800 	.word	0x58021800
 8004344:	58021c00 	.word	0x58021c00
 8004348:	24001000 	.word	0x24001000
 800434c:	52000040 	.word	0x52000040
 8004350:	24000fac 	.word	0x24000fac

08004354 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b088      	sub	sp, #32
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11c      	bne.n	80043a2 <BSP_TS_Init+0x4e>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d018      	beq.n	80043a2 <BSP_TS_Init+0x4e>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004378:	d813      	bhi.n	80043a2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00f      	beq.n	80043a2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800438a:	d80a      	bhi.n	80043a2 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	6819      	ldr	r1, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	428b      	cmp	r3, r1
 800439a:	bf28      	it	cs
 800439c:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800439e:	429a      	cmp	r2, r3
 80043a0:	d903      	bls.n	80043aa <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043a2:	f06f 0301 	mvn.w	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e06e      	b.n	8004488 <BSP_TS_Init+0x134>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f98c 	bl	80046c8 <FT5336_Probe>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e064      	b.n	8004488 <BSP_TS_Init+0x134>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4934      	ldr	r1, [pc, #208]	; (8004494 <BSP_TS_Init+0x140>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	019b      	lsls	r3, r3, #6
 80043c8:	440b      	add	r3, r1
 80043ca:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4930      	ldr	r1, [pc, #192]	; (8004494 <BSP_TS_Init+0x140>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	019b      	lsls	r3, r3, #6
 80043d6:	440b      	add	r3, r1
 80043d8:	3304      	adds	r3, #4
 80043da:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	492c      	ldr	r1, [pc, #176]	; (8004494 <BSP_TS_Init+0x140>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	440b      	add	r3, r1
 80043e8:	3308      	adds	r3, #8
 80043ea:	601a      	str	r2, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	68da      	ldr	r2, [r3, #12]
 80043f0:	4928      	ldr	r1, [pc, #160]	; (8004494 <BSP_TS_Init+0x140>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	440b      	add	r3, r1
 80043f8:	330c      	adds	r3, #12
 80043fa:	601a      	str	r2, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 80043fc:	4b26      	ldr	r3, [pc, #152]	; (8004498 <BSP_TS_Init+0x144>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4926      	ldr	r1, [pc, #152]	; (800449c <BSP_TS_Init+0x148>)
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800440a:	f107 010c 	add.w	r1, r7, #12
 800440e:	4610      	mov	r0, r2
 8004410:	4798      	blx	r3
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	da03      	bge.n	8004420 <BSP_TS_Init+0xcc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004418:	f06f 0304 	mvn.w	r3, #4
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e033      	b.n	8004488 <BSP_TS_Init+0x134>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	491c      	ldr	r1, [pc, #112]	; (8004494 <BSP_TS_Init+0x140>)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	019b      	lsls	r3, r3, #6
 8004428:	440b      	add	r3, r1
 800442a:	3310      	adds	r3, #16
 800442c:	601a      	str	r2, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4918      	ldr	r1, [pc, #96]	; (8004494 <BSP_TS_Init+0x140>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	440b      	add	r3, r1
 8004438:	3314      	adds	r3, #20
 800443a:	601a      	str	r2, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800443c:	2300      	movs	r3, #0
 800443e:	61bb      	str	r3, [r7, #24]
 8004440:	e01f      	b.n	8004482 <BSP_TS_Init+0x12e>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	4413      	add	r3, r2
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	4811      	ldr	r0, [pc, #68]	; (8004494 <BSP_TS_Init+0x140>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	0119      	lsls	r1, r3, #4
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	440b      	add	r3, r1
 8004458:	3306      	adds	r3, #6
 800445a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	4413      	add	r3, r2
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	480a      	ldr	r0, [pc, #40]	; (8004494 <BSP_TS_Init+0x140>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	0119      	lsls	r1, r3, #4
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	440b      	add	r3, r1
 8004474:	330a      	adds	r3, #10
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4403      	add	r3, r0
 800447a:	605a      	str	r2, [r3, #4]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	3301      	adds	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d9dc      	bls.n	8004442 <BSP_TS_Init+0xee>
        }
      }
    }
  }

  return ret;
 8004488:	69fb      	ldr	r3, [r7, #28]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	24001074 	.word	0x24001074
 8004498:	2400106c 	.word	0x2400106c
 800449c:	24001070 	.word	0x24001070

080044a0 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	; 0x28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80044b4:	f06f 0301 	mvn.w	r3, #1
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	e0f9      	b.n	80046b0 <BSP_TS_GetState+0x210>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80044bc:	4b7f      	ldr	r3, [pc, #508]	; (80046bc <BSP_TS_GetState+0x21c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	497f      	ldr	r1, [pc, #508]	; (80046c0 <BSP_TS_GetState+0x220>)
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80044ca:	f107 0108 	add.w	r1, r7, #8
 80044ce:	4610      	mov	r0, r2
 80044d0:	4798      	blx	r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da03      	bge.n	80044e0 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80044d8:	f06f 0304 	mvn.w	r3, #4
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
 80044de:	e0e7      	b.n	80046b0 <BSP_TS_GetState+0x210>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 80d1 	beq.w	800468a <BSP_TS_GetState+0x1ea>
    {
      x_oriented = state.TouchX;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80044f0:	4a74      	ldr	r2, [pc, #464]	; (80046c4 <BSP_TS_GetState+0x224>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	019b      	lsls	r3, r3, #6
 80044f6:	4413      	add	r3, r2
 80044f8:	3308      	adds	r3, #8
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <BSP_TS_GetState+0x6c>
      {
        x_oriented = state.TouchY;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800450c:	4a6d      	ldr	r2, [pc, #436]	; (80046c4 <BSP_TS_GetState+0x224>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	019b      	lsls	r3, r3, #6
 8004512:	4413      	add	r3, r2
 8004514:	3308      	adds	r3, #8
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <BSP_TS_GetState+0x94>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004520:	4a68      	ldr	r2, [pc, #416]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	4413      	add	r3, r2
 8004528:	3310      	adds	r3, #16
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004534:	4a63      	ldr	r2, [pc, #396]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	019b      	lsls	r3, r3, #6
 800453a:	4413      	add	r3, r2
 800453c:	3308      	adds	r3, #8
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <BSP_TS_GetState+0xba>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8004548:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <BSP_TS_GetState+0x224>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	4413      	add	r3, r2
 8004550:	3314      	adds	r3, #20
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800455a:	4a5a      	ldr	r2, [pc, #360]	; (80046c4 <BSP_TS_GetState+0x224>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	019b      	lsls	r3, r3, #6
 8004560:	4413      	add	r3, r2
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6a3a      	ldr	r2, [r7, #32]
 8004566:	fb03 f202 	mul.w	r2, r3, r2
 800456a:	4956      	ldr	r1, [pc, #344]	; (80046c4 <BSP_TS_GetState+0x224>)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	019b      	lsls	r3, r3, #6
 8004570:	440b      	add	r3, r1
 8004572:	3310      	adds	r3, #16
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	fbb2 f2f3 	udiv	r2, r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800457e:	4a51      	ldr	r2, [pc, #324]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	019b      	lsls	r3, r3, #6
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69fa      	ldr	r2, [r7, #28]
 800458c:	fb03 f202 	mul.w	r2, r3, r2
 8004590:	494c      	ldr	r1, [pc, #304]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	440b      	add	r3, r1
 8004598:	3314      	adds	r3, #20
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	4945      	ldr	r1, [pc, #276]	; (80046c4 <BSP_TS_GetState+0x224>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	019b      	lsls	r3, r3, #6
 80045b4:	440b      	add	r3, r1
 80045b6:	3318      	adds	r3, #24
 80045b8:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d909      	bls.n	80045d2 <BSP_TS_GetState+0x132>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	4940      	ldr	r1, [pc, #256]	; (80046c4 <BSP_TS_GetState+0x224>)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	019b      	lsls	r3, r3, #6
 80045c8:	440b      	add	r3, r1
 80045ca:	3318      	adds	r3, #24
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	e008      	b.n	80045e4 <BSP_TS_GetState+0x144>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80045d2:	4a3c      	ldr	r2, [pc, #240]	; (80046c4 <BSP_TS_GetState+0x224>)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	019b      	lsls	r3, r3, #6
 80045d8:	4413      	add	r3, r2
 80045da:	3318      	adds	r3, #24
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80045e2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80045e4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	4936      	ldr	r1, [pc, #216]	; (80046c4 <BSP_TS_GetState+0x224>)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	440b      	add	r3, r1
 80045f2:	332c      	adds	r3, #44	; 0x2c
 80045f4:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d909      	bls.n	800460e <BSP_TS_GetState+0x16e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	4931      	ldr	r1, [pc, #196]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	019b      	lsls	r3, r3, #6
 8004604:	440b      	add	r3, r1
 8004606:	332c      	adds	r3, #44	; 0x2c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	e008      	b.n	8004620 <BSP_TS_GetState+0x180>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800460e:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	019b      	lsls	r3, r3, #6
 8004614:	4413      	add	r3, r2
 8004616:	332c      	adds	r3, #44	; 0x2c
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800461e:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8004620:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004622:	4a28      	ldr	r2, [pc, #160]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	019b      	lsls	r3, r3, #6
 8004628:	4413      	add	r3, r2
 800462a:	330c      	adds	r3, #12
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	429a      	cmp	r2, r3
 8004632:	d808      	bhi.n	8004646 <BSP_TS_GetState+0x1a6>
 8004634:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	4413      	add	r3, r2
 800463c:	330c      	adds	r3, #12
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	429a      	cmp	r2, r3
 8004644:	d910      	bls.n	8004668 <BSP_TS_GetState+0x1c8>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	491e      	ldr	r1, [pc, #120]	; (80046c4 <BSP_TS_GetState+0x224>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	019b      	lsls	r3, r3, #6
 8004650:	440b      	add	r3, r1
 8004652:	3318      	adds	r3, #24
 8004654:	601a      	str	r2, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	491a      	ldr	r1, [pc, #104]	; (80046c4 <BSP_TS_GetState+0x224>)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	019b      	lsls	r3, r3, #6
 8004660:	440b      	add	r3, r1
 8004662:	332c      	adds	r3, #44	; 0x2c
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e023      	b.n	80046b0 <BSP_TS_GetState+0x210>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <BSP_TS_GetState+0x224>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	4413      	add	r3, r2
 8004670:	3318      	adds	r3, #24
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <BSP_TS_GetState+0x224>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	019b      	lsls	r3, r3, #6
 800467e:	4413      	add	r3, r2
 8004680:	332c      	adds	r3, #44	; 0x2c
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	e012      	b.n	80046b0 <BSP_TS_GetState+0x210>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004690:	4a0c      	ldr	r2, [pc, #48]	; (80046c4 <BSP_TS_GetState+0x224>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	4413      	add	r3, r2
 8004698:	3318      	adds	r3, #24
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80046a0:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <BSP_TS_GetState+0x224>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	4413      	add	r3, r2
 80046a8:	332c      	adds	r3, #44	; 0x2c
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3728      	adds	r7, #40	; 0x28
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2400106c 	.word	0x2400106c
 80046c0:	24001070 	.word	0x24001070
 80046c4:	24001074 	.word	0x24001074

080046c8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80046d8:	2370      	movs	r3, #112	; 0x70
 80046da:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 80046dc:	4b23      	ldr	r3, [pc, #140]	; (800476c <FT5336_Probe+0xa4>)
 80046de:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <FT5336_Probe+0xa8>)
 80046e2:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80046e4:	4b23      	ldr	r3, [pc, #140]	; (8004774 <FT5336_Probe+0xac>)
 80046e6:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80046e8:	4b23      	ldr	r3, [pc, #140]	; (8004778 <FT5336_Probe+0xb0>)
 80046ea:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <FT5336_Probe+0xb4>)
 80046ee:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80046f0:	f107 030c 	add.w	r3, r7, #12
 80046f4:	4619      	mov	r1, r3
 80046f6:	4822      	ldr	r0, [pc, #136]	; (8004780 <FT5336_Probe+0xb8>)
 80046f8:	f7fd fbde 	bl	8001eb8 <FT5336_RegisterBusIO>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8004702:	f06f 0307 	mvn.w	r3, #7
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
 8004708:	e02a      	b.n	8004760 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800470a:	f107 0308 	add.w	r3, r7, #8
 800470e:	4619      	mov	r1, r3
 8004710:	481b      	ldr	r0, [pc, #108]	; (8004780 <FT5336_Probe+0xb8>)
 8004712:	f7fd fccb 	bl	80020ac <FT5336_ReadID>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800471c:	f06f 0304 	mvn.w	r3, #4
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
 8004722:	e01d      	b.n	8004760 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b51      	cmp	r3, #81	; 0x51
 8004728:	d003      	beq.n	8004732 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800472a:	f06f 0306 	mvn.w	r3, #6
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
 8004730:	e016      	b.n	8004760 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 8004732:	4a14      	ldr	r2, [pc, #80]	; (8004784 <FT5336_Probe+0xbc>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4912      	ldr	r1, [pc, #72]	; (8004780 <FT5336_Probe+0xb8>)
 8004738:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <FT5336_Probe+0xc0>)
 800473e:	4a13      	ldr	r2, [pc, #76]	; (800478c <FT5336_Probe+0xc4>)
 8004740:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <FT5336_Probe+0xc0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	490e      	ldr	r1, [pc, #56]	; (8004784 <FT5336_Probe+0xbc>)
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004750:	4610      	mov	r0, r2
 8004752:	4798      	blx	r3
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800475a:	f06f 0304 	mvn.w	r3, #4
 800475e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004762:	4618      	mov	r0, r3
 8004764:	3728      	adds	r7, #40	; 0x28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	08002979 	.word	0x08002979
 8004770:	080029ed 	.word	0x080029ed
 8004774:	08002b15 	.word	0x08002b15
 8004778:	08002ab9 	.word	0x08002ab9
 800477c:	08002b71 	.word	0x08002b71
 8004780:	240010b4 	.word	0x240010b4
 8004784:	24001070 	.word	0x24001070
 8004788:	2400106c 	.word	0x2400106c
 800478c:	24000018 	.word	0x24000018

08004790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004796:	2003      	movs	r0, #3
 8004798:	f000 f99c 	bl	8004ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800479c:	f004 fe6e 	bl	800947c <HAL_RCC_GetSysClockFreq>
 80047a0:	4602      	mov	r2, r0
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <HAL_Init+0x68>)
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	0a1b      	lsrs	r3, r3, #8
 80047a8:	f003 030f 	and.w	r3, r3, #15
 80047ac:	4913      	ldr	r1, [pc, #76]	; (80047fc <HAL_Init+0x6c>)
 80047ae:	5ccb      	ldrb	r3, [r1, r3]
 80047b0:	f003 031f 	and.w	r3, r3, #31
 80047b4:	fa22 f303 	lsr.w	r3, r2, r3
 80047b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <HAL_Init+0x68>)
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <HAL_Init+0x6c>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
 80047d0:	4a0b      	ldr	r2, [pc, #44]	; (8004800 <HAL_Init+0x70>)
 80047d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047d4:	4a0b      	ldr	r2, [pc, #44]	; (8004804 <HAL_Init+0x74>)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047da:	200f      	movs	r0, #15
 80047dc:	f000 f814 	bl	8004808 <HAL_InitTick>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e002      	b.n	80047f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80047ea:	f7fd f909 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58024400 	.word	0x58024400
 80047fc:	080144dc 	.word	0x080144dc
 8004800:	24000014 	.word	0x24000014
 8004804:	24000010 	.word	0x24000010

08004808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <HAL_InitTick+0x60>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e021      	b.n	8004860 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800481c:	4b13      	ldr	r3, [pc, #76]	; (800486c <HAL_InitTick+0x64>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_InitTick+0x60>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	4619      	mov	r1, r3
 8004826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800482a:	fbb3 f3f1 	udiv	r3, r3, r1
 800482e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f981 	bl	8004b3a <HAL_SYSTICK_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e00e      	b.n	8004860 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2b0f      	cmp	r3, #15
 8004846:	d80a      	bhi.n	800485e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004848:	2200      	movs	r2, #0
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	f000 f94b 	bl	8004aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004854:	4a06      	ldr	r2, [pc, #24]	; (8004870 <HAL_InitTick+0x68>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	24000060 	.word	0x24000060
 800486c:	24000010 	.word	0x24000010
 8004870:	2400005c 	.word	0x2400005c

08004874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_IncTick+0x20>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_IncTick+0x24>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4413      	add	r3, r2
 8004884:	4a04      	ldr	r2, [pc, #16]	; (8004898 <HAL_IncTick+0x24>)
 8004886:	6013      	str	r3, [r2, #0]
}
 8004888:	bf00      	nop
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	24000060 	.word	0x24000060
 8004898:	240010dc 	.word	0x240010dc

0800489c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return uwTick;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <HAL_GetTick+0x14>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	240010dc 	.word	0x240010dc

080048b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048bc:	f7ff ffee 	bl	800489c <HAL_GetTick>
 80048c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d005      	beq.n	80048da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_Delay+0x44>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048da:	bf00      	nop
 80048dc:	f7ff ffde 	bl	800489c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d8f7      	bhi.n	80048dc <HAL_Delay+0x28>
  {
  }
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	24000060 	.word	0x24000060

080048fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_GetREVID+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0c1b      	lsrs	r3, r3, #16
}
 8004906:	4618      	mov	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	5c001000 	.word	0x5c001000

08004914 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_EnableCompensationCell+0x1c>)
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_EnableCompensationCell+0x1c>)
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	6213      	str	r3, [r2, #32]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	58000400 	.word	0x58000400

08004934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004944:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <__NVIC_SetPriorityGrouping+0x40>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004950:	4013      	ands	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <__NVIC_SetPriorityGrouping+0x44>)
 800495e:	4313      	orrs	r3, r2
 8004960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004962:	4a04      	ldr	r2, [pc, #16]	; (8004974 <__NVIC_SetPriorityGrouping+0x40>)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	60d3      	str	r3, [r2, #12]
}
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	e000ed00 	.word	0xe000ed00
 8004978:	05fa0000 	.word	0x05fa0000

0800497c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004980:	4b04      	ldr	r3, [pc, #16]	; (8004994 <__NVIC_GetPriorityGrouping+0x18>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	0a1b      	lsrs	r3, r3, #8
 8004986:	f003 0307 	and.w	r3, r3, #7
}
 800498a:	4618      	mov	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000ed00 	.word	0xe000ed00

08004998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	db0b      	blt.n	80049c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	4907      	ldr	r1, [pc, #28]	; (80049d0 <__NVIC_EnableIRQ+0x38>)
 80049b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2001      	movs	r0, #1
 80049ba:	fa00 f202 	lsl.w	r2, r0, r2
 80049be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e100 	.word	0xe000e100

080049d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	4603      	mov	r3, r0
 80049dc:	6039      	str	r1, [r7, #0]
 80049de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db0a      	blt.n	80049fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	490c      	ldr	r1, [pc, #48]	; (8004a20 <__NVIC_SetPriority+0x4c>)
 80049ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	b2d2      	uxtb	r2, r2
 80049f6:	440b      	add	r3, r1
 80049f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049fc:	e00a      	b.n	8004a14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4908      	ldr	r1, [pc, #32]	; (8004a24 <__NVIC_SetPriority+0x50>)
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	0112      	lsls	r2, r2, #4
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	440b      	add	r3, r1
 8004a12:	761a      	strb	r2, [r3, #24]
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	e000e100 	.word	0xe000e100
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b089      	sub	sp, #36	; 0x24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f1c3 0307 	rsb	r3, r3, #7
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	bf28      	it	cs
 8004a46:	2304      	movcs	r3, #4
 8004a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d902      	bls.n	8004a58 <NVIC_EncodePriority+0x30>
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3b03      	subs	r3, #3
 8004a56:	e000      	b.n	8004a5a <NVIC_EncodePriority+0x32>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43da      	mvns	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a70:	f04f 31ff 	mov.w	r1, #4294967295
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	43d9      	mvns	r1, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	4313      	orrs	r3, r2
         );
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3724      	adds	r7, #36	; 0x24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004aa0:	d301      	bcc.n	8004aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e00f      	b.n	8004ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <SysTick_Config+0x40>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aae:	210f      	movs	r1, #15
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab4:	f7ff ff8e 	bl	80049d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <SysTick_Config+0x40>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004abe:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <SysTick_Config+0x40>)
 8004ac0:	2207      	movs	r2, #7
 8004ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000e010 	.word	0xe000e010

08004ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ff29 	bl	8004934 <__NVIC_SetPriorityGrouping>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	4603      	mov	r3, r0
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004af8:	f7ff ff40 	bl	800497c <__NVIC_GetPriorityGrouping>
 8004afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f7ff ff90 	bl	8004a28 <NVIC_EncodePriority>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff ff5f 	bl	80049d4 <__NVIC_SetPriority>
}
 8004b16:	bf00      	nop
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff33 	bl	8004998 <__NVIC_EnableIRQ>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ffa4 	bl	8004a90 <SysTick_Config>
 8004b48:	4603      	mov	r3, r0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b5c:	f7ff fe9e 	bl	800489c <HAL_GetTick>
 8004b60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e2dc      	b.n	8005126 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d008      	beq.n	8004b8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e2cd      	b.n	8005126 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a76      	ldr	r2, [pc, #472]	; (8004d68 <HAL_DMA_Abort+0x214>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d04a      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a74      	ldr	r2, [pc, #464]	; (8004d6c <HAL_DMA_Abort+0x218>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d045      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a73      	ldr	r2, [pc, #460]	; (8004d70 <HAL_DMA_Abort+0x21c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d040      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a71      	ldr	r2, [pc, #452]	; (8004d74 <HAL_DMA_Abort+0x220>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d03b      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a70      	ldr	r2, [pc, #448]	; (8004d78 <HAL_DMA_Abort+0x224>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d036      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_DMA_Abort+0x228>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d031      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a6d      	ldr	r2, [pc, #436]	; (8004d80 <HAL_DMA_Abort+0x22c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d02c      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a6b      	ldr	r2, [pc, #428]	; (8004d84 <HAL_DMA_Abort+0x230>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d027      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6a      	ldr	r2, [pc, #424]	; (8004d88 <HAL_DMA_Abort+0x234>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a68      	ldr	r2, [pc, #416]	; (8004d8c <HAL_DMA_Abort+0x238>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a67      	ldr	r2, [pc, #412]	; (8004d90 <HAL_DMA_Abort+0x23c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a65      	ldr	r2, [pc, #404]	; (8004d94 <HAL_DMA_Abort+0x240>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a64      	ldr	r2, [pc, #400]	; (8004d98 <HAL_DMA_Abort+0x244>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a62      	ldr	r2, [pc, #392]	; (8004d9c <HAL_DMA_Abort+0x248>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a61      	ldr	r2, [pc, #388]	; (8004da0 <HAL_DMA_Abort+0x24c>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <HAL_DMA_Abort+0xd6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5f      	ldr	r2, [pc, #380]	; (8004da4 <HAL_DMA_Abort+0x250>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_DMA_Abort+0xda>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_DMA_Abort+0xdc>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 021e 	bic.w	r2, r2, #30
 8004c42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e00a      	b.n	8004c72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 020e 	bic.w	r2, r2, #14
 8004c6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a3c      	ldr	r2, [pc, #240]	; (8004d68 <HAL_DMA_Abort+0x214>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d072      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a3a      	ldr	r2, [pc, #232]	; (8004d6c <HAL_DMA_Abort+0x218>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d06d      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a39      	ldr	r2, [pc, #228]	; (8004d70 <HAL_DMA_Abort+0x21c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d068      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a37      	ldr	r2, [pc, #220]	; (8004d74 <HAL_DMA_Abort+0x220>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d063      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <HAL_DMA_Abort+0x224>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d05e      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a34      	ldr	r2, [pc, #208]	; (8004d7c <HAL_DMA_Abort+0x228>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d059      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a33      	ldr	r2, [pc, #204]	; (8004d80 <HAL_DMA_Abort+0x22c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d054      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a31      	ldr	r2, [pc, #196]	; (8004d84 <HAL_DMA_Abort+0x230>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04f      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a30      	ldr	r2, [pc, #192]	; (8004d88 <HAL_DMA_Abort+0x234>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04a      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a2e      	ldr	r2, [pc, #184]	; (8004d8c <HAL_DMA_Abort+0x238>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d045      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a2d      	ldr	r2, [pc, #180]	; (8004d90 <HAL_DMA_Abort+0x23c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d040      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <HAL_DMA_Abort+0x240>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d03b      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <HAL_DMA_Abort+0x244>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d036      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <HAL_DMA_Abort+0x248>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d031      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a27      	ldr	r2, [pc, #156]	; (8004da0 <HAL_DMA_Abort+0x24c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d02c      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a25      	ldr	r2, [pc, #148]	; (8004da4 <HAL_DMA_Abort+0x250>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d027      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_DMA_Abort+0x254>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d022      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a22      	ldr	r2, [pc, #136]	; (8004dac <HAL_DMA_Abort+0x258>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d01d      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a21      	ldr	r2, [pc, #132]	; (8004db0 <HAL_DMA_Abort+0x25c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d018      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <HAL_DMA_Abort+0x260>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_DMA_Abort+0x264>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <HAL_DMA_Abort+0x268>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d009      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <HAL_DMA_Abort+0x26c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d004      	beq.n	8004d62 <HAL_DMA_Abort+0x20e>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a19      	ldr	r2, [pc, #100]	; (8004dc4 <HAL_DMA_Abort+0x270>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d132      	bne.n	8004dc8 <HAL_DMA_Abort+0x274>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e031      	b.n	8004dca <HAL_DMA_Abort+0x276>
 8004d66:	bf00      	nop
 8004d68:	40020010 	.word	0x40020010
 8004d6c:	40020028 	.word	0x40020028
 8004d70:	40020040 	.word	0x40020040
 8004d74:	40020058 	.word	0x40020058
 8004d78:	40020070 	.word	0x40020070
 8004d7c:	40020088 	.word	0x40020088
 8004d80:	400200a0 	.word	0x400200a0
 8004d84:	400200b8 	.word	0x400200b8
 8004d88:	40020410 	.word	0x40020410
 8004d8c:	40020428 	.word	0x40020428
 8004d90:	40020440 	.word	0x40020440
 8004d94:	40020458 	.word	0x40020458
 8004d98:	40020470 	.word	0x40020470
 8004d9c:	40020488 	.word	0x40020488
 8004da0:	400204a0 	.word	0x400204a0
 8004da4:	400204b8 	.word	0x400204b8
 8004da8:	58025408 	.word	0x58025408
 8004dac:	5802541c 	.word	0x5802541c
 8004db0:	58025430 	.word	0x58025430
 8004db4:	58025444 	.word	0x58025444
 8004db8:	58025458 	.word	0x58025458
 8004dbc:	5802546c 	.word	0x5802546c
 8004dc0:	58025480 	.word	0x58025480
 8004dc4:	58025494 	.word	0x58025494
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ddc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6d      	ldr	r2, [pc, #436]	; (8004f98 <HAL_DMA_Abort+0x444>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d04a      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a6b      	ldr	r2, [pc, #428]	; (8004f9c <HAL_DMA_Abort+0x448>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d045      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6a      	ldr	r2, [pc, #424]	; (8004fa0 <HAL_DMA_Abort+0x44c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d040      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a68      	ldr	r2, [pc, #416]	; (8004fa4 <HAL_DMA_Abort+0x450>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d03b      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a67      	ldr	r2, [pc, #412]	; (8004fa8 <HAL_DMA_Abort+0x454>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d036      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a65      	ldr	r2, [pc, #404]	; (8004fac <HAL_DMA_Abort+0x458>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d031      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a64      	ldr	r2, [pc, #400]	; (8004fb0 <HAL_DMA_Abort+0x45c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d02c      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a62      	ldr	r2, [pc, #392]	; (8004fb4 <HAL_DMA_Abort+0x460>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d027      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a61      	ldr	r2, [pc, #388]	; (8004fb8 <HAL_DMA_Abort+0x464>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d022      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a5f      	ldr	r2, [pc, #380]	; (8004fbc <HAL_DMA_Abort+0x468>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d01d      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a5e      	ldr	r2, [pc, #376]	; (8004fc0 <HAL_DMA_Abort+0x46c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d018      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5c      	ldr	r2, [pc, #368]	; (8004fc4 <HAL_DMA_Abort+0x470>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d013      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a5b      	ldr	r2, [pc, #364]	; (8004fc8 <HAL_DMA_Abort+0x474>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d00e      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a59      	ldr	r2, [pc, #356]	; (8004fcc <HAL_DMA_Abort+0x478>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a58      	ldr	r2, [pc, #352]	; (8004fd0 <HAL_DMA_Abort+0x47c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d004      	beq.n	8004e7e <HAL_DMA_Abort+0x32a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a56      	ldr	r2, [pc, #344]	; (8004fd4 <HAL_DMA_Abort+0x480>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d108      	bne.n	8004e90 <HAL_DMA_Abort+0x33c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e007      	b.n	8004ea0 <HAL_DMA_Abort+0x34c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ea0:	e013      	b.n	8004eca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ea2:	f7ff fcfb 	bl	800489c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b05      	cmp	r3, #5
 8004eae:	d90c      	bls.n	8004eca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e12d      	b.n	8005126 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e5      	bne.n	8004ea2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2f      	ldr	r2, [pc, #188]	; (8004f98 <HAL_DMA_Abort+0x444>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d04a      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2d      	ldr	r2, [pc, #180]	; (8004f9c <HAL_DMA_Abort+0x448>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d045      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2c      	ldr	r2, [pc, #176]	; (8004fa0 <HAL_DMA_Abort+0x44c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d040      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a2a      	ldr	r2, [pc, #168]	; (8004fa4 <HAL_DMA_Abort+0x450>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d03b      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a29      	ldr	r2, [pc, #164]	; (8004fa8 <HAL_DMA_Abort+0x454>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d036      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a27      	ldr	r2, [pc, #156]	; (8004fac <HAL_DMA_Abort+0x458>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d031      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a26      	ldr	r2, [pc, #152]	; (8004fb0 <HAL_DMA_Abort+0x45c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d02c      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <HAL_DMA_Abort+0x460>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d027      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a23      	ldr	r2, [pc, #140]	; (8004fb8 <HAL_DMA_Abort+0x464>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d022      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a21      	ldr	r2, [pc, #132]	; (8004fbc <HAL_DMA_Abort+0x468>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01d      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a20      	ldr	r2, [pc, #128]	; (8004fc0 <HAL_DMA_Abort+0x46c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d018      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <HAL_DMA_Abort+0x470>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <HAL_DMA_Abort+0x474>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00e      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <HAL_DMA_Abort+0x478>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1a      	ldr	r2, [pc, #104]	; (8004fd0 <HAL_DMA_Abort+0x47c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d004      	beq.n	8004f76 <HAL_DMA_Abort+0x422>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_DMA_Abort+0x480>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <HAL_DMA_Abort+0x426>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <HAL_DMA_Abort+0x428>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02b      	beq.n	8004fd8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	223f      	movs	r2, #63	; 0x3f
 8004f90:	409a      	lsls	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	609a      	str	r2, [r3, #8]
 8004f96:	e02a      	b.n	8004fee <HAL_DMA_Abort+0x49a>
 8004f98:	40020010 	.word	0x40020010
 8004f9c:	40020028 	.word	0x40020028
 8004fa0:	40020040 	.word	0x40020040
 8004fa4:	40020058 	.word	0x40020058
 8004fa8:	40020070 	.word	0x40020070
 8004fac:	40020088 	.word	0x40020088
 8004fb0:	400200a0 	.word	0x400200a0
 8004fb4:	400200b8 	.word	0x400200b8
 8004fb8:	40020410 	.word	0x40020410
 8004fbc:	40020428 	.word	0x40020428
 8004fc0:	40020440 	.word	0x40020440
 8004fc4:	40020458 	.word	0x40020458
 8004fc8:	40020470 	.word	0x40020470
 8004fcc:	40020488 	.word	0x40020488
 8004fd0:	400204a0 	.word	0x400204a0
 8004fd4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a4f      	ldr	r2, [pc, #316]	; (8005130 <HAL_DMA_Abort+0x5dc>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d072      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a4d      	ldr	r2, [pc, #308]	; (8005134 <HAL_DMA_Abort+0x5e0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d06d      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a4c      	ldr	r2, [pc, #304]	; (8005138 <HAL_DMA_Abort+0x5e4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d068      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a4a      	ldr	r2, [pc, #296]	; (800513c <HAL_DMA_Abort+0x5e8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d063      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a49      	ldr	r2, [pc, #292]	; (8005140 <HAL_DMA_Abort+0x5ec>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d05e      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a47      	ldr	r2, [pc, #284]	; (8005144 <HAL_DMA_Abort+0x5f0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d059      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a46      	ldr	r2, [pc, #280]	; (8005148 <HAL_DMA_Abort+0x5f4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d054      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a44      	ldr	r2, [pc, #272]	; (800514c <HAL_DMA_Abort+0x5f8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d04f      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a43      	ldr	r2, [pc, #268]	; (8005150 <HAL_DMA_Abort+0x5fc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d04a      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a41      	ldr	r2, [pc, #260]	; (8005154 <HAL_DMA_Abort+0x600>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d045      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a40      	ldr	r2, [pc, #256]	; (8005158 <HAL_DMA_Abort+0x604>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d040      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3e      	ldr	r2, [pc, #248]	; (800515c <HAL_DMA_Abort+0x608>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d03b      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <HAL_DMA_Abort+0x60c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d036      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3b      	ldr	r2, [pc, #236]	; (8005164 <HAL_DMA_Abort+0x610>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d031      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3a      	ldr	r2, [pc, #232]	; (8005168 <HAL_DMA_Abort+0x614>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d02c      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a38      	ldr	r2, [pc, #224]	; (800516c <HAL_DMA_Abort+0x618>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d027      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a37      	ldr	r2, [pc, #220]	; (8005170 <HAL_DMA_Abort+0x61c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a35      	ldr	r2, [pc, #212]	; (8005174 <HAL_DMA_Abort+0x620>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a34      	ldr	r2, [pc, #208]	; (8005178 <HAL_DMA_Abort+0x624>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a32      	ldr	r2, [pc, #200]	; (800517c <HAL_DMA_Abort+0x628>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a31      	ldr	r2, [pc, #196]	; (8005180 <HAL_DMA_Abort+0x62c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <HAL_DMA_Abort+0x630>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <HAL_DMA_Abort+0x634>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_DMA_Abort+0x58a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a2c      	ldr	r2, [pc, #176]	; (800518c <HAL_DMA_Abort+0x638>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <HAL_DMA_Abort+0x58e>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <HAL_DMA_Abort+0x590>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d015      	beq.n	8005114 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00c      	beq.n	8005114 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005108:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005112:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40020010 	.word	0x40020010
 8005134:	40020028 	.word	0x40020028
 8005138:	40020040 	.word	0x40020040
 800513c:	40020058 	.word	0x40020058
 8005140:	40020070 	.word	0x40020070
 8005144:	40020088 	.word	0x40020088
 8005148:	400200a0 	.word	0x400200a0
 800514c:	400200b8 	.word	0x400200b8
 8005150:	40020410 	.word	0x40020410
 8005154:	40020428 	.word	0x40020428
 8005158:	40020440 	.word	0x40020440
 800515c:	40020458 	.word	0x40020458
 8005160:	40020470 	.word	0x40020470
 8005164:	40020488 	.word	0x40020488
 8005168:	400204a0 	.word	0x400204a0
 800516c:	400204b8 	.word	0x400204b8
 8005170:	58025408 	.word	0x58025408
 8005174:	5802541c 	.word	0x5802541c
 8005178:	58025430 	.word	0x58025430
 800517c:	58025444 	.word	0x58025444
 8005180:	58025458 	.word	0x58025458
 8005184:	5802546c 	.word	0x5802546c
 8005188:	58025480 	.word	0x58025480
 800518c:	58025494 	.word	0x58025494

08005190 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e237      	b.n	8005612 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d004      	beq.n	80051b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2280      	movs	r2, #128	; 0x80
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e22c      	b.n	8005612 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a5c      	ldr	r2, [pc, #368]	; (8005330 <HAL_DMA_Abort_IT+0x1a0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d04a      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a5b      	ldr	r2, [pc, #364]	; (8005334 <HAL_DMA_Abort_IT+0x1a4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d045      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a59      	ldr	r2, [pc, #356]	; (8005338 <HAL_DMA_Abort_IT+0x1a8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d040      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a58      	ldr	r2, [pc, #352]	; (800533c <HAL_DMA_Abort_IT+0x1ac>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d03b      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a56      	ldr	r2, [pc, #344]	; (8005340 <HAL_DMA_Abort_IT+0x1b0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d036      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a55      	ldr	r2, [pc, #340]	; (8005344 <HAL_DMA_Abort_IT+0x1b4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d031      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a53      	ldr	r2, [pc, #332]	; (8005348 <HAL_DMA_Abort_IT+0x1b8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d02c      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a52      	ldr	r2, [pc, #328]	; (800534c <HAL_DMA_Abort_IT+0x1bc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d027      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a50      	ldr	r2, [pc, #320]	; (8005350 <HAL_DMA_Abort_IT+0x1c0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d022      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a4f      	ldr	r2, [pc, #316]	; (8005354 <HAL_DMA_Abort_IT+0x1c4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d01d      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a4d      	ldr	r2, [pc, #308]	; (8005358 <HAL_DMA_Abort_IT+0x1c8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d018      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4c      	ldr	r2, [pc, #304]	; (800535c <HAL_DMA_Abort_IT+0x1cc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d013      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a4a      	ldr	r2, [pc, #296]	; (8005360 <HAL_DMA_Abort_IT+0x1d0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d00e      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a49      	ldr	r2, [pc, #292]	; (8005364 <HAL_DMA_Abort_IT+0x1d4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d009      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a47      	ldr	r2, [pc, #284]	; (8005368 <HAL_DMA_Abort_IT+0x1d8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d004      	beq.n	8005258 <HAL_DMA_Abort_IT+0xc8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a46      	ldr	r2, [pc, #280]	; (800536c <HAL_DMA_Abort_IT+0x1dc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_DMA_Abort_IT+0xcc>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_DMA_Abort_IT+0xce>
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8086 	beq.w	8005370 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2204      	movs	r2, #4
 8005268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <HAL_DMA_Abort_IT+0x1a0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d04a      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2e      	ldr	r2, [pc, #184]	; (8005334 <HAL_DMA_Abort_IT+0x1a4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d045      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2c      	ldr	r2, [pc, #176]	; (8005338 <HAL_DMA_Abort_IT+0x1a8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d040      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_DMA_Abort_IT+0x1ac>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d03b      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a29      	ldr	r2, [pc, #164]	; (8005340 <HAL_DMA_Abort_IT+0x1b0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d036      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a28      	ldr	r2, [pc, #160]	; (8005344 <HAL_DMA_Abort_IT+0x1b4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d031      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <HAL_DMA_Abort_IT+0x1b8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02c      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a25      	ldr	r2, [pc, #148]	; (800534c <HAL_DMA_Abort_IT+0x1bc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d027      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a23      	ldr	r2, [pc, #140]	; (8005350 <HAL_DMA_Abort_IT+0x1c0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d022      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a22      	ldr	r2, [pc, #136]	; (8005354 <HAL_DMA_Abort_IT+0x1c4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d01d      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a20      	ldr	r2, [pc, #128]	; (8005358 <HAL_DMA_Abort_IT+0x1c8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d018      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1f      	ldr	r2, [pc, #124]	; (800535c <HAL_DMA_Abort_IT+0x1cc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d013      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_DMA_Abort_IT+0x1d0>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00e      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_DMA_Abort_IT+0x1d4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d009      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1a      	ldr	r2, [pc, #104]	; (8005368 <HAL_DMA_Abort_IT+0x1d8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_DMA_Abort_IT+0x17c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a19      	ldr	r2, [pc, #100]	; (800536c <HAL_DMA_Abort_IT+0x1dc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <HAL_DMA_Abort_IT+0x18e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0201 	bic.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e178      	b.n	8005610 <HAL_DMA_Abort_IT+0x480>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e16f      	b.n	8005610 <HAL_DMA_Abort_IT+0x480>
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 020e 	bic.w	r2, r2, #14
 800537e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6c      	ldr	r2, [pc, #432]	; (8005538 <HAL_DMA_Abort_IT+0x3a8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d04a      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a6b      	ldr	r2, [pc, #428]	; (800553c <HAL_DMA_Abort_IT+0x3ac>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d045      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a69      	ldr	r2, [pc, #420]	; (8005540 <HAL_DMA_Abort_IT+0x3b0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d040      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a68      	ldr	r2, [pc, #416]	; (8005544 <HAL_DMA_Abort_IT+0x3b4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d03b      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a66      	ldr	r2, [pc, #408]	; (8005548 <HAL_DMA_Abort_IT+0x3b8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d036      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a65      	ldr	r2, [pc, #404]	; (800554c <HAL_DMA_Abort_IT+0x3bc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d031      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a63      	ldr	r2, [pc, #396]	; (8005550 <HAL_DMA_Abort_IT+0x3c0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d02c      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a62      	ldr	r2, [pc, #392]	; (8005554 <HAL_DMA_Abort_IT+0x3c4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d027      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a60      	ldr	r2, [pc, #384]	; (8005558 <HAL_DMA_Abort_IT+0x3c8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5f      	ldr	r2, [pc, #380]	; (800555c <HAL_DMA_Abort_IT+0x3cc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01d      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5d      	ldr	r2, [pc, #372]	; (8005560 <HAL_DMA_Abort_IT+0x3d0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5c      	ldr	r2, [pc, #368]	; (8005564 <HAL_DMA_Abort_IT+0x3d4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5a      	ldr	r2, [pc, #360]	; (8005568 <HAL_DMA_Abort_IT+0x3d8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a59      	ldr	r2, [pc, #356]	; (800556c <HAL_DMA_Abort_IT+0x3dc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a57      	ldr	r2, [pc, #348]	; (8005570 <HAL_DMA_Abort_IT+0x3e0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_DMA_Abort_IT+0x290>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a56      	ldr	r2, [pc, #344]	; (8005574 <HAL_DMA_Abort_IT+0x3e4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <HAL_DMA_Abort_IT+0x2a2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
 8005430:	e007      	b.n	8005442 <HAL_DMA_Abort_IT+0x2b2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <HAL_DMA_Abort_IT+0x3a8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d072      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a3a      	ldr	r2, [pc, #232]	; (800553c <HAL_DMA_Abort_IT+0x3ac>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d06d      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a39      	ldr	r2, [pc, #228]	; (8005540 <HAL_DMA_Abort_IT+0x3b0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d068      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a37      	ldr	r2, [pc, #220]	; (8005544 <HAL_DMA_Abort_IT+0x3b4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d063      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a36      	ldr	r2, [pc, #216]	; (8005548 <HAL_DMA_Abort_IT+0x3b8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d05e      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a34      	ldr	r2, [pc, #208]	; (800554c <HAL_DMA_Abort_IT+0x3bc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d059      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a33      	ldr	r2, [pc, #204]	; (8005550 <HAL_DMA_Abort_IT+0x3c0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d054      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a31      	ldr	r2, [pc, #196]	; (8005554 <HAL_DMA_Abort_IT+0x3c4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04f      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a30      	ldr	r2, [pc, #192]	; (8005558 <HAL_DMA_Abort_IT+0x3c8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d04a      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2e      	ldr	r2, [pc, #184]	; (800555c <HAL_DMA_Abort_IT+0x3cc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d045      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <HAL_DMA_Abort_IT+0x3d0>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d040      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2b      	ldr	r2, [pc, #172]	; (8005564 <HAL_DMA_Abort_IT+0x3d4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d03b      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <HAL_DMA_Abort_IT+0x3d8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d036      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <HAL_DMA_Abort_IT+0x3dc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d031      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a27      	ldr	r2, [pc, #156]	; (8005570 <HAL_DMA_Abort_IT+0x3e0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d02c      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <HAL_DMA_Abort_IT+0x3e4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d027      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a24      	ldr	r2, [pc, #144]	; (8005578 <HAL_DMA_Abort_IT+0x3e8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d022      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a22      	ldr	r2, [pc, #136]	; (800557c <HAL_DMA_Abort_IT+0x3ec>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01d      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	; (8005580 <HAL_DMA_Abort_IT+0x3f0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d018      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <HAL_DMA_Abort_IT+0x3f4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_DMA_Abort_IT+0x3f8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_DMA_Abort_IT+0x3fc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <HAL_DMA_Abort_IT+0x400>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_DMA_Abort_IT+0x3a2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a19      	ldr	r2, [pc, #100]	; (8005594 <HAL_DMA_Abort_IT+0x404>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d132      	bne.n	8005598 <HAL_DMA_Abort_IT+0x408>
 8005532:	2301      	movs	r3, #1
 8005534:	e031      	b.n	800559a <HAL_DMA_Abort_IT+0x40a>
 8005536:	bf00      	nop
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
 8005578:	58025408 	.word	0x58025408
 800557c:	5802541c 	.word	0x5802541c
 8005580:	58025430 	.word	0x58025430
 8005584:	58025444 	.word	0x58025444
 8005588:	58025458 	.word	0x58025458
 800558c:	5802546c 	.word	0x5802546c
 8005590:	58025480 	.word	0x58025480
 8005594:	58025494 	.word	0x58025494
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d028      	beq.n	80055f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2201      	movs	r2, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00c      	beq.n	80055f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80055ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop

0800561c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08a      	sub	sp, #40	; 0x28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005628:	4b67      	ldr	r3, [pc, #412]	; (80057c8 <HAL_DMA_IRQHandler+0x1ac>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a67      	ldr	r2, [pc, #412]	; (80057cc <HAL_DMA_IRQHandler+0x1b0>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	0a9b      	lsrs	r3, r3, #10
 8005634:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005642:	6a3b      	ldr	r3, [r7, #32]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a5f      	ldr	r2, [pc, #380]	; (80057d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d04a      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a5d      	ldr	r2, [pc, #372]	; (80057d4 <HAL_DMA_IRQHandler+0x1b8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d045      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a5c      	ldr	r2, [pc, #368]	; (80057d8 <HAL_DMA_IRQHandler+0x1bc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d040      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5a      	ldr	r2, [pc, #360]	; (80057dc <HAL_DMA_IRQHandler+0x1c0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d03b      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a59      	ldr	r2, [pc, #356]	; (80057e0 <HAL_DMA_IRQHandler+0x1c4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d036      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a57      	ldr	r2, [pc, #348]	; (80057e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d031      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a56      	ldr	r2, [pc, #344]	; (80057e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d02c      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a54      	ldr	r2, [pc, #336]	; (80057ec <HAL_DMA_IRQHandler+0x1d0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d027      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a53      	ldr	r2, [pc, #332]	; (80057f0 <HAL_DMA_IRQHandler+0x1d4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a51      	ldr	r2, [pc, #324]	; (80057f4 <HAL_DMA_IRQHandler+0x1d8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01d      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a50      	ldr	r2, [pc, #320]	; (80057f8 <HAL_DMA_IRQHandler+0x1dc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a4e      	ldr	r2, [pc, #312]	; (80057fc <HAL_DMA_IRQHandler+0x1e0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a4d      	ldr	r2, [pc, #308]	; (8005800 <HAL_DMA_IRQHandler+0x1e4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a4b      	ldr	r2, [pc, #300]	; (8005804 <HAL_DMA_IRQHandler+0x1e8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a4a      	ldr	r2, [pc, #296]	; (8005808 <HAL_DMA_IRQHandler+0x1ec>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_DMA_IRQHandler+0xd2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a48      	ldr	r2, [pc, #288]	; (800580c <HAL_DMA_IRQHandler+0x1f0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <HAL_DMA_IRQHandler+0xd6>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e000      	b.n	80056f4 <HAL_DMA_IRQHandler+0xd8>
 80056f2:	2300      	movs	r3, #0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 842b 	beq.w	8005f50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	2208      	movs	r2, #8
 8005704:	409a      	lsls	r2, r3
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 80a2 	beq.w	8005854 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d04a      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <HAL_DMA_IRQHandler+0x1b8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d045      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2b      	ldr	r2, [pc, #172]	; (80057d8 <HAL_DMA_IRQHandler+0x1bc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d040      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2a      	ldr	r2, [pc, #168]	; (80057dc <HAL_DMA_IRQHandler+0x1c0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d03b      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a28      	ldr	r2, [pc, #160]	; (80057e0 <HAL_DMA_IRQHandler+0x1c4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d036      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d031      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d02c      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a24      	ldr	r2, [pc, #144]	; (80057ec <HAL_DMA_IRQHandler+0x1d0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d027      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <HAL_DMA_IRQHandler+0x1d4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d022      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <HAL_DMA_IRQHandler+0x1d8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d01d      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <HAL_DMA_IRQHandler+0x1dc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d018      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <HAL_DMA_IRQHandler+0x1e0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <HAL_DMA_IRQHandler+0x1e4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00e      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1b      	ldr	r2, [pc, #108]	; (8005804 <HAL_DMA_IRQHandler+0x1e8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d009      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <HAL_DMA_IRQHandler+0x1ec>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_DMA_IRQHandler+0x194>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_DMA_IRQHandler+0x1f0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d12f      	bne.n	8005810 <HAL_DMA_IRQHandler+0x1f4>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bf14      	ite	ne
 80057be:	2301      	movne	r3, #1
 80057c0:	2300      	moveq	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	e02e      	b.n	8005824 <HAL_DMA_IRQHandler+0x208>
 80057c6:	bf00      	nop
 80057c8:	24000010 	.word	0x24000010
 80057cc:	1b4e81b5 	.word	0x1b4e81b5
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0204 	bic.w	r2, r2, #4
 8005836:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2208      	movs	r2, #8
 8005842:	409a      	lsls	r2, r3
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	f043 0201 	orr.w	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	fa22 f303 	lsr.w	r3, r2, r3
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d06e      	beq.n	8005948 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a69      	ldr	r2, [pc, #420]	; (8005a14 <HAL_DMA_IRQHandler+0x3f8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d04a      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a67      	ldr	r2, [pc, #412]	; (8005a18 <HAL_DMA_IRQHandler+0x3fc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d045      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a66      	ldr	r2, [pc, #408]	; (8005a1c <HAL_DMA_IRQHandler+0x400>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d040      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a64      	ldr	r2, [pc, #400]	; (8005a20 <HAL_DMA_IRQHandler+0x404>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d03b      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a63      	ldr	r2, [pc, #396]	; (8005a24 <HAL_DMA_IRQHandler+0x408>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d036      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a61      	ldr	r2, [pc, #388]	; (8005a28 <HAL_DMA_IRQHandler+0x40c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d031      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a60      	ldr	r2, [pc, #384]	; (8005a2c <HAL_DMA_IRQHandler+0x410>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d02c      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5e      	ldr	r2, [pc, #376]	; (8005a30 <HAL_DMA_IRQHandler+0x414>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d027      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a5d      	ldr	r2, [pc, #372]	; (8005a34 <HAL_DMA_IRQHandler+0x418>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5b      	ldr	r2, [pc, #364]	; (8005a38 <HAL_DMA_IRQHandler+0x41c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01d      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a5a      	ldr	r2, [pc, #360]	; (8005a3c <HAL_DMA_IRQHandler+0x420>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a58      	ldr	r2, [pc, #352]	; (8005a40 <HAL_DMA_IRQHandler+0x424>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a57      	ldr	r2, [pc, #348]	; (8005a44 <HAL_DMA_IRQHandler+0x428>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a55      	ldr	r2, [pc, #340]	; (8005a48 <HAL_DMA_IRQHandler+0x42c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a54      	ldr	r2, [pc, #336]	; (8005a4c <HAL_DMA_IRQHandler+0x430>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_DMA_IRQHandler+0x2ee>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a52      	ldr	r2, [pc, #328]	; (8005a50 <HAL_DMA_IRQHandler+0x434>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10a      	bne.n	8005920 <HAL_DMA_IRQHandler+0x304>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e003      	b.n	8005928 <HAL_DMA_IRQHandler+0x30c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2300      	movs	r3, #0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00d      	beq.n	8005948 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	2201      	movs	r2, #1
 8005936:	409a      	lsls	r2, r3
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005940:	f043 0202 	orr.w	r2, r3, #2
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2204      	movs	r2, #4
 8005952:	409a      	lsls	r2, r3
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 808f 	beq.w	8005a7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_DMA_IRQHandler+0x3f8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d04a      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <HAL_DMA_IRQHandler+0x3fc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d045      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <HAL_DMA_IRQHandler+0x400>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d040      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <HAL_DMA_IRQHandler+0x404>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d03b      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <HAL_DMA_IRQHandler+0x408>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d036      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a24      	ldr	r2, [pc, #144]	; (8005a28 <HAL_DMA_IRQHandler+0x40c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d031      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <HAL_DMA_IRQHandler+0x410>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d02c      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <HAL_DMA_IRQHandler+0x414>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d027      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_DMA_IRQHandler+0x418>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1e      	ldr	r2, [pc, #120]	; (8005a38 <HAL_DMA_IRQHandler+0x41c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01d      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_DMA_IRQHandler+0x420>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1b      	ldr	r2, [pc, #108]	; (8005a40 <HAL_DMA_IRQHandler+0x424>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_DMA_IRQHandler+0x428>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <HAL_DMA_IRQHandler+0x42c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_DMA_IRQHandler+0x430>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_DMA_IRQHandler+0x3e2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_DMA_IRQHandler+0x434>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d12a      	bne.n	8005a54 <HAL_DMA_IRQHandler+0x438>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf14      	ite	ne
 8005a0c:	2301      	movne	r3, #1
 8005a0e:	2300      	moveq	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e023      	b.n	8005a5c <HAL_DMA_IRQHandler+0x440>
 8005a14:	40020010 	.word	0x40020010
 8005a18:	40020028 	.word	0x40020028
 8005a1c:	40020040 	.word	0x40020040
 8005a20:	40020058 	.word	0x40020058
 8005a24:	40020070 	.word	0x40020070
 8005a28:	40020088 	.word	0x40020088
 8005a2c:	400200a0 	.word	0x400200a0
 8005a30:	400200b8 	.word	0x400200b8
 8005a34:	40020410 	.word	0x40020410
 8005a38:	40020428 	.word	0x40020428
 8005a3c:	40020440 	.word	0x40020440
 8005a40:	40020458 	.word	0x40020458
 8005a44:	40020470 	.word	0x40020470
 8005a48:	40020488 	.word	0x40020488
 8005a4c:	400204a0 	.word	0x400204a0
 8005a50:	400204b8 	.word	0x400204b8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00d      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2204      	movs	r2, #4
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a74:	f043 0204 	orr.w	r2, r3, #4
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	2210      	movs	r2, #16
 8005a86:	409a      	lsls	r2, r3
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80a6 	beq.w	8005bde <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a85      	ldr	r2, [pc, #532]	; (8005cac <HAL_DMA_IRQHandler+0x690>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d04a      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a83      	ldr	r2, [pc, #524]	; (8005cb0 <HAL_DMA_IRQHandler+0x694>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d045      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a82      	ldr	r2, [pc, #520]	; (8005cb4 <HAL_DMA_IRQHandler+0x698>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d040      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a80      	ldr	r2, [pc, #512]	; (8005cb8 <HAL_DMA_IRQHandler+0x69c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d03b      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7f      	ldr	r2, [pc, #508]	; (8005cbc <HAL_DMA_IRQHandler+0x6a0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d036      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7d      	ldr	r2, [pc, #500]	; (8005cc0 <HAL_DMA_IRQHandler+0x6a4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d031      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a7c      	ldr	r2, [pc, #496]	; (8005cc4 <HAL_DMA_IRQHandler+0x6a8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d02c      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a7a      	ldr	r2, [pc, #488]	; (8005cc8 <HAL_DMA_IRQHandler+0x6ac>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d027      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a79      	ldr	r2, [pc, #484]	; (8005ccc <HAL_DMA_IRQHandler+0x6b0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d022      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a77      	ldr	r2, [pc, #476]	; (8005cd0 <HAL_DMA_IRQHandler+0x6b4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d01d      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a76      	ldr	r2, [pc, #472]	; (8005cd4 <HAL_DMA_IRQHandler+0x6b8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d018      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a74      	ldr	r2, [pc, #464]	; (8005cd8 <HAL_DMA_IRQHandler+0x6bc>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d013      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a73      	ldr	r2, [pc, #460]	; (8005cdc <HAL_DMA_IRQHandler+0x6c0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00e      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a71      	ldr	r2, [pc, #452]	; (8005ce0 <HAL_DMA_IRQHandler+0x6c4>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a70      	ldr	r2, [pc, #448]	; (8005ce4 <HAL_DMA_IRQHandler+0x6c8>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_DMA_IRQHandler+0x516>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ce8 <HAL_DMA_IRQHandler+0x6cc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d10a      	bne.n	8005b48 <HAL_DMA_IRQHandler+0x52c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	bf14      	ite	ne
 8005b40:	2301      	movne	r3, #1
 8005b42:	2300      	moveq	r3, #0
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	e009      	b.n	8005b5c <HAL_DMA_IRQHandler+0x540>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d03e      	beq.n	8005bde <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2210      	movs	r2, #16
 8005b6a:	409a      	lsls	r2, r3
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d018      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d108      	bne.n	8005b9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d024      	beq.n	8005bde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	4798      	blx	r3
 8005b9c:	e01f      	b.n	8005bde <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01b      	beq.n	8005bde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
 8005bae:	e016      	b.n	8005bde <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0208 	bic.w	r2, r2, #8
 8005bcc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	2220      	movs	r2, #32
 8005be8:	409a      	lsls	r2, r3
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8110 	beq.w	8005e14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <HAL_DMA_IRQHandler+0x690>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d04a      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <HAL_DMA_IRQHandler+0x694>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d045      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a29      	ldr	r2, [pc, #164]	; (8005cb4 <HAL_DMA_IRQHandler+0x698>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d040      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <HAL_DMA_IRQHandler+0x69c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d03b      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <HAL_DMA_IRQHandler+0x6a0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d036      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a25      	ldr	r2, [pc, #148]	; (8005cc0 <HAL_DMA_IRQHandler+0x6a4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d031      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <HAL_DMA_IRQHandler+0x6a8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d02c      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a22      	ldr	r2, [pc, #136]	; (8005cc8 <HAL_DMA_IRQHandler+0x6ac>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d027      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <HAL_DMA_IRQHandler+0x6b0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d022      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <HAL_DMA_IRQHandler+0x6b4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d01d      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <HAL_DMA_IRQHandler+0x6b8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d018      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1c      	ldr	r2, [pc, #112]	; (8005cd8 <HAL_DMA_IRQHandler+0x6bc>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d013      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1a      	ldr	r2, [pc, #104]	; (8005cdc <HAL_DMA_IRQHandler+0x6c0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00e      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a19      	ldr	r2, [pc, #100]	; (8005ce0 <HAL_DMA_IRQHandler+0x6c4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d009      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a17      	ldr	r2, [pc, #92]	; (8005ce4 <HAL_DMA_IRQHandler+0x6c8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x678>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <HAL_DMA_IRQHandler+0x6cc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d12b      	bne.n	8005cec <HAL_DMA_IRQHandler+0x6d0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf14      	ite	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	2300      	moveq	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	e02a      	b.n	8005d00 <HAL_DMA_IRQHandler+0x6e4>
 8005caa:	bf00      	nop
 8005cac:	40020010 	.word	0x40020010
 8005cb0:	40020028 	.word	0x40020028
 8005cb4:	40020040 	.word	0x40020040
 8005cb8:	40020058 	.word	0x40020058
 8005cbc:	40020070 	.word	0x40020070
 8005cc0:	40020088 	.word	0x40020088
 8005cc4:	400200a0 	.word	0x400200a0
 8005cc8:	400200b8 	.word	0x400200b8
 8005ccc:	40020410 	.word	0x40020410
 8005cd0:	40020428 	.word	0x40020428
 8005cd4:	40020440 	.word	0x40020440
 8005cd8:	40020458 	.word	0x40020458
 8005cdc:	40020470 	.word	0x40020470
 8005ce0:	40020488 	.word	0x40020488
 8005ce4:	400204a0 	.word	0x400204a0
 8005ce8:	400204b8 	.word	0x400204b8
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf14      	ite	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	2300      	moveq	r3, #0
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8087 	beq.w	8005e14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2220      	movs	r2, #32
 8005d10:	409a      	lsls	r2, r3
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d139      	bne.n	8005d96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0216 	bic.w	r2, r2, #22
 8005d30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695a      	ldr	r2, [r3, #20]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x736>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0208 	bic.w	r2, r2, #8
 8005d60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	223f      	movs	r2, #63	; 0x3f
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 834a 	beq.w	8006420 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
          }
          return;
 8005d94:	e344      	b.n	8006420 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d018      	beq.n	8005dd6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d02c      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	e027      	b.n	8005e14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d023      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	4798      	blx	r3
 8005dd4:	e01e      	b.n	8005e14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10f      	bne.n	8005e04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0210 	bic.w	r2, r2, #16
 8005df2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8306 	beq.w	800642a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8088 	beq.w	8005f3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a7a      	ldr	r2, [pc, #488]	; (8006024 <HAL_DMA_IRQHandler+0xa08>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d04a      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a79      	ldr	r2, [pc, #484]	; (8006028 <HAL_DMA_IRQHandler+0xa0c>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d045      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a77      	ldr	r2, [pc, #476]	; (800602c <HAL_DMA_IRQHandler+0xa10>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d040      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a76      	ldr	r2, [pc, #472]	; (8006030 <HAL_DMA_IRQHandler+0xa14>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d03b      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a74      	ldr	r2, [pc, #464]	; (8006034 <HAL_DMA_IRQHandler+0xa18>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d036      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a73      	ldr	r2, [pc, #460]	; (8006038 <HAL_DMA_IRQHandler+0xa1c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d031      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a71      	ldr	r2, [pc, #452]	; (800603c <HAL_DMA_IRQHandler+0xa20>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02c      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a70      	ldr	r2, [pc, #448]	; (8006040 <HAL_DMA_IRQHandler+0xa24>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d027      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a6e      	ldr	r2, [pc, #440]	; (8006044 <HAL_DMA_IRQHandler+0xa28>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d022      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6d      	ldr	r2, [pc, #436]	; (8006048 <HAL_DMA_IRQHandler+0xa2c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d01d      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a6b      	ldr	r2, [pc, #428]	; (800604c <HAL_DMA_IRQHandler+0xa30>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d018      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6a      	ldr	r2, [pc, #424]	; (8006050 <HAL_DMA_IRQHandler+0xa34>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d013      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a68      	ldr	r2, [pc, #416]	; (8006054 <HAL_DMA_IRQHandler+0xa38>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00e      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a67      	ldr	r2, [pc, #412]	; (8006058 <HAL_DMA_IRQHandler+0xa3c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d009      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a65      	ldr	r2, [pc, #404]	; (800605c <HAL_DMA_IRQHandler+0xa40>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d004      	beq.n	8005ed4 <HAL_DMA_IRQHandler+0x8b8>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a64      	ldr	r2, [pc, #400]	; (8006060 <HAL_DMA_IRQHandler+0xa44>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d108      	bne.n	8005ee6 <HAL_DMA_IRQHandler+0x8ca>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e007      	b.n	8005ef6 <HAL_DMA_IRQHandler+0x8da>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0201 	bic.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d307      	bcc.n	8005f12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1f2      	bne.n	8005ef6 <HAL_DMA_IRQHandler+0x8da>
 8005f10:	e000      	b.n	8005f14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2203      	movs	r2, #3
 8005f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f2a:	e003      	b.n	8005f34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8272 	beq.w	800642a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3
 8005f4e:	e26c      	b.n	800642a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a43      	ldr	r2, [pc, #268]	; (8006064 <HAL_DMA_IRQHandler+0xa48>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d022      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a42      	ldr	r2, [pc, #264]	; (8006068 <HAL_DMA_IRQHandler+0xa4c>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d01d      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a40      	ldr	r2, [pc, #256]	; (800606c <HAL_DMA_IRQHandler+0xa50>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d018      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a3f      	ldr	r2, [pc, #252]	; (8006070 <HAL_DMA_IRQHandler+0xa54>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d013      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3d      	ldr	r2, [pc, #244]	; (8006074 <HAL_DMA_IRQHandler+0xa58>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00e      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a3c      	ldr	r2, [pc, #240]	; (8006078 <HAL_DMA_IRQHandler+0xa5c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d009      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a3a      	ldr	r2, [pc, #232]	; (800607c <HAL_DMA_IRQHandler+0xa60>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d004      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x984>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a39      	ldr	r2, [pc, #228]	; (8006080 <HAL_DMA_IRQHandler+0xa64>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x988>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e000      	b.n	8005fa6 <HAL_DMA_IRQHandler+0x98a>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 823f 	beq.w	800642a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	409a      	lsls	r2, r3
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80cd 	beq.w	8006164 <HAL_DMA_IRQHandler+0xb48>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80c7 	beq.w	8006164 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fda:	f003 031f 	and.w	r3, r3, #31
 8005fde:	2204      	movs	r2, #4
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d049      	beq.n	8006084 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d109      	bne.n	800600e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 8210 	beq.w	8006424 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800600c:	e20a      	b.n	8006424 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	f000 8206 	beq.w	8006424 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006020:	e200      	b.n	8006424 <HAL_DMA_IRQHandler+0xe08>
 8006022:	bf00      	nop
 8006024:	40020010 	.word	0x40020010
 8006028:	40020028 	.word	0x40020028
 800602c:	40020040 	.word	0x40020040
 8006030:	40020058 	.word	0x40020058
 8006034:	40020070 	.word	0x40020070
 8006038:	40020088 	.word	0x40020088
 800603c:	400200a0 	.word	0x400200a0
 8006040:	400200b8 	.word	0x400200b8
 8006044:	40020410 	.word	0x40020410
 8006048:	40020428 	.word	0x40020428
 800604c:	40020440 	.word	0x40020440
 8006050:	40020458 	.word	0x40020458
 8006054:	40020470 	.word	0x40020470
 8006058:	40020488 	.word	0x40020488
 800605c:	400204a0 	.word	0x400204a0
 8006060:	400204b8 	.word	0x400204b8
 8006064:	58025408 	.word	0x58025408
 8006068:	5802541c 	.word	0x5802541c
 800606c:	58025430 	.word	0x58025430
 8006070:	58025444 	.word	0x58025444
 8006074:	58025458 	.word	0x58025458
 8006078:	5802546c 	.word	0x5802546c
 800607c:	58025480 	.word	0x58025480
 8006080:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d160      	bne.n	8006150 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a7f      	ldr	r2, [pc, #508]	; (8006290 <HAL_DMA_IRQHandler+0xc74>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a7d      	ldr	r2, [pc, #500]	; (8006294 <HAL_DMA_IRQHandler+0xc78>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a7c      	ldr	r2, [pc, #496]	; (8006298 <HAL_DMA_IRQHandler+0xc7c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a7a      	ldr	r2, [pc, #488]	; (800629c <HAL_DMA_IRQHandler+0xc80>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a79      	ldr	r2, [pc, #484]	; (80062a0 <HAL_DMA_IRQHandler+0xc84>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a77      	ldr	r2, [pc, #476]	; (80062a4 <HAL_DMA_IRQHandler+0xc88>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a76      	ldr	r2, [pc, #472]	; (80062a8 <HAL_DMA_IRQHandler+0xc8c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a74      	ldr	r2, [pc, #464]	; (80062ac <HAL_DMA_IRQHandler+0xc90>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a73      	ldr	r2, [pc, #460]	; (80062b0 <HAL_DMA_IRQHandler+0xc94>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a71      	ldr	r2, [pc, #452]	; (80062b4 <HAL_DMA_IRQHandler+0xc98>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a70      	ldr	r2, [pc, #448]	; (80062b8 <HAL_DMA_IRQHandler+0xc9c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a6e      	ldr	r2, [pc, #440]	; (80062bc <HAL_DMA_IRQHandler+0xca0>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a6d      	ldr	r2, [pc, #436]	; (80062c0 <HAL_DMA_IRQHandler+0xca4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a6b      	ldr	r2, [pc, #428]	; (80062c4 <HAL_DMA_IRQHandler+0xca8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a6a      	ldr	r2, [pc, #424]	; (80062c8 <HAL_DMA_IRQHandler+0xcac>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0xb12>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a68      	ldr	r2, [pc, #416]	; (80062cc <HAL_DMA_IRQHandler+0xcb0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <HAL_DMA_IRQHandler+0xb24>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0208 	bic.w	r2, r2, #8
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e007      	b.n	8006150 <HAL_DMA_IRQHandler+0xb34>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0204 	bic.w	r2, r2, #4
 800614e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 8165 	beq.w	8006424 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006162:	e15f      	b.n	8006424 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	2202      	movs	r2, #2
 800616e:	409a      	lsls	r2, r3
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80c5 	beq.w	8006304 <HAL_DMA_IRQHandler+0xce8>
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80bf 	beq.w	8006304 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	2202      	movs	r2, #2
 8006190:	409a      	lsls	r2, r3
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d018      	beq.n	80061d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 813a 	beq.w	8006428 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061bc:	e134      	b.n	8006428 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8130 	beq.w	8006428 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061d0:	e12a      	b.n	8006428 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 8089 	bne.w	80062f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a2b      	ldr	r2, [pc, #172]	; (8006290 <HAL_DMA_IRQHandler+0xc74>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d04a      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a29      	ldr	r2, [pc, #164]	; (8006294 <HAL_DMA_IRQHandler+0xc78>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d045      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a28      	ldr	r2, [pc, #160]	; (8006298 <HAL_DMA_IRQHandler+0xc7c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d040      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a26      	ldr	r2, [pc, #152]	; (800629c <HAL_DMA_IRQHandler+0xc80>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d03b      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a25      	ldr	r2, [pc, #148]	; (80062a0 <HAL_DMA_IRQHandler+0xc84>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d036      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a23      	ldr	r2, [pc, #140]	; (80062a4 <HAL_DMA_IRQHandler+0xc88>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a22      	ldr	r2, [pc, #136]	; (80062a8 <HAL_DMA_IRQHandler+0xc8c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d02c      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a20      	ldr	r2, [pc, #128]	; (80062ac <HAL_DMA_IRQHandler+0xc90>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d027      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <HAL_DMA_IRQHandler+0xc94>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d022      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <HAL_DMA_IRQHandler+0xc98>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d01d      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <HAL_DMA_IRQHandler+0xc9c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d018      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1a      	ldr	r2, [pc, #104]	; (80062bc <HAL_DMA_IRQHandler+0xca0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a19      	ldr	r2, [pc, #100]	; (80062c0 <HAL_DMA_IRQHandler+0xca4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <HAL_DMA_IRQHandler+0xca8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <HAL_DMA_IRQHandler+0xcac>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_DMA_IRQHandler+0xc62>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a14      	ldr	r2, [pc, #80]	; (80062cc <HAL_DMA_IRQHandler+0xcb0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d128      	bne.n	80062d0 <HAL_DMA_IRQHandler+0xcb4>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0214 	bic.w	r2, r2, #20
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e027      	b.n	80062e0 <HAL_DMA_IRQHandler+0xcc4>
 8006290:	40020010 	.word	0x40020010
 8006294:	40020028 	.word	0x40020028
 8006298:	40020040 	.word	0x40020040
 800629c:	40020058 	.word	0x40020058
 80062a0:	40020070 	.word	0x40020070
 80062a4:	40020088 	.word	0x40020088
 80062a8:	400200a0 	.word	0x400200a0
 80062ac:	400200b8 	.word	0x400200b8
 80062b0:	40020410 	.word	0x40020410
 80062b4:	40020428 	.word	0x40020428
 80062b8:	40020440 	.word	0x40020440
 80062bc:	40020458 	.word	0x40020458
 80062c0:	40020470 	.word	0x40020470
 80062c4:	40020488 	.word	0x40020488
 80062c8:	400204a0 	.word	0x400204a0
 80062cc:	400204b8 	.word	0x400204b8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 020a 	bic.w	r2, r2, #10
 80062de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8097 	beq.w	8006428 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006302:	e091      	b.n	8006428 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	2208      	movs	r2, #8
 800630e:	409a      	lsls	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8088 	beq.w	800642a <HAL_DMA_IRQHandler+0xe0e>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8082 	beq.w	800642a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a41      	ldr	r2, [pc, #260]	; (8006430 <HAL_DMA_IRQHandler+0xe14>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04a      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3f      	ldr	r2, [pc, #252]	; (8006434 <HAL_DMA_IRQHandler+0xe18>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a3e      	ldr	r2, [pc, #248]	; (8006438 <HAL_DMA_IRQHandler+0xe1c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a3c      	ldr	r2, [pc, #240]	; (800643c <HAL_DMA_IRQHandler+0xe20>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d03b      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <HAL_DMA_IRQHandler+0xe24>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d036      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a39      	ldr	r2, [pc, #228]	; (8006444 <HAL_DMA_IRQHandler+0xe28>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d031      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a38      	ldr	r2, [pc, #224]	; (8006448 <HAL_DMA_IRQHandler+0xe2c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d02c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a36      	ldr	r2, [pc, #216]	; (800644c <HAL_DMA_IRQHandler+0xe30>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d027      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a35      	ldr	r2, [pc, #212]	; (8006450 <HAL_DMA_IRQHandler+0xe34>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a33      	ldr	r2, [pc, #204]	; (8006454 <HAL_DMA_IRQHandler+0xe38>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a32      	ldr	r2, [pc, #200]	; (8006458 <HAL_DMA_IRQHandler+0xe3c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a30      	ldr	r2, [pc, #192]	; (800645c <HAL_DMA_IRQHandler+0xe40>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <HAL_DMA_IRQHandler+0xe44>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2d      	ldr	r2, [pc, #180]	; (8006464 <HAL_DMA_IRQHandler+0xe48>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <HAL_DMA_IRQHandler+0xe4c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xdaa>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2a      	ldr	r2, [pc, #168]	; (800646c <HAL_DMA_IRQHandler+0xe50>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d108      	bne.n	80063d8 <HAL_DMA_IRQHandler+0xdbc>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 021c 	bic.w	r2, r2, #28
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e007      	b.n	80063e8 <HAL_DMA_IRQHandler+0xdcc>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 020e 	bic.w	r2, r2, #14
 80063e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2201      	movs	r2, #1
 80063f2:	409a      	lsls	r2, r3
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	e004      	b.n	800642a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006420:	bf00      	nop
 8006422:	e002      	b.n	800642a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006428:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800642a:	3728      	adds	r7, #40	; 0x28
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40020010 	.word	0x40020010
 8006434:	40020028 	.word	0x40020028
 8006438:	40020040 	.word	0x40020040
 800643c:	40020058 	.word	0x40020058
 8006440:	40020070 	.word	0x40020070
 8006444:	40020088 	.word	0x40020088
 8006448:	400200a0 	.word	0x400200a0
 800644c:	400200b8 	.word	0x400200b8
 8006450:	40020410 	.word	0x40020410
 8006454:	40020428 	.word	0x40020428
 8006458:	40020440 	.word	0x40020440
 800645c:	40020458 	.word	0x40020458
 8006460:	40020470 	.word	0x40020470
 8006464:	40020488 	.word	0x40020488
 8006468:	400204a0 	.word	0x400204a0
 800646c:	400204b8 	.word	0x400204b8

08006470 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e04f      	b.n	8006522 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f84e 	bl	8006538 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b20      	ldr	r3, [pc, #128]	; (800652c <HAL_DMA2D_Init+0xbc>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6851      	ldr	r1, [r2, #4]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	69d2      	ldr	r2, [r2, #28]
 80064b6:	4311      	orrs	r1, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	430b      	orrs	r3, r1
 80064be:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c6:	4b1a      	ldr	r3, [pc, #104]	; (8006530 <HAL_DMA2D_Init+0xc0>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6891      	ldr	r1, [r2, #8]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6992      	ldr	r2, [r2, #24]
 80064d2:	4311      	orrs	r1, r2
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	430b      	orrs	r3, r1
 80064da:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064e2:	4b14      	ldr	r3, [pc, #80]	; (8006534 <HAL_DMA2D_Init+0xc4>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	68d1      	ldr	r1, [r2, #12]
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	430b      	orrs	r3, r1
 80064f0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	051a      	lsls	r2, r3, #20
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	055b      	lsls	r3, r3, #21
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	430a      	orrs	r2, r1
 8006510:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	fff8ffbf 	.word	0xfff8ffbf
 8006530:	fffffef8 	.word	0xfffffef8
 8006534:	ffff0000 	.word	0xffff0000

08006538 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_DMA2D_Start+0x1c>
 8006564:	2302      	movs	r3, #2
 8006566:	e018      	b.n	800659a <HAL_DMA2D_Start+0x4e>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f9a4 	bl	80068d0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b086      	sub	sp, #24
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d056      	beq.n	800666c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80065be:	f7fe f96d 	bl	800489c <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80065c4:	e04b      	b.n	800665e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d023      	beq.n	8006620 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e6:	f043 0202 	orr.w	r2, r3, #2
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fc:	f043 0201 	orr.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2221      	movs	r2, #33	; 0x21
 800660a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2204      	movs	r2, #4
 8006610:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0a5      	b.n	800676c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d01a      	beq.n	800665e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006628:	f7fe f938 	bl	800489c <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d302      	bcc.n	800663e <HAL_DMA2D_PollForTransfer+0x9c>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10f      	bne.n	800665e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2203      	movs	r2, #3
 800664e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e086      	b.n	800676c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ac      	beq.n	80065c6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d061      	beq.n	8006752 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800668e:	f7fe f905 	bl	800489c <HAL_GetTick>
 8006692:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006694:	e056      	b.n	8006744 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d02e      	beq.n	8006706 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0308 	and.w	r3, r3, #8
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066b6:	f043 0204 	orr.w	r2, r3, #4
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066cc:	f043 0202 	orr.w	r2, r3, #2
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e2:	f043 0201 	orr.w	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2229      	movs	r2, #41	; 0x29
 80066f0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2204      	movs	r2, #4
 80066f6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e032      	b.n	800676c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670c:	d01a      	beq.n	8006744 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800670e:	f7fe f8c5 	bl	800489c <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d302      	bcc.n	8006724 <HAL_DMA2D_PollForTransfer+0x182>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10f      	bne.n	8006744 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006728:	f043 0220 	orr.w	r2, r3, #32
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2203      	movs	r2, #3
 8006734:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e013      	b.n	800676c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f003 0310 	and.w	r3, r3, #16
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0a1      	beq.n	8006696 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2212      	movs	r2, #18
 8006758:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_DMA2D_ConfigLayer+0x24>
 8006794:	2302      	movs	r3, #2
 8006796:	e092      	b.n	80068be <HAL_DMA2D_ConfigLayer+0x14a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	1a9b      	subs	r3, r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	3328      	adds	r3, #40	; 0x28
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	4413      	add	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	041b      	lsls	r3, r3, #16
 80067c4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067cc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80067d8:	4b3c      	ldr	r3, [pc, #240]	; (80068cc <HAL_DMA2D_ConfigLayer+0x158>)
 80067da:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b0a      	cmp	r3, #10
 80067e2:	d003      	beq.n	80067ec <HAL_DMA2D_ConfigLayer+0x78>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	2b09      	cmp	r3, #9
 80067ea:	d107      	bne.n	80067fc <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	e005      	b.n	8006808 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	061b      	lsls	r3, r3, #24
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d120      	bne.n	8006850 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	43db      	mvns	r3, r3
 8006818:	ea02 0103 	and.w	r1, r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	430a      	orrs	r2, r1
 8006824:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b0a      	cmp	r3, #10
 8006836:	d003      	beq.n	8006840 <HAL_DMA2D_ConfigLayer+0xcc>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b09      	cmp	r3, #9
 800683e:	d135      	bne.n	80068ac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800684c:	629a      	str	r2, [r3, #40]	; 0x28
 800684e:	e02d      	b.n	80068ac <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b0b      	cmp	r3, #11
 8006856:	d109      	bne.n	800686c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	049b      	lsls	r3, r3, #18
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800686a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	43db      	mvns	r3, r3
 8006876:	ea02 0103 	and.w	r1, r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	430a      	orrs	r2, r1
 8006882:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b0a      	cmp	r3, #10
 8006894:	d003      	beq.n	800689e <HAL_DMA2D_ConfigLayer+0x12a>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b09      	cmp	r3, #9
 800689c:	d106      	bne.n	80068ac <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80068aa:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	ff33000f 	.word	0xff33000f

080068d0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b08b      	sub	sp, #44	; 0x2c
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	041a      	lsls	r2, r3, #16
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	431a      	orrs	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006908:	d174      	bne.n	80069f4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006910:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006918:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006920:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d108      	bne.n	8006942 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	431a      	orrs	r2, r3
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	4313      	orrs	r3, r2
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
 8006940:	e053      	b.n	80069ea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d106      	bne.n	8006958 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4313      	orrs	r3, r2
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
 8006956:	e048      	b.n	80069ea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d111      	bne.n	8006984 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	0cdb      	lsrs	r3, r3, #19
 8006964:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	0a9b      	lsrs	r3, r3, #10
 800696a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	02db      	lsls	r3, r3, #11
 800697a:	4313      	orrs	r3, r2
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	627b      	str	r3, [r7, #36]	; 0x24
 8006982:	e032      	b.n	80069ea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b03      	cmp	r3, #3
 800698a:	d117      	bne.n	80069bc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	0fdb      	lsrs	r3, r3, #31
 8006990:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	0cdb      	lsrs	r3, r3, #19
 8006996:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	0adb      	lsrs	r3, r3, #11
 800699c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	08db      	lsrs	r3, r3, #3
 80069a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	029b      	lsls	r3, r3, #10
 80069ac:	431a      	orrs	r2, r3
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	03db      	lsls	r3, r3, #15
 80069b2:	4313      	orrs	r3, r2
 80069b4:	697a      	ldr	r2, [r7, #20]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ba:	e016      	b.n	80069ea <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	0f1b      	lsrs	r3, r3, #28
 80069c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	0d1b      	lsrs	r3, r3, #20
 80069c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	0b1b      	lsrs	r3, r3, #12
 80069cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	091b      	lsrs	r3, r3, #4
 80069d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	011a      	lsls	r2, r3, #4
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	431a      	orrs	r2, r3
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	031b      	lsls	r3, r3, #12
 80069e2:	4313      	orrs	r3, r2
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80069f2:	e00d      	b.n	8006a10 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069fc:	d104      	bne.n	8006a08 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	615a      	str	r2, [r3, #20]
}
 8006a06:	e003      	b.n	8006a10 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	60da      	str	r2, [r3, #12]
}
 8006a10:	bf00      	nop
 8006a12:	372c      	adds	r7, #44	; 0x2c
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	460b      	mov	r3, r1
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e00a      	b.n	8006a4e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006a38:	7afb      	ldrb	r3, [r7, #11]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	605a      	str	r2, [r3, #4]
      break;
 8006a44:	e002      	b.n	8006a4c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	75fb      	strb	r3, [r7, #23]
      break;
 8006a4a:	bf00      	nop
  }

  return status;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e003      	b.n	8006a76 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006a74:	2300      	movs	r3, #0
  }
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	011a      	lsls	r2, r3, #4
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <HAL_EXTI_IRQHandler+0x5c>)
 8006aae:	4413      	add	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4798      	blx	r3
    }
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	58000088 	.word	0x58000088

08006ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b089      	sub	sp, #36	; 0x24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006af2:	4b89      	ldr	r3, [pc, #548]	; (8006d18 <HAL_GPIO_Init+0x234>)
 8006af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006af6:	e194      	b.n	8006e22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	2101      	movs	r1, #1
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	4013      	ands	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 8186 	beq.w	8006e1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d005      	beq.n	8006b28 <HAL_GPIO_Init+0x44>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d130      	bne.n	8006b8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	005b      	lsls	r3, r3, #1
 8006b32:	2203      	movs	r2, #3
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b5e:	2201      	movs	r2, #1
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43db      	mvns	r3, r3
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	091b      	lsrs	r3, r3, #4
 8006b74:	f003 0201 	and.w	r2, r3, #1
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d017      	beq.n	8006bc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	4013      	ands	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f003 0303 	and.w	r3, r3, #3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d123      	bne.n	8006c1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	08da      	lsrs	r2, r3, #3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3208      	adds	r2, #8
 8006bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	220f      	movs	r2, #15
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43db      	mvns	r3, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	08da      	lsrs	r2, r3, #3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3208      	adds	r2, #8
 8006c14:	69b9      	ldr	r1, [r7, #24]
 8006c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	2203      	movs	r2, #3
 8006c26:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0203 	and.w	r2, r3, #3
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 80e0 	beq.w	8006e1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c5c:	4b2f      	ldr	r3, [pc, #188]	; (8006d1c <HAL_GPIO_Init+0x238>)
 8006c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c62:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_GPIO_Init+0x238>)
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c6c:	4b2b      	ldr	r3, [pc, #172]	; (8006d1c <HAL_GPIO_Init+0x238>)
 8006c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c7a:	4a29      	ldr	r2, [pc, #164]	; (8006d20 <HAL_GPIO_Init+0x23c>)
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	3302      	adds	r3, #2
 8006c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	220f      	movs	r2, #15
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a20      	ldr	r2, [pc, #128]	; (8006d24 <HAL_GPIO_Init+0x240>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d052      	beq.n	8006d4c <HAL_GPIO_Init+0x268>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a1f      	ldr	r2, [pc, #124]	; (8006d28 <HAL_GPIO_Init+0x244>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d031      	beq.n	8006d12 <HAL_GPIO_Init+0x22e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <HAL_GPIO_Init+0x248>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d02b      	beq.n	8006d0e <HAL_GPIO_Init+0x22a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	; (8006d30 <HAL_GPIO_Init+0x24c>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d025      	beq.n	8006d0a <HAL_GPIO_Init+0x226>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a1c      	ldr	r2, [pc, #112]	; (8006d34 <HAL_GPIO_Init+0x250>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d01f      	beq.n	8006d06 <HAL_GPIO_Init+0x222>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <HAL_GPIO_Init+0x254>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d019      	beq.n	8006d02 <HAL_GPIO_Init+0x21e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1a      	ldr	r2, [pc, #104]	; (8006d3c <HAL_GPIO_Init+0x258>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_GPIO_Init+0x21a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <HAL_GPIO_Init+0x25c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00d      	beq.n	8006cfa <HAL_GPIO_Init+0x216>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a18      	ldr	r2, [pc, #96]	; (8006d44 <HAL_GPIO_Init+0x260>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <HAL_GPIO_Init+0x212>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <HAL_GPIO_Init+0x264>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <HAL_GPIO_Init+0x20e>
 8006cee:	2309      	movs	r3, #9
 8006cf0:	e02d      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	e02b      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	e029      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cfa:	2307      	movs	r3, #7
 8006cfc:	e027      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006cfe:	2306      	movs	r3, #6
 8006d00:	e025      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d02:	2305      	movs	r3, #5
 8006d04:	e023      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d06:	2304      	movs	r3, #4
 8006d08:	e021      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e01f      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e01d      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d12:	2301      	movs	r3, #1
 8006d14:	e01b      	b.n	8006d4e <HAL_GPIO_Init+0x26a>
 8006d16:	bf00      	nop
 8006d18:	58000080 	.word	0x58000080
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	58000400 	.word	0x58000400
 8006d24:	58020000 	.word	0x58020000
 8006d28:	58020400 	.word	0x58020400
 8006d2c:	58020800 	.word	0x58020800
 8006d30:	58020c00 	.word	0x58020c00
 8006d34:	58021000 	.word	0x58021000
 8006d38:	58021400 	.word	0x58021400
 8006d3c:	58021800 	.word	0x58021800
 8006d40:	58021c00 	.word	0x58021c00
 8006d44:	58022000 	.word	0x58022000
 8006d48:	58022400 	.word	0x58022400
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	f002 0203 	and.w	r2, r2, #3
 8006d54:	0092      	lsls	r2, r2, #2
 8006d56:	4093      	lsls	r3, r2
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d5e:	4938      	ldr	r1, [pc, #224]	; (8006e40 <HAL_GPIO_Init+0x35c>)
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	089b      	lsrs	r3, r3, #2
 8006d64:	3302      	adds	r3, #2
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	43db      	mvns	r3, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d003      	beq.n	8006d92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006dc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	43db      	mvns	r3, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4013      	ands	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f ae63 	bne.w	8006af8 <HAL_GPIO_Init+0x14>
  }
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	3724      	adds	r7, #36	; 0x24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	58000400 	.word	0x58000400

08006e44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e52:	4b75      	ldr	r3, [pc, #468]	; (8007028 <HAL_GPIO_DeInit+0x1e4>)
 8006e54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8006e56:	e0d9      	b.n	800700c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006e58:	2201      	movs	r2, #1
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	4013      	ands	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80cc 	beq.w	8007006 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006e6e:	4a6f      	ldr	r2, [pc, #444]	; (800702c <HAL_GPIO_DeInit+0x1e8>)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	089b      	lsrs	r3, r3, #2
 8006e74:	3302      	adds	r3, #2
 8006e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e7a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	220f      	movs	r2, #15
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a67      	ldr	r2, [pc, #412]	; (8007030 <HAL_GPIO_DeInit+0x1ec>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d037      	beq.n	8006f08 <HAL_GPIO_DeInit+0xc4>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a66      	ldr	r2, [pc, #408]	; (8007034 <HAL_GPIO_DeInit+0x1f0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d031      	beq.n	8006f04 <HAL_GPIO_DeInit+0xc0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a65      	ldr	r2, [pc, #404]	; (8007038 <HAL_GPIO_DeInit+0x1f4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d02b      	beq.n	8006f00 <HAL_GPIO_DeInit+0xbc>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a64      	ldr	r2, [pc, #400]	; (800703c <HAL_GPIO_DeInit+0x1f8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d025      	beq.n	8006efc <HAL_GPIO_DeInit+0xb8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a63      	ldr	r2, [pc, #396]	; (8007040 <HAL_GPIO_DeInit+0x1fc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d01f      	beq.n	8006ef8 <HAL_GPIO_DeInit+0xb4>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a62      	ldr	r2, [pc, #392]	; (8007044 <HAL_GPIO_DeInit+0x200>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d019      	beq.n	8006ef4 <HAL_GPIO_DeInit+0xb0>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a61      	ldr	r2, [pc, #388]	; (8007048 <HAL_GPIO_DeInit+0x204>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d013      	beq.n	8006ef0 <HAL_GPIO_DeInit+0xac>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a60      	ldr	r2, [pc, #384]	; (800704c <HAL_GPIO_DeInit+0x208>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00d      	beq.n	8006eec <HAL_GPIO_DeInit+0xa8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a5f      	ldr	r2, [pc, #380]	; (8007050 <HAL_GPIO_DeInit+0x20c>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d007      	beq.n	8006ee8 <HAL_GPIO_DeInit+0xa4>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a5e      	ldr	r2, [pc, #376]	; (8007054 <HAL_GPIO_DeInit+0x210>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <HAL_GPIO_DeInit+0xa0>
 8006ee0:	2309      	movs	r3, #9
 8006ee2:	e012      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006ee4:	230a      	movs	r3, #10
 8006ee6:	e010      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006ee8:	2308      	movs	r3, #8
 8006eea:	e00e      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006eec:	2307      	movs	r3, #7
 8006eee:	e00c      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006ef0:	2306      	movs	r3, #6
 8006ef2:	e00a      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006ef4:	2305      	movs	r3, #5
 8006ef6:	e008      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	e006      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006efc:	2303      	movs	r3, #3
 8006efe:	e004      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e002      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <HAL_GPIO_DeInit+0xc6>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	f002 0203 	and.w	r2, r2, #3
 8006f10:	0092      	lsls	r2, r2, #2
 8006f12:	4093      	lsls	r3, r2
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d136      	bne.n	8006f88 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	401a      	ands	r2, r3
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	43db      	mvns	r3, r3
 8006f30:	401a      	ands	r2, r3
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	43db      	mvns	r3, r3
 8006f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f44:	4013      	ands	r3, r2
 8006f46:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f56:	4013      	ands	r3, r2
 8006f58:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	220f      	movs	r2, #15
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006f6a:	4a30      	ldr	r2, [pc, #192]	; (800702c <HAL_GPIO_DeInit+0x1e8>)
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	3302      	adds	r3, #2
 8006f72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	43da      	mvns	r2, r3
 8006f7a:	482c      	ldr	r0, [pc, #176]	; (800702c <HAL_GPIO_DeInit+0x1e8>)
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	400a      	ands	r2, r1
 8006f82:	3302      	adds	r3, #2
 8006f84:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	2103      	movs	r1, #3
 8006f92:	fa01 f303 	lsl.w	r3, r1, r3
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	08da      	lsrs	r2, r3, #3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3208      	adds	r2, #8
 8006fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	220f      	movs	r2, #15
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	08d2      	lsrs	r2, r2, #3
 8006fbc:	4019      	ands	r1, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3208      	adds	r2, #8
 8006fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	2103      	movs	r1, #3
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	401a      	ands	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689a      	ldr	r2, [r3, #8]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	2103      	movs	r1, #3
 8006ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffe:	43db      	mvns	r3, r3
 8007000:	401a      	ands	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3301      	adds	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	fa22 f303 	lsr.w	r3, r2, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f af1f 	bne.w	8006e58 <HAL_GPIO_DeInit+0x14>
  }
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	58000080 	.word	0x58000080
 800702c:	58000400 	.word	0x58000400
 8007030:	58020000 	.word	0x58020000
 8007034:	58020400 	.word	0x58020400
 8007038:	58020800 	.word	0x58020800
 800703c:	58020c00 	.word	0x58020c00
 8007040:	58021000 	.word	0x58021000
 8007044:	58021400 	.word	0x58021400
 8007048:	58021800 	.word	0x58021800
 800704c:	58021c00 	.word	0x58021c00
 8007050:	58022000 	.word	0x58022000
 8007054:	58022400 	.word	0x58022400

08007058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
 8007064:	4613      	mov	r3, r2
 8007066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007068:	787b      	ldrb	r3, [r7, #1]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007074:	e003      	b.n	800707e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007076:	887b      	ldrh	r3, [r7, #2]
 8007078:	041a      	lsls	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	619a      	str	r2, [r3, #24]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
	...

0800708c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e07f      	b.n	800719e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f8a9 	bl	800720a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2224      	movs	r2, #36	; 0x24
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f022 0201 	bic.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d107      	bne.n	8007106 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007102:	609a      	str	r2, [r3, #8]
 8007104:	e006      	b.n	8007114 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007112:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d104      	bne.n	8007126 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007124:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6859      	ldr	r1, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b1d      	ldr	r3, [pc, #116]	; (80071a8 <HAL_I2C_Init+0x11c>)
 8007132:	430b      	orrs	r3, r1
 8007134:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007144:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691a      	ldr	r2, [r3, #16]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69d9      	ldr	r1, [r3, #28]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a1a      	ldr	r2, [r3, #32]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	02008000 	.word	0x02008000

080071ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e021      	b.n	8007202 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f821 	bl	800721e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b088      	sub	sp, #32
 8007238:	af02      	add	r7, sp, #8
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	4608      	mov	r0, r1
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	4603      	mov	r3, r0
 8007244:	817b      	strh	r3, [r7, #10]
 8007246:	460b      	mov	r3, r1
 8007248:	813b      	strh	r3, [r7, #8]
 800724a:	4613      	mov	r3, r2
 800724c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b20      	cmp	r3, #32
 8007258:	f040 80f9 	bne.w	800744e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_I2C_Mem_Write+0x34>
 8007262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d105      	bne.n	8007274 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e0ed      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_I2C_Mem_Write+0x4e>
 800727e:	2302      	movs	r3, #2
 8007280:	e0e6      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800728a:	f7fd fb07 	bl	800489c <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2319      	movs	r3, #25
 8007296:	2201      	movs	r2, #1
 8007298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fadd 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0d1      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2221      	movs	r2, #33	; 0x21
 80072b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2240      	movs	r2, #64	; 0x40
 80072b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a3a      	ldr	r2, [r7, #32]
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072d4:	88f8      	ldrh	r0, [r7, #6]
 80072d6:	893a      	ldrh	r2, [r7, #8]
 80072d8:	8979      	ldrh	r1, [r7, #10]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	4603      	mov	r3, r0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f9ed 	bl	80076c4 <I2C_RequestMemoryWrite>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0a9      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007300:	b29b      	uxth	r3, r3
 8007302:	2bff      	cmp	r3, #255	; 0xff
 8007304:	d90e      	bls.n	8007324 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	22ff      	movs	r2, #255	; 0xff
 800730a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007310:	b2da      	uxtb	r2, r3
 8007312:	8979      	ldrh	r1, [r7, #10]
 8007314:	2300      	movs	r3, #0
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 fc57 	bl	8007bd0 <I2C_TransferConfig>
 8007322:	e00f      	b.n	8007344 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007332:	b2da      	uxtb	r2, r3
 8007334:	8979      	ldrh	r1, [r7, #10]
 8007336:	2300      	movs	r3, #0
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fc46 	bl	8007bd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fad6 	bl	80078fa <I2C_WaitOnTXISFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e07b      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	1c5a      	adds	r2, r3, #1
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738c:	b29b      	uxth	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d034      	beq.n	80073fc <HAL_I2C_Mem_Write+0x1c8>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007396:	2b00      	cmp	r3, #0
 8007398:	d130      	bne.n	80073fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2200      	movs	r2, #0
 80073a2:	2180      	movs	r1, #128	; 0x80
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fa59 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e04d      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2bff      	cmp	r3, #255	; 0xff
 80073bc:	d90e      	bls.n	80073dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	22ff      	movs	r2, #255	; 0xff
 80073c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	8979      	ldrh	r1, [r7, #10]
 80073cc:	2300      	movs	r3, #0
 80073ce:	9300      	str	r3, [sp, #0]
 80073d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fbfb 	bl	8007bd0 <I2C_TransferConfig>
 80073da:	e00f      	b.n	80073fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	8979      	ldrh	r1, [r7, #10]
 80073ee:	2300      	movs	r3, #0
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 fbea 	bl	8007bd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d19e      	bne.n	8007344 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fabc 	bl	8007988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e01a      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2220      	movs	r2, #32
 8007420:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6859      	ldr	r1, [r3, #4]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	4b0a      	ldr	r3, [pc, #40]	; (8007458 <HAL_I2C_Mem_Write+0x224>)
 800742e:	400b      	ands	r3, r1
 8007430:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e000      	b.n	8007450 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800744e:	2302      	movs	r3, #2
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	fe00e800 	.word	0xfe00e800

0800745c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	4608      	mov	r0, r1
 8007466:	4611      	mov	r1, r2
 8007468:	461a      	mov	r2, r3
 800746a:	4603      	mov	r3, r0
 800746c:	817b      	strh	r3, [r7, #10]
 800746e:	460b      	mov	r3, r1
 8007470:	813b      	strh	r3, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b20      	cmp	r3, #32
 8007480:	f040 80fd 	bne.w	800767e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_I2C_Mem_Read+0x34>
 800748a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d105      	bne.n	800749c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007496:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0f1      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_I2C_Mem_Read+0x4e>
 80074a6:	2302      	movs	r3, #2
 80074a8:	e0ea      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074b2:	f7fd f9f3 	bl	800489c <HAL_GetTick>
 80074b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	2319      	movs	r3, #25
 80074be:	2201      	movs	r2, #1
 80074c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f000 f9c9 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d001      	beq.n	80074d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0d5      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2222      	movs	r2, #34	; 0x22
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2240      	movs	r2, #64	; 0x40
 80074e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a3a      	ldr	r2, [r7, #32]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074fc:	88f8      	ldrh	r0, [r7, #6]
 80074fe:	893a      	ldrh	r2, [r7, #8]
 8007500:	8979      	ldrh	r1, [r7, #10]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	4603      	mov	r3, r0
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 f92d 	bl	800776c <I2C_RequestMemoryRead>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e0ad      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007528:	b29b      	uxth	r3, r3
 800752a:	2bff      	cmp	r3, #255	; 0xff
 800752c:	d90e      	bls.n	800754c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	22ff      	movs	r2, #255	; 0xff
 8007532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	b2da      	uxtb	r2, r3
 800753a:	8979      	ldrh	r1, [r7, #10]
 800753c:	4b52      	ldr	r3, [pc, #328]	; (8007688 <HAL_I2C_Mem_Read+0x22c>)
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fb43 	bl	8007bd0 <I2C_TransferConfig>
 800754a:	e00f      	b.n	800756c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29a      	uxth	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800755a:	b2da      	uxtb	r2, r3
 800755c:	8979      	ldrh	r1, [r7, #10]
 800755e:	4b4a      	ldr	r3, [pc, #296]	; (8007688 <HAL_I2C_Mem_Read+0x22c>)
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fb32 	bl	8007bd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	2200      	movs	r2, #0
 8007574:	2104      	movs	r1, #4
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f000 f970 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e07c      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a2:	3b01      	subs	r3, #1
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d034      	beq.n	800762c <HAL_I2C_Mem_Read+0x1d0>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d130      	bne.n	800762c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	2200      	movs	r2, #0
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 f941 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e04d      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2bff      	cmp	r3, #255	; 0xff
 80075ec:	d90e      	bls.n	800760c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	22ff      	movs	r2, #255	; 0xff
 80075f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	8979      	ldrh	r1, [r7, #10]
 80075fc:	2300      	movs	r3, #0
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fae3 	bl	8007bd0 <I2C_TransferConfig>
 800760a:	e00f      	b.n	800762c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29a      	uxth	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800761a:	b2da      	uxtb	r2, r3
 800761c:	8979      	ldrh	r1, [r7, #10]
 800761e:	2300      	movs	r3, #0
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fad2 	bl	8007bd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007630:	b29b      	uxth	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d19a      	bne.n	800756c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 f9a4 	bl	8007988 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e01a      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2220      	movs	r2, #32
 8007650:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6859      	ldr	r1, [r3, #4]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <HAL_I2C_Mem_Read+0x230>)
 800765e:	400b      	ands	r3, r1
 8007660:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e000      	b.n	8007680 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800767e:	2302      	movs	r3, #2
  }
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	80002400 	.word	0x80002400
 800768c:	fe00e800 	.word	0xfe00e800

08007690 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800769e:	b2db      	uxtb	r3, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	817b      	strh	r3, [r7, #10]
 80076d6:	460b      	mov	r3, r1
 80076d8:	813b      	strh	r3, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	8979      	ldrh	r1, [r7, #10]
 80076e4:	4b20      	ldr	r3, [pc, #128]	; (8007768 <I2C_RequestMemoryWrite+0xa4>)
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fa6f 	bl	8007bd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f8ff 	bl	80078fa <I2C_WaitOnTXISFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e02c      	b.n	8007760 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007706:	88fb      	ldrh	r3, [r7, #6]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d105      	bne.n	8007718 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800770c:	893b      	ldrh	r3, [r7, #8]
 800770e:	b2da      	uxtb	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	629a      	str	r2, [r3, #40]	; 0x28
 8007716:	e015      	b.n	8007744 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007718:	893b      	ldrh	r3, [r7, #8]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	b29b      	uxth	r3, r3
 800771e:	b2da      	uxtb	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f8e5 	bl	80078fa <I2C_WaitOnTXISFlagUntilTimeout>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e012      	b.n	8007760 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	b2da      	uxtb	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	2200      	movs	r2, #0
 800774c:	2180      	movs	r1, #128	; 0x80
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 f884 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	80002000 	.word	0x80002000

0800776c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af02      	add	r7, sp, #8
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4603      	mov	r3, r0
 800777c:	817b      	strh	r3, [r7, #10]
 800777e:	460b      	mov	r3, r1
 8007780:	813b      	strh	r3, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007786:	88fb      	ldrh	r3, [r7, #6]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	8979      	ldrh	r1, [r7, #10]
 800778c:	4b20      	ldr	r3, [pc, #128]	; (8007810 <I2C_RequestMemoryRead+0xa4>)
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	2300      	movs	r3, #0
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fa1c 	bl	8007bd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	69b9      	ldr	r1, [r7, #24]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f8ac 	bl	80078fa <I2C_WaitOnTXISFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e02c      	b.n	8007806 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d105      	bne.n	80077be <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077b2:	893b      	ldrh	r3, [r7, #8]
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	629a      	str	r2, [r3, #40]	; 0x28
 80077bc:	e015      	b.n	80077ea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077be:	893b      	ldrh	r3, [r7, #8]
 80077c0:	0a1b      	lsrs	r3, r3, #8
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077cc:	69fa      	ldr	r2, [r7, #28]
 80077ce:	69b9      	ldr	r1, [r7, #24]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f892 	bl	80078fa <I2C_WaitOnTXISFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e012      	b.n	8007806 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077e0:	893b      	ldrh	r3, [r7, #8]
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2200      	movs	r2, #0
 80077f2:	2140      	movs	r1, #64	; 0x40
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f831 	bl	800785c <I2C_WaitOnFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e000      	b.n	8007806 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	80002000 	.word	0x80002000

08007814 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d103      	bne.n	8007832 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2200      	movs	r2, #0
 8007830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b01      	cmp	r3, #1
 800783e:	d007      	beq.n	8007850 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	619a      	str	r2, [r3, #24]
  }
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	603b      	str	r3, [r7, #0]
 8007868:	4613      	mov	r3, r2
 800786a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800786c:	e031      	b.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d02d      	beq.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007876:	f7fd f811 	bl	800489c <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d122      	bne.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4013      	ands	r3, r2
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	461a      	mov	r2, r3
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d113      	bne.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	f043 0220 	orr.w	r2, r3, #32
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e00f      	b.n	80078f2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4013      	ands	r3, r2
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	bf0c      	ite	eq
 80078e2:	2301      	moveq	r3, #1
 80078e4:	2300      	movne	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	461a      	mov	r2, r3
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d0be      	beq.n	800786e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007906:	e033      	b.n	8007970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f87f 	bl	8007a10 <I2C_IsErrorOccurred>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e031      	b.n	8007980 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d025      	beq.n	8007970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007924:	f7fc ffba 	bl	800489c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	d302      	bcc.n	800793a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11a      	bne.n	8007970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f003 0302 	and.w	r3, r3, #2
 8007944:	2b02      	cmp	r3, #2
 8007946:	d013      	beq.n	8007970 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794c:	f043 0220 	orr.w	r2, r3, #32
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e007      	b.n	8007980 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f003 0302 	and.w	r3, r3, #2
 800797a:	2b02      	cmp	r3, #2
 800797c:	d1c4      	bne.n	8007908 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007994:	e02f      	b.n	80079f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	68b9      	ldr	r1, [r7, #8]
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 f838 	bl	8007a10 <I2C_IsErrorOccurred>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e02d      	b.n	8007a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079aa:	f7fc ff77 	bl	800489c <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d302      	bcc.n	80079c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d11a      	bne.n	80079f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b20      	cmp	r3, #32
 80079cc:	d013      	beq.n	80079f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f043 0220 	orr.w	r2, r3, #32
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2220      	movs	r2, #32
 80079de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e007      	b.n	8007a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d1c8      	bne.n	8007996 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3710      	adds	r7, #16
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08a      	sub	sp, #40	; 0x28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d068      	beq.n	8007b0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2210      	movs	r2, #16
 8007a42:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a44:	e049      	b.n	8007ada <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4c:	d045      	beq.n	8007ada <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a4e:	f7fc ff25 	bl	800489c <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d302      	bcc.n	8007a64 <I2C_IsErrorOccurred+0x54>
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d13a      	bne.n	8007ada <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a6e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a76:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a86:	d121      	bne.n	8007acc <I2C_IsErrorOccurred+0xbc>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a8e:	d01d      	beq.n	8007acc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007a90:	7cfb      	ldrb	r3, [r7, #19]
 8007a92:	2b20      	cmp	r3, #32
 8007a94:	d01a      	beq.n	8007acc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007aa4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007aa6:	f7fc fef9 	bl	800489c <HAL_GetTick>
 8007aaa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aac:	e00e      	b.n	8007acc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007aae:	f7fc fef5 	bl	800489c <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b19      	cmp	r3, #25
 8007aba:	d907      	bls.n	8007acc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	f043 0320 	orr.w	r3, r3, #32
 8007ac2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007aca:	e006      	b.n	8007ada <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d1e9      	bne.n	8007aae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d003      	beq.n	8007af0 <I2C_IsErrorOccurred+0xe0>
 8007ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0aa      	beq.n	8007a46 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2220      	movs	r2, #32
 8007afe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	f043 0304 	orr.w	r3, r3, #4
 8007b06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	f043 0308 	orr.w	r3, r3, #8
 8007b48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	f043 0302 	orr.w	r3, r3, #2
 8007b6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01c      	beq.n	8007bbe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff fe45 	bl	8007814 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6859      	ldr	r1, [r3, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <I2C_IsErrorOccurred+0x1bc>)
 8007b96:	400b      	ands	r3, r1
 8007b98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3728      	adds	r7, #40	; 0x28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	fe00e800 	.word	0xfe00e800

08007bd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	607b      	str	r3, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	817b      	strh	r3, [r7, #10]
 8007bde:	4613      	mov	r3, r2
 8007be0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007be2:	897b      	ldrh	r3, [r7, #10]
 8007be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007be8:	7a7b      	ldrb	r3, [r7, #9]
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bf0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bfe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	0d5b      	lsrs	r3, r3, #21
 8007c0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007c0e:	4b08      	ldr	r3, [pc, #32]	; (8007c30 <I2C_TransferConfig+0x60>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	43db      	mvns	r3, r3
 8007c14:	ea02 0103 	and.w	r1, r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	03ff63ff 	.word	0x03ff63ff

08007c34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d138      	bne.n	8007cbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d101      	bne.n	8007c58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c54:	2302      	movs	r3, #2
 8007c56:	e032      	b.n	8007cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2224      	movs	r2, #36	; 0x24
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0201 	bic.w	r2, r2, #1
 8007c76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e000      	b.n	8007cbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cbc:	2302      	movs	r3, #2
  }
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d139      	bne.n	8007d54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e033      	b.n	8007d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2224      	movs	r2, #36	; 0x24
 8007cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	e000      	b.n	8007d56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
  }
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
	...

08007d64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e0bf      	b.n	8007ef6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f8ba 	bl	8007f04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007da6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6999      	ldr	r1, [r3, #24]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	430a      	orrs	r2, r1
 8007dca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6899      	ldr	r1, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b4a      	ldr	r3, [pc, #296]	; (8007f00 <HAL_LTDC_Init+0x19c>)
 8007dd8:	400b      	ands	r3, r1
 8007dda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	041b      	lsls	r3, r3, #16
 8007de2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6899      	ldr	r1, [r3, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699a      	ldr	r2, [r3, #24]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68d9      	ldr	r1, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b3e      	ldr	r3, [pc, #248]	; (8007f00 <HAL_LTDC_Init+0x19c>)
 8007e06:	400b      	ands	r3, r1
 8007e08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	041b      	lsls	r3, r3, #16
 8007e10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68d9      	ldr	r1, [r3, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6919      	ldr	r1, [r3, #16]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	4b33      	ldr	r3, [pc, #204]	; (8007f00 <HAL_LTDC_Init+0x19c>)
 8007e34:	400b      	ands	r3, r1
 8007e36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3c:	041b      	lsls	r3, r3, #16
 8007e3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	6919      	ldr	r1, [r3, #16]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6959      	ldr	r1, [r3, #20]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	4b27      	ldr	r3, [pc, #156]	; (8007f00 <HAL_LTDC_Init+0x19c>)
 8007e62:	400b      	ands	r3, r1
 8007e64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6959      	ldr	r1, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e8a:	021b      	lsls	r3, r3, #8
 8007e8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0206 	orr.w	r2, r2, #6
 8007ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0201 	orr.w	r2, r2, #1
 8007ee2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	f000f800 	.word	0xf000f800

08007f04 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f18:	b5b0      	push	{r4, r5, r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <HAL_LTDC_ConfigLayer+0x1a>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e02c      	b.n	8007f8c <HAL_LTDC_ConfigLayer+0x74>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2134      	movs	r1, #52	; 0x34
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4614      	mov	r4, r2
 8007f56:	461d      	mov	r5, r3
 8007f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f811 	bl	8007f94 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bdb0      	pop	{r4, r5, r7, pc}

08007f94 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	0c1b      	lsrs	r3, r3, #16
 8007fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fb0:	4413      	add	r3, r2
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	01db      	lsls	r3, r3, #7
 8007fc0:	4413      	add	r3, r2
 8007fc2:	3384      	adds	r3, #132	; 0x84
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	01d2      	lsls	r2, r2, #7
 8007fd0:	440a      	add	r2, r1
 8007fd2:	3284      	adds	r2, #132	; 0x84
 8007fd4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007fd8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	01db      	lsls	r3, r3, #7
 8007ff8:	440b      	add	r3, r1
 8007ffa:	3384      	adds	r3, #132	; 0x84
 8007ffc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008002:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	68da      	ldr	r2, [r3, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008012:	4413      	add	r3, r2
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	01db      	lsls	r3, r3, #7
 8008022:	4413      	add	r3, r2
 8008024:	3384      	adds	r3, #132	; 0x84
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	4611      	mov	r1, r2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	01d2      	lsls	r2, r2, #7
 8008032:	440a      	add	r2, r1
 8008034:	3284      	adds	r2, #132	; 0x84
 8008036:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800803a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800804a:	4413      	add	r3, r2
 800804c:	1c5a      	adds	r2, r3, #1
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4619      	mov	r1, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	01db      	lsls	r3, r3, #7
 8008058:	440b      	add	r3, r1
 800805a:	3384      	adds	r3, #132	; 0x84
 800805c:	4619      	mov	r1, r3
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4313      	orrs	r3, r2
 8008062:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	01db      	lsls	r3, r3, #7
 800806e:	4413      	add	r3, r2
 8008070:	3384      	adds	r3, #132	; 0x84
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	4611      	mov	r1, r2
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	01d2      	lsls	r2, r2, #7
 800807e:	440a      	add	r2, r1
 8008080:	3284      	adds	r2, #132	; 0x84
 8008082:	f023 0307 	bic.w	r3, r3, #7
 8008086:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	01db      	lsls	r3, r3, #7
 8008092:	4413      	add	r3, r2
 8008094:	3384      	adds	r3, #132	; 0x84
 8008096:	461a      	mov	r2, r3
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	691b      	ldr	r3, [r3, #16]
 800809c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	061b      	lsls	r3, r3, #24
 80080b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	01db      	lsls	r3, r3, #7
 80080c4:	4413      	add	r3, r2
 80080c6:	3384      	adds	r3, #132	; 0x84
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	01db      	lsls	r3, r3, #7
 80080d4:	4413      	add	r3, r2
 80080d6:	3384      	adds	r3, #132	; 0x84
 80080d8:	461a      	mov	r2, r3
 80080da:	2300      	movs	r3, #0
 80080dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080e4:	461a      	mov	r2, r3
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	431a      	orrs	r2, r3
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	431a      	orrs	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	01db      	lsls	r3, r3, #7
 80080f8:	440b      	add	r3, r1
 80080fa:	3384      	adds	r3, #132	; 0x84
 80080fc:	4619      	mov	r1, r3
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	01db      	lsls	r3, r3, #7
 800810e:	4413      	add	r3, r2
 8008110:	3384      	adds	r3, #132	; 0x84
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	6812      	ldr	r2, [r2, #0]
 8008118:	4611      	mov	r1, r2
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	01d2      	lsls	r2, r2, #7
 800811e:	440a      	add	r2, r1
 8008120:	3284      	adds	r2, #132	; 0x84
 8008122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008126:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	01db      	lsls	r3, r3, #7
 8008132:	4413      	add	r3, r2
 8008134:	3384      	adds	r3, #132	; 0x84
 8008136:	461a      	mov	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	01db      	lsls	r3, r3, #7
 8008148:	4413      	add	r3, r2
 800814a:	3384      	adds	r3, #132	; 0x84
 800814c:	69da      	ldr	r2, [r3, #28]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4619      	mov	r1, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	01db      	lsls	r3, r3, #7
 8008158:	440b      	add	r3, r1
 800815a:	3384      	adds	r3, #132	; 0x84
 800815c:	4619      	mov	r1, r3
 800815e:	4b58      	ldr	r3, [pc, #352]	; (80082c0 <LTDC_SetConfig+0x32c>)
 8008160:	4013      	ands	r3, r2
 8008162:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	69da      	ldr	r2, [r3, #28]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	68f9      	ldr	r1, [r7, #12]
 800816e:	6809      	ldr	r1, [r1, #0]
 8008170:	4608      	mov	r0, r1
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	01c9      	lsls	r1, r1, #7
 8008176:	4401      	add	r1, r0
 8008178:	3184      	adds	r1, #132	; 0x84
 800817a:	4313      	orrs	r3, r2
 800817c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	01db      	lsls	r3, r3, #7
 8008188:	4413      	add	r3, r2
 800818a:	3384      	adds	r3, #132	; 0x84
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	01db      	lsls	r3, r3, #7
 8008198:	4413      	add	r3, r2
 800819a:	3384      	adds	r3, #132	; 0x84
 800819c:	461a      	mov	r2, r3
 800819e:	2300      	movs	r3, #0
 80081a0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	01db      	lsls	r3, r3, #7
 80081ac:	4413      	add	r3, r2
 80081ae:	3384      	adds	r3, #132	; 0x84
 80081b0:	461a      	mov	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80081c0:	2304      	movs	r3, #4
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	e01b      	b.n	80081fe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d102      	bne.n	80081d4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80081ce:	2303      	movs	r3, #3
 80081d0:	61fb      	str	r3, [r7, #28]
 80081d2:	e014      	b.n	80081fe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d00b      	beq.n	80081f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d007      	beq.n	80081f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d003      	beq.n	80081f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081f0:	2b07      	cmp	r3, #7
 80081f2:	d102      	bne.n	80081fa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80081f4:	2302      	movs	r3, #2
 80081f6:	61fb      	str	r3, [r7, #28]
 80081f8:	e001      	b.n	80081fe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80081fa:	2301      	movs	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	01db      	lsls	r3, r3, #7
 8008208:	4413      	add	r3, r2
 800820a:	3384      	adds	r3, #132	; 0x84
 800820c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	4611      	mov	r1, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	01d2      	lsls	r2, r2, #7
 8008218:	440a      	add	r2, r1
 800821a:	3284      	adds	r2, #132	; 0x84
 800821c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008220:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008226:	69fa      	ldr	r2, [r7, #28]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
 800822c:	041a      	lsls	r2, r3, #16
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6859      	ldr	r1, [r3, #4]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	1acb      	subs	r3, r1, r3
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	fb01 f303 	mul.w	r3, r1, r3
 800823e:	3307      	adds	r3, #7
 8008240:	68f9      	ldr	r1, [r7, #12]
 8008242:	6809      	ldr	r1, [r1, #0]
 8008244:	4608      	mov	r0, r1
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	01c9      	lsls	r1, r1, #7
 800824a:	4401      	add	r1, r0
 800824c:	3184      	adds	r1, #132	; 0x84
 800824e:	4313      	orrs	r3, r2
 8008250:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	461a      	mov	r2, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	01db      	lsls	r3, r3, #7
 800825c:	4413      	add	r3, r2
 800825e:	3384      	adds	r3, #132	; 0x84
 8008260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	440b      	add	r3, r1
 800826e:	3384      	adds	r3, #132	; 0x84
 8008270:	4619      	mov	r1, r3
 8008272:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <LTDC_SetConfig+0x330>)
 8008274:	4013      	ands	r3, r2
 8008276:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	01db      	lsls	r3, r3, #7
 8008282:	4413      	add	r3, r2
 8008284:	3384      	adds	r3, #132	; 0x84
 8008286:	461a      	mov	r2, r3
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	01db      	lsls	r3, r3, #7
 8008298:	4413      	add	r3, r2
 800829a:	3384      	adds	r3, #132	; 0x84
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	4611      	mov	r1, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	01d2      	lsls	r2, r2, #7
 80082a8:	440a      	add	r2, r1
 80082aa:	3284      	adds	r2, #132	; 0x84
 80082ac:	f043 0301 	orr.w	r3, r3, #1
 80082b0:	6013      	str	r3, [r2, #0]
}
 80082b2:	bf00      	nop
 80082b4:	3724      	adds	r7, #36	; 0x24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	fffff8f8 	.word	0xfffff8f8
 80082c4:	fffff800 	.word	0xfffff800

080082c8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082d0:	f7fc fae4 	bl	800489c <HAL_GetTick>
 80082d4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e03b      	b.n	8008358 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0201 	bic.w	r2, r2, #1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008300:	e00f      	b.n	8008322 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008302:	f7fc facb 	bl	800489c <HAL_GetTick>
 8008306:	4602      	mov	r2, r0
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b05      	cmp	r3, #5
 800830e:	d908      	bls.n	8008322 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2240      	movs	r2, #64	; 0x40
 8008314:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e01a      	b.n	8008358 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e8      	bne.n	8008302 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f9c1 	bl	80086b8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e048      	b.n	8008404 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2200      	movs	r2, #0
 8008390:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2200      	movs	r2, #0
 8008398:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2200      	movs	r2, #0
 80083a0:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2200      	movs	r2, #0
 80083a8:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2200      	movs	r2, #0
 80083b0:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2200      	movs	r2, #0
 80083c0:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2200      	movs	r2, #0
 80083d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	221f      	movs	r2, #31
 80083d8:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800841c:	4b91      	ldr	r3, [pc, #580]	; (8008664 <HAL_MDMA_IRQHandler+0x254>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a91      	ldr	r2, [pc, #580]	; (8008668 <HAL_MDMA_IRQHandler+0x258>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	0a9b      	lsrs	r3, r3, #10
 8008428:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	4b8e      	ldr	r3, [pc, #568]	; (800866c <HAL_MDMA_IRQHandler+0x25c>)
 8008432:	4413      	add	r3, r2
 8008434:	099b      	lsrs	r3, r3, #6
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	2201      	movs	r2, #1
 800843c:	fa02 f303 	lsl.w	r3, r2, r3
 8008440:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008442:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	4013      	ands	r3, r2
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 812d 	beq.w	80086ac <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d054      	beq.n	800850a <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d04d      	beq.n	800850a <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 0202 	bic.w	r2, r2, #2
 800847c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800848c:	2b00      	cmp	r3, #0
 800848e:	d106      	bne.n	800849e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008494:	f043 0201 	orr.w	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	669a      	str	r2, [r3, #104]	; 0x68
 800849c:	e005      	b.n	80084aa <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084a2:	f043 0202 	orr.w	r2, r3, #2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084b8:	f043 0204 	orr.w	r2, r3, #4
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d005      	beq.n	80084d6 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ce:	f043 0208 	orr.w	r2, r3, #8
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e4:	f043 0210 	orr.w	r2, r3, #16
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fa:	f043 0220 	orr.w	r2, r3, #32
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2201      	movs	r2, #1
 8008508:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	d012      	beq.n	800853e <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2210      	movs	r2, #16
 800852c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d012      	beq.n	8008572 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f003 0310 	and.w	r3, r3, #16
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00b      	beq.n	8008572 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2208      	movs	r2, #8
 8008560:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0304 	and.w	r3, r3, #4
 800857c:	2b00      	cmp	r3, #0
 800857e:	d012      	beq.n	80085a6 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0308 	and.w	r3, r3, #8
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2204      	movs	r2, #4
 8008594:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d039      	beq.n	8008628 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f003 0304 	and.w	r3, r3, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d032      	beq.n	8008628 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80085d0:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d110      	bne.n	8008600 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d05c      	beq.n	80086b0 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	4798      	blx	r3
        }
        return;
 80085fe:	e057      	b.n	80086b0 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2202      	movs	r2, #2
 8008606:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800862c:	2b00      	cmp	r3, #0
 800862e:	d040      	beq.n	80086b2 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2204      	movs	r2, #4
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	3301      	adds	r3, #1
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	429a      	cmp	r2, r3
 8008652:	d30d      	bcc.n	8008670 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f2      	bne.n	8008648 <HAL_MDMA_IRQHandler+0x238>
 8008662:	e006      	b.n	8008672 <HAL_MDMA_IRQHandler+0x262>
 8008664:	24000010 	.word	0x24000010
 8008668:	1b4e81b5 	.word	0x1b4e81b5
 800866c:	adffffc0 	.word	0xadffffc0
        break;
 8008670:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d004      	beq.n	8008692 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2203      	movs	r2, #3
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008690:	e003      	b.n	800869a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	e002      	b.n	80086b2 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80086ac:	bf00      	nop
 80086ae:	e000      	b.n	80086b2 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80086b0:	bf00      	nop
    }
  }
}
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68d9      	ldr	r1, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	430a      	orrs	r2, r1
 80086ce:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80086de:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80086ea:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80086f6:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fc:	3b01      	subs	r3, #1
 80086fe:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8008700:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800870c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800870e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008718:	d107      	bne.n	800872a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008728:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2200      	movs	r2, #0
 8008730:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008736:	2b00      	cmp	r3, #0
 8008738:	da11      	bge.n	800875e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	695a      	ldr	r2, [r3, #20]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008748:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	425b      	negs	r3, r3
 8008750:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	b292      	uxth	r2, r2
 800875a:	621a      	str	r2, [r3, #32]
 800875c:	e006      	b.n	800876c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	461a      	mov	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	b292      	uxth	r2, r2
 800876a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	da15      	bge.n	80087a0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	695a      	ldr	r2, [r3, #20]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008782:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	425b      	negs	r3, r3
 800878a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	6a19      	ldr	r1, [r3, #32]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	041a      	lsls	r2, r3, #16
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	621a      	str	r2, [r3, #32]
 800879e:	e009      	b.n	80087b4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6a19      	ldr	r1, [r3, #32]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	041a      	lsls	r2, r3, #16
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087bc:	d006      	beq.n	80087cc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	629a      	str	r2, [r3, #40]	; 0x28
 80087ca:	e003      	b.n	80087d4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2200      	movs	r2, #0
 80087d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2200      	movs	r2, #0
 80087da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80087f0:	4b19      	ldr	r3, [pc, #100]	; (8008858 <HAL_PWREx_ConfigSupply+0x70>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	d00a      	beq.n	8008812 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087fc:	4b16      	ldr	r3, [pc, #88]	; (8008858 <HAL_PWREx_ConfigSupply+0x70>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	429a      	cmp	r2, r3
 8008808:	d001      	beq.n	800880e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e01f      	b.n	800884e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	e01d      	b.n	800884e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008812:	4b11      	ldr	r3, [pc, #68]	; (8008858 <HAL_PWREx_ConfigSupply+0x70>)
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f023 0207 	bic.w	r2, r3, #7
 800881a:	490f      	ldr	r1, [pc, #60]	; (8008858 <HAL_PWREx_ConfigSupply+0x70>)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4313      	orrs	r3, r2
 8008820:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008822:	f7fc f83b 	bl	800489c <HAL_GetTick>
 8008826:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008828:	e009      	b.n	800883e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800882a:	f7fc f837 	bl	800489c <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008838:	d901      	bls.n	800883e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e007      	b.n	800884e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <HAL_PWREx_ConfigSupply+0x70>)
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800884a:	d1ee      	bne.n	800882a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	58024800 	.word	0x58024800

0800885c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08c      	sub	sp, #48	; 0x30
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d102      	bne.n	8008870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	f000 bc48 	b.w	8009100 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 8088 	beq.w	800898e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800887e:	4b99      	ldr	r3, [pc, #612]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008886:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008888:	4b96      	ldr	r3, [pc, #600]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	2b10      	cmp	r3, #16
 8008892:	d007      	beq.n	80088a4 <HAL_RCC_OscConfig+0x48>
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	2b18      	cmp	r3, #24
 8008898:	d111      	bne.n	80088be <HAL_RCC_OscConfig+0x62>
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d10c      	bne.n	80088be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a4:	4b8f      	ldr	r3, [pc, #572]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d06d      	beq.n	800898c <HAL_RCC_OscConfig+0x130>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d169      	bne.n	800898c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	f000 bc21 	b.w	8009100 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c6:	d106      	bne.n	80088d6 <HAL_RCC_OscConfig+0x7a>
 80088c8:	4b86      	ldr	r3, [pc, #536]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a85      	ldr	r2, [pc, #532]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d2:	6013      	str	r3, [r2, #0]
 80088d4:	e02e      	b.n	8008934 <HAL_RCC_OscConfig+0xd8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10c      	bne.n	80088f8 <HAL_RCC_OscConfig+0x9c>
 80088de:	4b81      	ldr	r3, [pc, #516]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a80      	ldr	r2, [pc, #512]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	4b7e      	ldr	r3, [pc, #504]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a7d      	ldr	r2, [pc, #500]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80088f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	e01d      	b.n	8008934 <HAL_RCC_OscConfig+0xd8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008900:	d10c      	bne.n	800891c <HAL_RCC_OscConfig+0xc0>
 8008902:	4b78      	ldr	r3, [pc, #480]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a77      	ldr	r2, [pc, #476]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4b75      	ldr	r3, [pc, #468]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a74      	ldr	r2, [pc, #464]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e00b      	b.n	8008934 <HAL_RCC_OscConfig+0xd8>
 800891c:	4b71      	ldr	r3, [pc, #452]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a70      	ldr	r2, [pc, #448]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	4b6e      	ldr	r3, [pc, #440]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a6d      	ldr	r2, [pc, #436]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 800892e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d013      	beq.n	8008964 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800893c:	f7fb ffae 	bl	800489c <HAL_GetTick>
 8008940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008942:	e008      	b.n	8008956 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008944:	f7fb ffaa 	bl	800489c <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b64      	cmp	r3, #100	; 0x64
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e3d4      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008956:	4b63      	ldr	r3, [pc, #396]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0f0      	beq.n	8008944 <HAL_RCC_OscConfig+0xe8>
 8008962:	e014      	b.n	800898e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008964:	f7fb ff9a 	bl	800489c <HAL_GetTick>
 8008968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800896a:	e008      	b.n	800897e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800896c:	f7fb ff96 	bl	800489c <HAL_GetTick>
 8008970:	4602      	mov	r2, r0
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	2b64      	cmp	r3, #100	; 0x64
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e3c0      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800897e:	4b59      	ldr	r3, [pc, #356]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f0      	bne.n	800896c <HAL_RCC_OscConfig+0x110>
 800898a:	e000      	b.n	800898e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800898c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 80ca 	beq.w	8008b30 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800899c:	4b51      	ldr	r3, [pc, #324]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80089a6:	4b4f      	ldr	r3, [pc, #316]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d007      	beq.n	80089c2 <HAL_RCC_OscConfig+0x166>
 80089b2:	6a3b      	ldr	r3, [r7, #32]
 80089b4:	2b18      	cmp	r3, #24
 80089b6:	d156      	bne.n	8008a66 <HAL_RCC_OscConfig+0x20a>
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f003 0303 	and.w	r3, r3, #3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d151      	bne.n	8008a66 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089c2:	4b48      	ldr	r3, [pc, #288]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0304 	and.w	r3, r3, #4
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d005      	beq.n	80089da <HAL_RCC_OscConfig+0x17e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e392      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089da:	4b42      	ldr	r3, [pc, #264]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f023 0219 	bic.w	r2, r3, #25
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	493f      	ldr	r1, [pc, #252]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ec:	f7fb ff56 	bl	800489c <HAL_GetTick>
 80089f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089f2:	e008      	b.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089f4:	f7fb ff52 	bl	800489c <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e37c      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a06:	4b37      	ldr	r3, [pc, #220]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0f0      	beq.n	80089f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a12:	f7fb ff73 	bl	80048fc <HAL_GetREVID>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d817      	bhi.n	8008a50 <HAL_RCC_OscConfig+0x1f4>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b40      	cmp	r3, #64	; 0x40
 8008a26:	d108      	bne.n	8008a3a <HAL_RCC_OscConfig+0x1de>
 8008a28:	4b2e      	ldr	r3, [pc, #184]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a30:	4a2c      	ldr	r2, [pc, #176]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a36:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a38:	e07a      	b.n	8008b30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	031b      	lsls	r3, r3, #12
 8008a48:	4926      	ldr	r1, [pc, #152]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a4e:	e06f      	b.n	8008b30 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a50:	4b24      	ldr	r3, [pc, #144]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	061b      	lsls	r3, r3, #24
 8008a5e:	4921      	ldr	r1, [pc, #132]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a60:	4313      	orrs	r3, r2
 8008a62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a64:	e064      	b.n	8008b30 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d047      	beq.n	8008afe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f023 0219 	bic.w	r2, r3, #25
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	491a      	ldr	r1, [pc, #104]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a80:	f7fb ff0c 	bl	800489c <HAL_GetTick>
 8008a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a86:	e008      	b.n	8008a9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a88:	f7fb ff08 	bl	800489c <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e332      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a9a:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0304 	and.w	r3, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d0f0      	beq.n	8008a88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa6:	f7fb ff29 	bl	80048fc <HAL_GetREVID>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f241 0203 	movw	r2, #4099	; 0x1003
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d819      	bhi.n	8008ae8 <HAL_RCC_OscConfig+0x28c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	2b40      	cmp	r3, #64	; 0x40
 8008aba:	d108      	bne.n	8008ace <HAL_RCC_OscConfig+0x272>
 8008abc:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008ac4:	4a07      	ldr	r2, [pc, #28]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008aca:	6053      	str	r3, [r2, #4]
 8008acc:	e030      	b.n	8008b30 <HAL_RCC_OscConfig+0x2d4>
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	031b      	lsls	r3, r3, #12
 8008adc:	4901      	ldr	r1, [pc, #4]	; (8008ae4 <HAL_RCC_OscConfig+0x288>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	604b      	str	r3, [r1, #4]
 8008ae2:	e025      	b.n	8008b30 <HAL_RCC_OscConfig+0x2d4>
 8008ae4:	58024400 	.word	0x58024400
 8008ae8:	4b9a      	ldr	r3, [pc, #616]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	061b      	lsls	r3, r3, #24
 8008af6:	4997      	ldr	r1, [pc, #604]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	604b      	str	r3, [r1, #4]
 8008afc:	e018      	b.n	8008b30 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008afe:	4b95      	ldr	r3, [pc, #596]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a94      	ldr	r2, [pc, #592]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b0a:	f7fb fec7 	bl	800489c <HAL_GetTick>
 8008b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b10:	e008      	b.n	8008b24 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b12:	f7fb fec3 	bl	800489c <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d901      	bls.n	8008b24 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e2ed      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008b24:	4b8b      	ldr	r3, [pc, #556]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0304 	and.w	r3, r3, #4
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1f0      	bne.n	8008b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f000 80a9 	beq.w	8008c90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b3e:	4b85      	ldr	r3, [pc, #532]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b46:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b48:	4b82      	ldr	r3, [pc, #520]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d007      	beq.n	8008b64 <HAL_RCC_OscConfig+0x308>
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	2b18      	cmp	r3, #24
 8008b58:	d13a      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x374>
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d135      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b64:	4b7b      	ldr	r3, [pc, #492]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d005      	beq.n	8008b7c <HAL_RCC_OscConfig+0x320>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d001      	beq.n	8008b7c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e2c1      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b7c:	f7fb febe 	bl	80048fc <HAL_GetREVID>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d817      	bhi.n	8008bba <HAL_RCC_OscConfig+0x35e>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d108      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x348>
 8008b92:	4b70      	ldr	r3, [pc, #448]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b9a:	4a6e      	ldr	r2, [pc, #440]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ba0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ba2:	e075      	b.n	8008c90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ba4:	4b6b      	ldr	r3, [pc, #428]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a1b      	ldr	r3, [r3, #32]
 8008bb0:	069b      	lsls	r3, r3, #26
 8008bb2:	4968      	ldr	r1, [pc, #416]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bb8:	e06a      	b.n	8008c90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bba:	4b66      	ldr	r3, [pc, #408]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a1b      	ldr	r3, [r3, #32]
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	4962      	ldr	r1, [pc, #392]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008bce:	e05f      	b.n	8008c90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	69db      	ldr	r3, [r3, #28]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d042      	beq.n	8008c5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008bd8:	4b5e      	ldr	r3, [pc, #376]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a5d      	ldr	r2, [pc, #372]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008be4:	f7fb fe5a 	bl	800489c <HAL_GetTick>
 8008be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bea:	e008      	b.n	8008bfe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bec:	f7fb fe56 	bl	800489c <HAL_GetTick>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d901      	bls.n	8008bfe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	e280      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008bfe:	4b55      	ldr	r3, [pc, #340]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0f0      	beq.n	8008bec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c0a:	f7fb fe77 	bl	80048fc <HAL_GetREVID>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d817      	bhi.n	8008c48 <HAL_RCC_OscConfig+0x3ec>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	2b20      	cmp	r3, #32
 8008c1e:	d108      	bne.n	8008c32 <HAL_RCC_OscConfig+0x3d6>
 8008c20:	4b4c      	ldr	r3, [pc, #304]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008c28:	4a4a      	ldr	r2, [pc, #296]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c2e:	6053      	str	r3, [r2, #4]
 8008c30:	e02e      	b.n	8008c90 <HAL_RCC_OscConfig+0x434>
 8008c32:	4b48      	ldr	r3, [pc, #288]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	069b      	lsls	r3, r3, #26
 8008c40:	4944      	ldr	r1, [pc, #272]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	604b      	str	r3, [r1, #4]
 8008c46:	e023      	b.n	8008c90 <HAL_RCC_OscConfig+0x434>
 8008c48:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	061b      	lsls	r3, r3, #24
 8008c56:	493f      	ldr	r1, [pc, #252]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	60cb      	str	r3, [r1, #12]
 8008c5c:	e018      	b.n	8008c90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c5e:	4b3d      	ldr	r3, [pc, #244]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a3c      	ldr	r2, [pc, #240]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c6a:	f7fb fe17 	bl	800489c <HAL_GetTick>
 8008c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c70:	e008      	b.n	8008c84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c72:	f7fb fe13 	bl	800489c <HAL_GetTick>
 8008c76:	4602      	mov	r2, r0
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	1ad3      	subs	r3, r2, r3
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d901      	bls.n	8008c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c80:	2303      	movs	r3, #3
 8008c82:	e23d      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c84:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1f0      	bne.n	8008c72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0308 	and.w	r3, r3, #8
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d036      	beq.n	8008d0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d019      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca8:	4a2a      	ldr	r2, [pc, #168]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008caa:	f043 0301 	orr.w	r3, r3, #1
 8008cae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb0:	f7fb fdf4 	bl	800489c <HAL_GetTick>
 8008cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cb8:	f7fb fdf0 	bl	800489c <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e21a      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008cca:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0f0      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x45c>
 8008cd6:	e018      	b.n	8008d0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cdc:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008cde:	f023 0301 	bic.w	r3, r3, #1
 8008ce2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce4:	f7fb fdda 	bl	800489c <HAL_GetTick>
 8008ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cec:	f7fb fdd6 	bl	800489c <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e200      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008cfe:	4b15      	ldr	r3, [pc, #84]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1f0      	bne.n	8008cec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d039      	beq.n	8008d8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01c      	beq.n	8008d58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d2a:	f7fb fdb7 	bl	800489c <HAL_GetTick>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d30:	e008      	b.n	8008d44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d32:	f7fb fdb3 	bl	800489c <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d901      	bls.n	8008d44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e1dd      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008d44:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <HAL_RCC_OscConfig+0x4f8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0f0      	beq.n	8008d32 <HAL_RCC_OscConfig+0x4d6>
 8008d50:	e01b      	b.n	8008d8a <HAL_RCC_OscConfig+0x52e>
 8008d52:	bf00      	nop
 8008d54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008d58:	4b9b      	ldr	r3, [pc, #620]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a9a      	ldr	r2, [pc, #616]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d64:	f7fb fd9a 	bl	800489c <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d6c:	f7fb fd96 	bl	800489c <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e1c0      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d7e:	4b92      	ldr	r3, [pc, #584]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f0      	bne.n	8008d6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8081 	beq.w	8008e9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d98:	4b8c      	ldr	r3, [pc, #560]	; (8008fcc <HAL_RCC_OscConfig+0x770>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a8b      	ldr	r2, [pc, #556]	; (8008fcc <HAL_RCC_OscConfig+0x770>)
 8008d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008da4:	f7fb fd7a 	bl	800489c <HAL_GetTick>
 8008da8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dac:	f7fb fd76 	bl	800489c <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b64      	cmp	r3, #100	; 0x64
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e1a0      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dbe:	4b83      	ldr	r3, [pc, #524]	; (8008fcc <HAL_RCC_OscConfig+0x770>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0f0      	beq.n	8008dac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d106      	bne.n	8008de0 <HAL_RCC_OscConfig+0x584>
 8008dd2:	4b7d      	ldr	r3, [pc, #500]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd6:	4a7c      	ldr	r2, [pc, #496]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008dd8:	f043 0301 	orr.w	r3, r3, #1
 8008ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8008dde:	e02d      	b.n	8008e3c <HAL_RCC_OscConfig+0x5e0>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10c      	bne.n	8008e02 <HAL_RCC_OscConfig+0x5a6>
 8008de8:	4b77      	ldr	r3, [pc, #476]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dec:	4a76      	ldr	r2, [pc, #472]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008dee:	f023 0301 	bic.w	r3, r3, #1
 8008df2:	6713      	str	r3, [r2, #112]	; 0x70
 8008df4:	4b74      	ldr	r3, [pc, #464]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df8:	4a73      	ldr	r2, [pc, #460]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008dfa:	f023 0304 	bic.w	r3, r3, #4
 8008dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8008e00:	e01c      	b.n	8008e3c <HAL_RCC_OscConfig+0x5e0>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	2b05      	cmp	r3, #5
 8008e08:	d10c      	bne.n	8008e24 <HAL_RCC_OscConfig+0x5c8>
 8008e0a:	4b6f      	ldr	r3, [pc, #444]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0e:	4a6e      	ldr	r2, [pc, #440]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e10:	f043 0304 	orr.w	r3, r3, #4
 8008e14:	6713      	str	r3, [r2, #112]	; 0x70
 8008e16:	4b6c      	ldr	r3, [pc, #432]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	4a6b      	ldr	r2, [pc, #428]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e1c:	f043 0301 	orr.w	r3, r3, #1
 8008e20:	6713      	str	r3, [r2, #112]	; 0x70
 8008e22:	e00b      	b.n	8008e3c <HAL_RCC_OscConfig+0x5e0>
 8008e24:	4b68      	ldr	r3, [pc, #416]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e28:	4a67      	ldr	r2, [pc, #412]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e30:	4b65      	ldr	r3, [pc, #404]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e34:	4a64      	ldr	r2, [pc, #400]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e36:	f023 0304 	bic.w	r3, r3, #4
 8008e3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d015      	beq.n	8008e70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e44:	f7fb fd2a 	bl	800489c <HAL_GetTick>
 8008e48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e4a:	e00a      	b.n	8008e62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e4c:	f7fb fd26 	bl	800489c <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d901      	bls.n	8008e62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e14e      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e62:	4b59      	ldr	r3, [pc, #356]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0ee      	beq.n	8008e4c <HAL_RCC_OscConfig+0x5f0>
 8008e6e:	e014      	b.n	8008e9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e70:	f7fb fd14 	bl	800489c <HAL_GetTick>
 8008e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e76:	e00a      	b.n	8008e8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e78:	f7fb fd10 	bl	800489c <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e138      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e8e:	4b4e      	ldr	r3, [pc, #312]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1ee      	bne.n	8008e78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 812d 	beq.w	80090fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008ea4:	4b48      	ldr	r3, [pc, #288]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008eac:	2b18      	cmp	r3, #24
 8008eae:	f000 80bd 	beq.w	800902c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	f040 809e 	bne.w	8008ff8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ebc:	4b42      	ldr	r3, [pc, #264]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a41      	ldr	r2, [pc, #260]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec8:	f7fb fce8 	bl	800489c <HAL_GetTick>
 8008ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed0:	f7fb fce4 	bl	800489c <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e10e      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ee2:	4b39      	ldr	r3, [pc, #228]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1f0      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eee:	4b36      	ldr	r3, [pc, #216]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ef2:	4b37      	ldr	r3, [pc, #220]	; (8008fd0 <HAL_RCC_OscConfig+0x774>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008efe:	0112      	lsls	r2, r2, #4
 8008f00:	430a      	orrs	r2, r1
 8008f02:	4931      	ldr	r1, [pc, #196]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	628b      	str	r3, [r1, #40]	; 0x28
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	3b01      	subs	r3, #1
 8008f18:	025b      	lsls	r3, r3, #9
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f22:	3b01      	subs	r3, #1
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008f2a:	431a      	orrs	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f30:	3b01      	subs	r3, #1
 8008f32:	061b      	lsls	r3, r3, #24
 8008f34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f38:	4923      	ldr	r1, [pc, #140]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008f3e:	4b22      	ldr	r3, [pc, #136]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4a21      	ldr	r2, [pc, #132]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f44:	f023 0301 	bic.w	r3, r3, #1
 8008f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f4a:	4b1f      	ldr	r3, [pc, #124]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4e:	4b21      	ldr	r3, [pc, #132]	; (8008fd4 <HAL_RCC_OscConfig+0x778>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f56:	00d2      	lsls	r2, r2, #3
 8008f58:	491b      	ldr	r1, [pc, #108]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f5e:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	f023 020c 	bic.w	r2, r3, #12
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	4917      	ldr	r1, [pc, #92]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f70:	4b15      	ldr	r3, [pc, #84]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	f023 0202 	bic.w	r2, r3, #2
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7c:	4912      	ldr	r1, [pc, #72]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f82:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f86:	4a10      	ldr	r2, [pc, #64]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	4a0d      	ldr	r2, [pc, #52]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	4a0a      	ldr	r2, [pc, #40]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008fa6:	4b08      	ldr	r3, [pc, #32]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a07      	ldr	r2, [pc, #28]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008fac:	f043 0301 	orr.w	r3, r3, #1
 8008fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fb2:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <HAL_RCC_OscConfig+0x76c>)
 8008fb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fbe:	f7fb fc6d 	bl	800489c <HAL_GetTick>
 8008fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fc4:	e011      	b.n	8008fea <HAL_RCC_OscConfig+0x78e>
 8008fc6:	bf00      	nop
 8008fc8:	58024400 	.word	0x58024400
 8008fcc:	58024800 	.word	0x58024800
 8008fd0:	fffffc0c 	.word	0xfffffc0c
 8008fd4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fd8:	f7fb fc60 	bl	800489c <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e08a      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008fea:	4b47      	ldr	r3, [pc, #284]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f0      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x77c>
 8008ff6:	e082      	b.n	80090fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff8:	4b43      	ldr	r3, [pc, #268]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a42      	ldr	r2, [pc, #264]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 8008ffe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009004:	f7fb fc4a 	bl	800489c <HAL_GetTick>
 8009008:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800900a:	e008      	b.n	800901e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800900c:	f7fb fc46 	bl	800489c <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	2b02      	cmp	r3, #2
 8009018:	d901      	bls.n	800901e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800901a:	2303      	movs	r3, #3
 800901c:	e070      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800901e:	4b3a      	ldr	r3, [pc, #232]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1f0      	bne.n	800900c <HAL_RCC_OscConfig+0x7b0>
 800902a:	e068      	b.n	80090fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800902c:	4b36      	ldr	r3, [pc, #216]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 800902e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009030:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009032:	4b35      	ldr	r3, [pc, #212]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	2b01      	cmp	r3, #1
 800903e:	d031      	beq.n	80090a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f003 0203 	and.w	r2, r3, #3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800904a:	429a      	cmp	r2, r3
 800904c:	d12a      	bne.n	80090a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	091b      	lsrs	r3, r3, #4
 8009052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800905a:	429a      	cmp	r2, r3
 800905c:	d122      	bne.n	80090a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800906a:	429a      	cmp	r2, r3
 800906c:	d11a      	bne.n	80090a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	0a5b      	lsrs	r3, r3, #9
 8009072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800907c:	429a      	cmp	r2, r3
 800907e:	d111      	bne.n	80090a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	0c1b      	lsrs	r3, r3, #16
 8009084:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800908e:	429a      	cmp	r2, r3
 8009090:	d108      	bne.n	80090a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	0e1b      	lsrs	r3, r3, #24
 8009096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800909e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d001      	beq.n	80090a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e02b      	b.n	8009100 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	08db      	lsrs	r3, r3, #3
 80090ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d01f      	beq.n	80090fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	4a11      	ldr	r2, [pc, #68]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80090ca:	f7fb fbe7 	bl	800489c <HAL_GetTick>
 80090ce:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80090d0:	bf00      	nop
 80090d2:	f7fb fbe3 	bl	800489c <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	4293      	cmp	r3, r2
 80090dc:	d0f9      	beq.n	80090d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090de:	4b0a      	ldr	r3, [pc, #40]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090e2:	4b0a      	ldr	r3, [pc, #40]	; (800910c <HAL_RCC_OscConfig+0x8b0>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090ea:	00d2      	lsls	r2, r2, #3
 80090ec:	4906      	ldr	r1, [pc, #24]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80090f2:	4b05      	ldr	r3, [pc, #20]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f6:	4a04      	ldr	r2, [pc, #16]	; (8009108 <HAL_RCC_OscConfig+0x8ac>)
 80090f8:	f043 0301 	orr.w	r3, r3, #1
 80090fc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3730      	adds	r7, #48	; 0x30
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58024400 	.word	0x58024400
 800910c:	ffff0007 	.word	0xffff0007

08009110 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e19c      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009124:	4b8a      	ldr	r3, [pc, #552]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 030f 	and.w	r3, r3, #15
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d910      	bls.n	8009154 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b87      	ldr	r3, [pc, #540]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f023 020f 	bic.w	r2, r3, #15
 800913a:	4985      	ldr	r1, [pc, #532]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	4313      	orrs	r3, r2
 8009140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009142:	4b83      	ldr	r3, [pc, #524]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 030f 	and.w	r3, r3, #15
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d001      	beq.n	8009154 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e184      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d010      	beq.n	8009182 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	4b7b      	ldr	r3, [pc, #492]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800916c:	429a      	cmp	r2, r3
 800916e:	d908      	bls.n	8009182 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009170:	4b78      	ldr	r3, [pc, #480]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009172:	699b      	ldr	r3, [r3, #24]
 8009174:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	4975      	ldr	r1, [pc, #468]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 800917e:	4313      	orrs	r3, r2
 8009180:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	2b00      	cmp	r3, #0
 800918c:	d010      	beq.n	80091b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695a      	ldr	r2, [r3, #20]
 8009192:	4b70      	ldr	r3, [pc, #448]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800919a:	429a      	cmp	r2, r3
 800919c:	d908      	bls.n	80091b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800919e:	4b6d      	ldr	r3, [pc, #436]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	496a      	ldr	r1, [pc, #424]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0310 	and.w	r3, r3, #16
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d010      	beq.n	80091de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	4b64      	ldr	r3, [pc, #400]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091c2:	69db      	ldr	r3, [r3, #28]
 80091c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d908      	bls.n	80091de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091cc:	4b61      	ldr	r3, [pc, #388]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	495e      	ldr	r1, [pc, #376]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d010      	beq.n	800920c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69da      	ldr	r2, [r3, #28]
 80091ee:	4b59      	ldr	r3, [pc, #356]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d908      	bls.n	800920c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091fa:	4b56      	ldr	r3, [pc, #344]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	4953      	ldr	r1, [pc, #332]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009208:	4313      	orrs	r3, r2
 800920a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	4b4d      	ldr	r3, [pc, #308]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	429a      	cmp	r2, r3
 8009226:	d908      	bls.n	800923a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009228:	4b4a      	ldr	r3, [pc, #296]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f023 020f 	bic.w	r2, r3, #15
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	4947      	ldr	r1, [pc, #284]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009236:	4313      	orrs	r3, r2
 8009238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d055      	beq.n	80092f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009246:	4b43      	ldr	r3, [pc, #268]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	4940      	ldr	r1, [pc, #256]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009254:	4313      	orrs	r3, r2
 8009256:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d107      	bne.n	8009270 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009260:	4b3c      	ldr	r3, [pc, #240]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d121      	bne.n	80092b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e0f6      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2b03      	cmp	r3, #3
 8009276:	d107      	bne.n	8009288 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009278:	4b36      	ldr	r3, [pc, #216]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d115      	bne.n	80092b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0ea      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	2b01      	cmp	r3, #1
 800928e:	d107      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009290:	4b30      	ldr	r3, [pc, #192]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009298:	2b00      	cmp	r3, #0
 800929a:	d109      	bne.n	80092b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e0de      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80092a0:	4b2c      	ldr	r3, [pc, #176]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0304 	and.w	r3, r3, #4
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d101      	bne.n	80092b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0d6      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092b0:	4b28      	ldr	r3, [pc, #160]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f023 0207 	bic.w	r2, r3, #7
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4925      	ldr	r1, [pc, #148]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092c2:	f7fb faeb 	bl	800489c <HAL_GetTick>
 80092c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092c8:	e00a      	b.n	80092e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092ca:	f7fb fae7 	bl	800489c <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d8:	4293      	cmp	r3, r2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e0be      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092e0:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	00db      	lsls	r3, r3, #3
 80092ee:	429a      	cmp	r2, r3
 80092f0:	d1eb      	bne.n	80092ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d010      	beq.n	8009320 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	4b14      	ldr	r3, [pc, #80]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	429a      	cmp	r2, r3
 800930c:	d208      	bcs.n	8009320 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800930e:	4b11      	ldr	r3, [pc, #68]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	f023 020f 	bic.w	r2, r3, #15
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	490e      	ldr	r1, [pc, #56]	; (8009354 <HAL_RCC_ClockConfig+0x244>)
 800931c:	4313      	orrs	r3, r2
 800931e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d214      	bcs.n	8009358 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800932e:	4b08      	ldr	r3, [pc, #32]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f023 020f 	bic.w	r2, r3, #15
 8009336:	4906      	ldr	r1, [pc, #24]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	4313      	orrs	r3, r2
 800933c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800933e:	4b04      	ldr	r3, [pc, #16]	; (8009350 <HAL_RCC_ClockConfig+0x240>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 030f 	and.w	r3, r3, #15
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d005      	beq.n	8009358 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e086      	b.n	800945e <HAL_RCC_ClockConfig+0x34e>
 8009350:	52002000 	.word	0x52002000
 8009354:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d010      	beq.n	8009386 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691a      	ldr	r2, [r3, #16]
 8009368:	4b3f      	ldr	r3, [pc, #252]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009370:	429a      	cmp	r2, r3
 8009372:	d208      	bcs.n	8009386 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009374:	4b3c      	ldr	r3, [pc, #240]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	4939      	ldr	r1, [pc, #228]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 8009382:	4313      	orrs	r3, r2
 8009384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d010      	beq.n	80093b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	695a      	ldr	r2, [r3, #20]
 8009396:	4b34      	ldr	r3, [pc, #208]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800939e:	429a      	cmp	r2, r3
 80093a0:	d208      	bcs.n	80093b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80093a2:	4b31      	ldr	r3, [pc, #196]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 80093a4:	69db      	ldr	r3, [r3, #28]
 80093a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	492e      	ldr	r1, [pc, #184]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0310 	and.w	r3, r3, #16
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d010      	beq.n	80093e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699a      	ldr	r2, [r3, #24]
 80093c4:	4b28      	ldr	r3, [pc, #160]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d208      	bcs.n	80093e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80093d0:	4b25      	ldr	r3, [pc, #148]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	4922      	ldr	r1, [pc, #136]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d010      	beq.n	8009410 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	69da      	ldr	r2, [r3, #28]
 80093f2:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 80093f4:	6a1b      	ldr	r3, [r3, #32]
 80093f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d208      	bcs.n	8009410 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80093fe:	4b1a      	ldr	r3, [pc, #104]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	4917      	ldr	r1, [pc, #92]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 800940c:	4313      	orrs	r3, r2
 800940e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009410:	f000 f834 	bl	800947c <HAL_RCC_GetSysClockFreq>
 8009414:	4602      	mov	r2, r0
 8009416:	4b14      	ldr	r3, [pc, #80]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	0a1b      	lsrs	r3, r3, #8
 800941c:	f003 030f 	and.w	r3, r3, #15
 8009420:	4912      	ldr	r1, [pc, #72]	; (800946c <HAL_RCC_ClockConfig+0x35c>)
 8009422:	5ccb      	ldrb	r3, [r1, r3]
 8009424:	f003 031f 	and.w	r3, r3, #31
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800942e:	4b0e      	ldr	r3, [pc, #56]	; (8009468 <HAL_RCC_ClockConfig+0x358>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	4a0d      	ldr	r2, [pc, #52]	; (800946c <HAL_RCC_ClockConfig+0x35c>)
 8009438:	5cd3      	ldrb	r3, [r2, r3]
 800943a:	f003 031f 	and.w	r3, r3, #31
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	fa22 f303 	lsr.w	r3, r2, r3
 8009444:	4a0a      	ldr	r2, [pc, #40]	; (8009470 <HAL_RCC_ClockConfig+0x360>)
 8009446:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009448:	4a0a      	ldr	r2, [pc, #40]	; (8009474 <HAL_RCC_ClockConfig+0x364>)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800944e:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <HAL_RCC_ClockConfig+0x368>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4618      	mov	r0, r3
 8009454:	f7fb f9d8 	bl	8004808 <HAL_InitTick>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	58024400 	.word	0x58024400
 800946c:	080144dc 	.word	0x080144dc
 8009470:	24000014 	.word	0x24000014
 8009474:	24000010 	.word	0x24000010
 8009478:	2400005c 	.word	0x2400005c

0800947c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800947c:	b480      	push	{r7}
 800947e:	b089      	sub	sp, #36	; 0x24
 8009480:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009482:	4bb3      	ldr	r3, [pc, #716]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800948a:	2b18      	cmp	r3, #24
 800948c:	f200 8155 	bhi.w	800973a <HAL_RCC_GetSysClockFreq+0x2be>
 8009490:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	080094fd 	.word	0x080094fd
 800949c:	0800973b 	.word	0x0800973b
 80094a0:	0800973b 	.word	0x0800973b
 80094a4:	0800973b 	.word	0x0800973b
 80094a8:	0800973b 	.word	0x0800973b
 80094ac:	0800973b 	.word	0x0800973b
 80094b0:	0800973b 	.word	0x0800973b
 80094b4:	0800973b 	.word	0x0800973b
 80094b8:	08009523 	.word	0x08009523
 80094bc:	0800973b 	.word	0x0800973b
 80094c0:	0800973b 	.word	0x0800973b
 80094c4:	0800973b 	.word	0x0800973b
 80094c8:	0800973b 	.word	0x0800973b
 80094cc:	0800973b 	.word	0x0800973b
 80094d0:	0800973b 	.word	0x0800973b
 80094d4:	0800973b 	.word	0x0800973b
 80094d8:	08009529 	.word	0x08009529
 80094dc:	0800973b 	.word	0x0800973b
 80094e0:	0800973b 	.word	0x0800973b
 80094e4:	0800973b 	.word	0x0800973b
 80094e8:	0800973b 	.word	0x0800973b
 80094ec:	0800973b 	.word	0x0800973b
 80094f0:	0800973b 	.word	0x0800973b
 80094f4:	0800973b 	.word	0x0800973b
 80094f8:	0800952f 	.word	0x0800952f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094fc:	4b94      	ldr	r3, [pc, #592]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0320 	and.w	r3, r3, #32
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009508:	4b91      	ldr	r3, [pc, #580]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	08db      	lsrs	r3, r3, #3
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	4a90      	ldr	r2, [pc, #576]	; (8009754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009514:	fa22 f303 	lsr.w	r3, r2, r3
 8009518:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800951a:	e111      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800951c:	4b8d      	ldr	r3, [pc, #564]	; (8009754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800951e:	61bb      	str	r3, [r7, #24]
      break;
 8009520:	e10e      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009522:	4b8d      	ldr	r3, [pc, #564]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009524:	61bb      	str	r3, [r7, #24]
      break;
 8009526:	e10b      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009528:	4b8c      	ldr	r3, [pc, #560]	; (800975c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800952a:	61bb      	str	r3, [r7, #24]
      break;
 800952c:	e108      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800952e:	4b88      	ldr	r3, [pc, #544]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	f003 0303 	and.w	r3, r3, #3
 8009536:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009538:	4b85      	ldr	r3, [pc, #532]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953c:	091b      	lsrs	r3, r3, #4
 800953e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009542:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009544:	4b82      	ldr	r3, [pc, #520]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800954e:	4b80      	ldr	r3, [pc, #512]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009552:	08db      	lsrs	r3, r3, #3
 8009554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	fb02 f303 	mul.w	r3, r2, r3
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009566:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80e1 	beq.w	8009734 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b02      	cmp	r3, #2
 8009576:	f000 8083 	beq.w	8009680 <HAL_RCC_GetSysClockFreq+0x204>
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	2b02      	cmp	r3, #2
 800957e:	f200 80a1 	bhi.w	80096c4 <HAL_RCC_GetSysClockFreq+0x248>
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d003      	beq.n	8009590 <HAL_RCC_GetSysClockFreq+0x114>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d056      	beq.n	800963c <HAL_RCC_GetSysClockFreq+0x1c0>
 800958e:	e099      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009590:	4b6f      	ldr	r3, [pc, #444]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0320 	and.w	r3, r3, #32
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02d      	beq.n	80095f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800959c:	4b6c      	ldr	r3, [pc, #432]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	08db      	lsrs	r3, r3, #3
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	4a6b      	ldr	r2, [pc, #428]	; (8009754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095a8:	fa22 f303 	lsr.w	r3, r2, r3
 80095ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	ee07 3a90 	vmov	s15, r3
 80095b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c6:	4b62      	ldr	r3, [pc, #392]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009760 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80095f6:	e087      	b.n	8009708 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009764 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960a:	4b51      	ldr	r3, [pc, #324]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800960c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	ed97 6a02 	vldr	s12, [r7, #8]
 800961e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009760 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800963a:	e065      	b.n	8009708 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2ec>
 800964a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964e:	4b40      	ldr	r3, [pc, #256]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009662:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009760 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800967e:	e043      	b.n	8009708 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	ee07 3a90 	vmov	s15, r3
 8009686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800976c <HAL_RCC_GetSysClockFreq+0x2f0>
 800968e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009692:	4b2f      	ldr	r3, [pc, #188]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009760 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096c2:	e021      	b.n	8009708 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	ee07 3a90 	vmov	s15, r3
 80096ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009768 <HAL_RCC_GetSysClockFreq+0x2ec>
 80096d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d6:	4b1e      	ldr	r3, [pc, #120]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096de:	ee07 3a90 	vmov	s15, r3
 80096e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80096ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009760 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009706:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009708:	4b11      	ldr	r3, [pc, #68]	; (8009750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	0a5b      	lsrs	r3, r3, #9
 800970e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009712:	3301      	adds	r3, #1
 8009714:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009720:	edd7 6a07 	vldr	s13, [r7, #28]
 8009724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800972c:	ee17 3a90 	vmov	r3, s15
 8009730:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009732:	e005      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009734:	2300      	movs	r3, #0
 8009736:	61bb      	str	r3, [r7, #24]
      break;
 8009738:	e002      	b.n	8009740 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800973a:	4b07      	ldr	r3, [pc, #28]	; (8009758 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800973c:	61bb      	str	r3, [r7, #24]
      break;
 800973e:	bf00      	nop
  }

  return sysclockfreq;
 8009740:	69bb      	ldr	r3, [r7, #24]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3724      	adds	r7, #36	; 0x24
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	58024400 	.word	0x58024400
 8009754:	03d09000 	.word	0x03d09000
 8009758:	003d0900 	.word	0x003d0900
 800975c:	017d7840 	.word	0x017d7840
 8009760:	46000000 	.word	0x46000000
 8009764:	4c742400 	.word	0x4c742400
 8009768:	4a742400 	.word	0x4a742400
 800976c:	4bbebc20 	.word	0x4bbebc20

08009770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009776:	f7ff fe81 	bl	800947c <HAL_RCC_GetSysClockFreq>
 800977a:	4602      	mov	r2, r0
 800977c:	4b10      	ldr	r3, [pc, #64]	; (80097c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	0a1b      	lsrs	r3, r3, #8
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	490f      	ldr	r1, [pc, #60]	; (80097c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009788:	5ccb      	ldrb	r3, [r1, r3]
 800978a:	f003 031f 	and.w	r3, r3, #31
 800978e:	fa22 f303 	lsr.w	r3, r2, r3
 8009792:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009794:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f003 030f 	and.w	r3, r3, #15
 800979c:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800979e:	5cd3      	ldrb	r3, [r2, r3]
 80097a0:	f003 031f 	and.w	r3, r3, #31
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	fa22 f303 	lsr.w	r3, r2, r3
 80097aa:	4a07      	ldr	r2, [pc, #28]	; (80097c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80097ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097ae:	4a07      	ldr	r2, [pc, #28]	; (80097cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80097b4:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80097b6:	681b      	ldr	r3, [r3, #0]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	58024400 	.word	0x58024400
 80097c4:	080144dc 	.word	0x080144dc
 80097c8:	24000014 	.word	0x24000014
 80097cc:	24000010 	.word	0x24000010

080097d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80097d4:	f7ff ffcc 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 80097d8:	4602      	mov	r2, r0
 80097da:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	091b      	lsrs	r3, r3, #4
 80097e0:	f003 0307 	and.w	r3, r3, #7
 80097e4:	4904      	ldr	r1, [pc, #16]	; (80097f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80097e6:	5ccb      	ldrb	r3, [r1, r3]
 80097e8:	f003 031f 	and.w	r3, r3, #31
 80097ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	58024400 	.word	0x58024400
 80097f8:	080144dc 	.word	0x080144dc

080097fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009800:	f7ff ffb6 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 8009804:	4602      	mov	r2, r0
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	4904      	ldr	r1, [pc, #16]	; (8009824 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009812:	5ccb      	ldrb	r3, [r1, r3]
 8009814:	f003 031f 	and.w	r3, r3, #31
 8009818:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800981c:	4618      	mov	r0, r3
 800981e:	bd80      	pop	{r7, pc}
 8009820:	58024400 	.word	0x58024400
 8009824:	080144dc 	.word	0x080144dc

08009828 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800982c:	b0ca      	sub	sp, #296	; 0x128
 800982e:	af00      	add	r7, sp, #0
 8009830:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009834:	2300      	movs	r3, #0
 8009836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800983a:	2300      	movs	r3, #0
 800983c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800984c:	2500      	movs	r5, #0
 800984e:	ea54 0305 	orrs.w	r3, r4, r5
 8009852:	d049      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800985a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800985e:	d02f      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009864:	d828      	bhi.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800986a:	d01a      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800986c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009870:	d822      	bhi.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800987a:	d007      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800987c:	e01c      	b.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987e:	4bb8      	ldr	r3, [pc, #736]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	4ab7      	ldr	r2, [pc, #732]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800988a:	e01a      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009890:	3308      	adds	r3, #8
 8009892:	2102      	movs	r1, #2
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fc8f 	bl	800b1b8 <RCCEx_PLL2_Config>
 800989a:	4603      	mov	r3, r0
 800989c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098a0:	e00f      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a6:	3328      	adds	r3, #40	; 0x28
 80098a8:	2102      	movs	r1, #2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f001 fd36 	bl	800b31c <RCCEx_PLL3_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098b6:	e004      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10a      	bne.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098ca:	4ba5      	ldr	r3, [pc, #660]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d8:	4aa1      	ldr	r2, [pc, #644]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098da:	430b      	orrs	r3, r1
 80098dc:	6513      	str	r3, [r2, #80]	; 0x50
 80098de:	e003      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80098f4:	f04f 0900 	mov.w	r9, #0
 80098f8:	ea58 0309 	orrs.w	r3, r8, r9
 80098fc:	d047      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80098fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009904:	2b04      	cmp	r3, #4
 8009906:	d82a      	bhi.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009908:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800990a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990e:	bf00      	nop
 8009910:	08009925 	.word	0x08009925
 8009914:	08009933 	.word	0x08009933
 8009918:	08009949 	.word	0x08009949
 800991c:	08009967 	.word	0x08009967
 8009920:	08009967 	.word	0x08009967
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009924:	4b8e      	ldr	r3, [pc, #568]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	4a8d      	ldr	r2, [pc, #564]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800992a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800992e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009930:	e01a      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009936:	3308      	adds	r3, #8
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f001 fc3c 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009946:	e00f      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994c:	3328      	adds	r3, #40	; 0x28
 800994e:	2100      	movs	r1, #0
 8009950:	4618      	mov	r0, r3
 8009952:	f001 fce3 	bl	800b31c <RCCEx_PLL3_Config>
 8009956:	4603      	mov	r3, r0
 8009958:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800995c:	e004      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009970:	4b7b      	ldr	r3, [pc, #492]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009974:	f023 0107 	bic.w	r1, r3, #7
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997e:	4a78      	ldr	r2, [pc, #480]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009980:	430b      	orrs	r3, r1
 8009982:	6513      	str	r3, [r2, #80]	; 0x50
 8009984:	e003      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800998a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800999a:	f04f 0b00 	mov.w	fp, #0
 800999e:	ea5a 030b 	orrs.w	r3, sl, fp
 80099a2:	d04c      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ae:	d030      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80099b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b4:	d829      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099b6:	2bc0      	cmp	r3, #192	; 0xc0
 80099b8:	d02d      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80099ba:	2bc0      	cmp	r3, #192	; 0xc0
 80099bc:	d825      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099be:	2b80      	cmp	r3, #128	; 0x80
 80099c0:	d018      	beq.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80099c2:	2b80      	cmp	r3, #128	; 0x80
 80099c4:	d821      	bhi.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80099ca:	2b40      	cmp	r3, #64	; 0x40
 80099cc:	d007      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80099ce:	e01c      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d0:	4b63      	ldr	r3, [pc, #396]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d4:	4a62      	ldr	r2, [pc, #392]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099dc:	e01c      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e2:	3308      	adds	r3, #8
 80099e4:	2100      	movs	r1, #0
 80099e6:	4618      	mov	r0, r3
 80099e8:	f001 fbe6 	bl	800b1b8 <RCCEx_PLL2_Config>
 80099ec:	4603      	mov	r3, r0
 80099ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099f2:	e011      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	3328      	adds	r3, #40	; 0x28
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f001 fc8d 	bl	800b31c <RCCEx_PLL3_Config>
 8009a02:	4603      	mov	r3, r0
 8009a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a08:	e006      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a10:	e002      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a12:	bf00      	nop
 8009a14:	e000      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a20:	4b4f      	ldr	r3, [pc, #316]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a24:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2e:	4a4c      	ldr	r2, [pc, #304]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a30:	430b      	orrs	r3, r1
 8009a32:	6513      	str	r3, [r2, #80]	; 0x50
 8009a34:	e003      	b.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a46:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a54:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	d053      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a6a:	d035      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a70:	d82e      	bhi.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a76:	d031      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a78:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a7c:	d828      	bhi.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a82:	d01a      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a88:	d822      	bhi.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009a8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a92:	d007      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009a94:	e01c      	b.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a96:	4b32      	ldr	r3, [pc, #200]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a31      	ldr	r2, [pc, #196]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aa2:	e01c      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	2100      	movs	r1, #0
 8009aac:	4618      	mov	r0, r3
 8009aae:	f001 fb83 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ab8:	e011      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009abe:	3328      	adds	r3, #40	; 0x28
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f001 fc2a 	bl	800b31c <RCCEx_PLL3_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ace:	e006      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ad6:	e002      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ad8:	bf00      	nop
 8009ada:	e000      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10b      	bne.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ae6:	4b1e      	ldr	r3, [pc, #120]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009af6:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009af8:	430b      	orrs	r3, r1
 8009afa:	6593      	str	r3, [r2, #88]	; 0x58
 8009afc:	e003      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b16:	2300      	movs	r3, #0
 8009b18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b1c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009b20:	460b      	mov	r3, r1
 8009b22:	4313      	orrs	r3, r2
 8009b24:	d056      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b32:	d038      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b38:	d831      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b3e:	d034      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b44:	d82b      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b4a:	d01d      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b50:	d825      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d006      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b5a:	d00a      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b5c:	e01f      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b5e:	bf00      	nop
 8009b60:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b64:	4ba2      	ldr	r3, [pc, #648]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	4aa1      	ldr	r2, [pc, #644]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b70:	e01c      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b76:	3308      	adds	r3, #8
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f001 fb1c 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009b80:	4603      	mov	r3, r0
 8009b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b86:	e011      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b8c:	3328      	adds	r3, #40	; 0x28
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 fbc3 	bl	800b31c <RCCEx_PLL3_Config>
 8009b96:	4603      	mov	r3, r0
 8009b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b9c:	e006      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ba4:	e002      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ba6:	bf00      	nop
 8009ba8:	e000      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10b      	bne.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bb4:	4b8e      	ldr	r3, [pc, #568]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bc4:	4a8a      	ldr	r2, [pc, #552]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bc6:	430b      	orrs	r3, r1
 8009bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8009bca:	e003      	b.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009be4:	2300      	movs	r3, #0
 8009be6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009bea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	d03a      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfa:	2b30      	cmp	r3, #48	; 0x30
 8009bfc:	d01f      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009bfe:	2b30      	cmp	r3, #48	; 0x30
 8009c00:	d819      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	d00c      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c06:	2b20      	cmp	r3, #32
 8009c08:	d815      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d019      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c0e:	2b10      	cmp	r3, #16
 8009c10:	d111      	bne.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c12:	4b77      	ldr	r3, [pc, #476]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	4a76      	ldr	r2, [pc, #472]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c1e:	e011      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c24:	3308      	adds	r3, #8
 8009c26:	2102      	movs	r1, #2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f001 fac5 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c34:	e006      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c3c:	e002      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c3e:	bf00      	nop
 8009c40:	e000      	b.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c4c:	4b68      	ldr	r3, [pc, #416]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c5a:	4a65      	ldr	r2, [pc, #404]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c5c:	430b      	orrs	r3, r1
 8009c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c60:	e003      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009c84:	460b      	mov	r3, r1
 8009c86:	4313      	orrs	r3, r2
 8009c88:	d051      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c94:	d035      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c9a:	d82e      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca0:	d031      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca6:	d828      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cac:	d01a      	beq.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb2:	d822      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cbc:	d007      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009cbe:	e01c      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc0:	4b4b      	ldr	r3, [pc, #300]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	4a4a      	ldr	r2, [pc, #296]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ccc:	e01c      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 fa6e 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009ce2:	e011      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce8:	3328      	adds	r3, #40	; 0x28
 8009cea:	2100      	movs	r1, #0
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fb15 	bl	800b31c <RCCEx_PLL3_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cf8:	e006      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d00:	e002      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d02:	bf00      	nop
 8009d04:	e000      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d10:	4b37      	ldr	r3, [pc, #220]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d1e:	4a34      	ldr	r2, [pc, #208]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6513      	str	r3, [r2, #80]	; 0x50
 8009d24:	e003      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009d3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	d056      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d58:	d033      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d5e:	d82c      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d64:	d02f      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d6a:	d826      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d70:	d02b      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d76:	d820      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d7c:	d012      	beq.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d82:	d81a      	bhi.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d022      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d8c:	d115      	bne.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d92:	3308      	adds	r3, #8
 8009d94:	2101      	movs	r1, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fa0e 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009da2:	e015      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da8:	3328      	adds	r3, #40	; 0x28
 8009daa:	2101      	movs	r1, #1
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 fab5 	bl	800b31c <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009db8:	e00a      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dc0:	e006      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dc2:	bf00      	nop
 8009dc4:	e004      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dc6:	bf00      	nop
 8009dc8:	e002      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dca:	bf00      	nop
 8009dcc:	e000      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d10d      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ddc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009de6:	4a02      	ldr	r2, [pc, #8]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009de8:	430b      	orrs	r3, r1
 8009dea:	6513      	str	r3, [r2, #80]	; 0x50
 8009dec:	e006      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009dee:	bf00      	nop
 8009df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	d055      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e28:	d033      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e2e:	d82c      	bhi.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e34:	d02f      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3a:	d826      	bhi.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e40:	d02b      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e46:	d820      	bhi.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4c:	d012      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e52:	d81a      	bhi.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d022      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e5c:	d115      	bne.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e62:	3308      	adds	r3, #8
 8009e64:	2101      	movs	r1, #1
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 f9a6 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e72:	e015      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e78:	3328      	adds	r3, #40	; 0x28
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fa4d 	bl	800b31c <RCCEx_PLL3_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e88:	e00a      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e90:	e006      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e92:	bf00      	nop
 8009e94:	e004      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e96:	bf00      	nop
 8009e98:	e002      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e000      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10b      	bne.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ea8:	4ba3      	ldr	r3, [pc, #652]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eb8:	4a9f      	ldr	r2, [pc, #636]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eba:	430b      	orrs	r3, r1
 8009ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8009ebe:	e003      	b.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ede:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	d037      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ef2:	d00e      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ef8:	d816      	bhi.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d018      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f02:	d111      	bne.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f04:	4b8c      	ldr	r3, [pc, #560]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f08:	4a8b      	ldr	r2, [pc, #556]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f10:	e00f      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f16:	3308      	adds	r3, #8
 8009f18:	2101      	movs	r1, #1
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f001 f94c 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f26:	e004      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f2e:	e000      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f3a:	4b7f      	ldr	r3, [pc, #508]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f48:	4a7b      	ldr	r2, [pc, #492]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	6513      	str	r3, [r2, #80]	; 0x50
 8009f4e:	e003      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4313      	orrs	r3, r2
 8009f76:	d039      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d81c      	bhi.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009f82:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fc5 	.word	0x08009fc5
 8009f8c:	08009f99 	.word	0x08009f99
 8009f90:	08009fa7 	.word	0x08009fa7
 8009f94:	08009fc5 	.word	0x08009fc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f98:	4b67      	ldr	r3, [pc, #412]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a66      	ldr	r2, [pc, #408]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fa4:	e00f      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009faa:	3308      	adds	r3, #8
 8009fac:	2102      	movs	r1, #2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f001 f902 	bl	800b1b8 <RCCEx_PLL2_Config>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fba:	e004      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fc2:	e000      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10a      	bne.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009fce:	4b5a      	ldr	r3, [pc, #360]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd2:	f023 0103 	bic.w	r1, r3, #3
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fdc:	4a56      	ldr	r2, [pc, #344]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fde:	430b      	orrs	r3, r1
 8009fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fe2:	e003      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a002:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a006:	460b      	mov	r3, r1
 800a008:	4313      	orrs	r3, r2
 800a00a:	f000 809f 	beq.w	800a14c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a00e:	4b4b      	ldr	r3, [pc, #300]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a4a      	ldr	r2, [pc, #296]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a018:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a01a:	f7fa fc3f 	bl	800489c <HAL_GetTick>
 800a01e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a022:	e00b      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a024:	f7fa fc3a 	bl	800489c <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b64      	cmp	r3, #100	; 0x64
 800a032:	d903      	bls.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a03a:	e005      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a03c:	4b3f      	ldr	r3, [pc, #252]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0ed      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d179      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a050:	4b39      	ldr	r3, [pc, #228]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a052:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a058:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a05c:	4053      	eors	r3, r2
 800a05e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a062:	2b00      	cmp	r3, #0
 800a064:	d015      	beq.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a066:	4b34      	ldr	r3, [pc, #208]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a06e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a072:	4b31      	ldr	r3, [pc, #196]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a076:	4a30      	ldr	r2, [pc, #192]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a07c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a07e:	4b2e      	ldr	r3, [pc, #184]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a082:	4a2d      	ldr	r2, [pc, #180]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a088:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a08a:	4a2b      	ldr	r2, [pc, #172]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a08c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a090:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a096:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a09a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a09e:	d118      	bne.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a0:	f7fa fbfc 	bl	800489c <HAL_GetTick>
 800a0a4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0a8:	e00d      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0aa:	f7fa fbf7 	bl	800489c <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	f241 3388 	movw	r3, #5000	; 0x1388
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d903      	bls.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a0c4:	e005      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0c6:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0eb      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d129      	bne.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0ea:	d10e      	bne.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a0ec:	4b12      	ldr	r3, [pc, #72]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a0f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0fc:	091a      	lsrs	r2, r3, #4
 800a0fe:	4b10      	ldr	r3, [pc, #64]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a100:	4013      	ands	r3, r2
 800a102:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a104:	430b      	orrs	r3, r1
 800a106:	6113      	str	r3, [r2, #16]
 800a108:	e005      	b.n	800a116 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a10a:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a110:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a114:	6113      	str	r3, [r2, #16]
 800a116:	4b08      	ldr	r3, [pc, #32]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a118:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a126:	4a04      	ldr	r2, [pc, #16]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a128:	430b      	orrs	r3, r1
 800a12a:	6713      	str	r3, [r2, #112]	; 0x70
 800a12c:	e00e      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a132:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a136:	e009      	b.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a138:	58024400 	.word	0x58024400
 800a13c:	58024800 	.word	0x58024800
 800a140:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f002 0301 	and.w	r3, r2, #1
 800a158:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a162:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a166:	460b      	mov	r3, r1
 800a168:	4313      	orrs	r3, r2
 800a16a:	f000 8089 	beq.w	800a280 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a174:	2b28      	cmp	r3, #40	; 0x28
 800a176:	d86b      	bhi.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a178:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a17a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17e:	bf00      	nop
 800a180:	0800a259 	.word	0x0800a259
 800a184:	0800a251 	.word	0x0800a251
 800a188:	0800a251 	.word	0x0800a251
 800a18c:	0800a251 	.word	0x0800a251
 800a190:	0800a251 	.word	0x0800a251
 800a194:	0800a251 	.word	0x0800a251
 800a198:	0800a251 	.word	0x0800a251
 800a19c:	0800a251 	.word	0x0800a251
 800a1a0:	0800a225 	.word	0x0800a225
 800a1a4:	0800a251 	.word	0x0800a251
 800a1a8:	0800a251 	.word	0x0800a251
 800a1ac:	0800a251 	.word	0x0800a251
 800a1b0:	0800a251 	.word	0x0800a251
 800a1b4:	0800a251 	.word	0x0800a251
 800a1b8:	0800a251 	.word	0x0800a251
 800a1bc:	0800a251 	.word	0x0800a251
 800a1c0:	0800a23b 	.word	0x0800a23b
 800a1c4:	0800a251 	.word	0x0800a251
 800a1c8:	0800a251 	.word	0x0800a251
 800a1cc:	0800a251 	.word	0x0800a251
 800a1d0:	0800a251 	.word	0x0800a251
 800a1d4:	0800a251 	.word	0x0800a251
 800a1d8:	0800a251 	.word	0x0800a251
 800a1dc:	0800a251 	.word	0x0800a251
 800a1e0:	0800a259 	.word	0x0800a259
 800a1e4:	0800a251 	.word	0x0800a251
 800a1e8:	0800a251 	.word	0x0800a251
 800a1ec:	0800a251 	.word	0x0800a251
 800a1f0:	0800a251 	.word	0x0800a251
 800a1f4:	0800a251 	.word	0x0800a251
 800a1f8:	0800a251 	.word	0x0800a251
 800a1fc:	0800a251 	.word	0x0800a251
 800a200:	0800a259 	.word	0x0800a259
 800a204:	0800a251 	.word	0x0800a251
 800a208:	0800a251 	.word	0x0800a251
 800a20c:	0800a251 	.word	0x0800a251
 800a210:	0800a251 	.word	0x0800a251
 800a214:	0800a251 	.word	0x0800a251
 800a218:	0800a251 	.word	0x0800a251
 800a21c:	0800a251 	.word	0x0800a251
 800a220:	0800a259 	.word	0x0800a259
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a228:	3308      	adds	r3, #8
 800a22a:	2101      	movs	r1, #1
 800a22c:	4618      	mov	r0, r3
 800a22e:	f000 ffc3 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a238:	e00f      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23e:	3328      	adds	r3, #40	; 0x28
 800a240:	2101      	movs	r1, #1
 800a242:	4618      	mov	r0, r3
 800a244:	f001 f86a 	bl	800b31c <RCCEx_PLL3_Config>
 800a248:	4603      	mov	r3, r0
 800a24a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a24e:	e004      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a256:	e000      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a25a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a262:	4bbf      	ldr	r3, [pc, #764]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a266:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a270:	4abb      	ldr	r2, [pc, #748]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a272:	430b      	orrs	r3, r1
 800a274:	6553      	str	r3, [r2, #84]	; 0x54
 800a276:	e003      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a278:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a27c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	f002 0302 	and.w	r3, r2, #2
 800a28c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a290:	2300      	movs	r3, #0
 800a292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a296:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a29a:	460b      	mov	r3, r1
 800a29c:	4313      	orrs	r3, r2
 800a29e:	d041      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a2a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d824      	bhi.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2fd 	.word	0x0800a2fd
 800a2b4:	0800a2c9 	.word	0x0800a2c9
 800a2b8:	0800a2df 	.word	0x0800a2df
 800a2bc:	0800a2fd 	.word	0x0800a2fd
 800a2c0:	0800a2fd 	.word	0x0800a2fd
 800a2c4:	0800a2fd 	.word	0x0800a2fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 ff71 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2dc:	e00f      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e2:	3328      	adds	r3, #40	; 0x28
 800a2e4:	2101      	movs	r1, #1
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 f818 	bl	800b31c <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2f2:	e004      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2fa:	e000      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a2fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a306:	4b96      	ldr	r3, [pc, #600]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a30a:	f023 0107 	bic.w	r1, r3, #7
 800a30e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a312:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a314:	4a92      	ldr	r2, [pc, #584]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a316:	430b      	orrs	r3, r1
 800a318:	6553      	str	r3, [r2, #84]	; 0x54
 800a31a:	e003      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a31c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a320:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32c:	f002 0304 	and.w	r3, r2, #4
 800a330:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a334:	2300      	movs	r3, #0
 800a336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a33a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a33e:	460b      	mov	r3, r1
 800a340:	4313      	orrs	r3, r2
 800a342:	d044      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a34c:	2b05      	cmp	r3, #5
 800a34e:	d825      	bhi.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a350:	a201      	add	r2, pc, #4	; (adr r2, 800a358 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a3a5 	.word	0x0800a3a5
 800a35c:	0800a371 	.word	0x0800a371
 800a360:	0800a387 	.word	0x0800a387
 800a364:	0800a3a5 	.word	0x0800a3a5
 800a368:	0800a3a5 	.word	0x0800a3a5
 800a36c:	0800a3a5 	.word	0x0800a3a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a374:	3308      	adds	r3, #8
 800a376:	2101      	movs	r1, #1
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 ff1d 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a37e:	4603      	mov	r3, r0
 800a380:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a384:	e00f      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a38a:	3328      	adds	r3, #40	; 0x28
 800a38c:	2101      	movs	r1, #1
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 ffc4 	bl	800b31c <RCCEx_PLL3_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a39a:	e004      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3a2:	e000      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a3a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10b      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3ae:	4b6c      	ldr	r3, [pc, #432]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3b2:	f023 0107 	bic.w	r1, r3, #7
 800a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3be:	4a68      	ldr	r2, [pc, #416]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3c0:	430b      	orrs	r3, r1
 800a3c2:	6593      	str	r3, [r2, #88]	; 0x58
 800a3c4:	e003      	b.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f002 0320 	and.w	r3, r2, #32
 800a3da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	d055      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3fa:	d033      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a3fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a400:	d82c      	bhi.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a406:	d02f      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40c:	d826      	bhi.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a40e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a412:	d02b      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a414:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a418:	d820      	bhi.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a41e:	d012      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a424:	d81a      	bhi.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a426:	2b00      	cmp	r3, #0
 800a428:	d022      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a42a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42e:	d115      	bne.n	800a45c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a434:	3308      	adds	r3, #8
 800a436:	2100      	movs	r1, #0
 800a438:	4618      	mov	r0, r3
 800a43a:	f000 febd 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a43e:	4603      	mov	r3, r0
 800a440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a444:	e015      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44a:	3328      	adds	r3, #40	; 0x28
 800a44c:	2102      	movs	r1, #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f000 ff64 	bl	800b31c <RCCEx_PLL3_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a45a:	e00a      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a462:	e006      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a464:	bf00      	nop
 800a466:	e004      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a468:	bf00      	nop
 800a46a:	e002      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a46c:	bf00      	nop
 800a46e:	e000      	b.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a470:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10b      	bne.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a47a:	4b39      	ldr	r3, [pc, #228]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a47c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48a:	4a35      	ldr	r2, [pc, #212]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a48c:	430b      	orrs	r3, r1
 800a48e:	6553      	str	r3, [r2, #84]	; 0x54
 800a490:	e003      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a4a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	d058      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4c6:	d033      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4cc:	d82c      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d2:	d02f      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a4d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d8:	d826      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4de:	d02b      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a4e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4e4:	d820      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ea:	d012      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f0:	d81a      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d022      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4fa:	d115      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a500:	3308      	adds	r3, #8
 800a502:	2100      	movs	r1, #0
 800a504:	4618      	mov	r0, r3
 800a506:	f000 fe57 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a510:	e015      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	3328      	adds	r3, #40	; 0x28
 800a518:	2102      	movs	r1, #2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fefe 	bl	800b31c <RCCEx_PLL3_Config>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a526:	e00a      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a52e:	e006      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a530:	bf00      	nop
 800a532:	e004      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a534:	bf00      	nop
 800a536:	e002      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a538:	bf00      	nop
 800a53a:	e000      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a53c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a53e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10e      	bne.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a546:	4b06      	ldr	r3, [pc, #24]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a54a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a556:	4a02      	ldr	r2, [pc, #8]	; (800a560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a558:	430b      	orrs	r3, r1
 800a55a:	6593      	str	r3, [r2, #88]	; 0x58
 800a55c:	e006      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a55e:	bf00      	nop
 800a560:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a57c:	2300      	movs	r3, #0
 800a57e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a582:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a586:	460b      	mov	r3, r1
 800a588:	4313      	orrs	r3, r2
 800a58a:	d055      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a590:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a594:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a598:	d033      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a59a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a59e:	d82c      	bhi.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a4:	d02f      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a5a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5aa:	d826      	bhi.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5b0:	d02b      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a5b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5b6:	d820      	bhi.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5bc:	d012      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a5be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5c2:	d81a      	bhi.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d022      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a5c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5cc:	d115      	bne.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d2:	3308      	adds	r3, #8
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fdee 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5e2:	e015      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e8:	3328      	adds	r3, #40	; 0x28
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f000 fe95 	bl	800b31c <RCCEx_PLL3_Config>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5f8:	e00a      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a600:	e006      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a602:	bf00      	nop
 800a604:	e004      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a606:	bf00      	nop
 800a608:	e002      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60a:	bf00      	nop
 800a60c:	e000      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10b      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a618:	4ba1      	ldr	r3, [pc, #644]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a61a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a624:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a628:	4a9d      	ldr	r2, [pc, #628]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a62a:	430b      	orrs	r3, r1
 800a62c:	6593      	str	r3, [r2, #88]	; 0x58
 800a62e:	e003      	b.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a634:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f002 0308 	and.w	r3, r2, #8
 800a644:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a648:	2300      	movs	r3, #0
 800a64a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a64e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a652:	460b      	mov	r3, r1
 800a654:	4313      	orrs	r3, r2
 800a656:	d01e      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a664:	d10c      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a66a:	3328      	adds	r3, #40	; 0x28
 800a66c:	2102      	movs	r1, #2
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 fe54 	bl	800b31c <RCCEx_PLL3_Config>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a680:	4b87      	ldr	r3, [pc, #540]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a684:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a690:	4a83      	ldr	r2, [pc, #524]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a692:	430b      	orrs	r3, r1
 800a694:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f002 0310 	and.w	r3, r2, #16
 800a6a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	d01e      	beq.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c2:	d10c      	bne.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c8:	3328      	adds	r3, #40	; 0x28
 800a6ca:	2102      	movs	r1, #2
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 fe25 	bl	800b31c <RCCEx_PLL3_Config>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6de:	4b70      	ldr	r3, [pc, #448]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ee:	4a6c      	ldr	r2, [pc, #432]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a704:	2300      	movs	r3, #0
 800a706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a70a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a70e:	460b      	mov	r3, r1
 800a710:	4313      	orrs	r3, r2
 800a712:	d03e      	beq.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a71c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a720:	d022      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a726:	d81b      	bhi.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a730:	d00b      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a732:	e015      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a738:	3308      	adds	r3, #8
 800a73a:	2100      	movs	r1, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fd3b 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a742:	4603      	mov	r3, r0
 800a744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a748:	e00f      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74e:	3328      	adds	r3, #40	; 0x28
 800a750:	2102      	movs	r1, #2
 800a752:	4618      	mov	r0, r3
 800a754:	f000 fde2 	bl	800b31c <RCCEx_PLL3_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a75e:	e004      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a766:	e000      	b.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a76a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d10b      	bne.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a772:	4b4b      	ldr	r3, [pc, #300]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a776:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a782:	4a47      	ldr	r2, [pc, #284]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a784:	430b      	orrs	r3, r1
 800a786:	6593      	str	r3, [r2, #88]	; 0x58
 800a788:	e003      	b.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a78e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a79e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	d03b      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7ba:	d01f      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a7bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7c0:	d818      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a7c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7c6:	d003      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a7c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7cc:	d007      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a7ce:	e011      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d0:	4b33      	ldr	r3, [pc, #204]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d4:	4a32      	ldr	r2, [pc, #200]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7dc:	e00f      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e2:	3328      	adds	r3, #40	; 0x28
 800a7e4:	2101      	movs	r1, #1
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fd98 	bl	800b31c <RCCEx_PLL3_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7f2:	e004      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7fa:	e000      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10b      	bne.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a806:	4b26      	ldr	r3, [pc, #152]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a80e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a816:	4a22      	ldr	r2, [pc, #136]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a818:	430b      	orrs	r3, r1
 800a81a:	6553      	str	r3, [r2, #84]	; 0x54
 800a81c:	e003      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a832:	673b      	str	r3, [r7, #112]	; 0x70
 800a834:	2300      	movs	r3, #0
 800a836:	677b      	str	r3, [r7, #116]	; 0x74
 800a838:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a83c:	460b      	mov	r3, r1
 800a83e:	4313      	orrs	r3, r2
 800a840:	d034      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d003      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a850:	d007      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a852:	e011      	b.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a854:	4b12      	ldr	r3, [pc, #72]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a858:	4a11      	ldr	r2, [pc, #68]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a85a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a85e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a860:	e00e      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a866:	3308      	adds	r3, #8
 800a868:	2102      	movs	r1, #2
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fca4 	bl	800b1b8 <RCCEx_PLL2_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a876:	e003      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a87e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10d      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a888:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a88a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a88c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a896:	4a02      	ldr	r2, [pc, #8]	; (800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a898:	430b      	orrs	r3, r1
 800a89a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a89c:	e006      	b.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a89e:	bf00      	nop
 800a8a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a8b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	d00c      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8cc:	3328      	adds	r3, #40	; 0x28
 800a8ce:	2102      	movs	r1, #2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f000 fd23 	bl	800b31c <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a8ee:	663b      	str	r3, [r7, #96]	; 0x60
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	667b      	str	r3, [r7, #100]	; 0x64
 800a8f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	d038      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a902:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a90a:	d018      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a90c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a910:	d811      	bhi.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a916:	d014      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91c:	d80b      	bhi.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d011      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a926:	d106      	bne.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a928:	4bc3      	ldr	r3, [pc, #780]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	4ac2      	ldr	r2, [pc, #776]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a92e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a934:	e008      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a93c:	e004      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a93e:	bf00      	nop
 800a940:	e002      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a942:	bf00      	nop
 800a944:	e000      	b.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a946:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10b      	bne.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a950:	4bb9      	ldr	r3, [pc, #740]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a954:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a960:	4ab5      	ldr	r2, [pc, #724]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a962:	430b      	orrs	r3, r1
 800a964:	6553      	str	r3, [r2, #84]	; 0x54
 800a966:	e003      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a96c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a97c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a97e:	2300      	movs	r3, #0
 800a980:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a982:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a986:	460b      	mov	r3, r1
 800a988:	4313      	orrs	r3, r2
 800a98a:	d009      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a98c:	4baa      	ldr	r3, [pc, #680]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a990:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99a:	4aa7      	ldr	r2, [pc, #668]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a99c:	430b      	orrs	r3, r1
 800a99e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a9a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a9ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	657b      	str	r3, [r7, #84]	; 0x54
 800a9b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	d00a      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a9bc:	4b9e      	ldr	r3, [pc, #632]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a9c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9cc:	4a9a      	ldr	r2, [pc, #616]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ce:	430b      	orrs	r3, r1
 800a9d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a9de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	d009      	beq.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9ee:	4b92      	ldr	r3, [pc, #584]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9fc:	4a8e      	ldr	r2, [pc, #568]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aa0e:	643b      	str	r3, [r7, #64]	; 0x40
 800aa10:	2300      	movs	r3, #0
 800aa12:	647b      	str	r3, [r7, #68]	; 0x44
 800aa14:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800aa18:	460b      	mov	r3, r1
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	d00e      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa1e:	4b86      	ldr	r3, [pc, #536]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	4a85      	ldr	r2, [pc, #532]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa28:	6113      	str	r3, [r2, #16]
 800aa2a:	4b83      	ldr	r3, [pc, #524]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa2c:	6919      	ldr	r1, [r3, #16]
 800aa2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aa36:	4a80      	ldr	r2, [pc, #512]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa48:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa52:	460b      	mov	r3, r1
 800aa54:	4313      	orrs	r3, r2
 800aa56:	d009      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa58:	4b77      	ldr	r3, [pc, #476]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa5c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa66:	4a74      	ldr	r2, [pc, #464]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa78:	633b      	str	r3, [r7, #48]	; 0x30
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aa82:	460b      	mov	r3, r1
 800aa84:	4313      	orrs	r3, r2
 800aa86:	d00a      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa88:	4b6b      	ldr	r3, [pc, #428]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aa90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa98:	4a67      	ldr	r2, [pc, #412]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	62b9      	str	r1, [r7, #40]	; 0x28
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aab4:	460b      	mov	r3, r1
 800aab6:	4313      	orrs	r3, r2
 800aab8:	d011      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aabe:	3308      	adds	r3, #8
 800aac0:	2100      	movs	r1, #0
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 fb78 	bl	800b1b8 <RCCEx_PLL2_Config>
 800aac8:	4603      	mov	r3, r0
 800aaca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d003      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae6:	2100      	movs	r1, #0
 800aae8:	6239      	str	r1, [r7, #32]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	d011      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aafe:	3308      	adds	r3, #8
 800ab00:	2101      	movs	r1, #1
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fb58 	bl	800b1b8 <RCCEx_PLL2_Config>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab26:	2100      	movs	r1, #0
 800ab28:	61b9      	str	r1, [r7, #24]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab34:	460b      	mov	r3, r1
 800ab36:	4313      	orrs	r3, r2
 800ab38:	d011      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3e:	3308      	adds	r3, #8
 800ab40:	2102      	movs	r1, #2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fb38 	bl	800b1b8 <RCCEx_PLL2_Config>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab66:	2100      	movs	r1, #0
 800ab68:	6139      	str	r1, [r7, #16]
 800ab6a:	f003 0308 	and.w	r3, r3, #8
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab74:	460b      	mov	r3, r1
 800ab76:	4313      	orrs	r3, r2
 800ab78:	d011      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7e:	3328      	adds	r3, #40	; 0x28
 800ab80:	2100      	movs	r1, #0
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 fbca 	bl	800b31c <RCCEx_PLL3_Config>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ab8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d003      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ab9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	2100      	movs	r1, #0
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	f003 0310 	and.w	r3, r3, #16
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800abb4:	460b      	mov	r3, r1
 800abb6:	4313      	orrs	r3, r2
 800abb8:	d011      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abbe:	3328      	adds	r3, #40	; 0x28
 800abc0:	2101      	movs	r1, #1
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fbaa 	bl	800b31c <RCCEx_PLL3_Config>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d003      	beq.n	800abde <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800abde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	2100      	movs	r1, #0
 800abe8:	6039      	str	r1, [r7, #0]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	607b      	str	r3, [r7, #4]
 800abf0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abf4:	460b      	mov	r3, r1
 800abf6:	4313      	orrs	r3, r2
 800abf8:	d011      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfe:	3328      	adds	r3, #40	; 0x28
 800ac00:	2102      	movs	r1, #2
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 fb8a 	bl	800b31c <RCCEx_PLL3_Config>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ac1e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	e000      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ac32:	46bd      	mov	sp, r7
 800ac34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac38:	58024400 	.word	0x58024400

0800ac3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ac40:	f7fe fd96 	bl	8009770 <HAL_RCC_GetHCLKFreq>
 800ac44:	4602      	mov	r2, r0
 800ac46:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	091b      	lsrs	r3, r3, #4
 800ac4c:	f003 0307 	and.w	r3, r3, #7
 800ac50:	4904      	ldr	r1, [pc, #16]	; (800ac64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ac52:	5ccb      	ldrb	r3, [r1, r3]
 800ac54:	f003 031f 	and.w	r3, r3, #31
 800ac58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	58024400 	.word	0x58024400
 800ac64:	080144dc 	.word	0x080144dc

0800ac68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b089      	sub	sp, #36	; 0x24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac70:	4ba1      	ldr	r3, [pc, #644]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ac7a:	4b9f      	ldr	r3, [pc, #636]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7e:	0b1b      	lsrs	r3, r3, #12
 800ac80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac86:	4b9c      	ldr	r3, [pc, #624]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8a:	091b      	lsrs	r3, r3, #4
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ac92:	4b99      	ldr	r3, [pc, #612]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 8111 	beq.w	800aed8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b02      	cmp	r3, #2
 800acba:	f000 8083 	beq.w	800adc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800acbe:	69bb      	ldr	r3, [r7, #24]
 800acc0:	2b02      	cmp	r3, #2
 800acc2:	f200 80a1 	bhi.w	800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d003      	beq.n	800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d056      	beq.n	800ad80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800acd2:	e099      	b.n	800ae08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd4:	4b88      	ldr	r3, [pc, #544]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d02d      	beq.n	800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace0:	4b85      	ldr	r3, [pc, #532]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	08db      	lsrs	r3, r3, #3
 800ace6:	f003 0303 	and.w	r3, r3, #3
 800acea:	4a84      	ldr	r2, [pc, #528]	; (800aefc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800acec:	fa22 f303 	lsr.w	r3, r2, r3
 800acf0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	ee07 3a90 	vmov	s15, r3
 800acf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0a:	4b7b      	ldr	r3, [pc, #492]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad3a:	e087      	b.n	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ad4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4e:	4b6a      	ldr	r3, [pc, #424]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad62:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad7e:	e065      	b.n	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	ee07 3a90 	vmov	s15, r3
 800ad86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad92:	4b59      	ldr	r3, [pc, #356]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9a:	ee07 3a90 	vmov	s15, r3
 800ad9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc2:	e043      	b.n	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800add2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add6:	4b48      	ldr	r3, [pc, #288]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae06:	e021      	b.n	800ae4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1a:	4b37      	ldr	r3, [pc, #220]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ae4c:	4b2a      	ldr	r3, [pc, #168]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae50:	0a5b      	lsrs	r3, r3, #9
 800ae52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae56:	ee07 3a90 	vmov	s15, r3
 800ae5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae66:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae72:	ee17 2a90 	vmov	r2, s15
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ae7a:	4b1f      	ldr	r3, [pc, #124]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	0c1b      	lsrs	r3, r3, #16
 800ae80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae84:	ee07 3a90 	vmov	s15, r3
 800ae88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea0:	ee17 2a90 	vmov	r2, s15
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aea8:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeac:	0e1b      	lsrs	r3, r3, #24
 800aeae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aece:	ee17 2a90 	vmov	r2, s15
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aed6:	e008      	b.n	800aeea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	609a      	str	r2, [r3, #8]
}
 800aeea:	bf00      	nop
 800aeec:	3724      	adds	r7, #36	; 0x24
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	58024400 	.word	0x58024400
 800aefc:	03d09000 	.word	0x03d09000
 800af00:	46000000 	.word	0x46000000
 800af04:	4c742400 	.word	0x4c742400
 800af08:	4a742400 	.word	0x4a742400
 800af0c:	4bbebc20 	.word	0x4bbebc20

0800af10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800af10:	b480      	push	{r7}
 800af12:	b089      	sub	sp, #36	; 0x24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af18:	4ba1      	ldr	r3, [pc, #644]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1c:	f003 0303 	and.w	r3, r3, #3
 800af20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800af22:	4b9f      	ldr	r3, [pc, #636]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	0d1b      	lsrs	r3, r3, #20
 800af28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800af2e:	4b9c      	ldr	r3, [pc, #624]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af32:	0a1b      	lsrs	r3, r3, #8
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800af3a:	4b99      	ldr	r3, [pc, #612]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af3e:	08db      	lsrs	r3, r3, #3
 800af40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	fb02 f303 	mul.w	r3, r2, r3
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 8111 	beq.w	800b180 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b02      	cmp	r3, #2
 800af62:	f000 8083 	beq.w	800b06c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b02      	cmp	r3, #2
 800af6a:	f200 80a1 	bhi.w	800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d003      	beq.n	800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d056      	beq.n	800b028 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800af7a:	e099      	b.n	800b0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af7c:	4b88      	ldr	r3, [pc, #544]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	2b00      	cmp	r3, #0
 800af86:	d02d      	beq.n	800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af88:	4b85      	ldr	r3, [pc, #532]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	08db      	lsrs	r3, r3, #3
 800af8e:	f003 0303 	and.w	r3, r3, #3
 800af92:	4a84      	ldr	r2, [pc, #528]	; (800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af94:	fa22 f303 	lsr.w	r3, r2, r3
 800af98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	ee07 3a90 	vmov	s15, r3
 800afa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b7b      	ldr	r3, [pc, #492]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afe2:	e087      	b.n	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	4b6a      	ldr	r3, [pc, #424]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b006:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b026:	e065      	b.n	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03a:	4b59      	ldr	r3, [pc, #356]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06a:	e043      	b.n	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b076:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b07e:	4b48      	ldr	r3, [pc, #288]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b086:	ee07 3a90 	vmov	s15, r3
 800b08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b092:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b09e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ae:	e021      	b.n	800b0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	ee07 3a90 	vmov	s15, r3
 800b0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0c2:	4b37      	ldr	r3, [pc, #220]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b0f4:	4b2a      	ldr	r3, [pc, #168]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	0a5b      	lsrs	r3, r3, #9
 800b0fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0fe:	ee07 3a90 	vmov	s15, r3
 800b102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b106:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b10a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b10e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b116:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b11a:	ee17 2a90 	vmov	r2, s15
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b122:	4b1f      	ldr	r3, [pc, #124]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b126:	0c1b      	lsrs	r3, r3, #16
 800b128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b12c:	ee07 3a90 	vmov	s15, r3
 800b130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b134:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b138:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b13c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b148:	ee17 2a90 	vmov	r2, s15
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b150:	4b13      	ldr	r3, [pc, #76]	; (800b1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b154:	0e1b      	lsrs	r3, r3, #24
 800b156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b16a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b16e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b176:	ee17 2a90 	vmov	r2, s15
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b17e:	e008      	b.n	800b192 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	609a      	str	r2, [r3, #8]
}
 800b192:	bf00      	nop
 800b194:	3724      	adds	r7, #36	; 0x24
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	58024400 	.word	0x58024400
 800b1a4:	03d09000 	.word	0x03d09000
 800b1a8:	46000000 	.word	0x46000000
 800b1ac:	4c742400 	.word	0x4c742400
 800b1b0:	4a742400 	.word	0x4a742400
 800b1b4:	4bbebc20 	.word	0x4bbebc20

0800b1b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1c6:	4b53      	ldr	r3, [pc, #332]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ca:	f003 0303 	and.w	r3, r3, #3
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d101      	bne.n	800b1d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e099      	b.n	800b30a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1d6:	4b4f      	ldr	r3, [pc, #316]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a4e      	ldr	r2, [pc, #312]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b1dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1e2:	f7f9 fb5b 	bl	800489c <HAL_GetTick>
 800b1e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1e8:	e008      	b.n	800b1fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1ea:	f7f9 fb57 	bl	800489c <HAL_GetTick>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d901      	bls.n	800b1fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1f8:	2303      	movs	r3, #3
 800b1fa:	e086      	b.n	800b30a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1fc:	4b45      	ldr	r3, [pc, #276]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1f0      	bne.n	800b1ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b208:	4b42      	ldr	r3, [pc, #264]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	031b      	lsls	r3, r3, #12
 800b216:	493f      	ldr	r1, [pc, #252]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b218:	4313      	orrs	r3, r2
 800b21a:	628b      	str	r3, [r1, #40]	; 0x28
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	3b01      	subs	r3, #1
 800b222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	025b      	lsls	r3, r3, #9
 800b22e:	b29b      	uxth	r3, r3
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	3b01      	subs	r3, #1
 800b238:	041b      	lsls	r3, r3, #16
 800b23a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b23e:	431a      	orrs	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	691b      	ldr	r3, [r3, #16]
 800b244:	3b01      	subs	r3, #1
 800b246:	061b      	lsls	r3, r3, #24
 800b248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b24c:	4931      	ldr	r1, [pc, #196]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b24e:	4313      	orrs	r3, r2
 800b250:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b252:	4b30      	ldr	r3, [pc, #192]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	492d      	ldr	r1, [pc, #180]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b260:	4313      	orrs	r3, r2
 800b262:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b264:	4b2b      	ldr	r3, [pc, #172]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b268:	f023 0220 	bic.w	r2, r3, #32
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	4928      	ldr	r1, [pc, #160]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b272:	4313      	orrs	r3, r2
 800b274:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b276:	4b27      	ldr	r3, [pc, #156]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	4a26      	ldr	r2, [pc, #152]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b27c:	f023 0310 	bic.w	r3, r3, #16
 800b280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b282:	4b24      	ldr	r3, [pc, #144]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b286:	4b24      	ldr	r3, [pc, #144]	; (800b318 <RCCEx_PLL2_Config+0x160>)
 800b288:	4013      	ands	r3, r2
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	69d2      	ldr	r2, [r2, #28]
 800b28e:	00d2      	lsls	r2, r2, #3
 800b290:	4920      	ldr	r1, [pc, #128]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b292:	4313      	orrs	r3, r2
 800b294:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b296:	4b1f      	ldr	r3, [pc, #124]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	4a1e      	ldr	r2, [pc, #120]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	f043 0310 	orr.w	r3, r3, #16
 800b2a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d106      	bne.n	800b2b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2a8:	4b1a      	ldr	r3, [pc, #104]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ac:	4a19      	ldr	r2, [pc, #100]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2b4:	e00f      	b.n	800b2d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d106      	bne.n	800b2ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2bc:	4b15      	ldr	r3, [pc, #84]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	4a14      	ldr	r2, [pc, #80]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2c8:	e005      	b.n	800b2d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2ca:	4b12      	ldr	r3, [pc, #72]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ce:	4a11      	ldr	r2, [pc, #68]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2d6:	4b0f      	ldr	r3, [pc, #60]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a0e      	ldr	r2, [pc, #56]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2e2:	f7f9 fadb 	bl	800489c <HAL_GetTick>
 800b2e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2e8:	e008      	b.n	800b2fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2ea:	f7f9 fad7 	bl	800489c <HAL_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	2b02      	cmp	r3, #2
 800b2f6:	d901      	bls.n	800b2fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e006      	b.n	800b30a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2fc:	4b05      	ldr	r3, [pc, #20]	; (800b314 <RCCEx_PLL2_Config+0x15c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0f0      	beq.n	800b2ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	58024400 	.word	0x58024400
 800b318:	ffff0007 	.word	0xffff0007

0800b31c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b32a:	4b53      	ldr	r3, [pc, #332]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32e:	f003 0303 	and.w	r3, r3, #3
 800b332:	2b03      	cmp	r3, #3
 800b334:	d101      	bne.n	800b33a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e099      	b.n	800b46e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b33a:	4b4f      	ldr	r3, [pc, #316]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a4e      	ldr	r2, [pc, #312]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b346:	f7f9 faa9 	bl	800489c <HAL_GetTick>
 800b34a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b34c:	e008      	b.n	800b360 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b34e:	f7f9 faa5 	bl	800489c <HAL_GetTick>
 800b352:	4602      	mov	r2, r0
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d901      	bls.n	800b360 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e086      	b.n	800b46e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b360:	4b45      	ldr	r3, [pc, #276]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1f0      	bne.n	800b34e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b36c:	4b42      	ldr	r3, [pc, #264]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b370:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	051b      	lsls	r3, r3, #20
 800b37a:	493f      	ldr	r1, [pc, #252]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	4313      	orrs	r3, r2
 800b37e:	628b      	str	r3, [r1, #40]	; 0x28
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	3b01      	subs	r3, #1
 800b386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	3b01      	subs	r3, #1
 800b390:	025b      	lsls	r3, r3, #9
 800b392:	b29b      	uxth	r3, r3
 800b394:	431a      	orrs	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	041b      	lsls	r3, r3, #16
 800b39e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	061b      	lsls	r3, r3, #24
 800b3ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3b0:	4931      	ldr	r1, [pc, #196]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3b6:	4b30      	ldr	r3, [pc, #192]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	492d      	ldr	r1, [pc, #180]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3c8:	4b2b      	ldr	r3, [pc, #172]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	4928      	ldr	r1, [pc, #160]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3da:	4b27      	ldr	r3, [pc, #156]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	4a26      	ldr	r2, [pc, #152]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3e6:	4b24      	ldr	r3, [pc, #144]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ea:	4b24      	ldr	r3, [pc, #144]	; (800b47c <RCCEx_PLL3_Config+0x160>)
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	69d2      	ldr	r2, [r2, #28]
 800b3f2:	00d2      	lsls	r2, r2, #3
 800b3f4:	4920      	ldr	r1, [pc, #128]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3fa:	4b1f      	ldr	r3, [pc, #124]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	4a1e      	ldr	r2, [pc, #120]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b404:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d106      	bne.n	800b41a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b40c:	4b1a      	ldr	r3, [pc, #104]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b410:	4a19      	ldr	r2, [pc, #100]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b412:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b416:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b418:	e00f      	b.n	800b43a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d106      	bne.n	800b42e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b420:	4b15      	ldr	r3, [pc, #84]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b424:	4a14      	ldr	r2, [pc, #80]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b426:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b42a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b42c:	e005      	b.n	800b43a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b42e:	4b12      	ldr	r3, [pc, #72]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	4a11      	ldr	r2, [pc, #68]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b438:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b43a:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a0e      	ldr	r2, [pc, #56]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b446:	f7f9 fa29 	bl	800489c <HAL_GetTick>
 800b44a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b44c:	e008      	b.n	800b460 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b44e:	f7f9 fa25 	bl	800489c <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	2b02      	cmp	r3, #2
 800b45a:	d901      	bls.n	800b460 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b45c:	2303      	movs	r3, #3
 800b45e:	e006      	b.n	800b46e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b460:	4b05      	ldr	r3, [pc, #20]	; (800b478 <RCCEx_PLL3_Config+0x15c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d0f0      	beq.n	800b44e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	58024400 	.word	0x58024400
 800b47c:	ffff0007 	.word	0xffff0007

0800b480 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	e02b      	b.n	800b4ec <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f825 	bl	800b4f8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4619      	mov	r1, r3
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	f002 f983 	bl	800d7cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6818      	ldr	r0, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	f002 f9d7 	bl	800d884 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b4d6:	4b07      	ldr	r3, [pc, #28]	; (800b4f4 <HAL_SDRAM_Init+0x74>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a06      	ldr	r2, [pc, #24]	; (800b4f4 <HAL_SDRAM_Init+0x74>)
 800b4dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4e0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3708      	adds	r7, #8
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	52004000 	.word	0x52004000

0800b4f8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b086      	sub	sp, #24
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b51e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b520:	7dfb      	ldrb	r3, [r7, #23]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d101      	bne.n	800b52a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b526:	2302      	movs	r3, #2
 800b528:	e021      	b.n	800b56e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d002      	beq.n	800b536 <HAL_SDRAM_SendCommand+0x2a>
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b05      	cmp	r3, #5
 800b534:	d118      	bne.n	800b568 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2202      	movs	r2, #2
 800b53a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	68b9      	ldr	r1, [r7, #8]
 800b546:	4618      	mov	r0, r3
 800b548:	f002 fa06 	bl	800d958 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b02      	cmp	r3, #2
 800b552:	d104      	bne.n	800b55e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2205      	movs	r2, #5
 800b558:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b55c:	e006      	b.n	800b56c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b566:	e001      	b.n	800b56c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e000      	b.n	800b56e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b586:	b2db      	uxtb	r3, r3
 800b588:	2b02      	cmp	r3, #2
 800b58a:	d101      	bne.n	800b590 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b58c:	2302      	movs	r3, #2
 800b58e:	e016      	b.n	800b5be <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d10f      	bne.n	800b5bc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f002 f9f8 	bl	800d9a0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	e000      	b.n	800b5be <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e049      	b.n	800b66c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f841 	bl	800b674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3304      	adds	r3, #4
 800b602:	4619      	mov	r1, r3
 800b604:	4610      	mov	r0, r2
 800b606:	f000 fac7 	bl	800bb98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b688:	b480      	push	{r7}
 800b68a:	b085      	sub	sp, #20
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d001      	beq.n	800b6a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e04c      	b.n	800b73a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a26      	ldr	r2, [pc, #152]	; (800b748 <HAL_TIM_Base_Start+0xc0>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d022      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ba:	d01d      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a22      	ldr	r2, [pc, #136]	; (800b74c <HAL_TIM_Base_Start+0xc4>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d018      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a21      	ldr	r2, [pc, #132]	; (800b750 <HAL_TIM_Base_Start+0xc8>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d013      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1f      	ldr	r2, [pc, #124]	; (800b754 <HAL_TIM_Base_Start+0xcc>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00e      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a1e      	ldr	r2, [pc, #120]	; (800b758 <HAL_TIM_Base_Start+0xd0>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d009      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a1c      	ldr	r2, [pc, #112]	; (800b75c <HAL_TIM_Base_Start+0xd4>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_TIM_Base_Start+0x70>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a1b      	ldr	r2, [pc, #108]	; (800b760 <HAL_TIM_Base_Start+0xd8>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d115      	bne.n	800b724 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	689a      	ldr	r2, [r3, #8]
 800b6fe:	4b19      	ldr	r3, [pc, #100]	; (800b764 <HAL_TIM_Base_Start+0xdc>)
 800b700:	4013      	ands	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b06      	cmp	r3, #6
 800b708:	d015      	beq.n	800b736 <HAL_TIM_Base_Start+0xae>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b710:	d011      	beq.n	800b736 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f042 0201 	orr.w	r2, r2, #1
 800b720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b722:	e008      	b.n	800b736 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0201 	orr.w	r2, r2, #1
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	e000      	b.n	800b738 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	40010000 	.word	0x40010000
 800b74c:	40000400 	.word	0x40000400
 800b750:	40000800 	.word	0x40000800
 800b754:	40000c00 	.word	0x40000c00
 800b758:	40010400 	.word	0x40010400
 800b75c:	40001800 	.word	0x40001800
 800b760:	40014000 	.word	0x40014000
 800b764:	00010007 	.word	0x00010007

0800b768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b776:	2301      	movs	r3, #1
 800b778:	e049      	b.n	800b80e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f89d 	bl	800b8ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2202      	movs	r2, #2
 800b798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	f000 f9f6 	bl	800bb98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b082      	sub	sp, #8
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2202      	movs	r2, #2
 800b822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6a1a      	ldr	r2, [r3, #32]
 800b82c:	f241 1311 	movw	r3, #4369	; 0x1111
 800b830:	4013      	ands	r3, r2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d10f      	bne.n	800b856 <HAL_TIM_PWM_DeInit+0x40>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	6a1a      	ldr	r2, [r3, #32]
 800b83c:	f240 4344 	movw	r3, #1092	; 0x444
 800b840:	4013      	ands	r3, r2
 800b842:	2b00      	cmp	r3, #0
 800b844:	d107      	bne.n	800b856 <HAL_TIM_PWM_DeInit+0x40>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f022 0201 	bic.w	r2, r2, #1
 800b854:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f843 	bl	800b8e2 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b8d6:	bf00      	nop
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800b8ea:	bf00      	nop
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b082      	sub	sp, #8
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	f003 0302 	and.w	r3, r3, #2
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d122      	bne.n	800b952 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b02      	cmp	r3, #2
 800b918:	d11b      	bne.n	800b952 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f06f 0202 	mvn.w	r2, #2
 800b922:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	f003 0303 	and.w	r3, r3, #3
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 f90f 	bl	800bb5c <HAL_TIM_IC_CaptureCallback>
 800b93e:	e005      	b.n	800b94c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 f901 	bl	800bb48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f912 	bl	800bb70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d122      	bne.n	800b9a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b04      	cmp	r3, #4
 800b96c:	d11b      	bne.n	800b9a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f06f 0204 	mvn.w	r2, #4
 800b976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f8e5 	bl	800bb5c <HAL_TIM_IC_CaptureCallback>
 800b992:	e005      	b.n	800b9a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f8d7 	bl	800bb48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f8e8 	bl	800bb70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	f003 0308 	and.w	r3, r3, #8
 800b9b0:	2b08      	cmp	r3, #8
 800b9b2:	d122      	bne.n	800b9fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	f003 0308 	and.w	r3, r3, #8
 800b9be:	2b08      	cmp	r3, #8
 800b9c0:	d11b      	bne.n	800b9fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f06f 0208 	mvn.w	r2, #8
 800b9ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2204      	movs	r2, #4
 800b9d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	69db      	ldr	r3, [r3, #28]
 800b9d8:	f003 0303 	and.w	r3, r3, #3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d003      	beq.n	800b9e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f8bb 	bl	800bb5c <HAL_TIM_IC_CaptureCallback>
 800b9e6:	e005      	b.n	800b9f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f8ad 	bl	800bb48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f8be 	bl	800bb70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	f003 0310 	and.w	r3, r3, #16
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d122      	bne.n	800ba4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f003 0310 	and.w	r3, r3, #16
 800ba12:	2b10      	cmp	r3, #16
 800ba14:	d11b      	bne.n	800ba4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f06f 0210 	mvn.w	r2, #16
 800ba1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2208      	movs	r2, #8
 800ba24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69db      	ldr	r3, [r3, #28]
 800ba2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f891 	bl	800bb5c <HAL_TIM_IC_CaptureCallback>
 800ba3a:	e005      	b.n	800ba48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f883 	bl	800bb48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f894 	bl	800bb70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d10e      	bne.n	800ba7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d107      	bne.n	800ba7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f06f 0201 	mvn.w	r2, #1
 800ba72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 f85d 	bl	800bb34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba84:	2b80      	cmp	r3, #128	; 0x80
 800ba86:	d10e      	bne.n	800baa6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba92:	2b80      	cmp	r3, #128	; 0x80
 800ba94:	d107      	bne.n	800baa6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 f91d 	bl	800bce0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bab4:	d10e      	bne.n	800bad4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bac0:	2b80      	cmp	r3, #128	; 0x80
 800bac2:	d107      	bne.n	800bad4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bacc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f910 	bl	800bcf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bade:	2b40      	cmp	r3, #64	; 0x40
 800bae0:	d10e      	bne.n	800bb00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baec:	2b40      	cmp	r3, #64	; 0x40
 800baee:	d107      	bne.n	800bb00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800baf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f842 	bl	800bb84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	f003 0320 	and.w	r3, r3, #32
 800bb0a:	2b20      	cmp	r3, #32
 800bb0c:	d10e      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	f003 0320 	and.w	r3, r3, #32
 800bb18:	2b20      	cmp	r3, #32
 800bb1a:	d107      	bne.n	800bb2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f06f 0220 	mvn.w	r2, #32
 800bb24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f000 f8d0 	bl	800bccc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bb3c:	bf00      	nop
 800bb3e:	370c      	adds	r7, #12
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a40      	ldr	r2, [pc, #256]	; (800bcac <TIM_Base_SetConfig+0x114>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d013      	beq.n	800bbd8 <TIM_Base_SetConfig+0x40>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb6:	d00f      	beq.n	800bbd8 <TIM_Base_SetConfig+0x40>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a3d      	ldr	r2, [pc, #244]	; (800bcb0 <TIM_Base_SetConfig+0x118>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d00b      	beq.n	800bbd8 <TIM_Base_SetConfig+0x40>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a3c      	ldr	r2, [pc, #240]	; (800bcb4 <TIM_Base_SetConfig+0x11c>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d007      	beq.n	800bbd8 <TIM_Base_SetConfig+0x40>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a3b      	ldr	r2, [pc, #236]	; (800bcb8 <TIM_Base_SetConfig+0x120>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d003      	beq.n	800bbd8 <TIM_Base_SetConfig+0x40>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a3a      	ldr	r2, [pc, #232]	; (800bcbc <TIM_Base_SetConfig+0x124>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d108      	bne.n	800bbea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a2f      	ldr	r2, [pc, #188]	; (800bcac <TIM_Base_SetConfig+0x114>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d01f      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf8:	d01b      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a2c      	ldr	r2, [pc, #176]	; (800bcb0 <TIM_Base_SetConfig+0x118>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d017      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a2b      	ldr	r2, [pc, #172]	; (800bcb4 <TIM_Base_SetConfig+0x11c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d013      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4a2a      	ldr	r2, [pc, #168]	; (800bcb8 <TIM_Base_SetConfig+0x120>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d00f      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a29      	ldr	r2, [pc, #164]	; (800bcbc <TIM_Base_SetConfig+0x124>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d00b      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	4a28      	ldr	r2, [pc, #160]	; (800bcc0 <TIM_Base_SetConfig+0x128>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d007      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a27      	ldr	r2, [pc, #156]	; (800bcc4 <TIM_Base_SetConfig+0x12c>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d003      	beq.n	800bc32 <TIM_Base_SetConfig+0x9a>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a26      	ldr	r2, [pc, #152]	; (800bcc8 <TIM_Base_SetConfig+0x130>)
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d108      	bne.n	800bc44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	689a      	ldr	r2, [r3, #8]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	681a      	ldr	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a10      	ldr	r2, [pc, #64]	; (800bcac <TIM_Base_SetConfig+0x114>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d00f      	beq.n	800bc90 <TIM_Base_SetConfig+0xf8>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a12      	ldr	r2, [pc, #72]	; (800bcbc <TIM_Base_SetConfig+0x124>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d00b      	beq.n	800bc90 <TIM_Base_SetConfig+0xf8>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4a11      	ldr	r2, [pc, #68]	; (800bcc0 <TIM_Base_SetConfig+0x128>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d007      	beq.n	800bc90 <TIM_Base_SetConfig+0xf8>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a10      	ldr	r2, [pc, #64]	; (800bcc4 <TIM_Base_SetConfig+0x12c>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d003      	beq.n	800bc90 <TIM_Base_SetConfig+0xf8>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	4a0f      	ldr	r2, [pc, #60]	; (800bcc8 <TIM_Base_SetConfig+0x130>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d103      	bne.n	800bc98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	691a      	ldr	r2, [r3, #16]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	615a      	str	r2, [r3, #20]
}
 800bc9e:	bf00      	nop
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	40010000 	.word	0x40010000
 800bcb0:	40000400 	.word	0x40000400
 800bcb4:	40000800 	.word	0x40000800
 800bcb8:	40000c00 	.word	0x40000c00
 800bcbc:	40010400 	.word	0x40010400
 800bcc0:	40014000 	.word	0x40014000
 800bcc4:	40014400 	.word	0x40014400
 800bcc8:	40014800 	.word	0x40014800

0800bccc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bce8:	bf00      	nop
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcfc:	bf00      	nop
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e042      	b.n	800bda0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d106      	bne.n	800bd32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7f5 fea5 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2224      	movs	r2, #36	; 0x24
 800bd36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f022 0201 	bic.w	r2, r2, #1
 800bd48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fd5c 	bl	800c808 <UART_SetConfig>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d101      	bne.n	800bd5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e022      	b.n	800bda0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d002      	beq.n	800bd68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f001 fab8 	bl	800d2d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	685a      	ldr	r2, [r3, #4]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	689a      	ldr	r2, [r3, #8]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f042 0201 	orr.w	r2, r2, #1
 800bd96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f001 fb3f 	bl	800d41c <UART_CheckIdleState>
 800bd9e:	4603      	mov	r3, r0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3708      	adds	r7, #8
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08a      	sub	sp, #40	; 0x28
 800bdac:	af02      	add	r7, sp, #8
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	603b      	str	r3, [r7, #0]
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d17b      	bne.n	800beba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <HAL_UART_Transmit+0x26>
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e074      	b.n	800bebc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2221      	movs	r2, #33	; 0x21
 800bdde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bde2:	f7f8 fd5b 	bl	800489c <HAL_GetTick>
 800bde6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	88fa      	ldrh	r2, [r7, #6]
 800bdec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	88fa      	ldrh	r2, [r7, #6]
 800bdf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be00:	d108      	bne.n	800be14 <HAL_UART_Transmit+0x6c>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d104      	bne.n	800be14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	61bb      	str	r3, [r7, #24]
 800be12:	e003      	b.n	800be1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800be1c:	e030      	b.n	800be80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	2180      	movs	r1, #128	; 0x80
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f001 fba1 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2220      	movs	r2, #32
 800be38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e03d      	b.n	800bebc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	461a      	mov	r2, r3
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	3302      	adds	r3, #2
 800be5a:	61bb      	str	r3, [r7, #24]
 800be5c:	e007      	b.n	800be6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	781a      	ldrb	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	3301      	adds	r3, #1
 800be6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be74:	b29b      	uxth	r3, r3
 800be76:	3b01      	subs	r3, #1
 800be78:	b29a      	uxth	r2, r3
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800be86:	b29b      	uxth	r3, r3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1c8      	bne.n	800be1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	2200      	movs	r2, #0
 800be94:	2140      	movs	r1, #64	; 0x40
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f001 fb6a 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d005      	beq.n	800beae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2220      	movs	r2, #32
 800bea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800beaa:	2303      	movs	r3, #3
 800beac:	e006      	b.n	800bebc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2220      	movs	r2, #32
 800beb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e000      	b.n	800bebc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800beba:	2302      	movs	r3, #2
  }
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3720      	adds	r7, #32
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b08a      	sub	sp, #40	; 0x28
 800bec8:	af02      	add	r7, sp, #8
 800beca:	60f8      	str	r0, [r7, #12]
 800becc:	60b9      	str	r1, [r7, #8]
 800bece:	603b      	str	r3, [r7, #0]
 800bed0:	4613      	mov	r3, r2
 800bed2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beda:	2b20      	cmp	r3, #32
 800bedc:	f040 80b5 	bne.w	800c04a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d002      	beq.n	800beec <HAL_UART_Receive+0x28>
 800bee6:	88fb      	ldrh	r3, [r7, #6]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	e0ad      	b.n	800c04c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2222      	movs	r2, #34	; 0x22
 800befc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2200      	movs	r2, #0
 800bf04:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf06:	f7f8 fcc9 	bl	800489c <HAL_GetTick>
 800bf0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	88fa      	ldrh	r2, [r7, #6]
 800bf10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	88fa      	ldrh	r2, [r7, #6]
 800bf18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	689b      	ldr	r3, [r3, #8]
 800bf20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf24:	d10e      	bne.n	800bf44 <HAL_UART_Receive+0x80>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d105      	bne.n	800bf3a <HAL_UART_Receive+0x76>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bf34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf38:	e02d      	b.n	800bf96 <HAL_UART_Receive+0xd2>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	22ff      	movs	r2, #255	; 0xff
 800bf3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf42:	e028      	b.n	800bf96 <HAL_UART_Receive+0xd2>
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10d      	bne.n	800bf68 <HAL_UART_Receive+0xa4>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d104      	bne.n	800bf5e <HAL_UART_Receive+0x9a>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	22ff      	movs	r2, #255	; 0xff
 800bf58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf5c:	e01b      	b.n	800bf96 <HAL_UART_Receive+0xd2>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	227f      	movs	r2, #127	; 0x7f
 800bf62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf66:	e016      	b.n	800bf96 <HAL_UART_Receive+0xd2>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf70:	d10d      	bne.n	800bf8e <HAL_UART_Receive+0xca>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d104      	bne.n	800bf84 <HAL_UART_Receive+0xc0>
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	227f      	movs	r2, #127	; 0x7f
 800bf7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf82:	e008      	b.n	800bf96 <HAL_UART_Receive+0xd2>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	223f      	movs	r2, #63	; 0x3f
 800bf88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bf8c:	e003      	b.n	800bf96 <HAL_UART_Receive+0xd2>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf9c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa6:	d108      	bne.n	800bfba <HAL_UART_Receive+0xf6>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d104      	bne.n	800bfba <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	61bb      	str	r3, [r7, #24]
 800bfb8:	e003      	b.n	800bfc2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bfc2:	e036      	b.n	800c032 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	9300      	str	r3, [sp, #0]
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	2120      	movs	r1, #32
 800bfce:	68f8      	ldr	r0, [r7, #12]
 800bfd0:	f001 face 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d005      	beq.n	800bfe6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2220      	movs	r2, #32
 800bfde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e032      	b.n	800c04c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10c      	bne.n	800c006 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	8a7b      	ldrh	r3, [r7, #18]
 800bff6:	4013      	ands	r3, r2
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	3302      	adds	r3, #2
 800c002:	61bb      	str	r3, [r7, #24]
 800c004:	e00c      	b.n	800c020 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	8a7b      	ldrh	r3, [r7, #18]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	4013      	ands	r3, r2
 800c014:	b2da      	uxtb	r2, r3
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	3301      	adds	r3, #1
 800c01e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c026:	b29b      	uxth	r3, r3
 800c028:	3b01      	subs	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1c2      	bne.n	800bfc4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2220      	movs	r2, #32
 800c042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	e000      	b.n	800c04c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800c04a:	2302      	movs	r3, #2
  }
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b0ba      	sub	sp, #232	; 0xe8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	69db      	ldr	r3, [r3, #28]
 800c062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c07a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c07e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c082:	4013      	ands	r3, r2
 800c084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d11b      	bne.n	800c0c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c094:	f003 0320 	and.w	r3, r3, #32
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d015      	beq.n	800c0c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c09c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0a0:	f003 0320 	and.w	r3, r3, #32
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d105      	bne.n	800c0b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c0a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d009      	beq.n	800c0c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 8377 	beq.w	800c7ac <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
      }
      return;
 800c0c6:	e371      	b.n	800c7ac <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8123 	beq.w	800c318 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0d6:	4b8d      	ldr	r3, [pc, #564]	; (800c30c <HAL_UART_IRQHandler+0x2b8>)
 800c0d8:	4013      	ands	r3, r2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0e2:	4b8b      	ldr	r3, [pc, #556]	; (800c310 <HAL_UART_IRQHandler+0x2bc>)
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 8116 	beq.w	800c318 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f0:	f003 0301 	and.w	r3, r3, #1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d011      	beq.n	800c11c <HAL_UART_IRQHandler+0xc8>
 800c0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00b      	beq.n	800c11c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2201      	movs	r2, #1
 800c10a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c112:	f043 0201 	orr.w	r2, r3, #1
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c120:	f003 0302 	and.w	r3, r3, #2
 800c124:	2b00      	cmp	r3, #0
 800c126:	d011      	beq.n	800c14c <HAL_UART_IRQHandler+0xf8>
 800c128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2202      	movs	r2, #2
 800c13a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c142:	f043 0204 	orr.w	r2, r3, #4
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d011      	beq.n	800c17c <HAL_UART_IRQHandler+0x128>
 800c158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c15c:	f003 0301 	and.w	r3, r3, #1
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00b      	beq.n	800c17c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2204      	movs	r2, #4
 800c16a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c172:	f043 0202 	orr.w	r2, r3, #2
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c180:	f003 0308 	and.w	r3, r3, #8
 800c184:	2b00      	cmp	r3, #0
 800c186:	d017      	beq.n	800c1b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c18c:	f003 0320 	and.w	r3, r3, #32
 800c190:	2b00      	cmp	r3, #0
 800c192:	d105      	bne.n	800c1a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c198:	4b5c      	ldr	r3, [pc, #368]	; (800c30c <HAL_UART_IRQHandler+0x2b8>)
 800c19a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ae:	f043 0208 	orr.w	r2, r3, #8
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d012      	beq.n	800c1ea <HAL_UART_IRQHandler+0x196>
 800c1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00c      	beq.n	800c1ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1e0:	f043 0220 	orr.w	r2, r3, #32
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 82dd 	beq.w	800c7b0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1fa:	f003 0320 	and.w	r3, r3, #32
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d013      	beq.n	800c22a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c206:	f003 0320 	and.w	r3, r3, #32
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d105      	bne.n	800c21a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c20e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d007      	beq.n	800c22a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d003      	beq.n	800c22a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23e:	2b40      	cmp	r3, #64	; 0x40
 800c240:	d005      	beq.n	800c24e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c246:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d054      	beq.n	800c2f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f001 f9f6 	bl	800d640 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25e:	2b40      	cmp	r3, #64	; 0x40
 800c260:	d146      	bne.n	800c2f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3308      	adds	r3, #8
 800c268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c270:	e853 3f00 	ldrex	r3, [r3]
 800c274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c27c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3308      	adds	r3, #8
 800c28a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c28e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c29a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c29e:	e841 2300 	strex	r3, r2, [r1]
 800c2a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1d9      	bne.n	800c262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d017      	beq.n	800c2e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2be:	4a15      	ldr	r2, [pc, #84]	; (800c314 <HAL_UART_IRQHandler+0x2c0>)
 800c2c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7f8 ff61 	bl	8005190 <HAL_DMA_Abort_IT>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d019      	beq.n	800c308 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c2e2:	4610      	mov	r0, r2
 800c2e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2e6:	e00f      	b.n	800c308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fa77 	bl	800c7dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ee:	e00b      	b.n	800c308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa73 	bl	800c7dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2f6:	e007      	b.n	800c308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fa6f 	bl	800c7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c306:	e253      	b.n	800c7b0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c308:	bf00      	nop
    return;
 800c30a:	e251      	b.n	800c7b0 <HAL_UART_IRQHandler+0x75c>
 800c30c:	10000001 	.word	0x10000001
 800c310:	04000120 	.word	0x04000120
 800c314:	0800d70d 	.word	0x0800d70d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	f040 81e7 	bne.w	800c6f0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c326:	f003 0310 	and.w	r3, r3, #16
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 81e0 	beq.w	800c6f0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c334:	f003 0310 	and.w	r3, r3, #16
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 81d9 	beq.w	800c6f0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2210      	movs	r2, #16
 800c344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	689b      	ldr	r3, [r3, #8]
 800c34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c350:	2b40      	cmp	r3, #64	; 0x40
 800c352:	f040 8151 	bne.w	800c5f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a96      	ldr	r2, [pc, #600]	; (800c5b8 <HAL_UART_IRQHandler+0x564>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d068      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a93      	ldr	r2, [pc, #588]	; (800c5bc <HAL_UART_IRQHandler+0x568>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d061      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a91      	ldr	r2, [pc, #580]	; (800c5c0 <HAL_UART_IRQHandler+0x56c>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d05a      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a8e      	ldr	r2, [pc, #568]	; (800c5c4 <HAL_UART_IRQHandler+0x570>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d053      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4a8c      	ldr	r2, [pc, #560]	; (800c5c8 <HAL_UART_IRQHandler+0x574>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d04c      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a89      	ldr	r2, [pc, #548]	; (800c5cc <HAL_UART_IRQHandler+0x578>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d045      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a87      	ldr	r2, [pc, #540]	; (800c5d0 <HAL_UART_IRQHandler+0x57c>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d03e      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a84      	ldr	r2, [pc, #528]	; (800c5d4 <HAL_UART_IRQHandler+0x580>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d037      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a82      	ldr	r2, [pc, #520]	; (800c5d8 <HAL_UART_IRQHandler+0x584>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d030      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4a7f      	ldr	r2, [pc, #508]	; (800c5dc <HAL_UART_IRQHandler+0x588>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d029      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a7d      	ldr	r2, [pc, #500]	; (800c5e0 <HAL_UART_IRQHandler+0x58c>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d022      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a7a      	ldr	r2, [pc, #488]	; (800c5e4 <HAL_UART_IRQHandler+0x590>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d01b      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a78      	ldr	r2, [pc, #480]	; (800c5e8 <HAL_UART_IRQHandler+0x594>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d014      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a75      	ldr	r2, [pc, #468]	; (800c5ec <HAL_UART_IRQHandler+0x598>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d00d      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a73      	ldr	r2, [pc, #460]	; (800c5f0 <HAL_UART_IRQHandler+0x59c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d006      	beq.n	800c436 <HAL_UART_IRQHandler+0x3e2>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a70      	ldr	r2, [pc, #448]	; (800c5f4 <HAL_UART_IRQHandler+0x5a0>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d106      	bne.n	800c444 <HAL_UART_IRQHandler+0x3f0>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	b29b      	uxth	r3, r3
 800c442:	e005      	b.n	800c450 <HAL_UART_IRQHandler+0x3fc>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	b29b      	uxth	r3, r3
 800c450:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 81ab 	beq.w	800c7b4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c468:	429a      	cmp	r2, r3
 800c46a:	f080 81a3 	bcs.w	800c7b4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c47e:	69db      	ldr	r3, [r3, #28]
 800c480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c484:	f000 8087 	beq.w	800c596 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c49c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c4be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4c2:	e841 2300 	strex	r3, r2, [r1]
 800c4c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1da      	bne.n	800c488 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3308      	adds	r3, #8
 800c4d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4dc:	e853 3f00 	ldrex	r3, [r3]
 800c4e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4e4:	f023 0301 	bic.w	r3, r3, #1
 800c4e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3308      	adds	r3, #8
 800c4f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c502:	e841 2300 	strex	r3, r2, [r1]
 800c506:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e1      	bne.n	800c4d2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3308      	adds	r3, #8
 800c514:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c516:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c518:	e853 3f00 	ldrex	r3, [r3]
 800c51c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c51e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c524:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3308      	adds	r3, #8
 800c52e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c532:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c534:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c536:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c538:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c53a:	e841 2300 	strex	r3, r2, [r1]
 800c53e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1e3      	bne.n	800c50e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2220      	movs	r2, #32
 800c54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2200      	movs	r2, #0
 800c552:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55c:	e853 3f00 	ldrex	r3, [r3]
 800c560:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c564:	f023 0310 	bic.w	r3, r3, #16
 800c568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	461a      	mov	r2, r3
 800c572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c576:	65bb      	str	r3, [r7, #88]	; 0x58
 800c578:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c57c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c57e:	e841 2300 	strex	r3, r2, [r1]
 800c582:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1e4      	bne.n	800c554 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c590:	4618      	mov	r0, r3
 800c592:	f7f8 fadf 	bl	8004b54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2202      	movs	r2, #2
 800c59a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f91d 	bl	800c7f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5b6:	e0fd      	b.n	800c7b4 <HAL_UART_IRQHandler+0x760>
 800c5b8:	40020010 	.word	0x40020010
 800c5bc:	40020028 	.word	0x40020028
 800c5c0:	40020040 	.word	0x40020040
 800c5c4:	40020058 	.word	0x40020058
 800c5c8:	40020070 	.word	0x40020070
 800c5cc:	40020088 	.word	0x40020088
 800c5d0:	400200a0 	.word	0x400200a0
 800c5d4:	400200b8 	.word	0x400200b8
 800c5d8:	40020410 	.word	0x40020410
 800c5dc:	40020428 	.word	0x40020428
 800c5e0:	40020440 	.word	0x40020440
 800c5e4:	40020458 	.word	0x40020458
 800c5e8:	40020470 	.word	0x40020470
 800c5ec:	40020488 	.word	0x40020488
 800c5f0:	400204a0 	.word	0x400204a0
 800c5f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c604:	b29b      	uxth	r3, r3
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c612:	b29b      	uxth	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 80cf 	beq.w	800c7b8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c61a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f000 80ca 	beq.w	800c7b8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	461a      	mov	r2, r3
 800c642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c646:	647b      	str	r3, [r7, #68]	; 0x44
 800c648:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c64c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c64e:	e841 2300 	strex	r3, r2, [r1]
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e4      	bne.n	800c624 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	3308      	adds	r3, #8
 800c660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	e853 3f00 	ldrex	r3, [r3]
 800c668:	623b      	str	r3, [r7, #32]
   return(result);
 800c66a:	6a3a      	ldr	r2, [r7, #32]
 800c66c:	4b55      	ldr	r3, [pc, #340]	; (800c7c4 <HAL_UART_IRQHandler+0x770>)
 800c66e:	4013      	ands	r3, r2
 800c670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	3308      	adds	r3, #8
 800c67a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c67e:	633a      	str	r2, [r7, #48]	; 0x30
 800c680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c686:	e841 2300 	strex	r3, r2, [r1]
 800c68a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1e3      	bne.n	800c65a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2220      	movs	r2, #32
 800c696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	e853 3f00 	ldrex	r3, [r3]
 800c6b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f023 0310 	bic.w	r3, r3, #16
 800c6ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6cc:	69b9      	ldr	r1, [r7, #24]
 800c6ce:	69fa      	ldr	r2, [r7, #28]
 800c6d0:	e841 2300 	strex	r3, r2, [r1]
 800c6d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d1e4      	bne.n	800c6a6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f881 	bl	800c7f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6ee:	e063      	b.n	800c7b8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00e      	beq.n	800c71a <HAL_UART_IRQHandler+0x6c6>
 800c6fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d008      	beq.n	800c71a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f001 f83b 	bl	800d78e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c718:	e051      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c722:	2b00      	cmp	r3, #0
 800c724:	d014      	beq.n	800c750 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d105      	bne.n	800c73e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d008      	beq.n	800c750 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c742:	2b00      	cmp	r3, #0
 800c744:	d03a      	beq.n	800c7bc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	4798      	blx	r3
    }
    return;
 800c74e:	e035      	b.n	800c7bc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d009      	beq.n	800c770 <HAL_UART_IRQHandler+0x71c>
 800c75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 ffe5 	bl	800d738 <UART_EndTransmit_IT>
    return;
 800c76e:	e026      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d009      	beq.n	800c790 <HAL_UART_IRQHandler+0x73c>
 800c77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c780:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d003      	beq.n	800c790 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f001 f814 	bl	800d7b6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c78e:	e016      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d010      	beq.n	800c7be <HAL_UART_IRQHandler+0x76a>
 800c79c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	da0c      	bge.n	800c7be <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 fffc 	bl	800d7a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7aa:	e008      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
      return;
 800c7ac:	bf00      	nop
 800c7ae:	e006      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
    return;
 800c7b0:	bf00      	nop
 800c7b2:	e004      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
      return;
 800c7b4:	bf00      	nop
 800c7b6:	e002      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
      return;
 800c7b8:	bf00      	nop
 800c7ba:	e000      	b.n	800c7be <HAL_UART_IRQHandler+0x76a>
    return;
 800c7bc:	bf00      	nop
  }
}
 800c7be:	37e8      	adds	r7, #232	; 0xe8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	effffffe 	.word	0xeffffffe

0800c7c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7fc:	bf00      	nop
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c80c:	b092      	sub	sp, #72	; 0x48
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	689a      	ldr	r2, [r3, #8]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	431a      	orrs	r2, r3
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	431a      	orrs	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	69db      	ldr	r3, [r3, #28]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	4bbe      	ldr	r3, [pc, #760]	; (800cb30 <UART_SetConfig+0x328>)
 800c838:	4013      	ands	r3, r2
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	6812      	ldr	r2, [r2, #0]
 800c83e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c840:	430b      	orrs	r3, r1
 800c842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	68da      	ldr	r2, [r3, #12]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4ab3      	ldr	r2, [pc, #716]	; (800cb34 <UART_SetConfig+0x32c>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d004      	beq.n	800c874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c870:	4313      	orrs	r3, r2
 800c872:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	689a      	ldr	r2, [r3, #8]
 800c87a:	4baf      	ldr	r3, [pc, #700]	; (800cb38 <UART_SetConfig+0x330>)
 800c87c:	4013      	ands	r3, r2
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	6812      	ldr	r2, [r2, #0]
 800c882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c884:	430b      	orrs	r3, r1
 800c886:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	f023 010f 	bic.w	r1, r3, #15
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	430a      	orrs	r2, r1
 800c89c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4aa6      	ldr	r2, [pc, #664]	; (800cb3c <UART_SetConfig+0x334>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d177      	bne.n	800c998 <UART_SetConfig+0x190>
 800c8a8:	4ba5      	ldr	r3, [pc, #660]	; (800cb40 <UART_SetConfig+0x338>)
 800c8aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8b0:	2b28      	cmp	r3, #40	; 0x28
 800c8b2:	d86d      	bhi.n	800c990 <UART_SetConfig+0x188>
 800c8b4:	a201      	add	r2, pc, #4	; (adr r2, 800c8bc <UART_SetConfig+0xb4>)
 800c8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ba:	bf00      	nop
 800c8bc:	0800c961 	.word	0x0800c961
 800c8c0:	0800c991 	.word	0x0800c991
 800c8c4:	0800c991 	.word	0x0800c991
 800c8c8:	0800c991 	.word	0x0800c991
 800c8cc:	0800c991 	.word	0x0800c991
 800c8d0:	0800c991 	.word	0x0800c991
 800c8d4:	0800c991 	.word	0x0800c991
 800c8d8:	0800c991 	.word	0x0800c991
 800c8dc:	0800c969 	.word	0x0800c969
 800c8e0:	0800c991 	.word	0x0800c991
 800c8e4:	0800c991 	.word	0x0800c991
 800c8e8:	0800c991 	.word	0x0800c991
 800c8ec:	0800c991 	.word	0x0800c991
 800c8f0:	0800c991 	.word	0x0800c991
 800c8f4:	0800c991 	.word	0x0800c991
 800c8f8:	0800c991 	.word	0x0800c991
 800c8fc:	0800c971 	.word	0x0800c971
 800c900:	0800c991 	.word	0x0800c991
 800c904:	0800c991 	.word	0x0800c991
 800c908:	0800c991 	.word	0x0800c991
 800c90c:	0800c991 	.word	0x0800c991
 800c910:	0800c991 	.word	0x0800c991
 800c914:	0800c991 	.word	0x0800c991
 800c918:	0800c991 	.word	0x0800c991
 800c91c:	0800c979 	.word	0x0800c979
 800c920:	0800c991 	.word	0x0800c991
 800c924:	0800c991 	.word	0x0800c991
 800c928:	0800c991 	.word	0x0800c991
 800c92c:	0800c991 	.word	0x0800c991
 800c930:	0800c991 	.word	0x0800c991
 800c934:	0800c991 	.word	0x0800c991
 800c938:	0800c991 	.word	0x0800c991
 800c93c:	0800c981 	.word	0x0800c981
 800c940:	0800c991 	.word	0x0800c991
 800c944:	0800c991 	.word	0x0800c991
 800c948:	0800c991 	.word	0x0800c991
 800c94c:	0800c991 	.word	0x0800c991
 800c950:	0800c991 	.word	0x0800c991
 800c954:	0800c991 	.word	0x0800c991
 800c958:	0800c991 	.word	0x0800c991
 800c95c:	0800c989 	.word	0x0800c989
 800c960:	2301      	movs	r3, #1
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e222      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c968:	2304      	movs	r3, #4
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e21e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c970:	2308      	movs	r3, #8
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e21a      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c978:	2310      	movs	r3, #16
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e216      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c980:	2320      	movs	r3, #32
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e212      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e20e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c990:	2380      	movs	r3, #128	; 0x80
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c996:	e20a      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a69      	ldr	r2, [pc, #420]	; (800cb44 <UART_SetConfig+0x33c>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d130      	bne.n	800ca04 <UART_SetConfig+0x1fc>
 800c9a2:	4b67      	ldr	r3, [pc, #412]	; (800cb40 <UART_SetConfig+0x338>)
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d826      	bhi.n	800c9fc <UART_SetConfig+0x1f4>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <UART_SetConfig+0x1ac>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800c9cd 	.word	0x0800c9cd
 800c9b8:	0800c9d5 	.word	0x0800c9d5
 800c9bc:	0800c9dd 	.word	0x0800c9dd
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800c9ed 	.word	0x0800c9ed
 800c9c8:	0800c9f5 	.word	0x0800c9f5
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e1ec      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e1e8      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c9dc:	2308      	movs	r3, #8
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e1e4      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e1e0      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c9ec:	2320      	movs	r3, #32
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f2:	e1dc      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9fa:	e1d8      	b.n	800cdae <UART_SetConfig+0x5a6>
 800c9fc:	2380      	movs	r3, #128	; 0x80
 800c9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca02:	e1d4      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a4f      	ldr	r2, [pc, #316]	; (800cb48 <UART_SetConfig+0x340>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d130      	bne.n	800ca70 <UART_SetConfig+0x268>
 800ca0e:	4b4c      	ldr	r3, [pc, #304]	; (800cb40 <UART_SetConfig+0x338>)
 800ca10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b05      	cmp	r3, #5
 800ca18:	d826      	bhi.n	800ca68 <UART_SetConfig+0x260>
 800ca1a:	a201      	add	r2, pc, #4	; (adr r2, 800ca20 <UART_SetConfig+0x218>)
 800ca1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca20:	0800ca39 	.word	0x0800ca39
 800ca24:	0800ca41 	.word	0x0800ca41
 800ca28:	0800ca49 	.word	0x0800ca49
 800ca2c:	0800ca51 	.word	0x0800ca51
 800ca30:	0800ca59 	.word	0x0800ca59
 800ca34:	0800ca61 	.word	0x0800ca61
 800ca38:	2300      	movs	r3, #0
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e1b6      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca40:	2304      	movs	r3, #4
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e1b2      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca48:	2308      	movs	r3, #8
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e1ae      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca50:	2310      	movs	r3, #16
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca56:	e1aa      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca58:	2320      	movs	r3, #32
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5e:	e1a6      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca60:	2340      	movs	r3, #64	; 0x40
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca66:	e1a2      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca68:	2380      	movs	r3, #128	; 0x80
 800ca6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca6e:	e19e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a35      	ldr	r2, [pc, #212]	; (800cb4c <UART_SetConfig+0x344>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d130      	bne.n	800cadc <UART_SetConfig+0x2d4>
 800ca7a:	4b31      	ldr	r3, [pc, #196]	; (800cb40 <UART_SetConfig+0x338>)
 800ca7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca7e:	f003 0307 	and.w	r3, r3, #7
 800ca82:	2b05      	cmp	r3, #5
 800ca84:	d826      	bhi.n	800cad4 <UART_SetConfig+0x2cc>
 800ca86:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <UART_SetConfig+0x284>)
 800ca88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8c:	0800caa5 	.word	0x0800caa5
 800ca90:	0800caad 	.word	0x0800caad
 800ca94:	0800cab5 	.word	0x0800cab5
 800ca98:	0800cabd 	.word	0x0800cabd
 800ca9c:	0800cac5 	.word	0x0800cac5
 800caa0:	0800cacd 	.word	0x0800cacd
 800caa4:	2300      	movs	r3, #0
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caaa:	e180      	b.n	800cdae <UART_SetConfig+0x5a6>
 800caac:	2304      	movs	r3, #4
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cab2:	e17c      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cab4:	2308      	movs	r3, #8
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caba:	e178      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cabc:	2310      	movs	r3, #16
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cac2:	e174      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cac4:	2320      	movs	r3, #32
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caca:	e170      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cacc:	2340      	movs	r3, #64	; 0x40
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cad2:	e16c      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cad4:	2380      	movs	r3, #128	; 0x80
 800cad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cada:	e168      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a1b      	ldr	r2, [pc, #108]	; (800cb50 <UART_SetConfig+0x348>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d142      	bne.n	800cb6c <UART_SetConfig+0x364>
 800cae6:	4b16      	ldr	r3, [pc, #88]	; (800cb40 <UART_SetConfig+0x338>)
 800cae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caea:	f003 0307 	and.w	r3, r3, #7
 800caee:	2b05      	cmp	r3, #5
 800caf0:	d838      	bhi.n	800cb64 <UART_SetConfig+0x35c>
 800caf2:	a201      	add	r2, pc, #4	; (adr r2, 800caf8 <UART_SetConfig+0x2f0>)
 800caf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf8:	0800cb11 	.word	0x0800cb11
 800cafc:	0800cb19 	.word	0x0800cb19
 800cb00:	0800cb21 	.word	0x0800cb21
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb55 	.word	0x0800cb55
 800cb0c:	0800cb5d 	.word	0x0800cb5d
 800cb10:	2300      	movs	r3, #0
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb16:	e14a      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb18:	2304      	movs	r3, #4
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1e:	e146      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb20:	2308      	movs	r3, #8
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb26:	e142      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb2e:	e13e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb30:	cfff69f3 	.word	0xcfff69f3
 800cb34:	58000c00 	.word	0x58000c00
 800cb38:	11fff4ff 	.word	0x11fff4ff
 800cb3c:	40011000 	.word	0x40011000
 800cb40:	58024400 	.word	0x58024400
 800cb44:	40004400 	.word	0x40004400
 800cb48:	40004800 	.word	0x40004800
 800cb4c:	40004c00 	.word	0x40004c00
 800cb50:	40005000 	.word	0x40005000
 800cb54:	2320      	movs	r3, #32
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e128      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e124      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb64:	2380      	movs	r3, #128	; 0x80
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e120      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4acb      	ldr	r2, [pc, #812]	; (800cea0 <UART_SetConfig+0x698>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d176      	bne.n	800cc64 <UART_SetConfig+0x45c>
 800cb76:	4bcb      	ldr	r3, [pc, #812]	; (800cea4 <UART_SetConfig+0x69c>)
 800cb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb7e:	2b28      	cmp	r3, #40	; 0x28
 800cb80:	d86c      	bhi.n	800cc5c <UART_SetConfig+0x454>
 800cb82:	a201      	add	r2, pc, #4	; (adr r2, 800cb88 <UART_SetConfig+0x380>)
 800cb84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb88:	0800cc2d 	.word	0x0800cc2d
 800cb8c:	0800cc5d 	.word	0x0800cc5d
 800cb90:	0800cc5d 	.word	0x0800cc5d
 800cb94:	0800cc5d 	.word	0x0800cc5d
 800cb98:	0800cc5d 	.word	0x0800cc5d
 800cb9c:	0800cc5d 	.word	0x0800cc5d
 800cba0:	0800cc5d 	.word	0x0800cc5d
 800cba4:	0800cc5d 	.word	0x0800cc5d
 800cba8:	0800cc35 	.word	0x0800cc35
 800cbac:	0800cc5d 	.word	0x0800cc5d
 800cbb0:	0800cc5d 	.word	0x0800cc5d
 800cbb4:	0800cc5d 	.word	0x0800cc5d
 800cbb8:	0800cc5d 	.word	0x0800cc5d
 800cbbc:	0800cc5d 	.word	0x0800cc5d
 800cbc0:	0800cc5d 	.word	0x0800cc5d
 800cbc4:	0800cc5d 	.word	0x0800cc5d
 800cbc8:	0800cc3d 	.word	0x0800cc3d
 800cbcc:	0800cc5d 	.word	0x0800cc5d
 800cbd0:	0800cc5d 	.word	0x0800cc5d
 800cbd4:	0800cc5d 	.word	0x0800cc5d
 800cbd8:	0800cc5d 	.word	0x0800cc5d
 800cbdc:	0800cc5d 	.word	0x0800cc5d
 800cbe0:	0800cc5d 	.word	0x0800cc5d
 800cbe4:	0800cc5d 	.word	0x0800cc5d
 800cbe8:	0800cc45 	.word	0x0800cc45
 800cbec:	0800cc5d 	.word	0x0800cc5d
 800cbf0:	0800cc5d 	.word	0x0800cc5d
 800cbf4:	0800cc5d 	.word	0x0800cc5d
 800cbf8:	0800cc5d 	.word	0x0800cc5d
 800cbfc:	0800cc5d 	.word	0x0800cc5d
 800cc00:	0800cc5d 	.word	0x0800cc5d
 800cc04:	0800cc5d 	.word	0x0800cc5d
 800cc08:	0800cc4d 	.word	0x0800cc4d
 800cc0c:	0800cc5d 	.word	0x0800cc5d
 800cc10:	0800cc5d 	.word	0x0800cc5d
 800cc14:	0800cc5d 	.word	0x0800cc5d
 800cc18:	0800cc5d 	.word	0x0800cc5d
 800cc1c:	0800cc5d 	.word	0x0800cc5d
 800cc20:	0800cc5d 	.word	0x0800cc5d
 800cc24:	0800cc5d 	.word	0x0800cc5d
 800cc28:	0800cc55 	.word	0x0800cc55
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e0bc      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc34:	2304      	movs	r3, #4
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e0b8      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc3c:	2308      	movs	r3, #8
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e0b4      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc44:	2310      	movs	r3, #16
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e0b0      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc4c:	2320      	movs	r3, #32
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc52:	e0ac      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc54:	2340      	movs	r3, #64	; 0x40
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5a:	e0a8      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc5c:	2380      	movs	r3, #128	; 0x80
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc62:	e0a4      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a8f      	ldr	r2, [pc, #572]	; (800cea8 <UART_SetConfig+0x6a0>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d130      	bne.n	800ccd0 <UART_SetConfig+0x4c8>
 800cc6e:	4b8d      	ldr	r3, [pc, #564]	; (800cea4 <UART_SetConfig+0x69c>)
 800cc70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	2b05      	cmp	r3, #5
 800cc78:	d826      	bhi.n	800ccc8 <UART_SetConfig+0x4c0>
 800cc7a:	a201      	add	r2, pc, #4	; (adr r2, 800cc80 <UART_SetConfig+0x478>)
 800cc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc80:	0800cc99 	.word	0x0800cc99
 800cc84:	0800cca1 	.word	0x0800cca1
 800cc88:	0800cca9 	.word	0x0800cca9
 800cc8c:	0800ccb1 	.word	0x0800ccb1
 800cc90:	0800ccb9 	.word	0x0800ccb9
 800cc94:	0800ccc1 	.word	0x0800ccc1
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e086      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cca0:	2304      	movs	r3, #4
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e082      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cca8:	2308      	movs	r3, #8
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccae:	e07e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccb6:	e07a      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ccb8:	2320      	movs	r3, #32
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccbe:	e076      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ccc0:	2340      	movs	r3, #64	; 0x40
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccc6:	e072      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ccc8:	2380      	movs	r3, #128	; 0x80
 800ccca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccce:	e06e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a75      	ldr	r2, [pc, #468]	; (800ceac <UART_SetConfig+0x6a4>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d130      	bne.n	800cd3c <UART_SetConfig+0x534>
 800ccda:	4b72      	ldr	r3, [pc, #456]	; (800cea4 <UART_SetConfig+0x69c>)
 800ccdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccde:	f003 0307 	and.w	r3, r3, #7
 800cce2:	2b05      	cmp	r3, #5
 800cce4:	d826      	bhi.n	800cd34 <UART_SetConfig+0x52c>
 800cce6:	a201      	add	r2, pc, #4	; (adr r2, 800ccec <UART_SetConfig+0x4e4>)
 800cce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccec:	0800cd05 	.word	0x0800cd05
 800ccf0:	0800cd0d 	.word	0x0800cd0d
 800ccf4:	0800cd15 	.word	0x0800cd15
 800ccf8:	0800cd1d 	.word	0x0800cd1d
 800ccfc:	0800cd25 	.word	0x0800cd25
 800cd00:	0800cd2d 	.word	0x0800cd2d
 800cd04:	2300      	movs	r3, #0
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0a:	e050      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd0c:	2304      	movs	r3, #4
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e04c      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd14:	2308      	movs	r3, #8
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1a:	e048      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd1c:	2310      	movs	r3, #16
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd22:	e044      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd24:	2320      	movs	r3, #32
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd2a:	e040      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd2c:	2340      	movs	r3, #64	; 0x40
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd32:	e03c      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd34:	2380      	movs	r3, #128	; 0x80
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd3a:	e038      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a5b      	ldr	r2, [pc, #364]	; (800ceb0 <UART_SetConfig+0x6a8>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d130      	bne.n	800cda8 <UART_SetConfig+0x5a0>
 800cd46:	4b57      	ldr	r3, [pc, #348]	; (800cea4 <UART_SetConfig+0x69c>)
 800cd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4a:	f003 0307 	and.w	r3, r3, #7
 800cd4e:	2b05      	cmp	r3, #5
 800cd50:	d826      	bhi.n	800cda0 <UART_SetConfig+0x598>
 800cd52:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <UART_SetConfig+0x550>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cd71 	.word	0x0800cd71
 800cd5c:	0800cd79 	.word	0x0800cd79
 800cd60:	0800cd81 	.word	0x0800cd81
 800cd64:	0800cd89 	.word	0x0800cd89
 800cd68:	0800cd91 	.word	0x0800cd91
 800cd6c:	0800cd99 	.word	0x0800cd99
 800cd70:	2302      	movs	r3, #2
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd76:	e01a      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd78:	2304      	movs	r3, #4
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7e:	e016      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd80:	2308      	movs	r3, #8
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd86:	e012      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd88:	2310      	movs	r3, #16
 800cd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd8e:	e00e      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd90:	2320      	movs	r3, #32
 800cd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd96:	e00a      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cd98:	2340      	movs	r3, #64	; 0x40
 800cd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd9e:	e006      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cda0:	2380      	movs	r3, #128	; 0x80
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cda6:	e002      	b.n	800cdae <UART_SetConfig+0x5a6>
 800cda8:	2380      	movs	r3, #128	; 0x80
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4a3f      	ldr	r2, [pc, #252]	; (800ceb0 <UART_SetConfig+0x6a8>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	f040 80f8 	bne.w	800cfaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdbe:	2b20      	cmp	r3, #32
 800cdc0:	dc46      	bgt.n	800ce50 <UART_SetConfig+0x648>
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	f2c0 8082 	blt.w	800cecc <UART_SetConfig+0x6c4>
 800cdc8:	3b02      	subs	r3, #2
 800cdca:	2b1e      	cmp	r3, #30
 800cdcc:	d87e      	bhi.n	800cecc <UART_SetConfig+0x6c4>
 800cdce:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <UART_SetConfig+0x5cc>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800ce57 	.word	0x0800ce57
 800cdd8:	0800cecd 	.word	0x0800cecd
 800cddc:	0800ce5f 	.word	0x0800ce5f
 800cde0:	0800cecd 	.word	0x0800cecd
 800cde4:	0800cecd 	.word	0x0800cecd
 800cde8:	0800cecd 	.word	0x0800cecd
 800cdec:	0800ce6f 	.word	0x0800ce6f
 800cdf0:	0800cecd 	.word	0x0800cecd
 800cdf4:	0800cecd 	.word	0x0800cecd
 800cdf8:	0800cecd 	.word	0x0800cecd
 800cdfc:	0800cecd 	.word	0x0800cecd
 800ce00:	0800cecd 	.word	0x0800cecd
 800ce04:	0800cecd 	.word	0x0800cecd
 800ce08:	0800cecd 	.word	0x0800cecd
 800ce0c:	0800ce7f 	.word	0x0800ce7f
 800ce10:	0800cecd 	.word	0x0800cecd
 800ce14:	0800cecd 	.word	0x0800cecd
 800ce18:	0800cecd 	.word	0x0800cecd
 800ce1c:	0800cecd 	.word	0x0800cecd
 800ce20:	0800cecd 	.word	0x0800cecd
 800ce24:	0800cecd 	.word	0x0800cecd
 800ce28:	0800cecd 	.word	0x0800cecd
 800ce2c:	0800cecd 	.word	0x0800cecd
 800ce30:	0800cecd 	.word	0x0800cecd
 800ce34:	0800cecd 	.word	0x0800cecd
 800ce38:	0800cecd 	.word	0x0800cecd
 800ce3c:	0800cecd 	.word	0x0800cecd
 800ce40:	0800cecd 	.word	0x0800cecd
 800ce44:	0800cecd 	.word	0x0800cecd
 800ce48:	0800cecd 	.word	0x0800cecd
 800ce4c:	0800cebf 	.word	0x0800cebf
 800ce50:	2b40      	cmp	r3, #64	; 0x40
 800ce52:	d037      	beq.n	800cec4 <UART_SetConfig+0x6bc>
 800ce54:	e03a      	b.n	800cecc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce56:	f7fd fef1 	bl	800ac3c <HAL_RCCEx_GetD3PCLK1Freq>
 800ce5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce5c:	e03c      	b.n	800ced8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fd ff00 	bl	800ac68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce6c:	e034      	b.n	800ced8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce6e:	f107 0318 	add.w	r3, r7, #24
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fe f84c 	bl	800af10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce7c:	e02c      	b.n	800ced8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce7e:	4b09      	ldr	r3, [pc, #36]	; (800cea4 <UART_SetConfig+0x69c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0320 	and.w	r3, r3, #32
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d016      	beq.n	800ceb8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce8a:	4b06      	ldr	r3, [pc, #24]	; (800cea4 <UART_SetConfig+0x69c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	08db      	lsrs	r3, r3, #3
 800ce90:	f003 0303 	and.w	r3, r3, #3
 800ce94:	4a07      	ldr	r2, [pc, #28]	; (800ceb4 <UART_SetConfig+0x6ac>)
 800ce96:	fa22 f303 	lsr.w	r3, r2, r3
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce9c:	e01c      	b.n	800ced8 <UART_SetConfig+0x6d0>
 800ce9e:	bf00      	nop
 800cea0:	40011400 	.word	0x40011400
 800cea4:	58024400 	.word	0x58024400
 800cea8:	40007800 	.word	0x40007800
 800ceac:	40007c00 	.word	0x40007c00
 800ceb0:	58000c00 	.word	0x58000c00
 800ceb4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ceb8:	4b9d      	ldr	r3, [pc, #628]	; (800d130 <UART_SetConfig+0x928>)
 800ceba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cebc:	e00c      	b.n	800ced8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cebe:	4b9d      	ldr	r3, [pc, #628]	; (800d134 <UART_SetConfig+0x92c>)
 800cec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec2:	e009      	b.n	800ced8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceca:	e005      	b.n	800ced8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cecc:	2300      	movs	r3, #0
 800cece:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ced0:	2301      	movs	r3, #1
 800ced2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ced6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ced8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	f000 81de 	beq.w	800d29c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee4:	4a94      	ldr	r2, [pc, #592]	; (800d138 <UART_SetConfig+0x930>)
 800cee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceea:	461a      	mov	r2, r3
 800ceec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceee:	fbb3 f3f2 	udiv	r3, r3, r2
 800cef2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	685a      	ldr	r2, [r3, #4]
 800cef8:	4613      	mov	r3, r2
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	4413      	add	r3, r2
 800cefe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d305      	bcc.n	800cf10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	685b      	ldr	r3, [r3, #4]
 800cf08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d903      	bls.n	800cf18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cf16:	e1c1      	b.n	800d29c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	60bb      	str	r3, [r7, #8]
 800cf1e:	60fa      	str	r2, [r7, #12]
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf24:	4a84      	ldr	r2, [pc, #528]	; (800d138 <UART_SetConfig+0x930>)
 800cf26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	607a      	str	r2, [r7, #4]
 800cf32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf3a:	f7f3 fa21 	bl	8000380 <__aeabi_uldivmod>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	460b      	mov	r3, r1
 800cf42:	4610      	mov	r0, r2
 800cf44:	4619      	mov	r1, r3
 800cf46:	f04f 0200 	mov.w	r2, #0
 800cf4a:	f04f 0300 	mov.w	r3, #0
 800cf4e:	020b      	lsls	r3, r1, #8
 800cf50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf54:	0202      	lsls	r2, r0, #8
 800cf56:	6979      	ldr	r1, [r7, #20]
 800cf58:	6849      	ldr	r1, [r1, #4]
 800cf5a:	0849      	lsrs	r1, r1, #1
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	4605      	mov	r5, r0
 800cf62:	eb12 0804 	adds.w	r8, r2, r4
 800cf66:	eb43 0905 	adc.w	r9, r3, r5
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	469a      	mov	sl, r3
 800cf72:	4693      	mov	fp, r2
 800cf74:	4652      	mov	r2, sl
 800cf76:	465b      	mov	r3, fp
 800cf78:	4640      	mov	r0, r8
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	f7f3 fa00 	bl	8000380 <__aeabi_uldivmod>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	4613      	mov	r3, r2
 800cf86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf8e:	d308      	bcc.n	800cfa2 <UART_SetConfig+0x79a>
 800cf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf96:	d204      	bcs.n	800cfa2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf9e:	60da      	str	r2, [r3, #12]
 800cfa0:	e17c      	b.n	800d29c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cfa8:	e178      	b.n	800d29c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	69db      	ldr	r3, [r3, #28]
 800cfae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfb2:	f040 80c5 	bne.w	800d140 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cfb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cfba:	2b20      	cmp	r3, #32
 800cfbc:	dc48      	bgt.n	800d050 <UART_SetConfig+0x848>
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	db7b      	blt.n	800d0ba <UART_SetConfig+0x8b2>
 800cfc2:	2b20      	cmp	r3, #32
 800cfc4:	d879      	bhi.n	800d0ba <UART_SetConfig+0x8b2>
 800cfc6:	a201      	add	r2, pc, #4	; (adr r2, 800cfcc <UART_SetConfig+0x7c4>)
 800cfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfcc:	0800d057 	.word	0x0800d057
 800cfd0:	0800d05f 	.word	0x0800d05f
 800cfd4:	0800d0bb 	.word	0x0800d0bb
 800cfd8:	0800d0bb 	.word	0x0800d0bb
 800cfdc:	0800d067 	.word	0x0800d067
 800cfe0:	0800d0bb 	.word	0x0800d0bb
 800cfe4:	0800d0bb 	.word	0x0800d0bb
 800cfe8:	0800d0bb 	.word	0x0800d0bb
 800cfec:	0800d077 	.word	0x0800d077
 800cff0:	0800d0bb 	.word	0x0800d0bb
 800cff4:	0800d0bb 	.word	0x0800d0bb
 800cff8:	0800d0bb 	.word	0x0800d0bb
 800cffc:	0800d0bb 	.word	0x0800d0bb
 800d000:	0800d0bb 	.word	0x0800d0bb
 800d004:	0800d0bb 	.word	0x0800d0bb
 800d008:	0800d0bb 	.word	0x0800d0bb
 800d00c:	0800d087 	.word	0x0800d087
 800d010:	0800d0bb 	.word	0x0800d0bb
 800d014:	0800d0bb 	.word	0x0800d0bb
 800d018:	0800d0bb 	.word	0x0800d0bb
 800d01c:	0800d0bb 	.word	0x0800d0bb
 800d020:	0800d0bb 	.word	0x0800d0bb
 800d024:	0800d0bb 	.word	0x0800d0bb
 800d028:	0800d0bb 	.word	0x0800d0bb
 800d02c:	0800d0bb 	.word	0x0800d0bb
 800d030:	0800d0bb 	.word	0x0800d0bb
 800d034:	0800d0bb 	.word	0x0800d0bb
 800d038:	0800d0bb 	.word	0x0800d0bb
 800d03c:	0800d0bb 	.word	0x0800d0bb
 800d040:	0800d0bb 	.word	0x0800d0bb
 800d044:	0800d0bb 	.word	0x0800d0bb
 800d048:	0800d0bb 	.word	0x0800d0bb
 800d04c:	0800d0ad 	.word	0x0800d0ad
 800d050:	2b40      	cmp	r3, #64	; 0x40
 800d052:	d02e      	beq.n	800d0b2 <UART_SetConfig+0x8aa>
 800d054:	e031      	b.n	800d0ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d056:	f7fc fbbb 	bl	80097d0 <HAL_RCC_GetPCLK1Freq>
 800d05a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d05c:	e033      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d05e:	f7fc fbcd 	bl	80097fc <HAL_RCC_GetPCLK2Freq>
 800d062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d064:	e02f      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fd fdfc 	bl	800ac68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d074:	e027      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d076:	f107 0318 	add.w	r3, r7, #24
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fd ff48 	bl	800af10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d084:	e01f      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d086:	4b2d      	ldr	r3, [pc, #180]	; (800d13c <UART_SetConfig+0x934>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f003 0320 	and.w	r3, r3, #32
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d092:	4b2a      	ldr	r3, [pc, #168]	; (800d13c <UART_SetConfig+0x934>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	08db      	lsrs	r3, r3, #3
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	4a24      	ldr	r2, [pc, #144]	; (800d130 <UART_SetConfig+0x928>)
 800d09e:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0a4:	e00f      	b.n	800d0c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d0a6:	4b22      	ldr	r3, [pc, #136]	; (800d130 <UART_SetConfig+0x928>)
 800d0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0aa:	e00c      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0ac:	4b21      	ldr	r3, [pc, #132]	; (800d134 <UART_SetConfig+0x92c>)
 800d0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b0:	e009      	b.n	800d0c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b8:	e005      	b.n	800d0c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d0c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 80e7 	beq.w	800d29c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d2:	4a19      	ldr	r2, [pc, #100]	; (800d138 <UART_SetConfig+0x930>)
 800d0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e0:	005a      	lsls	r2, r3, #1
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	085b      	lsrs	r3, r3, #1
 800d0e8:	441a      	add	r2, r3
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	2b0f      	cmp	r3, #15
 800d0f8:	d916      	bls.n	800d128 <UART_SetConfig+0x920>
 800d0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d100:	d212      	bcs.n	800d128 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d104:	b29b      	uxth	r3, r3
 800d106:	f023 030f 	bic.w	r3, r3, #15
 800d10a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10e:	085b      	lsrs	r3, r3, #1
 800d110:	b29b      	uxth	r3, r3
 800d112:	f003 0307 	and.w	r3, r3, #7
 800d116:	b29a      	uxth	r2, r3
 800d118:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d11a:	4313      	orrs	r3, r2
 800d11c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d124:	60da      	str	r2, [r3, #12]
 800d126:	e0b9      	b.n	800d29c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d12e:	e0b5      	b.n	800d29c <UART_SetConfig+0xa94>
 800d130:	03d09000 	.word	0x03d09000
 800d134:	003d0900 	.word	0x003d0900
 800d138:	080145a8 	.word	0x080145a8
 800d13c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d140:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d144:	2b20      	cmp	r3, #32
 800d146:	dc49      	bgt.n	800d1dc <UART_SetConfig+0x9d4>
 800d148:	2b00      	cmp	r3, #0
 800d14a:	db7c      	blt.n	800d246 <UART_SetConfig+0xa3e>
 800d14c:	2b20      	cmp	r3, #32
 800d14e:	d87a      	bhi.n	800d246 <UART_SetConfig+0xa3e>
 800d150:	a201      	add	r2, pc, #4	; (adr r2, 800d158 <UART_SetConfig+0x950>)
 800d152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d156:	bf00      	nop
 800d158:	0800d1e3 	.word	0x0800d1e3
 800d15c:	0800d1eb 	.word	0x0800d1eb
 800d160:	0800d247 	.word	0x0800d247
 800d164:	0800d247 	.word	0x0800d247
 800d168:	0800d1f3 	.word	0x0800d1f3
 800d16c:	0800d247 	.word	0x0800d247
 800d170:	0800d247 	.word	0x0800d247
 800d174:	0800d247 	.word	0x0800d247
 800d178:	0800d203 	.word	0x0800d203
 800d17c:	0800d247 	.word	0x0800d247
 800d180:	0800d247 	.word	0x0800d247
 800d184:	0800d247 	.word	0x0800d247
 800d188:	0800d247 	.word	0x0800d247
 800d18c:	0800d247 	.word	0x0800d247
 800d190:	0800d247 	.word	0x0800d247
 800d194:	0800d247 	.word	0x0800d247
 800d198:	0800d213 	.word	0x0800d213
 800d19c:	0800d247 	.word	0x0800d247
 800d1a0:	0800d247 	.word	0x0800d247
 800d1a4:	0800d247 	.word	0x0800d247
 800d1a8:	0800d247 	.word	0x0800d247
 800d1ac:	0800d247 	.word	0x0800d247
 800d1b0:	0800d247 	.word	0x0800d247
 800d1b4:	0800d247 	.word	0x0800d247
 800d1b8:	0800d247 	.word	0x0800d247
 800d1bc:	0800d247 	.word	0x0800d247
 800d1c0:	0800d247 	.word	0x0800d247
 800d1c4:	0800d247 	.word	0x0800d247
 800d1c8:	0800d247 	.word	0x0800d247
 800d1cc:	0800d247 	.word	0x0800d247
 800d1d0:	0800d247 	.word	0x0800d247
 800d1d4:	0800d247 	.word	0x0800d247
 800d1d8:	0800d239 	.word	0x0800d239
 800d1dc:	2b40      	cmp	r3, #64	; 0x40
 800d1de:	d02e      	beq.n	800d23e <UART_SetConfig+0xa36>
 800d1e0:	e031      	b.n	800d246 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1e2:	f7fc faf5 	bl	80097d0 <HAL_RCC_GetPCLK1Freq>
 800d1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1e8:	e033      	b.n	800d252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1ea:	f7fc fb07 	bl	80097fc <HAL_RCC_GetPCLK2Freq>
 800d1ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d1f0:	e02f      	b.n	800d252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fd fd36 	bl	800ac68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d200:	e027      	b.n	800d252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d202:	f107 0318 	add.w	r3, r7, #24
 800d206:	4618      	mov	r0, r3
 800d208:	f7fd fe82 	bl	800af10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d210:	e01f      	b.n	800d252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d212:	4b2d      	ldr	r3, [pc, #180]	; (800d2c8 <UART_SetConfig+0xac0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 0320 	and.w	r3, r3, #32
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d009      	beq.n	800d232 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d21e:	4b2a      	ldr	r3, [pc, #168]	; (800d2c8 <UART_SetConfig+0xac0>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	08db      	lsrs	r3, r3, #3
 800d224:	f003 0303 	and.w	r3, r3, #3
 800d228:	4a28      	ldr	r2, [pc, #160]	; (800d2cc <UART_SetConfig+0xac4>)
 800d22a:	fa22 f303 	lsr.w	r3, r2, r3
 800d22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d230:	e00f      	b.n	800d252 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d232:	4b26      	ldr	r3, [pc, #152]	; (800d2cc <UART_SetConfig+0xac4>)
 800d234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d236:	e00c      	b.n	800d252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d238:	4b25      	ldr	r3, [pc, #148]	; (800d2d0 <UART_SetConfig+0xac8>)
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d23c:	e009      	b.n	800d252 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d23e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d244:	e005      	b.n	800d252 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d246:	2300      	movs	r3, #0
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d250:	bf00      	nop
    }

    if (pclk != 0U)
 800d252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d254:	2b00      	cmp	r3, #0
 800d256:	d021      	beq.n	800d29c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d25c:	4a1d      	ldr	r2, [pc, #116]	; (800d2d4 <UART_SetConfig+0xacc>)
 800d25e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d262:	461a      	mov	r2, r3
 800d264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d266:	fbb3 f2f2 	udiv	r2, r3, r2
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	085b      	lsrs	r3, r3, #1
 800d270:	441a      	add	r2, r3
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	fbb2 f3f3 	udiv	r3, r2, r3
 800d27a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	2b0f      	cmp	r3, #15
 800d280:	d909      	bls.n	800d296 <UART_SetConfig+0xa8e>
 800d282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d288:	d205      	bcs.n	800d296 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	60da      	str	r2, [r3, #12]
 800d294:	e002      	b.n	800d29c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d2b8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3748      	adds	r7, #72	; 0x48
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2c6:	bf00      	nop
 800d2c8:	58024400 	.word	0x58024400
 800d2cc:	03d09000 	.word	0x03d09000
 800d2d0:	003d0900 	.word	0x003d0900
 800d2d4:	080145a8 	.word	0x080145a8

0800d2d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d00a      	beq.n	800d302 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	430a      	orrs	r2, r1
 800d300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d306:	f003 0302 	and.w	r3, r3, #2
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00a      	beq.n	800d324 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	430a      	orrs	r2, r1
 800d322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d328:	f003 0304 	and.w	r3, r3, #4
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00a      	beq.n	800d346 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	430a      	orrs	r2, r1
 800d344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34a:	f003 0308 	and.w	r3, r3, #8
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00a      	beq.n	800d368 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	430a      	orrs	r2, r1
 800d366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d36c:	f003 0310 	and.w	r3, r3, #16
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00a      	beq.n	800d38a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	430a      	orrs	r2, r1
 800d388:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38e:	f003 0320 	and.w	r3, r3, #32
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00a      	beq.n	800d3ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	430a      	orrs	r2, r1
 800d3aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d01a      	beq.n	800d3ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	430a      	orrs	r2, r1
 800d3cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3d6:	d10a      	bne.n	800d3ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685b      	ldr	r3, [r3, #4]
 800d3de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	430a      	orrs	r2, r1
 800d3ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00a      	beq.n	800d410 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	430a      	orrs	r2, r1
 800d40e:	605a      	str	r2, [r3, #4]
  }
}
 800d410:	bf00      	nop
 800d412:	370c      	adds	r7, #12
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b098      	sub	sp, #96	; 0x60
 800d420:	af02      	add	r7, sp, #8
 800d422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2200      	movs	r2, #0
 800d428:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d42c:	f7f7 fa36 	bl	800489c <HAL_GetTick>
 800d430:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 0308 	and.w	r3, r3, #8
 800d43c:	2b08      	cmp	r3, #8
 800d43e:	d12f      	bne.n	800d4a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d448:	2200      	movs	r2, #0
 800d44a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 f88e 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d022      	beq.n	800d4a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d46e:	653b      	str	r3, [r7, #80]	; 0x50
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	461a      	mov	r2, r3
 800d476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d478:	647b      	str	r3, [r7, #68]	; 0x44
 800d47a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d47e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e6      	bne.n	800d45a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2220      	movs	r2, #32
 800d490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d49c:	2303      	movs	r3, #3
 800d49e:	e063      	b.n	800d568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b04      	cmp	r3, #4
 800d4ac:	d149      	bne.n	800d542 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f857 	bl	800d570 <UART_WaitOnFlagUntilTimeout>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d03c      	beq.n	800d542 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d0:	e853 3f00 	ldrex	r3, [r3]
 800d4d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e6:	633b      	str	r3, [r7, #48]	; 0x30
 800d4e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4ee:	e841 2300 	strex	r3, r2, [r1]
 800d4f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1e6      	bne.n	800d4c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3308      	adds	r3, #8
 800d500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	60fb      	str	r3, [r7, #12]
   return(result);
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f023 0301 	bic.w	r3, r3, #1
 800d510:	64bb      	str	r3, [r7, #72]	; 0x48
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3308      	adds	r3, #8
 800d518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d51a:	61fa      	str	r2, [r7, #28]
 800d51c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	69b9      	ldr	r1, [r7, #24]
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	617b      	str	r3, [r7, #20]
   return(result);
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e5      	bne.n	800d4fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2220      	movs	r2, #32
 800d532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d53e:	2303      	movs	r3, #3
 800d540:	e012      	b.n	800d568 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2220      	movs	r2, #32
 800d546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2220      	movs	r2, #32
 800d54e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2200      	movs	r2, #0
 800d55c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3758      	adds	r7, #88	; 0x58
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	4613      	mov	r3, r2
 800d57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d580:	e049      	b.n	800d616 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d588:	d045      	beq.n	800d616 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d58a:	f7f7 f987 	bl	800489c <HAL_GetTick>
 800d58e:	4602      	mov	r2, r0
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	1ad3      	subs	r3, r2, r3
 800d594:	69ba      	ldr	r2, [r7, #24]
 800d596:	429a      	cmp	r2, r3
 800d598:	d302      	bcc.n	800d5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	e048      	b.n	800d636 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f003 0304 	and.w	r3, r3, #4
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d031      	beq.n	800d616 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	69db      	ldr	r3, [r3, #28]
 800d5b8:	f003 0308 	and.w	r3, r3, #8
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d110      	bne.n	800d5e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2208      	movs	r2, #8
 800d5c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f000 f839 	bl	800d640 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2208      	movs	r2, #8
 800d5d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e029      	b.n	800d636 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69db      	ldr	r3, [r3, #28]
 800d5e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5f0:	d111      	bne.n	800d616 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f000 f81f 	bl	800d640 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2220      	movs	r2, #32
 800d606:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d612:	2303      	movs	r3, #3
 800d614:	e00f      	b.n	800d636 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	69da      	ldr	r2, [r3, #28]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	4013      	ands	r3, r2
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	429a      	cmp	r2, r3
 800d624:	bf0c      	ite	eq
 800d626:	2301      	moveq	r3, #1
 800d628:	2300      	movne	r3, #0
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	461a      	mov	r2, r3
 800d62e:	79fb      	ldrb	r3, [r7, #7]
 800d630:	429a      	cmp	r2, r3
 800d632:	d0a6      	beq.n	800d582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d640:	b480      	push	{r7}
 800d642:	b095      	sub	sp, #84	; 0x54
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d65c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d666:	643b      	str	r3, [r7, #64]	; 0x40
 800d668:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d66c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d66e:	e841 2300 	strex	r3, r2, [r1]
 800d672:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e6      	bne.n	800d648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	3308      	adds	r3, #8
 800d680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	e853 3f00 	ldrex	r3, [r3]
 800d688:	61fb      	str	r3, [r7, #28]
   return(result);
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	4b1e      	ldr	r3, [pc, #120]	; (800d708 <UART_EndRxTransfer+0xc8>)
 800d68e:	4013      	ands	r3, r2
 800d690:	64bb      	str	r3, [r7, #72]	; 0x48
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3308      	adds	r3, #8
 800d698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d69a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d69c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d69e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d6a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6a2:	e841 2300 	strex	r3, r2, [r1]
 800d6a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1e5      	bne.n	800d67a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d118      	bne.n	800d6e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f023 0310 	bic.w	r3, r3, #16
 800d6ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6d4:	61bb      	str	r3, [r7, #24]
 800d6d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d8:	6979      	ldr	r1, [r7, #20]
 800d6da:	69ba      	ldr	r2, [r7, #24]
 800d6dc:	e841 2300 	strex	r3, r2, [r1]
 800d6e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1e6      	bne.n	800d6b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2220      	movs	r2, #32
 800d6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d6fc:	bf00      	nop
 800d6fe:	3754      	adds	r7, #84	; 0x54
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	effffffe 	.word	0xeffffffe

0800d70c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f7ff f856 	bl	800c7dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d730:	bf00      	nop
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	e853 3f00 	ldrex	r3, [r3]
 800d74c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d754:	61fb      	str	r3, [r7, #28]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	461a      	mov	r2, r3
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	61bb      	str	r3, [r7, #24]
 800d760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d762:	6979      	ldr	r1, [r7, #20]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	e841 2300 	strex	r3, r2, [r1]
 800d76a:	613b      	str	r3, [r7, #16]
   return(result);
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1e6      	bne.n	800d740 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2220      	movs	r2, #32
 800d776:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f7ff f821 	bl	800c7c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d786:	bf00      	nop
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d78e:	b480      	push	{r7}
 800d790:	b083      	sub	sp, #12
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b083      	sub	sp, #12
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7aa:	bf00      	nop
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b083      	sub	sp, #12
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
	...

0800d7cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d121      	bne.n	800d822 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	4b27      	ldr	r3, [pc, #156]	; (800d880 <FMC_SDRAM_Init+0xb4>)
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	6851      	ldr	r1, [r2, #4]
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	6892      	ldr	r2, [r2, #8]
 800d7ee:	4311      	orrs	r1, r2
 800d7f0:	683a      	ldr	r2, [r7, #0]
 800d7f2:	68d2      	ldr	r2, [r2, #12]
 800d7f4:	4311      	orrs	r1, r2
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	6912      	ldr	r2, [r2, #16]
 800d7fa:	4311      	orrs	r1, r2
 800d7fc:	683a      	ldr	r2, [r7, #0]
 800d7fe:	6952      	ldr	r2, [r2, #20]
 800d800:	4311      	orrs	r1, r2
 800d802:	683a      	ldr	r2, [r7, #0]
 800d804:	6992      	ldr	r2, [r2, #24]
 800d806:	4311      	orrs	r1, r2
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	69d2      	ldr	r2, [r2, #28]
 800d80c:	4311      	orrs	r1, r2
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	6a12      	ldr	r2, [r2, #32]
 800d812:	4311      	orrs	r1, r2
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d818:	430a      	orrs	r2, r1
 800d81a:	431a      	orrs	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e026      	b.n	800d870 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	69d9      	ldr	r1, [r3, #28]
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	6a1b      	ldr	r3, [r3, #32]
 800d832:	4319      	orrs	r1, r3
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d838:	430b      	orrs	r3, r1
 800d83a:	431a      	orrs	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	4b0e      	ldr	r3, [pc, #56]	; (800d880 <FMC_SDRAM_Init+0xb4>)
 800d846:	4013      	ands	r3, r2
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	6851      	ldr	r1, [r2, #4]
 800d84c:	683a      	ldr	r2, [r7, #0]
 800d84e:	6892      	ldr	r2, [r2, #8]
 800d850:	4311      	orrs	r1, r2
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	68d2      	ldr	r2, [r2, #12]
 800d856:	4311      	orrs	r1, r2
 800d858:	683a      	ldr	r2, [r7, #0]
 800d85a:	6912      	ldr	r2, [r2, #16]
 800d85c:	4311      	orrs	r1, r2
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	6952      	ldr	r2, [r2, #20]
 800d862:	4311      	orrs	r1, r2
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	6992      	ldr	r2, [r2, #24]
 800d868:	430a      	orrs	r2, r1
 800d86a:	431a      	orrs	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d870:	2300      	movs	r3, #0
}
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop
 800d880:	ffff8000 	.word	0xffff8000

0800d884 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d128      	bne.n	800d8e8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	1e59      	subs	r1, r3, #1
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	011b      	lsls	r3, r3, #4
 800d8ac:	4319      	orrs	r1, r3
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	3b01      	subs	r3, #1
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	4319      	orrs	r1, r3
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	031b      	lsls	r3, r3, #12
 800d8c0:	4319      	orrs	r1, r3
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	3b01      	subs	r3, #1
 800d8c8:	041b      	lsls	r3, r3, #16
 800d8ca:	4319      	orrs	r1, r3
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	3b01      	subs	r3, #1
 800d8d2:	051b      	lsls	r3, r3, #20
 800d8d4:	4319      	orrs	r1, r3
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	061b      	lsls	r3, r3, #24
 800d8de:	430b      	orrs	r3, r1
 800d8e0:	431a      	orrs	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	609a      	str	r2, [r3, #8]
 800d8e6:	e02d      	b.n	800d944 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	4b19      	ldr	r3, [pc, #100]	; (800d954 <FMC_SDRAM_Timing_Init+0xd0>)
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	68ba      	ldr	r2, [r7, #8]
 800d8f2:	68d2      	ldr	r2, [r2, #12]
 800d8f4:	3a01      	subs	r2, #1
 800d8f6:	0311      	lsls	r1, r2, #12
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	6952      	ldr	r2, [r2, #20]
 800d8fc:	3a01      	subs	r2, #1
 800d8fe:	0512      	lsls	r2, r2, #20
 800d900:	430a      	orrs	r2, r1
 800d902:	431a      	orrs	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	1e59      	subs	r1, r3, #1
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	011b      	lsls	r3, r3, #4
 800d91e:	4319      	orrs	r1, r3
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	3b01      	subs	r3, #1
 800d926:	021b      	lsls	r3, r3, #8
 800d928:	4319      	orrs	r1, r3
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	3b01      	subs	r3, #1
 800d930:	041b      	lsls	r3, r3, #16
 800d932:	4319      	orrs	r1, r3
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	699b      	ldr	r3, [r3, #24]
 800d938:	3b01      	subs	r3, #1
 800d93a:	061b      	lsls	r3, r3, #24
 800d93c:	430b      	orrs	r3, r1
 800d93e:	431a      	orrs	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	ff0f0fff 	.word	0xff0f0fff

0800d958 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	691a      	ldr	r2, [r3, #16]
 800d968:	4b0c      	ldr	r3, [pc, #48]	; (800d99c <FMC_SDRAM_SendCommand+0x44>)
 800d96a:	4013      	ands	r3, r2
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	6811      	ldr	r1, [r2, #0]
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	6852      	ldr	r2, [r2, #4]
 800d974:	4311      	orrs	r1, r2
 800d976:	68ba      	ldr	r2, [r7, #8]
 800d978:	6892      	ldr	r2, [r2, #8]
 800d97a:	3a01      	subs	r2, #1
 800d97c:	0152      	lsls	r2, r2, #5
 800d97e:	4311      	orrs	r1, r2
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	68d2      	ldr	r2, [r2, #12]
 800d984:	0252      	lsls	r2, r2, #9
 800d986:	430a      	orrs	r2, r1
 800d988:	431a      	orrs	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800d98e:	2300      	movs	r3, #0
}
 800d990:	4618      	mov	r0, r3
 800d992:	3714      	adds	r7, #20
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	ffc00000 	.word	0xffc00000

0800d9a0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b083      	sub	sp, #12
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	695a      	ldr	r2, [r3, #20]
 800d9ae:	4b07      	ldr	r3, [pc, #28]	; (800d9cc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800d9b0:	4013      	ands	r3, r2
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	0052      	lsls	r2, r2, #1
 800d9b6:	431a      	orrs	r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	ffffc001 	.word	0xffffc001

0800d9d0 <__NVIC_SetPriority>:
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	6039      	str	r1, [r7, #0]
 800d9da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d9dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	db0a      	blt.n	800d9fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	490c      	ldr	r1, [pc, #48]	; (800da1c <__NVIC_SetPriority+0x4c>)
 800d9ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9ee:	0112      	lsls	r2, r2, #4
 800d9f0:	b2d2      	uxtb	r2, r2
 800d9f2:	440b      	add	r3, r1
 800d9f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d9f8:	e00a      	b.n	800da10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4908      	ldr	r1, [pc, #32]	; (800da20 <__NVIC_SetPriority+0x50>)
 800da00:	88fb      	ldrh	r3, [r7, #6]
 800da02:	f003 030f 	and.w	r3, r3, #15
 800da06:	3b04      	subs	r3, #4
 800da08:	0112      	lsls	r2, r2, #4
 800da0a:	b2d2      	uxtb	r2, r2
 800da0c:	440b      	add	r3, r1
 800da0e:	761a      	strb	r2, [r3, #24]
}
 800da10:	bf00      	nop
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr
 800da1c:	e000e100 	.word	0xe000e100
 800da20:	e000ed00 	.word	0xe000ed00

0800da24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800da24:	b580      	push	{r7, lr}
 800da26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800da28:	2100      	movs	r1, #0
 800da2a:	f06f 0004 	mvn.w	r0, #4
 800da2e:	f7ff ffcf 	bl	800d9d0 <__NVIC_SetPriority>
#endif
}
 800da32:	bf00      	nop
 800da34:	bd80      	pop	{r7, pc}
	...

0800da38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da3e:	f3ef 8305 	mrs	r3, IPSR
 800da42:	603b      	str	r3, [r7, #0]
  return(result);
 800da44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da46:	2b00      	cmp	r3, #0
 800da48:	d003      	beq.n	800da52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800da4a:	f06f 0305 	mvn.w	r3, #5
 800da4e:	607b      	str	r3, [r7, #4]
 800da50:	e00c      	b.n	800da6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800da52:	4b0a      	ldr	r3, [pc, #40]	; (800da7c <osKernelInitialize+0x44>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d105      	bne.n	800da66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800da5a:	4b08      	ldr	r3, [pc, #32]	; (800da7c <osKernelInitialize+0x44>)
 800da5c:	2201      	movs	r2, #1
 800da5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da60:	2300      	movs	r3, #0
 800da62:	607b      	str	r3, [r7, #4]
 800da64:	e002      	b.n	800da6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da6c:	687b      	ldr	r3, [r7, #4]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	240010e0 	.word	0x240010e0

0800da80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da86:	f3ef 8305 	mrs	r3, IPSR
 800da8a:	603b      	str	r3, [r7, #0]
  return(result);
 800da8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d003      	beq.n	800da9a <osKernelStart+0x1a>
    stat = osErrorISR;
 800da92:	f06f 0305 	mvn.w	r3, #5
 800da96:	607b      	str	r3, [r7, #4]
 800da98:	e010      	b.n	800dabc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da9a:	4b0b      	ldr	r3, [pc, #44]	; (800dac8 <osKernelStart+0x48>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b01      	cmp	r3, #1
 800daa0:	d109      	bne.n	800dab6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800daa2:	f7ff ffbf 	bl	800da24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800daa6:	4b08      	ldr	r3, [pc, #32]	; (800dac8 <osKernelStart+0x48>)
 800daa8:	2202      	movs	r2, #2
 800daaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800daac:	f001 f866 	bl	800eb7c <vTaskStartScheduler>
      stat = osOK;
 800dab0:	2300      	movs	r3, #0
 800dab2:	607b      	str	r3, [r7, #4]
 800dab4:	e002      	b.n	800dabc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dab6:	f04f 33ff 	mov.w	r3, #4294967295
 800daba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dabc:	687b      	ldr	r3, [r7, #4]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3708      	adds	r7, #8
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	240010e0 	.word	0x240010e0

0800dacc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	; 0x38
 800dad0:	af04      	add	r7, sp, #16
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dadc:	f3ef 8305 	mrs	r3, IPSR
 800dae0:	617b      	str	r3, [r7, #20]
  return(result);
 800dae2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d17e      	bne.n	800dbe6 <osThreadNew+0x11a>
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d07b      	beq.n	800dbe6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800daee:	2380      	movs	r3, #128	; 0x80
 800daf0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800daf2:	2318      	movs	r3, #24
 800daf4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800daf6:	2300      	movs	r3, #0
 800daf8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dafa:	f04f 33ff 	mov.w	r3, #4294967295
 800dafe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d045      	beq.n	800db92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <osThreadNew+0x48>
        name = attr->name;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	699b      	ldr	r3, [r3, #24]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d002      	beq.n	800db22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d008      	beq.n	800db3a <osThreadNew+0x6e>
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	2b38      	cmp	r3, #56	; 0x38
 800db2c:	d805      	bhi.n	800db3a <osThreadNew+0x6e>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	f003 0301 	and.w	r3, r3, #1
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <osThreadNew+0x72>
        return (NULL);
 800db3a:	2300      	movs	r3, #0
 800db3c:	e054      	b.n	800dbe8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	695b      	ldr	r3, [r3, #20]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	089b      	lsrs	r3, r3, #2
 800db4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00e      	beq.n	800db74 <osThreadNew+0xa8>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	2b5b      	cmp	r3, #91	; 0x5b
 800db5c:	d90a      	bls.n	800db74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db62:	2b00      	cmp	r3, #0
 800db64:	d006      	beq.n	800db74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <osThreadNew+0xa8>
        mem = 1;
 800db6e:	2301      	movs	r3, #1
 800db70:	61bb      	str	r3, [r7, #24]
 800db72:	e010      	b.n	800db96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d10c      	bne.n	800db96 <osThreadNew+0xca>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d108      	bne.n	800db96 <osThreadNew+0xca>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	691b      	ldr	r3, [r3, #16]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d104      	bne.n	800db96 <osThreadNew+0xca>
          mem = 0;
 800db8c:	2300      	movs	r3, #0
 800db8e:	61bb      	str	r3, [r7, #24]
 800db90:	e001      	b.n	800db96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db92:	2300      	movs	r3, #0
 800db94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d110      	bne.n	800dbbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dba4:	9202      	str	r2, [sp, #8]
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	6a3a      	ldr	r2, [r7, #32]
 800dbb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f000 fe0c 	bl	800e7d0 <xTaskCreateStatic>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	613b      	str	r3, [r7, #16]
 800dbbc:	e013      	b.n	800dbe6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d110      	bne.n	800dbe6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	f107 0310 	add.w	r3, r7, #16
 800dbcc:	9301      	str	r3, [sp, #4]
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 fe57 	bl	800e88a <xTaskCreate>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d001      	beq.n	800dbe6 <osThreadNew+0x11a>
            hTask = NULL;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbe6:	693b      	ldr	r3, [r7, #16]
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3728      	adds	r7, #40	; 0x28
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf8:	f3ef 8305 	mrs	r3, IPSR
 800dbfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d003      	beq.n	800dc0c <osDelay+0x1c>
    stat = osErrorISR;
 800dc04:	f06f 0305 	mvn.w	r3, #5
 800dc08:	60fb      	str	r3, [r7, #12]
 800dc0a:	e007      	b.n	800dc1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d002      	beq.n	800dc1c <osDelay+0x2c>
      vTaskDelay(ticks);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 ff7c 	bl	800eb14 <vTaskDelay>
    }
  }

  return (stat);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	4a07      	ldr	r2, [pc, #28]	; (800dc54 <vApplicationGetIdleTaskMemory+0x2c>)
 800dc38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	4a06      	ldr	r2, [pc, #24]	; (800dc58 <vApplicationGetIdleTaskMemory+0x30>)
 800dc3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2280      	movs	r2, #128	; 0x80
 800dc44:	601a      	str	r2, [r3, #0]
}
 800dc46:	bf00      	nop
 800dc48:	3714      	adds	r7, #20
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
 800dc52:	bf00      	nop
 800dc54:	240010e4 	.word	0x240010e4
 800dc58:	24001140 	.word	0x24001140

0800dc5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	60f8      	str	r0, [r7, #12]
 800dc64:	60b9      	str	r1, [r7, #8]
 800dc66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	4a07      	ldr	r2, [pc, #28]	; (800dc88 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	4a06      	ldr	r2, [pc, #24]	; (800dc8c <vApplicationGetTimerTaskMemory+0x30>)
 800dc72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc7a:	601a      	str	r2, [r3, #0]
}
 800dc7c:	bf00      	nop
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr
 800dc88:	24001340 	.word	0x24001340
 800dc8c:	2400139c 	.word	0x2400139c

0800dc90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc90:	b480      	push	{r7}
 800dc92:	b083      	sub	sp, #12
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f103 0208 	add.w	r2, r3, #8
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f04f 32ff 	mov.w	r2, #4294967295
 800dca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f103 0208 	add.w	r2, r3, #8
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f103 0208 	add.w	r2, r3, #8
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dcc4:	bf00      	nop
 800dcc6:	370c      	adds	r7, #12
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dcde:	bf00      	nop
 800dce0:	370c      	adds	r7, #12
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcea:	b480      	push	{r7}
 800dcec:	b085      	sub	sp, #20
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dcfa:	683b      	ldr	r3, [r7, #0]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	689a      	ldr	r2, [r3, #8]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	683a      	ldr	r2, [r7, #0]
 800dd0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	601a      	str	r2, [r3, #0]
}
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr

0800dd32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd32:	b480      	push	{r7}
 800dd34:	b085      	sub	sp, #20
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd48:	d103      	bne.n	800dd52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	691b      	ldr	r3, [r3, #16]
 800dd4e:	60fb      	str	r3, [r7, #12]
 800dd50:	e00c      	b.n	800dd6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	3308      	adds	r3, #8
 800dd56:	60fb      	str	r3, [r7, #12]
 800dd58:	e002      	b.n	800dd60 <vListInsert+0x2e>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d2f6      	bcs.n	800dd5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	683a      	ldr	r2, [r7, #0]
 800dd86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	601a      	str	r2, [r3, #0]
}
 800dd98:	bf00      	nop
 800dd9a:	3714      	adds	r7, #20
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	6892      	ldr	r2, [r2, #8]
 800ddba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	6852      	ldr	r2, [r2, #4]
 800ddc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d103      	bne.n	800ddd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	689a      	ldr	r2, [r3, #8]
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2200      	movs	r2, #0
 800dddc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	1e5a      	subs	r2, r3, #1
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d10a      	bne.n	800de22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800de0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de10:	f383 8811 	msr	BASEPRI, r3
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	f3bf 8f4f 	dsb	sy
 800de1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800de1e:	bf00      	nop
 800de20:	e7fe      	b.n	800de20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de22:	f002 f84f 	bl	800fec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681a      	ldr	r2, [r3, #0]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de2e:	68f9      	ldr	r1, [r7, #12]
 800de30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de32:	fb01 f303 	mul.w	r3, r1, r3
 800de36:	441a      	add	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2200      	movs	r2, #0
 800de40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681a      	ldr	r2, [r3, #0]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de52:	3b01      	subs	r3, #1
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de58:	fb01 f303 	mul.w	r3, r1, r3
 800de5c:	441a      	add	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	22ff      	movs	r2, #255	; 0xff
 800de66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	22ff      	movs	r2, #255	; 0xff
 800de6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d114      	bne.n	800dea2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01a      	beq.n	800deb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	3310      	adds	r3, #16
 800de84:	4618      	mov	r0, r3
 800de86:	f001 f903 	bl	800f090 <xTaskRemoveFromEventList>
 800de8a:	4603      	mov	r3, r0
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d012      	beq.n	800deb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de90:	4b0c      	ldr	r3, [pc, #48]	; (800dec4 <xQueueGenericReset+0xcc>)
 800de92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de96:	601a      	str	r2, [r3, #0]
 800de98:	f3bf 8f4f 	dsb	sy
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	e009      	b.n	800deb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	3310      	adds	r3, #16
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fef2 	bl	800dc90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3324      	adds	r3, #36	; 0x24
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff feed 	bl	800dc90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800deb6:	f002 f835 	bl	800ff24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800deba:	2301      	movs	r3, #1
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}
 800dec4:	e000ed04 	.word	0xe000ed04

0800dec8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b08e      	sub	sp, #56	; 0x38
 800decc:	af02      	add	r7, sp, #8
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d10a      	bne.n	800def2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	f383 8811 	msr	BASEPRI, r3
 800dee4:	f3bf 8f6f 	isb	sy
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800deee:	bf00      	nop
 800def0:	e7fe      	b.n	800def0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10a      	bne.n	800df0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800def8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df0a:	bf00      	nop
 800df0c:	e7fe      	b.n	800df0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <xQueueGenericCreateStatic+0x52>
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d001      	beq.n	800df1e <xQueueGenericCreateStatic+0x56>
 800df1a:	2301      	movs	r3, #1
 800df1c:	e000      	b.n	800df20 <xQueueGenericCreateStatic+0x58>
 800df1e:	2300      	movs	r3, #0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	623b      	str	r3, [r7, #32]
}
 800df36:	bf00      	nop
 800df38:	e7fe      	b.n	800df38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <xQueueGenericCreateStatic+0x7e>
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d101      	bne.n	800df4a <xQueueGenericCreateStatic+0x82>
 800df46:	2301      	movs	r3, #1
 800df48:	e000      	b.n	800df4c <xQueueGenericCreateStatic+0x84>
 800df4a:	2300      	movs	r3, #0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10a      	bne.n	800df66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df54:	f383 8811 	msr	BASEPRI, r3
 800df58:	f3bf 8f6f 	isb	sy
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	61fb      	str	r3, [r7, #28]
}
 800df62:	bf00      	nop
 800df64:	e7fe      	b.n	800df64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df66:	2350      	movs	r3, #80	; 0x50
 800df68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	2b50      	cmp	r3, #80	; 0x50
 800df6e:	d00a      	beq.n	800df86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800df70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df74:	f383 8811 	msr	BASEPRI, r3
 800df78:	f3bf 8f6f 	isb	sy
 800df7c:	f3bf 8f4f 	dsb	sy
 800df80:	61bb      	str	r3, [r7, #24]
}
 800df82:	bf00      	nop
 800df84:	e7fe      	b.n	800df84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00d      	beq.n	800dfae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	2201      	movs	r2, #1
 800df96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800df9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	68b9      	ldr	r1, [r7, #8]
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 f805 	bl	800dfb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3730      	adds	r7, #48	; 0x30
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	607a      	str	r2, [r7, #4]
 800dfc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d103      	bne.n	800dfd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	69ba      	ldr	r2, [r7, #24]
 800dfd0:	601a      	str	r2, [r3, #0]
 800dfd2:	e002      	b.n	800dfda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	68ba      	ldr	r2, [r7, #8]
 800dfe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dfe6:	2101      	movs	r1, #1
 800dfe8:	69b8      	ldr	r0, [r7, #24]
 800dfea:	f7ff ff05 	bl	800ddf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dfee:	69bb      	ldr	r3, [r7, #24]
 800dff0:	78fa      	ldrb	r2, [r7, #3]
 800dff2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dff6:	bf00      	nop
 800dff8:	3710      	adds	r7, #16
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
	...

0800e000 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b08e      	sub	sp, #56	; 0x38
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e00e:	2300      	movs	r3, #0
 800e010:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10a      	bne.n	800e032 <xQueueGenericSend+0x32>
	__asm volatile
 800e01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e02e:	bf00      	nop
 800e030:	e7fe      	b.n	800e030 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d103      	bne.n	800e040 <xQueueGenericSend+0x40>
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d101      	bne.n	800e044 <xQueueGenericSend+0x44>
 800e040:	2301      	movs	r3, #1
 800e042:	e000      	b.n	800e046 <xQueueGenericSend+0x46>
 800e044:	2300      	movs	r3, #0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d10a      	bne.n	800e060 <xQueueGenericSend+0x60>
	__asm volatile
 800e04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e04e:	f383 8811 	msr	BASEPRI, r3
 800e052:	f3bf 8f6f 	isb	sy
 800e056:	f3bf 8f4f 	dsb	sy
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e05c:	bf00      	nop
 800e05e:	e7fe      	b.n	800e05e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b02      	cmp	r3, #2
 800e064:	d103      	bne.n	800e06e <xQueueGenericSend+0x6e>
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d101      	bne.n	800e072 <xQueueGenericSend+0x72>
 800e06e:	2301      	movs	r3, #1
 800e070:	e000      	b.n	800e074 <xQueueGenericSend+0x74>
 800e072:	2300      	movs	r3, #0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d10a      	bne.n	800e08e <xQueueGenericSend+0x8e>
	__asm volatile
 800e078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07c:	f383 8811 	msr	BASEPRI, r3
 800e080:	f3bf 8f6f 	isb	sy
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	623b      	str	r3, [r7, #32]
}
 800e08a:	bf00      	nop
 800e08c:	e7fe      	b.n	800e08c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e08e:	f001 f9bd 	bl	800f40c <xTaskGetSchedulerState>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d102      	bne.n	800e09e <xQueueGenericSend+0x9e>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <xQueueGenericSend+0xa2>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e000      	b.n	800e0a4 <xQueueGenericSend+0xa4>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10a      	bne.n	800e0be <xQueueGenericSend+0xbe>
	__asm volatile
 800e0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ac:	f383 8811 	msr	BASEPRI, r3
 800e0b0:	f3bf 8f6f 	isb	sy
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	61fb      	str	r3, [r7, #28]
}
 800e0ba:	bf00      	nop
 800e0bc:	e7fe      	b.n	800e0bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e0be:	f001 ff01 	bl	800fec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d302      	bcc.n	800e0d4 <xQueueGenericSend+0xd4>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d129      	bne.n	800e128 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0d4:	683a      	ldr	r2, [r7, #0]
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0da:	f000 fa0b 	bl	800e4f4 <prvCopyDataToQueue>
 800e0de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d010      	beq.n	800e10a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	3324      	adds	r3, #36	; 0x24
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f000 ffcf 	bl	800f090 <xTaskRemoveFromEventList>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d013      	beq.n	800e120 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e0f8:	4b3f      	ldr	r3, [pc, #252]	; (800e1f8 <xQueueGenericSend+0x1f8>)
 800e0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0fe:	601a      	str	r2, [r3, #0]
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	e00a      	b.n	800e120 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d007      	beq.n	800e120 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e110:	4b39      	ldr	r3, [pc, #228]	; (800e1f8 <xQueueGenericSend+0x1f8>)
 800e112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e116:	601a      	str	r2, [r3, #0]
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e120:	f001 ff00 	bl	800ff24 <vPortExitCritical>
				return pdPASS;
 800e124:	2301      	movs	r3, #1
 800e126:	e063      	b.n	800e1f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d103      	bne.n	800e136 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e12e:	f001 fef9 	bl	800ff24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e132:	2300      	movs	r3, #0
 800e134:	e05c      	b.n	800e1f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d106      	bne.n	800e14a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e13c:	f107 0314 	add.w	r3, r7, #20
 800e140:	4618      	mov	r0, r3
 800e142:	f001 f809 	bl	800f158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e146:	2301      	movs	r3, #1
 800e148:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e14a:	f001 feeb 	bl	800ff24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e14e:	f000 fd7b 	bl	800ec48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e152:	f001 feb7 	bl	800fec4 <vPortEnterCritical>
 800e156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e15c:	b25b      	sxtb	r3, r3
 800e15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e162:	d103      	bne.n	800e16c <xQueueGenericSend+0x16c>
 800e164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e172:	b25b      	sxtb	r3, r3
 800e174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e178:	d103      	bne.n	800e182 <xQueueGenericSend+0x182>
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	2200      	movs	r2, #0
 800e17e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e182:	f001 fecf 	bl	800ff24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e186:	1d3a      	adds	r2, r7, #4
 800e188:	f107 0314 	add.w	r3, r7, #20
 800e18c:	4611      	mov	r1, r2
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 fff8 	bl	800f184 <xTaskCheckForTimeOut>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d124      	bne.n	800e1e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e19a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e19c:	f000 faa2 	bl	800e6e4 <prvIsQueueFull>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d018      	beq.n	800e1d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a8:	3310      	adds	r3, #16
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f000 ff1e 	bl	800eff0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e1b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1b6:	f000 fa2d 	bl	800e614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e1ba:	f000 fd53 	bl	800ec64 <xTaskResumeAll>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	f47f af7c 	bne.w	800e0be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e1c6:	4b0c      	ldr	r3, [pc, #48]	; (800e1f8 <xQueueGenericSend+0x1f8>)
 800e1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1cc:	601a      	str	r2, [r3, #0]
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	e772      	b.n	800e0be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e1d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1da:	f000 fa1b 	bl	800e614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e1de:	f000 fd41 	bl	800ec64 <xTaskResumeAll>
 800e1e2:	e76c      	b.n	800e0be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e1e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e1e6:	f000 fa15 	bl	800e614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e1ea:	f000 fd3b 	bl	800ec64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e1ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3738      	adds	r7, #56	; 0x38
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	e000ed04 	.word	0xe000ed04

0800e1fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b090      	sub	sp, #64	; 0x40
 800e200:	af00      	add	r7, sp, #0
 800e202:	60f8      	str	r0, [r7, #12]
 800e204:	60b9      	str	r1, [r7, #8]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e210:	2b00      	cmp	r3, #0
 800e212:	d10a      	bne.n	800e22a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e226:	bf00      	nop
 800e228:	e7fe      	b.n	800e228 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d103      	bne.n	800e238 <xQueueGenericSendFromISR+0x3c>
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e234:	2b00      	cmp	r3, #0
 800e236:	d101      	bne.n	800e23c <xQueueGenericSendFromISR+0x40>
 800e238:	2301      	movs	r3, #1
 800e23a:	e000      	b.n	800e23e <xQueueGenericSendFromISR+0x42>
 800e23c:	2300      	movs	r3, #0
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10a      	bne.n	800e258 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e246:	f383 8811 	msr	BASEPRI, r3
 800e24a:	f3bf 8f6f 	isb	sy
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e254:	bf00      	nop
 800e256:	e7fe      	b.n	800e256 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	d103      	bne.n	800e266 <xQueueGenericSendFromISR+0x6a>
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e262:	2b01      	cmp	r3, #1
 800e264:	d101      	bne.n	800e26a <xQueueGenericSendFromISR+0x6e>
 800e266:	2301      	movs	r3, #1
 800e268:	e000      	b.n	800e26c <xQueueGenericSendFromISR+0x70>
 800e26a:	2300      	movs	r3, #0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d10a      	bne.n	800e286 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	623b      	str	r3, [r7, #32]
}
 800e282:	bf00      	nop
 800e284:	e7fe      	b.n	800e284 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e286:	f001 feff 	bl	8010088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e28a:	f3ef 8211 	mrs	r2, BASEPRI
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	61fa      	str	r2, [r7, #28]
 800e2a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e2a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e2a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d302      	bcc.n	800e2b8 <xQueueGenericSendFromISR+0xbc>
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d12f      	bne.n	800e318 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	68b9      	ldr	r1, [r7, #8]
 800e2cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e2ce:	f000 f911 	bl	800e4f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e2d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2da:	d112      	bne.n	800e302 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d016      	beq.n	800e312 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e6:	3324      	adds	r3, #36	; 0x24
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f000 fed1 	bl	800f090 <xTaskRemoveFromEventList>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00e      	beq.n	800e312 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00b      	beq.n	800e312 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
 800e300:	e007      	b.n	800e312 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e302:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e306:	3301      	adds	r3, #1
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	b25a      	sxtb	r2, r3
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e312:	2301      	movs	r3, #1
 800e314:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e316:	e001      	b.n	800e31c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e318:	2300      	movs	r3, #0
 800e31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e326:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3740      	adds	r7, #64	; 0x40
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
	...

0800e334 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b08c      	sub	sp, #48	; 0x30
 800e338:	af00      	add	r7, sp, #0
 800e33a:	60f8      	str	r0, [r7, #12]
 800e33c:	60b9      	str	r1, [r7, #8]
 800e33e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e340:	2300      	movs	r3, #0
 800e342:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10a      	bne.n	800e364 <xQueueReceive+0x30>
	__asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	623b      	str	r3, [r7, #32]
}
 800e360:	bf00      	nop
 800e362:	e7fe      	b.n	800e362 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d103      	bne.n	800e372 <xQueueReceive+0x3e>
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <xQueueReceive+0x42>
 800e372:	2301      	movs	r3, #1
 800e374:	e000      	b.n	800e378 <xQueueReceive+0x44>
 800e376:	2300      	movs	r3, #0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10a      	bne.n	800e392 <xQueueReceive+0x5e>
	__asm volatile
 800e37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	61fb      	str	r3, [r7, #28]
}
 800e38e:	bf00      	nop
 800e390:	e7fe      	b.n	800e390 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e392:	f001 f83b 	bl	800f40c <xTaskGetSchedulerState>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d102      	bne.n	800e3a2 <xQueueReceive+0x6e>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d101      	bne.n	800e3a6 <xQueueReceive+0x72>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e000      	b.n	800e3a8 <xQueueReceive+0x74>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d10a      	bne.n	800e3c2 <xQueueReceive+0x8e>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	61bb      	str	r3, [r7, #24]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e3c2:	f001 fd7f 	bl	800fec4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d01f      	beq.n	800e412 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e3d2:	68b9      	ldr	r1, [r7, #8]
 800e3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d6:	f000 f8f7 	bl	800e5c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	1e5a      	subs	r2, r3, #1
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e4:	691b      	ldr	r3, [r3, #16]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00f      	beq.n	800e40a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ec:	3310      	adds	r3, #16
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f000 fe4e 	bl	800f090 <xTaskRemoveFromEventList>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d007      	beq.n	800e40a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e3fa:	4b3d      	ldr	r3, [pc, #244]	; (800e4f0 <xQueueReceive+0x1bc>)
 800e3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	f3bf 8f4f 	dsb	sy
 800e406:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e40a:	f001 fd8b 	bl	800ff24 <vPortExitCritical>
				return pdPASS;
 800e40e:	2301      	movs	r3, #1
 800e410:	e069      	b.n	800e4e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e418:	f001 fd84 	bl	800ff24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e41c:	2300      	movs	r3, #0
 800e41e:	e062      	b.n	800e4e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	2b00      	cmp	r3, #0
 800e424:	d106      	bne.n	800e434 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e426:	f107 0310 	add.w	r3, r7, #16
 800e42a:	4618      	mov	r0, r3
 800e42c:	f000 fe94 	bl	800f158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e430:	2301      	movs	r3, #1
 800e432:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e434:	f001 fd76 	bl	800ff24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e438:	f000 fc06 	bl	800ec48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e43c:	f001 fd42 	bl	800fec4 <vPortEnterCritical>
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e446:	b25b      	sxtb	r3, r3
 800e448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e44c:	d103      	bne.n	800e456 <xQueueReceive+0x122>
 800e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e450:	2200      	movs	r2, #0
 800e452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e45c:	b25b      	sxtb	r3, r3
 800e45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e462:	d103      	bne.n	800e46c <xQueueReceive+0x138>
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	2200      	movs	r2, #0
 800e468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e46c:	f001 fd5a 	bl	800ff24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e470:	1d3a      	adds	r2, r7, #4
 800e472:	f107 0310 	add.w	r3, r7, #16
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 fe83 	bl	800f184 <xTaskCheckForTimeOut>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d123      	bne.n	800e4cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e486:	f000 f917 	bl	800e6b8 <prvIsQueueEmpty>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d017      	beq.n	800e4c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	3324      	adds	r3, #36	; 0x24
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	4611      	mov	r1, r2
 800e498:	4618      	mov	r0, r3
 800e49a:	f000 fda9 	bl	800eff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e49e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4a0:	f000 f8b8 	bl	800e614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e4a4:	f000 fbde 	bl	800ec64 <xTaskResumeAll>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d189      	bne.n	800e3c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e4ae:	4b10      	ldr	r3, [pc, #64]	; (800e4f0 <xQueueReceive+0x1bc>)
 800e4b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b4:	601a      	str	r2, [r3, #0]
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	e780      	b.n	800e3c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e4c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4c2:	f000 f8a7 	bl	800e614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e4c6:	f000 fbcd 	bl	800ec64 <xTaskResumeAll>
 800e4ca:	e77a      	b.n	800e3c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4ce:	f000 f8a1 	bl	800e614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e4d2:	f000 fbc7 	bl	800ec64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e4d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e4d8:	f000 f8ee 	bl	800e6b8 <prvIsQueueEmpty>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f43f af6f 	beq.w	800e3c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e4e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3730      	adds	r7, #48	; 0x30
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	e000ed04 	.word	0xe000ed04

0800e4f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e500:	2300      	movs	r3, #0
 800e502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d10d      	bne.n	800e52e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d14d      	bne.n	800e5b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	4618      	mov	r0, r3
 800e520:	f000 ff92 	bl	800f448 <xTaskPriorityDisinherit>
 800e524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	609a      	str	r2, [r3, #8]
 800e52c:	e043      	b.n	800e5b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d119      	bne.n	800e568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	6858      	ldr	r0, [r3, #4]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53c:	461a      	mov	r2, r3
 800e53e:	68b9      	ldr	r1, [r7, #8]
 800e540:	f002 fab3 	bl	8010aaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	685a      	ldr	r2, [r3, #4]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e54c:	441a      	add	r2, r3
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	689b      	ldr	r3, [r3, #8]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d32b      	bcc.n	800e5b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	605a      	str	r2, [r3, #4]
 800e566:	e026      	b.n	800e5b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	68d8      	ldr	r0, [r3, #12]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e570:	461a      	mov	r2, r3
 800e572:	68b9      	ldr	r1, [r7, #8]
 800e574:	f002 fa99 	bl	8010aaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	68da      	ldr	r2, [r3, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e580:	425b      	negs	r3, r3
 800e582:	441a      	add	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	68da      	ldr	r2, [r3, #12]
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	429a      	cmp	r2, r3
 800e592:	d207      	bcs.n	800e5a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	689a      	ldr	r2, [r3, #8]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e59c:	425b      	negs	r3, r3
 800e59e:	441a      	add	r2, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d105      	bne.n	800e5b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d002      	beq.n	800e5b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	3b01      	subs	r3, #1
 800e5b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e5b6:	693b      	ldr	r3, [r7, #16]
 800e5b8:	1c5a      	adds	r2, r3, #1
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e5be:	697b      	ldr	r3, [r7, #20]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d018      	beq.n	800e60c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68da      	ldr	r2, [r3, #12]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5e2:	441a      	add	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	68da      	ldr	r2, [r3, #12]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d303      	bcc.n	800e5fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68d9      	ldr	r1, [r3, #12]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e604:	461a      	mov	r2, r3
 800e606:	6838      	ldr	r0, [r7, #0]
 800e608:	f002 fa4f 	bl	8010aaa <memcpy>
	}
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e61c:	f001 fc52 	bl	800fec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e628:	e011      	b.n	800e64e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d012      	beq.n	800e658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	3324      	adds	r3, #36	; 0x24
 800e636:	4618      	mov	r0, r3
 800e638:	f000 fd2a 	bl	800f090 <xTaskRemoveFromEventList>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e642:	f000 fe01 	bl	800f248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	3b01      	subs	r3, #1
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e652:	2b00      	cmp	r3, #0
 800e654:	dce9      	bgt.n	800e62a <prvUnlockQueue+0x16>
 800e656:	e000      	b.n	800e65a <prvUnlockQueue+0x46>
					break;
 800e658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	22ff      	movs	r2, #255	; 0xff
 800e65e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e662:	f001 fc5f 	bl	800ff24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e666:	f001 fc2d 	bl	800fec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e672:	e011      	b.n	800e698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d012      	beq.n	800e6a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	3310      	adds	r3, #16
 800e680:	4618      	mov	r0, r3
 800e682:	f000 fd05 	bl	800f090 <xTaskRemoveFromEventList>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e68c:	f000 fddc 	bl	800f248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e690:	7bbb      	ldrb	r3, [r7, #14]
 800e692:	3b01      	subs	r3, #1
 800e694:	b2db      	uxtb	r3, r3
 800e696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	dce9      	bgt.n	800e674 <prvUnlockQueue+0x60>
 800e6a0:	e000      	b.n	800e6a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e6a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	22ff      	movs	r2, #255	; 0xff
 800e6a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e6ac:	f001 fc3a 	bl	800ff24 <vPortExitCritical>
}
 800e6b0:	bf00      	nop
 800e6b2:	3710      	adds	r7, #16
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6c0:	f001 fc00 	bl	800fec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	e001      	b.n	800e6d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6d6:	f001 fc25 	bl	800ff24 <vPortExitCritical>

	return xReturn;
 800e6da:	68fb      	ldr	r3, [r7, #12]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6ec:	f001 fbea 	bl	800fec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d102      	bne.n	800e702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	60fb      	str	r3, [r7, #12]
 800e700:	e001      	b.n	800e706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e702:	2300      	movs	r3, #0
 800e704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e706:	f001 fc0d 	bl	800ff24 <vPortExitCritical>

	return xReturn;
 800e70a:	68fb      	ldr	r3, [r7, #12]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e714:	b480      	push	{r7}
 800e716:	b085      	sub	sp, #20
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e71e:	2300      	movs	r3, #0
 800e720:	60fb      	str	r3, [r7, #12]
 800e722:	e014      	b.n	800e74e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e724:	4a0f      	ldr	r2, [pc, #60]	; (800e764 <vQueueAddToRegistry+0x50>)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10b      	bne.n	800e748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e730:	490c      	ldr	r1, [pc, #48]	; (800e764 <vQueueAddToRegistry+0x50>)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	683a      	ldr	r2, [r7, #0]
 800e736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e73a:	4a0a      	ldr	r2, [pc, #40]	; (800e764 <vQueueAddToRegistry+0x50>)
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	00db      	lsls	r3, r3, #3
 800e740:	4413      	add	r3, r2
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e746:	e006      	b.n	800e756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	60fb      	str	r3, [r7, #12]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2b07      	cmp	r3, #7
 800e752:	d9e7      	bls.n	800e724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e754:	bf00      	nop
 800e756:	bf00      	nop
 800e758:	3714      	adds	r7, #20
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	2400179c 	.word	0x2400179c

0800e768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e778:	f001 fba4 	bl	800fec4 <vPortEnterCritical>
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e782:	b25b      	sxtb	r3, r3
 800e784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e788:	d103      	bne.n	800e792 <vQueueWaitForMessageRestricted+0x2a>
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e798:	b25b      	sxtb	r3, r3
 800e79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79e:	d103      	bne.n	800e7a8 <vQueueWaitForMessageRestricted+0x40>
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7a8:	f001 fbbc 	bl	800ff24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d106      	bne.n	800e7c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	3324      	adds	r3, #36	; 0x24
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fc3b 	bl	800f038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e7c2:	6978      	ldr	r0, [r7, #20]
 800e7c4:	f7ff ff26 	bl	800e614 <prvUnlockQueue>
	}
 800e7c8:	bf00      	nop
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b08e      	sub	sp, #56	; 0x38
 800e7d4:	af04      	add	r7, sp, #16
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
 800e7dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d10a      	bne.n	800e7fa <xTaskCreateStatic+0x2a>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	623b      	str	r3, [r7, #32]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d10a      	bne.n	800e816 <xTaskCreateStatic+0x46>
	__asm volatile
 800e800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e804:	f383 8811 	msr	BASEPRI, r3
 800e808:	f3bf 8f6f 	isb	sy
 800e80c:	f3bf 8f4f 	dsb	sy
 800e810:	61fb      	str	r3, [r7, #28]
}
 800e812:	bf00      	nop
 800e814:	e7fe      	b.n	800e814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e816:	235c      	movs	r3, #92	; 0x5c
 800e818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	2b5c      	cmp	r3, #92	; 0x5c
 800e81e:	d00a      	beq.n	800e836 <xTaskCreateStatic+0x66>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e824:	f383 8811 	msr	BASEPRI, r3
 800e828:	f3bf 8f6f 	isb	sy
 800e82c:	f3bf 8f4f 	dsb	sy
 800e830:	61bb      	str	r3, [r7, #24]
}
 800e832:	bf00      	nop
 800e834:	e7fe      	b.n	800e834 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d01e      	beq.n	800e87c <xTaskCreateStatic+0xac>
 800e83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e840:	2b00      	cmp	r3, #0
 800e842:	d01b      	beq.n	800e87c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e84c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e850:	2202      	movs	r2, #2
 800e852:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e856:	2300      	movs	r3, #0
 800e858:	9303      	str	r3, [sp, #12]
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	9302      	str	r3, [sp, #8]
 800e85e:	f107 0314 	add.w	r3, r7, #20
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e866:	9300      	str	r3, [sp, #0]
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	68b9      	ldr	r1, [r7, #8]
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f000 f850 	bl	800e914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e876:	f000 f8dd 	bl	800ea34 <prvAddNewTaskToReadyList>
 800e87a:	e001      	b.n	800e880 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e87c:	2300      	movs	r3, #0
 800e87e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e880:	697b      	ldr	r3, [r7, #20]
	}
 800e882:	4618      	mov	r0, r3
 800e884:	3728      	adds	r7, #40	; 0x28
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b08c      	sub	sp, #48	; 0x30
 800e88e:	af04      	add	r7, sp, #16
 800e890:	60f8      	str	r0, [r7, #12]
 800e892:	60b9      	str	r1, [r7, #8]
 800e894:	603b      	str	r3, [r7, #0]
 800e896:	4613      	mov	r3, r2
 800e898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e89a:	88fb      	ldrh	r3, [r7, #6]
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f001 fc32 	bl	8010108 <pvPortMalloc>
 800e8a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00e      	beq.n	800e8ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e8ac:	205c      	movs	r0, #92	; 0x5c
 800e8ae:	f001 fc2b 	bl	8010108 <pvPortMalloc>
 800e8b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	697a      	ldr	r2, [r7, #20]
 800e8be:	631a      	str	r2, [r3, #48]	; 0x30
 800e8c0:	e005      	b.n	800e8ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e8c2:	6978      	ldr	r0, [r7, #20]
 800e8c4:	f001 fcec 	bl	80102a0 <vPortFree>
 800e8c8:	e001      	b.n	800e8ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d017      	beq.n	800e904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e8d4:	69fb      	ldr	r3, [r7, #28]
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e8dc:	88fa      	ldrh	r2, [r7, #6]
 800e8de:	2300      	movs	r3, #0
 800e8e0:	9303      	str	r3, [sp, #12]
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	9302      	str	r3, [sp, #8]
 800e8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	68b9      	ldr	r1, [r7, #8]
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f000 f80e 	bl	800e914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8f8:	69f8      	ldr	r0, [r7, #28]
 800e8fa:	f000 f89b 	bl	800ea34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e8fe:	2301      	movs	r3, #1
 800e900:	61bb      	str	r3, [r7, #24]
 800e902:	e002      	b.n	800e90a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e904:	f04f 33ff 	mov.w	r3, #4294967295
 800e908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e90a:	69bb      	ldr	r3, [r7, #24]
	}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3720      	adds	r7, #32
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	607a      	str	r2, [r7, #4]
 800e920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	461a      	mov	r2, r3
 800e92c:	21a5      	movs	r1, #165	; 0xa5
 800e92e:	f002 f814 	bl	801095a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e93c:	440b      	add	r3, r1
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	4413      	add	r3, r2
 800e942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	f023 0307 	bic.w	r3, r3, #7
 800e94a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e94c:	69bb      	ldr	r3, [r7, #24]
 800e94e:	f003 0307 	and.w	r3, r3, #7
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00a      	beq.n	800e96c <prvInitialiseNewTask+0x58>
	__asm volatile
 800e956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95a:	f383 8811 	msr	BASEPRI, r3
 800e95e:	f3bf 8f6f 	isb	sy
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	617b      	str	r3, [r7, #20]
}
 800e968:	bf00      	nop
 800e96a:	e7fe      	b.n	800e96a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d01f      	beq.n	800e9b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e972:	2300      	movs	r3, #0
 800e974:	61fb      	str	r3, [r7, #28]
 800e976:	e012      	b.n	800e99e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e978:	68ba      	ldr	r2, [r7, #8]
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	4413      	add	r3, r2
 800e97e:	7819      	ldrb	r1, [r3, #0]
 800e980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	4413      	add	r3, r2
 800e986:	3334      	adds	r3, #52	; 0x34
 800e988:	460a      	mov	r2, r1
 800e98a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e98c:	68ba      	ldr	r2, [r7, #8]
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	4413      	add	r3, r2
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d006      	beq.n	800e9a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e998:	69fb      	ldr	r3, [r7, #28]
 800e99a:	3301      	adds	r3, #1
 800e99c:	61fb      	str	r3, [r7, #28]
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	2b0f      	cmp	r3, #15
 800e9a2:	d9e9      	bls.n	800e978 <prvInitialiseNewTask+0x64>
 800e9a4:	e000      	b.n	800e9a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800e9a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e9b0:	e003      	b.n	800e9ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	2b37      	cmp	r3, #55	; 0x37
 800e9be:	d901      	bls.n	800e9c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e9c0:	2337      	movs	r3, #55	; 0x37
 800e9c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	3304      	adds	r3, #4
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff f978 	bl	800dcd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	3318      	adds	r3, #24
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f7ff f973 	bl	800dcd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ea00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea02:	2200      	movs	r2, #0
 800ea04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ea06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	68f9      	ldr	r1, [r7, #12]
 800ea12:	69b8      	ldr	r0, [r7, #24]
 800ea14:	f001 f928 	bl	800fc68 <pxPortInitialiseStack>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea2a:	bf00      	nop
 800ea2c:	3720      	adds	r7, #32
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
	...

0800ea34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea3c:	f001 fa42 	bl	800fec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea40:	4b2d      	ldr	r3, [pc, #180]	; (800eaf8 <prvAddNewTaskToReadyList+0xc4>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3301      	adds	r3, #1
 800ea46:	4a2c      	ldr	r2, [pc, #176]	; (800eaf8 <prvAddNewTaskToReadyList+0xc4>)
 800ea48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea4a:	4b2c      	ldr	r3, [pc, #176]	; (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d109      	bne.n	800ea66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea52:	4a2a      	ldr	r2, [pc, #168]	; (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea58:	4b27      	ldr	r3, [pc, #156]	; (800eaf8 <prvAddNewTaskToReadyList+0xc4>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d110      	bne.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea60:	f000 fc16 	bl	800f290 <prvInitialiseTaskLists>
 800ea64:	e00d      	b.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea66:	4b26      	ldr	r3, [pc, #152]	; (800eb00 <prvAddNewTaskToReadyList+0xcc>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea6e:	4b23      	ldr	r3, [pc, #140]	; (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	d802      	bhi.n	800ea82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea7c:	4a1f      	ldr	r2, [pc, #124]	; (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea82:	4b20      	ldr	r3, [pc, #128]	; (800eb04 <prvAddNewTaskToReadyList+0xd0>)
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	3301      	adds	r3, #1
 800ea88:	4a1e      	ldr	r2, [pc, #120]	; (800eb04 <prvAddNewTaskToReadyList+0xd0>)
 800ea8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea8c:	4b1d      	ldr	r3, [pc, #116]	; (800eb04 <prvAddNewTaskToReadyList+0xd0>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea98:	4b1b      	ldr	r3, [pc, #108]	; (800eb08 <prvAddNewTaskToReadyList+0xd4>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d903      	bls.n	800eaa8 <prvAddNewTaskToReadyList+0x74>
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa4:	4a18      	ldr	r2, [pc, #96]	; (800eb08 <prvAddNewTaskToReadyList+0xd4>)
 800eaa6:	6013      	str	r3, [r2, #0]
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eaac:	4613      	mov	r3, r2
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	009b      	lsls	r3, r3, #2
 800eab4:	4a15      	ldr	r2, [pc, #84]	; (800eb0c <prvAddNewTaskToReadyList+0xd8>)
 800eab6:	441a      	add	r2, r3
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	3304      	adds	r3, #4
 800eabc:	4619      	mov	r1, r3
 800eabe:	4610      	mov	r0, r2
 800eac0:	f7ff f913 	bl	800dcea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eac4:	f001 fa2e 	bl	800ff24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eac8:	4b0d      	ldr	r3, [pc, #52]	; (800eb00 <prvAddNewTaskToReadyList+0xcc>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00e      	beq.n	800eaee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ead0:	4b0a      	ldr	r3, [pc, #40]	; (800eafc <prvAddNewTaskToReadyList+0xc8>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eada:	429a      	cmp	r2, r3
 800eadc:	d207      	bcs.n	800eaee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eade:	4b0c      	ldr	r3, [pc, #48]	; (800eb10 <prvAddNewTaskToReadyList+0xdc>)
 800eae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eae4:	601a      	str	r2, [r3, #0]
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eaee:	bf00      	nop
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	24001cb0 	.word	0x24001cb0
 800eafc:	240017dc 	.word	0x240017dc
 800eb00:	24001cbc 	.word	0x24001cbc
 800eb04:	24001ccc 	.word	0x24001ccc
 800eb08:	24001cb8 	.word	0x24001cb8
 800eb0c:	240017e0 	.word	0x240017e0
 800eb10:	e000ed04 	.word	0xe000ed04

0800eb14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d017      	beq.n	800eb56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb26:	4b13      	ldr	r3, [pc, #76]	; (800eb74 <vTaskDelay+0x60>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d00a      	beq.n	800eb44 <vTaskDelay+0x30>
	__asm volatile
 800eb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb32:	f383 8811 	msr	BASEPRI, r3
 800eb36:	f3bf 8f6f 	isb	sy
 800eb3a:	f3bf 8f4f 	dsb	sy
 800eb3e:	60bb      	str	r3, [r7, #8]
}
 800eb40:	bf00      	nop
 800eb42:	e7fe      	b.n	800eb42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb44:	f000 f880 	bl	800ec48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb48:	2100      	movs	r1, #0
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fcea 	bl	800f524 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb50:	f000 f888 	bl	800ec64 <xTaskResumeAll>
 800eb54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d107      	bne.n	800eb6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eb5c:	4b06      	ldr	r3, [pc, #24]	; (800eb78 <vTaskDelay+0x64>)
 800eb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	f3bf 8f4f 	dsb	sy
 800eb68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb6c:	bf00      	nop
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	24001cd8 	.word	0x24001cd8
 800eb78:	e000ed04 	.word	0xe000ed04

0800eb7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08a      	sub	sp, #40	; 0x28
 800eb80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb82:	2300      	movs	r3, #0
 800eb84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb86:	2300      	movs	r3, #0
 800eb88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb8a:	463a      	mov	r2, r7
 800eb8c:	1d39      	adds	r1, r7, #4
 800eb8e:	f107 0308 	add.w	r3, r7, #8
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7ff f848 	bl	800dc28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb98:	6839      	ldr	r1, [r7, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	9202      	str	r2, [sp, #8]
 800eba0:	9301      	str	r3, [sp, #4]
 800eba2:	2300      	movs	r3, #0
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	2300      	movs	r3, #0
 800eba8:	460a      	mov	r2, r1
 800ebaa:	4921      	ldr	r1, [pc, #132]	; (800ec30 <vTaskStartScheduler+0xb4>)
 800ebac:	4821      	ldr	r0, [pc, #132]	; (800ec34 <vTaskStartScheduler+0xb8>)
 800ebae:	f7ff fe0f 	bl	800e7d0 <xTaskCreateStatic>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	4a20      	ldr	r2, [pc, #128]	; (800ec38 <vTaskStartScheduler+0xbc>)
 800ebb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebb8:	4b1f      	ldr	r3, [pc, #124]	; (800ec38 <vTaskStartScheduler+0xbc>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d002      	beq.n	800ebc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	617b      	str	r3, [r7, #20]
 800ebc4:	e001      	b.n	800ebca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d102      	bne.n	800ebd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebd0:	f000 fcfc 	bl	800f5cc <xTimerCreateTimerTask>
 800ebd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d116      	bne.n	800ec0a <vTaskStartScheduler+0x8e>
	__asm volatile
 800ebdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe0:	f383 8811 	msr	BASEPRI, r3
 800ebe4:	f3bf 8f6f 	isb	sy
 800ebe8:	f3bf 8f4f 	dsb	sy
 800ebec:	613b      	str	r3, [r7, #16]
}
 800ebee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ebf0:	4b12      	ldr	r3, [pc, #72]	; (800ec3c <vTaskStartScheduler+0xc0>)
 800ebf2:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ebf8:	4b11      	ldr	r3, [pc, #68]	; (800ec40 <vTaskStartScheduler+0xc4>)
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ebfe:	4b11      	ldr	r3, [pc, #68]	; (800ec44 <vTaskStartScheduler+0xc8>)
 800ec00:	2200      	movs	r2, #0
 800ec02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec04:	f001 f8bc 	bl	800fd80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec08:	e00e      	b.n	800ec28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec10:	d10a      	bne.n	800ec28 <vTaskStartScheduler+0xac>
	__asm volatile
 800ec12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec16:	f383 8811 	msr	BASEPRI, r3
 800ec1a:	f3bf 8f6f 	isb	sy
 800ec1e:	f3bf 8f4f 	dsb	sy
 800ec22:	60fb      	str	r3, [r7, #12]
}
 800ec24:	bf00      	nop
 800ec26:	e7fe      	b.n	800ec26 <vTaskStartScheduler+0xaa>
}
 800ec28:	bf00      	nop
 800ec2a:	3718      	adds	r7, #24
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	08011b10 	.word	0x08011b10
 800ec34:	0800f261 	.word	0x0800f261
 800ec38:	24001cd4 	.word	0x24001cd4
 800ec3c:	24001cd0 	.word	0x24001cd0
 800ec40:	24001cbc 	.word	0x24001cbc
 800ec44:	24001cb4 	.word	0x24001cb4

0800ec48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec48:	b480      	push	{r7}
 800ec4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec4c:	4b04      	ldr	r3, [pc, #16]	; (800ec60 <vTaskSuspendAll+0x18>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	3301      	adds	r3, #1
 800ec52:	4a03      	ldr	r2, [pc, #12]	; (800ec60 <vTaskSuspendAll+0x18>)
 800ec54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec56:	bf00      	nop
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	24001cd8 	.word	0x24001cd8

0800ec64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b084      	sub	sp, #16
 800ec68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec72:	4b42      	ldr	r3, [pc, #264]	; (800ed7c <xTaskResumeAll+0x118>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d10a      	bne.n	800ec90 <xTaskResumeAll+0x2c>
	__asm volatile
 800ec7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7e:	f383 8811 	msr	BASEPRI, r3
 800ec82:	f3bf 8f6f 	isb	sy
 800ec86:	f3bf 8f4f 	dsb	sy
 800ec8a:	603b      	str	r3, [r7, #0]
}
 800ec8c:	bf00      	nop
 800ec8e:	e7fe      	b.n	800ec8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec90:	f001 f918 	bl	800fec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ec94:	4b39      	ldr	r3, [pc, #228]	; (800ed7c <xTaskResumeAll+0x118>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	4a38      	ldr	r2, [pc, #224]	; (800ed7c <xTaskResumeAll+0x118>)
 800ec9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec9e:	4b37      	ldr	r3, [pc, #220]	; (800ed7c <xTaskResumeAll+0x118>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d162      	bne.n	800ed6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eca6:	4b36      	ldr	r3, [pc, #216]	; (800ed80 <xTaskResumeAll+0x11c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d05e      	beq.n	800ed6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecae:	e02f      	b.n	800ed10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecb0:	4b34      	ldr	r3, [pc, #208]	; (800ed84 <xTaskResumeAll+0x120>)
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	3318      	adds	r3, #24
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7ff f871 	bl	800dda4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	3304      	adds	r3, #4
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7ff f86c 	bl	800dda4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd0:	4b2d      	ldr	r3, [pc, #180]	; (800ed88 <xTaskResumeAll+0x124>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d903      	bls.n	800ece0 <xTaskResumeAll+0x7c>
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecdc:	4a2a      	ldr	r2, [pc, #168]	; (800ed88 <xTaskResumeAll+0x124>)
 800ecde:	6013      	str	r3, [r2, #0]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece4:	4613      	mov	r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	4a27      	ldr	r2, [pc, #156]	; (800ed8c <xTaskResumeAll+0x128>)
 800ecee:	441a      	add	r2, r3
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4610      	mov	r0, r2
 800ecf8:	f7fe fff7 	bl	800dcea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed00:	4b23      	ldr	r3, [pc, #140]	; (800ed90 <xTaskResumeAll+0x12c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d302      	bcc.n	800ed10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ed0a:	4b22      	ldr	r3, [pc, #136]	; (800ed94 <xTaskResumeAll+0x130>)
 800ed0c:	2201      	movs	r2, #1
 800ed0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed10:	4b1c      	ldr	r3, [pc, #112]	; (800ed84 <xTaskResumeAll+0x120>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d1cb      	bne.n	800ecb0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d001      	beq.n	800ed22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed1e:	f000 fb55 	bl	800f3cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed22:	4b1d      	ldr	r3, [pc, #116]	; (800ed98 <xTaskResumeAll+0x134>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d010      	beq.n	800ed50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed2e:	f000 f847 	bl	800edc0 <xTaskIncrementTick>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ed38:	4b16      	ldr	r3, [pc, #88]	; (800ed94 <xTaskResumeAll+0x130>)
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3b01      	subs	r3, #1
 800ed42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1f1      	bne.n	800ed2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ed4a:	4b13      	ldr	r3, [pc, #76]	; (800ed98 <xTaskResumeAll+0x134>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed50:	4b10      	ldr	r3, [pc, #64]	; (800ed94 <xTaskResumeAll+0x130>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d009      	beq.n	800ed6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed58:	2301      	movs	r3, #1
 800ed5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed5c:	4b0f      	ldr	r3, [pc, #60]	; (800ed9c <xTaskResumeAll+0x138>)
 800ed5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	f3bf 8f4f 	dsb	sy
 800ed68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed6c:	f001 f8da 	bl	800ff24 <vPortExitCritical>

	return xAlreadyYielded;
 800ed70:	68bb      	ldr	r3, [r7, #8]
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	24001cd8 	.word	0x24001cd8
 800ed80:	24001cb0 	.word	0x24001cb0
 800ed84:	24001c70 	.word	0x24001c70
 800ed88:	24001cb8 	.word	0x24001cb8
 800ed8c:	240017e0 	.word	0x240017e0
 800ed90:	240017dc 	.word	0x240017dc
 800ed94:	24001cc4 	.word	0x24001cc4
 800ed98:	24001cc0 	.word	0x24001cc0
 800ed9c:	e000ed04 	.word	0xe000ed04

0800eda0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800eda6:	4b05      	ldr	r3, [pc, #20]	; (800edbc <xTaskGetTickCount+0x1c>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edac:	687b      	ldr	r3, [r7, #4]
}
 800edae:	4618      	mov	r0, r3
 800edb0:	370c      	adds	r7, #12
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	24001cb4 	.word	0x24001cb4

0800edc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edca:	4b4f      	ldr	r3, [pc, #316]	; (800ef08 <xTaskIncrementTick+0x148>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f040 808f 	bne.w	800eef2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800edd4:	4b4d      	ldr	r3, [pc, #308]	; (800ef0c <xTaskIncrementTick+0x14c>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	3301      	adds	r3, #1
 800edda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800eddc:	4a4b      	ldr	r2, [pc, #300]	; (800ef0c <xTaskIncrementTick+0x14c>)
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d120      	bne.n	800ee2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ede8:	4b49      	ldr	r3, [pc, #292]	; (800ef10 <xTaskIncrementTick+0x150>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d00a      	beq.n	800ee08 <xTaskIncrementTick+0x48>
	__asm volatile
 800edf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf6:	f383 8811 	msr	BASEPRI, r3
 800edfa:	f3bf 8f6f 	isb	sy
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	603b      	str	r3, [r7, #0]
}
 800ee04:	bf00      	nop
 800ee06:	e7fe      	b.n	800ee06 <xTaskIncrementTick+0x46>
 800ee08:	4b41      	ldr	r3, [pc, #260]	; (800ef10 <xTaskIncrementTick+0x150>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	60fb      	str	r3, [r7, #12]
 800ee0e:	4b41      	ldr	r3, [pc, #260]	; (800ef14 <xTaskIncrementTick+0x154>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a3f      	ldr	r2, [pc, #252]	; (800ef10 <xTaskIncrementTick+0x150>)
 800ee14:	6013      	str	r3, [r2, #0]
 800ee16:	4a3f      	ldr	r2, [pc, #252]	; (800ef14 <xTaskIncrementTick+0x154>)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6013      	str	r3, [r2, #0]
 800ee1c:	4b3e      	ldr	r3, [pc, #248]	; (800ef18 <xTaskIncrementTick+0x158>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3301      	adds	r3, #1
 800ee22:	4a3d      	ldr	r2, [pc, #244]	; (800ef18 <xTaskIncrementTick+0x158>)
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	f000 fad1 	bl	800f3cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee2a:	4b3c      	ldr	r3, [pc, #240]	; (800ef1c <xTaskIncrementTick+0x15c>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d349      	bcc.n	800eec8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee34:	4b36      	ldr	r3, [pc, #216]	; (800ef10 <xTaskIncrementTick+0x150>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d104      	bne.n	800ee48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee3e:	4b37      	ldr	r3, [pc, #220]	; (800ef1c <xTaskIncrementTick+0x15c>)
 800ee40:	f04f 32ff 	mov.w	r2, #4294967295
 800ee44:	601a      	str	r2, [r3, #0]
					break;
 800ee46:	e03f      	b.n	800eec8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee48:	4b31      	ldr	r3, [pc, #196]	; (800ef10 <xTaskIncrementTick+0x150>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	685b      	ldr	r3, [r3, #4]
 800ee56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee58:	693a      	ldr	r2, [r7, #16]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d203      	bcs.n	800ee68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee60:	4a2e      	ldr	r2, [pc, #184]	; (800ef1c <xTaskIncrementTick+0x15c>)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee66:	e02f      	b.n	800eec8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	3304      	adds	r3, #4
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fe ff99 	bl	800dda4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d004      	beq.n	800ee84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	3318      	adds	r3, #24
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fe ff90 	bl	800dda4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee88:	4b25      	ldr	r3, [pc, #148]	; (800ef20 <xTaskIncrementTick+0x160>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	429a      	cmp	r2, r3
 800ee8e:	d903      	bls.n	800ee98 <xTaskIncrementTick+0xd8>
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee94:	4a22      	ldr	r2, [pc, #136]	; (800ef20 <xTaskIncrementTick+0x160>)
 800ee96:	6013      	str	r3, [r2, #0]
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	4413      	add	r3, r2
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4a1f      	ldr	r2, [pc, #124]	; (800ef24 <xTaskIncrementTick+0x164>)
 800eea6:	441a      	add	r2, r3
 800eea8:	68bb      	ldr	r3, [r7, #8]
 800eeaa:	3304      	adds	r3, #4
 800eeac:	4619      	mov	r1, r3
 800eeae:	4610      	mov	r0, r2
 800eeb0:	f7fe ff1b 	bl	800dcea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb8:	4b1b      	ldr	r3, [pc, #108]	; (800ef28 <xTaskIncrementTick+0x168>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d3b8      	bcc.n	800ee34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eec2:	2301      	movs	r3, #1
 800eec4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eec6:	e7b5      	b.n	800ee34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eec8:	4b17      	ldr	r3, [pc, #92]	; (800ef28 <xTaskIncrementTick+0x168>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eece:	4915      	ldr	r1, [pc, #84]	; (800ef24 <xTaskIncrementTick+0x164>)
 800eed0:	4613      	mov	r3, r2
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	4413      	add	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	440b      	add	r3, r1
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b01      	cmp	r3, #1
 800eede:	d901      	bls.n	800eee4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eee0:	2301      	movs	r3, #1
 800eee2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eee4:	4b11      	ldr	r3, [pc, #68]	; (800ef2c <xTaskIncrementTick+0x16c>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d007      	beq.n	800eefc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800eeec:	2301      	movs	r3, #1
 800eeee:	617b      	str	r3, [r7, #20]
 800eef0:	e004      	b.n	800eefc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eef2:	4b0f      	ldr	r3, [pc, #60]	; (800ef30 <xTaskIncrementTick+0x170>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	3301      	adds	r3, #1
 800eef8:	4a0d      	ldr	r2, [pc, #52]	; (800ef30 <xTaskIncrementTick+0x170>)
 800eefa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eefc:	697b      	ldr	r3, [r7, #20]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3718      	adds	r7, #24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	24001cd8 	.word	0x24001cd8
 800ef0c:	24001cb4 	.word	0x24001cb4
 800ef10:	24001c68 	.word	0x24001c68
 800ef14:	24001c6c 	.word	0x24001c6c
 800ef18:	24001cc8 	.word	0x24001cc8
 800ef1c:	24001cd0 	.word	0x24001cd0
 800ef20:	24001cb8 	.word	0x24001cb8
 800ef24:	240017e0 	.word	0x240017e0
 800ef28:	240017dc 	.word	0x240017dc
 800ef2c:	24001cc4 	.word	0x24001cc4
 800ef30:	24001cc0 	.word	0x24001cc0

0800ef34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef3a:	4b28      	ldr	r3, [pc, #160]	; (800efdc <vTaskSwitchContext+0xa8>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef42:	4b27      	ldr	r3, [pc, #156]	; (800efe0 <vTaskSwitchContext+0xac>)
 800ef44:	2201      	movs	r2, #1
 800ef46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef48:	e041      	b.n	800efce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ef4a:	4b25      	ldr	r3, [pc, #148]	; (800efe0 <vTaskSwitchContext+0xac>)
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef50:	4b24      	ldr	r3, [pc, #144]	; (800efe4 <vTaskSwitchContext+0xb0>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	60fb      	str	r3, [r7, #12]
 800ef56:	e010      	b.n	800ef7a <vTaskSwitchContext+0x46>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d10a      	bne.n	800ef74 <vTaskSwitchContext+0x40>
	__asm volatile
 800ef5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef62:	f383 8811 	msr	BASEPRI, r3
 800ef66:	f3bf 8f6f 	isb	sy
 800ef6a:	f3bf 8f4f 	dsb	sy
 800ef6e:	607b      	str	r3, [r7, #4]
}
 800ef70:	bf00      	nop
 800ef72:	e7fe      	b.n	800ef72 <vTaskSwitchContext+0x3e>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	3b01      	subs	r3, #1
 800ef78:	60fb      	str	r3, [r7, #12]
 800ef7a:	491b      	ldr	r1, [pc, #108]	; (800efe8 <vTaskSwitchContext+0xb4>)
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	4413      	add	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	440b      	add	r3, r1
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d0e4      	beq.n	800ef58 <vTaskSwitchContext+0x24>
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	4613      	mov	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	4413      	add	r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	4a13      	ldr	r2, [pc, #76]	; (800efe8 <vTaskSwitchContext+0xb4>)
 800ef9a:	4413      	add	r3, r2
 800ef9c:	60bb      	str	r3, [r7, #8]
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	605a      	str	r2, [r3, #4]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	3308      	adds	r3, #8
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d104      	bne.n	800efbe <vTaskSwitchContext+0x8a>
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	685b      	ldr	r3, [r3, #4]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	605a      	str	r2, [r3, #4]
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	4a09      	ldr	r2, [pc, #36]	; (800efec <vTaskSwitchContext+0xb8>)
 800efc6:	6013      	str	r3, [r2, #0]
 800efc8:	4a06      	ldr	r2, [pc, #24]	; (800efe4 <vTaskSwitchContext+0xb0>)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	6013      	str	r3, [r2, #0]
}
 800efce:	bf00      	nop
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	24001cd8 	.word	0x24001cd8
 800efe0:	24001cc4 	.word	0x24001cc4
 800efe4:	24001cb8 	.word	0x24001cb8
 800efe8:	240017e0 	.word	0x240017e0
 800efec:	240017dc 	.word	0x240017dc

0800eff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d10a      	bne.n	800f016 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f004:	f383 8811 	msr	BASEPRI, r3
 800f008:	f3bf 8f6f 	isb	sy
 800f00c:	f3bf 8f4f 	dsb	sy
 800f010:	60fb      	str	r3, [r7, #12]
}
 800f012:	bf00      	nop
 800f014:	e7fe      	b.n	800f014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f016:	4b07      	ldr	r3, [pc, #28]	; (800f034 <vTaskPlaceOnEventList+0x44>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	3318      	adds	r3, #24
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7fe fe87 	bl	800dd32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f024:	2101      	movs	r1, #1
 800f026:	6838      	ldr	r0, [r7, #0]
 800f028:	f000 fa7c 	bl	800f524 <prvAddCurrentTaskToDelayedList>
}
 800f02c:	bf00      	nop
 800f02e:	3710      	adds	r7, #16
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	240017dc 	.word	0x240017dc

0800f038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b086      	sub	sp, #24
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10a      	bne.n	800f060 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04e:	f383 8811 	msr	BASEPRI, r3
 800f052:	f3bf 8f6f 	isb	sy
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	617b      	str	r3, [r7, #20]
}
 800f05c:	bf00      	nop
 800f05e:	e7fe      	b.n	800f05e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f060:	4b0a      	ldr	r3, [pc, #40]	; (800f08c <vTaskPlaceOnEventListRestricted+0x54>)
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3318      	adds	r3, #24
 800f066:	4619      	mov	r1, r3
 800f068:	68f8      	ldr	r0, [r7, #12]
 800f06a:	f7fe fe3e 	bl	800dcea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f074:	f04f 33ff 	mov.w	r3, #4294967295
 800f078:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f07a:	6879      	ldr	r1, [r7, #4]
 800f07c:	68b8      	ldr	r0, [r7, #8]
 800f07e:	f000 fa51 	bl	800f524 <prvAddCurrentTaskToDelayedList>
	}
 800f082:	bf00      	nop
 800f084:	3718      	adds	r7, #24
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	240017dc 	.word	0x240017dc

0800f090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10a      	bne.n	800f0bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	60fb      	str	r3, [r7, #12]
}
 800f0b8:	bf00      	nop
 800f0ba:	e7fe      	b.n	800f0ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	3318      	adds	r3, #24
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe fe6f 	bl	800dda4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0c6:	4b1e      	ldr	r3, [pc, #120]	; (800f140 <xTaskRemoveFromEventList+0xb0>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d11d      	bne.n	800f10a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	3304      	adds	r3, #4
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe fe66 	bl	800dda4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0dc:	4b19      	ldr	r3, [pc, #100]	; (800f144 <xTaskRemoveFromEventList+0xb4>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d903      	bls.n	800f0ec <xTaskRemoveFromEventList+0x5c>
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e8:	4a16      	ldr	r2, [pc, #88]	; (800f144 <xTaskRemoveFromEventList+0xb4>)
 800f0ea:	6013      	str	r3, [r2, #0]
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4a13      	ldr	r2, [pc, #76]	; (800f148 <xTaskRemoveFromEventList+0xb8>)
 800f0fa:	441a      	add	r2, r3
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	3304      	adds	r3, #4
 800f100:	4619      	mov	r1, r3
 800f102:	4610      	mov	r0, r2
 800f104:	f7fe fdf1 	bl	800dcea <vListInsertEnd>
 800f108:	e005      	b.n	800f116 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	3318      	adds	r3, #24
 800f10e:	4619      	mov	r1, r3
 800f110:	480e      	ldr	r0, [pc, #56]	; (800f14c <xTaskRemoveFromEventList+0xbc>)
 800f112:	f7fe fdea 	bl	800dcea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f11a:	4b0d      	ldr	r3, [pc, #52]	; (800f150 <xTaskRemoveFromEventList+0xc0>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f120:	429a      	cmp	r2, r3
 800f122:	d905      	bls.n	800f130 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f124:	2301      	movs	r3, #1
 800f126:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f128:	4b0a      	ldr	r3, [pc, #40]	; (800f154 <xTaskRemoveFromEventList+0xc4>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	601a      	str	r2, [r3, #0]
 800f12e:	e001      	b.n	800f134 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f130:	2300      	movs	r3, #0
 800f132:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f134:	697b      	ldr	r3, [r7, #20]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3718      	adds	r7, #24
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	24001cd8 	.word	0x24001cd8
 800f144:	24001cb8 	.word	0x24001cb8
 800f148:	240017e0 	.word	0x240017e0
 800f14c:	24001c70 	.word	0x24001c70
 800f150:	240017dc 	.word	0x240017dc
 800f154:	24001cc4 	.word	0x24001cc4

0800f158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f160:	4b06      	ldr	r3, [pc, #24]	; (800f17c <vTaskInternalSetTimeOutState+0x24>)
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f168:	4b05      	ldr	r3, [pc, #20]	; (800f180 <vTaskInternalSetTimeOutState+0x28>)
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	605a      	str	r2, [r3, #4]
}
 800f170:	bf00      	nop
 800f172:	370c      	adds	r7, #12
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	24001cc8 	.word	0x24001cc8
 800f180:	24001cb4 	.word	0x24001cb4

0800f184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b088      	sub	sp, #32
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d10a      	bne.n	800f1aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f198:	f383 8811 	msr	BASEPRI, r3
 800f19c:	f3bf 8f6f 	isb	sy
 800f1a0:	f3bf 8f4f 	dsb	sy
 800f1a4:	613b      	str	r3, [r7, #16]
}
 800f1a6:	bf00      	nop
 800f1a8:	e7fe      	b.n	800f1a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10a      	bne.n	800f1c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	60fb      	str	r3, [r7, #12]
}
 800f1c2:	bf00      	nop
 800f1c4:	e7fe      	b.n	800f1c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f1c6:	f000 fe7d 	bl	800fec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1ca:	4b1d      	ldr	r3, [pc, #116]	; (800f240 <xTaskCheckForTimeOut+0xbc>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	69ba      	ldr	r2, [r7, #24]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1e2:	d102      	bne.n	800f1ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	61fb      	str	r3, [r7, #28]
 800f1e8:	e023      	b.n	800f232 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	4b15      	ldr	r3, [pc, #84]	; (800f244 <xTaskCheckForTimeOut+0xc0>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d007      	beq.n	800f206 <xTaskCheckForTimeOut+0x82>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	69ba      	ldr	r2, [r7, #24]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d302      	bcc.n	800f206 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f200:	2301      	movs	r3, #1
 800f202:	61fb      	str	r3, [r7, #28]
 800f204:	e015      	b.n	800f232 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d20b      	bcs.n	800f228 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	1ad2      	subs	r2, r2, r3
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f7ff ff9b 	bl	800f158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f222:	2300      	movs	r3, #0
 800f224:	61fb      	str	r3, [r7, #28]
 800f226:	e004      	b.n	800f232 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	2200      	movs	r2, #0
 800f22c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f22e:	2301      	movs	r3, #1
 800f230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f232:	f000 fe77 	bl	800ff24 <vPortExitCritical>

	return xReturn;
 800f236:	69fb      	ldr	r3, [r7, #28]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3720      	adds	r7, #32
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}
 800f240:	24001cb4 	.word	0x24001cb4
 800f244:	24001cc8 	.word	0x24001cc8

0800f248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f248:	b480      	push	{r7}
 800f24a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f24c:	4b03      	ldr	r3, [pc, #12]	; (800f25c <vTaskMissedYield+0x14>)
 800f24e:	2201      	movs	r2, #1
 800f250:	601a      	str	r2, [r3, #0]
}
 800f252:	bf00      	nop
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	24001cc4 	.word	0x24001cc4

0800f260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f268:	f000 f852 	bl	800f310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f26c:	4b06      	ldr	r3, [pc, #24]	; (800f288 <prvIdleTask+0x28>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b01      	cmp	r3, #1
 800f272:	d9f9      	bls.n	800f268 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f274:	4b05      	ldr	r3, [pc, #20]	; (800f28c <prvIdleTask+0x2c>)
 800f276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f27a:	601a      	str	r2, [r3, #0]
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f284:	e7f0      	b.n	800f268 <prvIdleTask+0x8>
 800f286:	bf00      	nop
 800f288:	240017e0 	.word	0x240017e0
 800f28c:	e000ed04 	.word	0xe000ed04

0800f290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f296:	2300      	movs	r3, #0
 800f298:	607b      	str	r3, [r7, #4]
 800f29a:	e00c      	b.n	800f2b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	4613      	mov	r3, r2
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4a12      	ldr	r2, [pc, #72]	; (800f2f0 <prvInitialiseTaskLists+0x60>)
 800f2a8:	4413      	add	r3, r2
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe fcf0 	bl	800dc90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	607b      	str	r3, [r7, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2b37      	cmp	r3, #55	; 0x37
 800f2ba:	d9ef      	bls.n	800f29c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2bc:	480d      	ldr	r0, [pc, #52]	; (800f2f4 <prvInitialiseTaskLists+0x64>)
 800f2be:	f7fe fce7 	bl	800dc90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2c2:	480d      	ldr	r0, [pc, #52]	; (800f2f8 <prvInitialiseTaskLists+0x68>)
 800f2c4:	f7fe fce4 	bl	800dc90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2c8:	480c      	ldr	r0, [pc, #48]	; (800f2fc <prvInitialiseTaskLists+0x6c>)
 800f2ca:	f7fe fce1 	bl	800dc90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2ce:	480c      	ldr	r0, [pc, #48]	; (800f300 <prvInitialiseTaskLists+0x70>)
 800f2d0:	f7fe fcde 	bl	800dc90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2d4:	480b      	ldr	r0, [pc, #44]	; (800f304 <prvInitialiseTaskLists+0x74>)
 800f2d6:	f7fe fcdb 	bl	800dc90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2da:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <prvInitialiseTaskLists+0x78>)
 800f2dc:	4a05      	ldr	r2, [pc, #20]	; (800f2f4 <prvInitialiseTaskLists+0x64>)
 800f2de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f2e0:	4b0a      	ldr	r3, [pc, #40]	; (800f30c <prvInitialiseTaskLists+0x7c>)
 800f2e2:	4a05      	ldr	r2, [pc, #20]	; (800f2f8 <prvInitialiseTaskLists+0x68>)
 800f2e4:	601a      	str	r2, [r3, #0]
}
 800f2e6:	bf00      	nop
 800f2e8:	3708      	adds	r7, #8
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	240017e0 	.word	0x240017e0
 800f2f4:	24001c40 	.word	0x24001c40
 800f2f8:	24001c54 	.word	0x24001c54
 800f2fc:	24001c70 	.word	0x24001c70
 800f300:	24001c84 	.word	0x24001c84
 800f304:	24001c9c 	.word	0x24001c9c
 800f308:	24001c68 	.word	0x24001c68
 800f30c:	24001c6c 	.word	0x24001c6c

0800f310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f316:	e019      	b.n	800f34c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f318:	f000 fdd4 	bl	800fec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f31c:	4b10      	ldr	r3, [pc, #64]	; (800f360 <prvCheckTasksWaitingTermination+0x50>)
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	3304      	adds	r3, #4
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fe fd3b 	bl	800dda4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f32e:	4b0d      	ldr	r3, [pc, #52]	; (800f364 <prvCheckTasksWaitingTermination+0x54>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3b01      	subs	r3, #1
 800f334:	4a0b      	ldr	r2, [pc, #44]	; (800f364 <prvCheckTasksWaitingTermination+0x54>)
 800f336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f338:	4b0b      	ldr	r3, [pc, #44]	; (800f368 <prvCheckTasksWaitingTermination+0x58>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	4a0a      	ldr	r2, [pc, #40]	; (800f368 <prvCheckTasksWaitingTermination+0x58>)
 800f340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f342:	f000 fdef 	bl	800ff24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 f810 	bl	800f36c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f34c:	4b06      	ldr	r3, [pc, #24]	; (800f368 <prvCheckTasksWaitingTermination+0x58>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1e1      	bne.n	800f318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f354:	bf00      	nop
 800f356:	bf00      	nop
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	24001c84 	.word	0x24001c84
 800f364:	24001cb0 	.word	0x24001cb0
 800f368:	24001c98 	.word	0x24001c98

0800f36c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d108      	bne.n	800f390 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f382:	4618      	mov	r0, r3
 800f384:	f000 ff8c 	bl	80102a0 <vPortFree>
				vPortFree( pxTCB );
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f000 ff89 	bl	80102a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f38e:	e018      	b.n	800f3c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f396:	2b01      	cmp	r3, #1
 800f398:	d103      	bne.n	800f3a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 ff80 	bl	80102a0 <vPortFree>
	}
 800f3a0:	e00f      	b.n	800f3c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f3a8:	2b02      	cmp	r3, #2
 800f3aa:	d00a      	beq.n	800f3c2 <prvDeleteTCB+0x56>
	__asm volatile
 800f3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3b0:	f383 8811 	msr	BASEPRI, r3
 800f3b4:	f3bf 8f6f 	isb	sy
 800f3b8:	f3bf 8f4f 	dsb	sy
 800f3bc:	60fb      	str	r3, [r7, #12]
}
 800f3be:	bf00      	nop
 800f3c0:	e7fe      	b.n	800f3c0 <prvDeleteTCB+0x54>
	}
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
	...

0800f3cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3d2:	4b0c      	ldr	r3, [pc, #48]	; (800f404 <prvResetNextTaskUnblockTime+0x38>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d104      	bne.n	800f3e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f3dc:	4b0a      	ldr	r3, [pc, #40]	; (800f408 <prvResetNextTaskUnblockTime+0x3c>)
 800f3de:	f04f 32ff 	mov.w	r2, #4294967295
 800f3e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f3e4:	e008      	b.n	800f3f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e6:	4b07      	ldr	r3, [pc, #28]	; (800f404 <prvResetNextTaskUnblockTime+0x38>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	4a04      	ldr	r2, [pc, #16]	; (800f408 <prvResetNextTaskUnblockTime+0x3c>)
 800f3f6:	6013      	str	r3, [r2, #0]
}
 800f3f8:	bf00      	nop
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr
 800f404:	24001c68 	.word	0x24001c68
 800f408:	24001cd0 	.word	0x24001cd0

0800f40c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f412:	4b0b      	ldr	r3, [pc, #44]	; (800f440 <xTaskGetSchedulerState+0x34>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d102      	bne.n	800f420 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f41a:	2301      	movs	r3, #1
 800f41c:	607b      	str	r3, [r7, #4]
 800f41e:	e008      	b.n	800f432 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f420:	4b08      	ldr	r3, [pc, #32]	; (800f444 <xTaskGetSchedulerState+0x38>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d102      	bne.n	800f42e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f428:	2302      	movs	r3, #2
 800f42a:	607b      	str	r3, [r7, #4]
 800f42c:	e001      	b.n	800f432 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f42e:	2300      	movs	r3, #0
 800f430:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f432:	687b      	ldr	r3, [r7, #4]
	}
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr
 800f440:	24001cbc 	.word	0x24001cbc
 800f444:	24001cd8 	.word	0x24001cd8

0800f448 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b086      	sub	sp, #24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f454:	2300      	movs	r3, #0
 800f456:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d056      	beq.n	800f50c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f45e:	4b2e      	ldr	r3, [pc, #184]	; (800f518 <xTaskPriorityDisinherit+0xd0>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	693a      	ldr	r2, [r7, #16]
 800f464:	429a      	cmp	r2, r3
 800f466:	d00a      	beq.n	800f47e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46c:	f383 8811 	msr	BASEPRI, r3
 800f470:	f3bf 8f6f 	isb	sy
 800f474:	f3bf 8f4f 	dsb	sy
 800f478:	60fb      	str	r3, [r7, #12]
}
 800f47a:	bf00      	nop
 800f47c:	e7fe      	b.n	800f47c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f482:	2b00      	cmp	r3, #0
 800f484:	d10a      	bne.n	800f49c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48a:	f383 8811 	msr	BASEPRI, r3
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	f3bf 8f4f 	dsb	sy
 800f496:	60bb      	str	r3, [r7, #8]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4a0:	1e5a      	subs	r2, r3, #1
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d02c      	beq.n	800f50c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d128      	bne.n	800f50c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	3304      	adds	r3, #4
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fe fc70 	bl	800dda4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4c8:	693b      	ldr	r3, [r7, #16]
 800f4ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4dc:	4b0f      	ldr	r3, [pc, #60]	; (800f51c <xTaskPriorityDisinherit+0xd4>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d903      	bls.n	800f4ec <xTaskPriorityDisinherit+0xa4>
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4e8:	4a0c      	ldr	r2, [pc, #48]	; (800f51c <xTaskPriorityDisinherit+0xd4>)
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	4413      	add	r3, r2
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4a09      	ldr	r2, [pc, #36]	; (800f520 <xTaskPriorityDisinherit+0xd8>)
 800f4fa:	441a      	add	r2, r3
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	3304      	adds	r3, #4
 800f500:	4619      	mov	r1, r3
 800f502:	4610      	mov	r0, r2
 800f504:	f7fe fbf1 	bl	800dcea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f508:	2301      	movs	r3, #1
 800f50a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f50c:	697b      	ldr	r3, [r7, #20]
	}
 800f50e:	4618      	mov	r0, r3
 800f510:	3718      	adds	r7, #24
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	240017dc 	.word	0x240017dc
 800f51c:	24001cb8 	.word	0x24001cb8
 800f520:	240017e0 	.word	0x240017e0

0800f524 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f52e:	4b21      	ldr	r3, [pc, #132]	; (800f5b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f534:	4b20      	ldr	r3, [pc, #128]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	3304      	adds	r3, #4
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fe fc32 	bl	800dda4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d10a      	bne.n	800f55e <prvAddCurrentTaskToDelayedList+0x3a>
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d007      	beq.n	800f55e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f54e:	4b1a      	ldr	r3, [pc, #104]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	3304      	adds	r3, #4
 800f554:	4619      	mov	r1, r3
 800f556:	4819      	ldr	r0, [pc, #100]	; (800f5bc <prvAddCurrentTaskToDelayedList+0x98>)
 800f558:	f7fe fbc7 	bl	800dcea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f55c:	e026      	b.n	800f5ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f55e:	68fa      	ldr	r2, [r7, #12]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4413      	add	r3, r2
 800f564:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f566:	4b14      	ldr	r3, [pc, #80]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	68ba      	ldr	r2, [r7, #8]
 800f56c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	429a      	cmp	r2, r3
 800f574:	d209      	bcs.n	800f58a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f576:	4b12      	ldr	r3, [pc, #72]	; (800f5c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	4b0f      	ldr	r3, [pc, #60]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	3304      	adds	r3, #4
 800f580:	4619      	mov	r1, r3
 800f582:	4610      	mov	r0, r2
 800f584:	f7fe fbd5 	bl	800dd32 <vListInsert>
}
 800f588:	e010      	b.n	800f5ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f58a:	4b0e      	ldr	r3, [pc, #56]	; (800f5c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	4b0a      	ldr	r3, [pc, #40]	; (800f5b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3304      	adds	r3, #4
 800f594:	4619      	mov	r1, r3
 800f596:	4610      	mov	r0, r2
 800f598:	f7fe fbcb 	bl	800dd32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f59c:	4b0a      	ldr	r3, [pc, #40]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68ba      	ldr	r2, [r7, #8]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d202      	bcs.n	800f5ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5a6:	4a08      	ldr	r2, [pc, #32]	; (800f5c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	6013      	str	r3, [r2, #0]
}
 800f5ac:	bf00      	nop
 800f5ae:	3710      	adds	r7, #16
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	24001cb4 	.word	0x24001cb4
 800f5b8:	240017dc 	.word	0x240017dc
 800f5bc:	24001c9c 	.word	0x24001c9c
 800f5c0:	24001c6c 	.word	0x24001c6c
 800f5c4:	24001c68 	.word	0x24001c68
 800f5c8:	24001cd0 	.word	0x24001cd0

0800f5cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b08a      	sub	sp, #40	; 0x28
 800f5d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f5d6:	f000 fb07 	bl	800fbe8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f5da:	4b1c      	ldr	r3, [pc, #112]	; (800f64c <xTimerCreateTimerTask+0x80>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d021      	beq.n	800f626 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f5ea:	1d3a      	adds	r2, r7, #4
 800f5ec:	f107 0108 	add.w	r1, r7, #8
 800f5f0:	f107 030c 	add.w	r3, r7, #12
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fe fb31 	bl	800dc5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f5fa:	6879      	ldr	r1, [r7, #4]
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	9202      	str	r2, [sp, #8]
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	2302      	movs	r3, #2
 800f606:	9300      	str	r3, [sp, #0]
 800f608:	2300      	movs	r3, #0
 800f60a:	460a      	mov	r2, r1
 800f60c:	4910      	ldr	r1, [pc, #64]	; (800f650 <xTimerCreateTimerTask+0x84>)
 800f60e:	4811      	ldr	r0, [pc, #68]	; (800f654 <xTimerCreateTimerTask+0x88>)
 800f610:	f7ff f8de 	bl	800e7d0 <xTaskCreateStatic>
 800f614:	4603      	mov	r3, r0
 800f616:	4a10      	ldr	r2, [pc, #64]	; (800f658 <xTimerCreateTimerTask+0x8c>)
 800f618:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f61a:	4b0f      	ldr	r3, [pc, #60]	; (800f658 <xTimerCreateTimerTask+0x8c>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d001      	beq.n	800f626 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f622:	2301      	movs	r3, #1
 800f624:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d10a      	bne.n	800f642 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	613b      	str	r3, [r7, #16]
}
 800f63e:	bf00      	nop
 800f640:	e7fe      	b.n	800f640 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f642:	697b      	ldr	r3, [r7, #20]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3718      	adds	r7, #24
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	24001d0c 	.word	0x24001d0c
 800f650:	08011b18 	.word	0x08011b18
 800f654:	0800f791 	.word	0x0800f791
 800f658:	24001d10 	.word	0x24001d10

0800f65c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b08a      	sub	sp, #40	; 0x28
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f66a:	2300      	movs	r3, #0
 800f66c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10a      	bne.n	800f68a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	623b      	str	r3, [r7, #32]
}
 800f686:	bf00      	nop
 800f688:	e7fe      	b.n	800f688 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f68a:	4b1a      	ldr	r3, [pc, #104]	; (800f6f4 <xTimerGenericCommand+0x98>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d02a      	beq.n	800f6e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	2b05      	cmp	r3, #5
 800f6a2:	dc18      	bgt.n	800f6d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6a4:	f7ff feb2 	bl	800f40c <xTaskGetSchedulerState>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b02      	cmp	r3, #2
 800f6ac:	d109      	bne.n	800f6c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6ae:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <xTimerGenericCommand+0x98>)
 800f6b0:	6818      	ldr	r0, [r3, #0]
 800f6b2:	f107 0110 	add.w	r1, r7, #16
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6ba:	f7fe fca1 	bl	800e000 <xQueueGenericSend>
 800f6be:	6278      	str	r0, [r7, #36]	; 0x24
 800f6c0:	e012      	b.n	800f6e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6c2:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <xTimerGenericCommand+0x98>)
 800f6c4:	6818      	ldr	r0, [r3, #0]
 800f6c6:	f107 0110 	add.w	r1, r7, #16
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f7fe fc97 	bl	800e000 <xQueueGenericSend>
 800f6d2:	6278      	str	r0, [r7, #36]	; 0x24
 800f6d4:	e008      	b.n	800f6e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f6d6:	4b07      	ldr	r3, [pc, #28]	; (800f6f4 <xTimerGenericCommand+0x98>)
 800f6d8:	6818      	ldr	r0, [r3, #0]
 800f6da:	f107 0110 	add.w	r1, r7, #16
 800f6de:	2300      	movs	r3, #0
 800f6e0:	683a      	ldr	r2, [r7, #0]
 800f6e2:	f7fe fd8b 	bl	800e1fc <xQueueGenericSendFromISR>
 800f6e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3728      	adds	r7, #40	; 0x28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	24001d0c 	.word	0x24001d0c

0800f6f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b088      	sub	sp, #32
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f702:	4b22      	ldr	r3, [pc, #136]	; (800f78c <prvProcessExpiredTimer+0x94>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	3304      	adds	r3, #4
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe fb47 	bl	800dda4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f71c:	f003 0304 	and.w	r3, r3, #4
 800f720:	2b00      	cmp	r3, #0
 800f722:	d022      	beq.n	800f76a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	699a      	ldr	r2, [r3, #24]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	18d1      	adds	r1, r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	683a      	ldr	r2, [r7, #0]
 800f730:	6978      	ldr	r0, [r7, #20]
 800f732:	f000 f8d1 	bl	800f8d8 <prvInsertTimerInActiveList>
 800f736:	4603      	mov	r3, r0
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d01f      	beq.n	800f77c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f73c:	2300      	movs	r3, #0
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	2300      	movs	r3, #0
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	2100      	movs	r1, #0
 800f746:	6978      	ldr	r0, [r7, #20]
 800f748:	f7ff ff88 	bl	800f65c <xTimerGenericCommand>
 800f74c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d113      	bne.n	800f77c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f758:	f383 8811 	msr	BASEPRI, r3
 800f75c:	f3bf 8f6f 	isb	sy
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	60fb      	str	r3, [r7, #12]
}
 800f766:	bf00      	nop
 800f768:	e7fe      	b.n	800f768 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f770:	f023 0301 	bic.w	r3, r3, #1
 800f774:	b2da      	uxtb	r2, r3
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	6a1b      	ldr	r3, [r3, #32]
 800f780:	6978      	ldr	r0, [r7, #20]
 800f782:	4798      	blx	r3
}
 800f784:	bf00      	nop
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}
 800f78c:	24001d04 	.word	0x24001d04

0800f790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f798:	f107 0308 	add.w	r3, r7, #8
 800f79c:	4618      	mov	r0, r3
 800f79e:	f000 f857 	bl	800f850 <prvGetNextExpireTime>
 800f7a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	68f8      	ldr	r0, [r7, #12]
 800f7aa:	f000 f803 	bl	800f7b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7ae:	f000 f8d5 	bl	800f95c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7b2:	e7f1      	b.n	800f798 <prvTimerTask+0x8>

0800f7b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7be:	f7ff fa43 	bl	800ec48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f7c2:	f107 0308 	add.w	r3, r7, #8
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f000 f866 	bl	800f898 <prvSampleTimeNow>
 800f7cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d130      	bne.n	800f836 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d10a      	bne.n	800f7f0 <prvProcessTimerOrBlockTask+0x3c>
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d806      	bhi.n	800f7f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f7e2:	f7ff fa3f 	bl	800ec64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f7e6:	68f9      	ldr	r1, [r7, #12]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7ff ff85 	bl	800f6f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f7ee:	e024      	b.n	800f83a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d008      	beq.n	800f808 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f7f6:	4b13      	ldr	r3, [pc, #76]	; (800f844 <prvProcessTimerOrBlockTask+0x90>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <prvProcessTimerOrBlockTask+0x50>
 800f800:	2301      	movs	r3, #1
 800f802:	e000      	b.n	800f806 <prvProcessTimerOrBlockTask+0x52>
 800f804:	2300      	movs	r3, #0
 800f806:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f808:	4b0f      	ldr	r3, [pc, #60]	; (800f848 <prvProcessTimerOrBlockTask+0x94>)
 800f80a:	6818      	ldr	r0, [r3, #0]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	1ad3      	subs	r3, r2, r3
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	4619      	mov	r1, r3
 800f816:	f7fe ffa7 	bl	800e768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f81a:	f7ff fa23 	bl	800ec64 <xTaskResumeAll>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10a      	bne.n	800f83a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f824:	4b09      	ldr	r3, [pc, #36]	; (800f84c <prvProcessTimerOrBlockTask+0x98>)
 800f826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	f3bf 8f6f 	isb	sy
}
 800f834:	e001      	b.n	800f83a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f836:	f7ff fa15 	bl	800ec64 <xTaskResumeAll>
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	24001d08 	.word	0x24001d08
 800f848:	24001d0c 	.word	0x24001d0c
 800f84c:	e000ed04 	.word	0xe000ed04

0800f850 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f850:	b480      	push	{r7}
 800f852:	b085      	sub	sp, #20
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f858:	4b0e      	ldr	r3, [pc, #56]	; (800f894 <prvGetNextExpireTime+0x44>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <prvGetNextExpireTime+0x16>
 800f862:	2201      	movs	r2, #1
 800f864:	e000      	b.n	800f868 <prvGetNextExpireTime+0x18>
 800f866:	2200      	movs	r2, #0
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d105      	bne.n	800f880 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f874:	4b07      	ldr	r3, [pc, #28]	; (800f894 <prvGetNextExpireTime+0x44>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	68db      	ldr	r3, [r3, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	60fb      	str	r3, [r7, #12]
 800f87e:	e001      	b.n	800f884 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f880:	2300      	movs	r3, #0
 800f882:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f884:	68fb      	ldr	r3, [r7, #12]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	24001d04 	.word	0x24001d04

0800f898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8a0:	f7ff fa7e 	bl	800eda0 <xTaskGetTickCount>
 800f8a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8a6:	4b0b      	ldr	r3, [pc, #44]	; (800f8d4 <prvSampleTimeNow+0x3c>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d205      	bcs.n	800f8bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8b0:	f000 f936 	bl	800fb20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	e002      	b.n	800f8c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f8c2:	4a04      	ldr	r2, [pc, #16]	; (800f8d4 <prvSampleTimeNow+0x3c>)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	24001d14 	.word	0x24001d14

0800f8d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b086      	sub	sp, #24
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	68ba      	ldr	r2, [r7, #8]
 800f8ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d812      	bhi.n	800f924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	1ad2      	subs	r2, r2, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d302      	bcc.n	800f912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f90c:	2301      	movs	r3, #1
 800f90e:	617b      	str	r3, [r7, #20]
 800f910:	e01b      	b.n	800f94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f912:	4b10      	ldr	r3, [pc, #64]	; (800f954 <prvInsertTimerInActiveList+0x7c>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	3304      	adds	r3, #4
 800f91a:	4619      	mov	r1, r3
 800f91c:	4610      	mov	r0, r2
 800f91e:	f7fe fa08 	bl	800dd32 <vListInsert>
 800f922:	e012      	b.n	800f94a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d206      	bcs.n	800f93a <prvInsertTimerInActiveList+0x62>
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	683b      	ldr	r3, [r7, #0]
 800f930:	429a      	cmp	r2, r3
 800f932:	d302      	bcc.n	800f93a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f934:	2301      	movs	r3, #1
 800f936:	617b      	str	r3, [r7, #20]
 800f938:	e007      	b.n	800f94a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f93a:	4b07      	ldr	r3, [pc, #28]	; (800f958 <prvInsertTimerInActiveList+0x80>)
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	3304      	adds	r3, #4
 800f942:	4619      	mov	r1, r3
 800f944:	4610      	mov	r0, r2
 800f946:	f7fe f9f4 	bl	800dd32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f94a:	697b      	ldr	r3, [r7, #20]
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3718      	adds	r7, #24
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}
 800f954:	24001d08 	.word	0x24001d08
 800f958:	24001d04 	.word	0x24001d04

0800f95c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b08e      	sub	sp, #56	; 0x38
 800f960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f962:	e0ca      	b.n	800fafa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	da18      	bge.n	800f99c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f96a:	1d3b      	adds	r3, r7, #4
 800f96c:	3304      	adds	r3, #4
 800f96e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10a      	bne.n	800f98c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97a:	f383 8811 	msr	BASEPRI, r3
 800f97e:	f3bf 8f6f 	isb	sy
 800f982:	f3bf 8f4f 	dsb	sy
 800f986:	61fb      	str	r3, [r7, #28]
}
 800f988:	bf00      	nop
 800f98a:	e7fe      	b.n	800f98a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f992:	6850      	ldr	r0, [r2, #4]
 800f994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f996:	6892      	ldr	r2, [r2, #8]
 800f998:	4611      	mov	r1, r2
 800f99a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f2c0 80ab 	blt.w	800fafa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9aa:	695b      	ldr	r3, [r3, #20]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d004      	beq.n	800f9ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b2:	3304      	adds	r3, #4
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fe f9f5 	bl	800dda4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9ba:	463b      	mov	r3, r7
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff ff6b 	bl	800f898 <prvSampleTimeNow>
 800f9c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b09      	cmp	r3, #9
 800f9c8:	f200 8096 	bhi.w	800faf8 <prvProcessReceivedCommands+0x19c>
 800f9cc:	a201      	add	r2, pc, #4	; (adr r2, 800f9d4 <prvProcessReceivedCommands+0x78>)
 800f9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d2:	bf00      	nop
 800f9d4:	0800f9fd 	.word	0x0800f9fd
 800f9d8:	0800f9fd 	.word	0x0800f9fd
 800f9dc:	0800f9fd 	.word	0x0800f9fd
 800f9e0:	0800fa71 	.word	0x0800fa71
 800f9e4:	0800fa85 	.word	0x0800fa85
 800f9e8:	0800facf 	.word	0x0800facf
 800f9ec:	0800f9fd 	.word	0x0800f9fd
 800f9f0:	0800f9fd 	.word	0x0800f9fd
 800f9f4:	0800fa71 	.word	0x0800fa71
 800f9f8:	0800fa85 	.word	0x0800fa85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa02:	f043 0301 	orr.w	r3, r3, #1
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa0e:	68ba      	ldr	r2, [r7, #8]
 800fa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa12:	699b      	ldr	r3, [r3, #24]
 800fa14:	18d1      	adds	r1, r2, r3
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa1c:	f7ff ff5c 	bl	800f8d8 <prvInsertTimerInActiveList>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d069      	beq.n	800fafa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa28:	6a1b      	ldr	r3, [r3, #32]
 800fa2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa34:	f003 0304 	and.w	r3, r3, #4
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d05e      	beq.n	800fafa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa3c:	68ba      	ldr	r2, [r7, #8]
 800fa3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	441a      	add	r2, r3
 800fa44:	2300      	movs	r3, #0
 800fa46:	9300      	str	r3, [sp, #0]
 800fa48:	2300      	movs	r3, #0
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa4e:	f7ff fe05 	bl	800f65c <xTimerGenericCommand>
 800fa52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa54:	6a3b      	ldr	r3, [r7, #32]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d14f      	bne.n	800fafa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	61bb      	str	r3, [r7, #24]
}
 800fa6c:	bf00      	nop
 800fa6e:	e7fe      	b.n	800fa6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa76:	f023 0301 	bic.w	r3, r3, #1
 800fa7a:	b2da      	uxtb	r2, r3
 800fa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fa82:	e03a      	b.n	800fafa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fa8a:	f043 0301 	orr.w	r3, r3, #1
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	699b      	ldr	r3, [r3, #24]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d10a      	bne.n	800faba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800faa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa8:	f383 8811 	msr	BASEPRI, r3
 800faac:	f3bf 8f6f 	isb	sy
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	617b      	str	r3, [r7, #20]
}
 800fab6:	bf00      	nop
 800fab8:	e7fe      	b.n	800fab8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800faba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fabc:	699a      	ldr	r2, [r3, #24]
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	18d1      	adds	r1, r2, r3
 800fac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fac8:	f7ff ff06 	bl	800f8d8 <prvInsertTimerInActiveList>
					break;
 800facc:	e015      	b.n	800fafa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800face:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fad4:	f003 0302 	and.w	r3, r3, #2
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d103      	bne.n	800fae4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fade:	f000 fbdf 	bl	80102a0 <vPortFree>
 800fae2:	e00a      	b.n	800fafa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800faea:	f023 0301 	bic.w	r3, r3, #1
 800faee:	b2da      	uxtb	r2, r3
 800faf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800faf6:	e000      	b.n	800fafa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800faf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fafa:	4b08      	ldr	r3, [pc, #32]	; (800fb1c <prvProcessReceivedCommands+0x1c0>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	1d39      	adds	r1, r7, #4
 800fb00:	2200      	movs	r2, #0
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fe fc16 	bl	800e334 <xQueueReceive>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f47f af2a 	bne.w	800f964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb10:	bf00      	nop
 800fb12:	bf00      	nop
 800fb14:	3730      	adds	r7, #48	; 0x30
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	24001d0c 	.word	0x24001d0c

0800fb20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb26:	e048      	b.n	800fbba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb28:	4b2d      	ldr	r3, [pc, #180]	; (800fbe0 <prvSwitchTimerLists+0xc0>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb32:	4b2b      	ldr	r3, [pc, #172]	; (800fbe0 <prvSwitchTimerLists+0xc0>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	3304      	adds	r3, #4
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7fe f92f 	bl	800dda4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	6a1b      	ldr	r3, [r3, #32]
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb54:	f003 0304 	and.w	r3, r3, #4
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d02e      	beq.n	800fbba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	699b      	ldr	r3, [r3, #24]
 800fb60:	693a      	ldr	r2, [r7, #16]
 800fb62:	4413      	add	r3, r2
 800fb64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fb66:	68ba      	ldr	r2, [r7, #8]
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d90e      	bls.n	800fb8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	68ba      	ldr	r2, [r7, #8]
 800fb72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb7a:	4b19      	ldr	r3, [pc, #100]	; (800fbe0 <prvSwitchTimerLists+0xc0>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	3304      	adds	r3, #4
 800fb82:	4619      	mov	r1, r3
 800fb84:	4610      	mov	r0, r2
 800fb86:	f7fe f8d4 	bl	800dd32 <vListInsert>
 800fb8a:	e016      	b.n	800fbba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	9300      	str	r3, [sp, #0]
 800fb90:	2300      	movs	r3, #0
 800fb92:	693a      	ldr	r2, [r7, #16]
 800fb94:	2100      	movs	r1, #0
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f7ff fd60 	bl	800f65c <xTimerGenericCommand>
 800fb9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d10a      	bne.n	800fbba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba8:	f383 8811 	msr	BASEPRI, r3
 800fbac:	f3bf 8f6f 	isb	sy
 800fbb0:	f3bf 8f4f 	dsb	sy
 800fbb4:	603b      	str	r3, [r7, #0]
}
 800fbb6:	bf00      	nop
 800fbb8:	e7fe      	b.n	800fbb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fbba:	4b09      	ldr	r3, [pc, #36]	; (800fbe0 <prvSwitchTimerLists+0xc0>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1b1      	bne.n	800fb28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fbc4:	4b06      	ldr	r3, [pc, #24]	; (800fbe0 <prvSwitchTimerLists+0xc0>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fbca:	4b06      	ldr	r3, [pc, #24]	; (800fbe4 <prvSwitchTimerLists+0xc4>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a04      	ldr	r2, [pc, #16]	; (800fbe0 <prvSwitchTimerLists+0xc0>)
 800fbd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fbd2:	4a04      	ldr	r2, [pc, #16]	; (800fbe4 <prvSwitchTimerLists+0xc4>)
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	6013      	str	r3, [r2, #0]
}
 800fbd8:	bf00      	nop
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	24001d04 	.word	0x24001d04
 800fbe4:	24001d08 	.word	0x24001d08

0800fbe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fbee:	f000 f969 	bl	800fec4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fbf2:	4b15      	ldr	r3, [pc, #84]	; (800fc48 <prvCheckForValidListAndQueue+0x60>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d120      	bne.n	800fc3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fbfa:	4814      	ldr	r0, [pc, #80]	; (800fc4c <prvCheckForValidListAndQueue+0x64>)
 800fbfc:	f7fe f848 	bl	800dc90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc00:	4813      	ldr	r0, [pc, #76]	; (800fc50 <prvCheckForValidListAndQueue+0x68>)
 800fc02:	f7fe f845 	bl	800dc90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc06:	4b13      	ldr	r3, [pc, #76]	; (800fc54 <prvCheckForValidListAndQueue+0x6c>)
 800fc08:	4a10      	ldr	r2, [pc, #64]	; (800fc4c <prvCheckForValidListAndQueue+0x64>)
 800fc0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc0c:	4b12      	ldr	r3, [pc, #72]	; (800fc58 <prvCheckForValidListAndQueue+0x70>)
 800fc0e:	4a10      	ldr	r2, [pc, #64]	; (800fc50 <prvCheckForValidListAndQueue+0x68>)
 800fc10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc12:	2300      	movs	r3, #0
 800fc14:	9300      	str	r3, [sp, #0]
 800fc16:	4b11      	ldr	r3, [pc, #68]	; (800fc5c <prvCheckForValidListAndQueue+0x74>)
 800fc18:	4a11      	ldr	r2, [pc, #68]	; (800fc60 <prvCheckForValidListAndQueue+0x78>)
 800fc1a:	2110      	movs	r1, #16
 800fc1c:	200a      	movs	r0, #10
 800fc1e:	f7fe f953 	bl	800dec8 <xQueueGenericCreateStatic>
 800fc22:	4603      	mov	r3, r0
 800fc24:	4a08      	ldr	r2, [pc, #32]	; (800fc48 <prvCheckForValidListAndQueue+0x60>)
 800fc26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc28:	4b07      	ldr	r3, [pc, #28]	; (800fc48 <prvCheckForValidListAndQueue+0x60>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d005      	beq.n	800fc3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc30:	4b05      	ldr	r3, [pc, #20]	; (800fc48 <prvCheckForValidListAndQueue+0x60>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	490b      	ldr	r1, [pc, #44]	; (800fc64 <prvCheckForValidListAndQueue+0x7c>)
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fe fd6c 	bl	800e714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc3c:	f000 f972 	bl	800ff24 <vPortExitCritical>
}
 800fc40:	bf00      	nop
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	24001d0c 	.word	0x24001d0c
 800fc4c:	24001cdc 	.word	0x24001cdc
 800fc50:	24001cf0 	.word	0x24001cf0
 800fc54:	24001d04 	.word	0x24001d04
 800fc58:	24001d08 	.word	0x24001d08
 800fc5c:	24001db8 	.word	0x24001db8
 800fc60:	24001d18 	.word	0x24001d18
 800fc64:	08011b20 	.word	0x08011b20

0800fc68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3b04      	subs	r3, #4
 800fc78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	3b04      	subs	r3, #4
 800fc86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	f023 0201 	bic.w	r2, r3, #1
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	3b04      	subs	r3, #4
 800fc96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc98:	4a0c      	ldr	r2, [pc, #48]	; (800fccc <pxPortInitialiseStack+0x64>)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	3b14      	subs	r3, #20
 800fca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	3b04      	subs	r3, #4
 800fcae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f06f 0202 	mvn.w	r2, #2
 800fcb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	3b20      	subs	r3, #32
 800fcbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
}
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	3714      	adds	r7, #20
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr
 800fccc:	0800fcd1 	.word	0x0800fcd1

0800fcd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fcda:	4b12      	ldr	r3, [pc, #72]	; (800fd24 <prvTaskExitError+0x54>)
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce2:	d00a      	beq.n	800fcfa <prvTaskExitError+0x2a>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	60fb      	str	r3, [r7, #12]
}
 800fcf6:	bf00      	nop
 800fcf8:	e7fe      	b.n	800fcf8 <prvTaskExitError+0x28>
	__asm volatile
 800fcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfe:	f383 8811 	msr	BASEPRI, r3
 800fd02:	f3bf 8f6f 	isb	sy
 800fd06:	f3bf 8f4f 	dsb	sy
 800fd0a:	60bb      	str	r3, [r7, #8]
}
 800fd0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd0e:	bf00      	nop
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d0fc      	beq.n	800fd10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd16:	bf00      	nop
 800fd18:	bf00      	nop
 800fd1a:	3714      	adds	r7, #20
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr
 800fd24:	24000064 	.word	0x24000064
	...

0800fd30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd30:	4b07      	ldr	r3, [pc, #28]	; (800fd50 <pxCurrentTCBConst2>)
 800fd32:	6819      	ldr	r1, [r3, #0]
 800fd34:	6808      	ldr	r0, [r1, #0]
 800fd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3a:	f380 8809 	msr	PSP, r0
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f04f 0000 	mov.w	r0, #0
 800fd46:	f380 8811 	msr	BASEPRI, r0
 800fd4a:	4770      	bx	lr
 800fd4c:	f3af 8000 	nop.w

0800fd50 <pxCurrentTCBConst2>:
 800fd50:	240017dc 	.word	0x240017dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd54:	bf00      	nop
 800fd56:	bf00      	nop

0800fd58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd58:	4808      	ldr	r0, [pc, #32]	; (800fd7c <prvPortStartFirstTask+0x24>)
 800fd5a:	6800      	ldr	r0, [r0, #0]
 800fd5c:	6800      	ldr	r0, [r0, #0]
 800fd5e:	f380 8808 	msr	MSP, r0
 800fd62:	f04f 0000 	mov.w	r0, #0
 800fd66:	f380 8814 	msr	CONTROL, r0
 800fd6a:	b662      	cpsie	i
 800fd6c:	b661      	cpsie	f
 800fd6e:	f3bf 8f4f 	dsb	sy
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	df00      	svc	0
 800fd78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd7a:	bf00      	nop
 800fd7c:	e000ed08 	.word	0xe000ed08

0800fd80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b086      	sub	sp, #24
 800fd84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd86:	4b46      	ldr	r3, [pc, #280]	; (800fea0 <xPortStartScheduler+0x120>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a46      	ldr	r2, [pc, #280]	; (800fea4 <xPortStartScheduler+0x124>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d10a      	bne.n	800fda6 <xPortStartScheduler+0x26>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	613b      	str	r3, [r7, #16]
}
 800fda2:	bf00      	nop
 800fda4:	e7fe      	b.n	800fda4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fda6:	4b3e      	ldr	r3, [pc, #248]	; (800fea0 <xPortStartScheduler+0x120>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4a3f      	ldr	r2, [pc, #252]	; (800fea8 <xPortStartScheduler+0x128>)
 800fdac:	4293      	cmp	r3, r2
 800fdae:	d10a      	bne.n	800fdc6 <xPortStartScheduler+0x46>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	60fb      	str	r3, [r7, #12]
}
 800fdc2:	bf00      	nop
 800fdc4:	e7fe      	b.n	800fdc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fdc6:	4b39      	ldr	r3, [pc, #228]	; (800feac <xPortStartScheduler+0x12c>)
 800fdc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	22ff      	movs	r2, #255	; 0xff
 800fdd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fde0:	78fb      	ldrb	r3, [r7, #3]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	4b31      	ldr	r3, [pc, #196]	; (800feb0 <xPortStartScheduler+0x130>)
 800fdec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdee:	4b31      	ldr	r3, [pc, #196]	; (800feb4 <xPortStartScheduler+0x134>)
 800fdf0:	2207      	movs	r2, #7
 800fdf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdf4:	e009      	b.n	800fe0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fdf6:	4b2f      	ldr	r3, [pc, #188]	; (800feb4 <xPortStartScheduler+0x134>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	4a2d      	ldr	r2, [pc, #180]	; (800feb4 <xPortStartScheduler+0x134>)
 800fdfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe00:	78fb      	ldrb	r3, [r7, #3]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	005b      	lsls	r3, r3, #1
 800fe06:	b2db      	uxtb	r3, r3
 800fe08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe0a:	78fb      	ldrb	r3, [r7, #3]
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe12:	2b80      	cmp	r3, #128	; 0x80
 800fe14:	d0ef      	beq.n	800fdf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe16:	4b27      	ldr	r3, [pc, #156]	; (800feb4 <xPortStartScheduler+0x134>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f1c3 0307 	rsb	r3, r3, #7
 800fe1e:	2b04      	cmp	r3, #4
 800fe20:	d00a      	beq.n	800fe38 <xPortStartScheduler+0xb8>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	60bb      	str	r3, [r7, #8]
}
 800fe34:	bf00      	nop
 800fe36:	e7fe      	b.n	800fe36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe38:	4b1e      	ldr	r3, [pc, #120]	; (800feb4 <xPortStartScheduler+0x134>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	021b      	lsls	r3, r3, #8
 800fe3e:	4a1d      	ldr	r2, [pc, #116]	; (800feb4 <xPortStartScheduler+0x134>)
 800fe40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe42:	4b1c      	ldr	r3, [pc, #112]	; (800feb4 <xPortStartScheduler+0x134>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe4a:	4a1a      	ldr	r2, [pc, #104]	; (800feb4 <xPortStartScheduler+0x134>)
 800fe4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe56:	4b18      	ldr	r3, [pc, #96]	; (800feb8 <xPortStartScheduler+0x138>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a17      	ldr	r2, [pc, #92]	; (800feb8 <xPortStartScheduler+0x138>)
 800fe5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe62:	4b15      	ldr	r3, [pc, #84]	; (800feb8 <xPortStartScheduler+0x138>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a14      	ldr	r2, [pc, #80]	; (800feb8 <xPortStartScheduler+0x138>)
 800fe68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe6e:	f000 f8dd 	bl	801002c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe72:	4b12      	ldr	r3, [pc, #72]	; (800febc <xPortStartScheduler+0x13c>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe78:	f000 f8fc 	bl	8010074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe7c:	4b10      	ldr	r3, [pc, #64]	; (800fec0 <xPortStartScheduler+0x140>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4a0f      	ldr	r2, [pc, #60]	; (800fec0 <xPortStartScheduler+0x140>)
 800fe82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe88:	f7ff ff66 	bl	800fd58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe8c:	f7ff f852 	bl	800ef34 <vTaskSwitchContext>
	prvTaskExitError();
 800fe90:	f7ff ff1e 	bl	800fcd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe94:	2300      	movs	r3, #0
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3718      	adds	r7, #24
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}
 800fe9e:	bf00      	nop
 800fea0:	e000ed00 	.word	0xe000ed00
 800fea4:	410fc271 	.word	0x410fc271
 800fea8:	410fc270 	.word	0x410fc270
 800feac:	e000e400 	.word	0xe000e400
 800feb0:	24001e08 	.word	0x24001e08
 800feb4:	24001e0c 	.word	0x24001e0c
 800feb8:	e000ed20 	.word	0xe000ed20
 800febc:	24000064 	.word	0x24000064
 800fec0:	e000ef34 	.word	0xe000ef34

0800fec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	607b      	str	r3, [r7, #4]
}
 800fedc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fede:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <vPortEnterCritical+0x58>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3301      	adds	r3, #1
 800fee4:	4a0d      	ldr	r2, [pc, #52]	; (800ff1c <vPortEnterCritical+0x58>)
 800fee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fee8:	4b0c      	ldr	r3, [pc, #48]	; (800ff1c <vPortEnterCritical+0x58>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d10f      	bne.n	800ff10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fef0:	4b0b      	ldr	r3, [pc, #44]	; (800ff20 <vPortEnterCritical+0x5c>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00a      	beq.n	800ff10 <vPortEnterCritical+0x4c>
	__asm volatile
 800fefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefe:	f383 8811 	msr	BASEPRI, r3
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	f3bf 8f4f 	dsb	sy
 800ff0a:	603b      	str	r3, [r7, #0]
}
 800ff0c:	bf00      	nop
 800ff0e:	e7fe      	b.n	800ff0e <vPortEnterCritical+0x4a>
	}
}
 800ff10:	bf00      	nop
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	24000064 	.word	0x24000064
 800ff20:	e000ed04 	.word	0xe000ed04

0800ff24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff2a:	4b12      	ldr	r3, [pc, #72]	; (800ff74 <vPortExitCritical+0x50>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10a      	bne.n	800ff48 <vPortExitCritical+0x24>
	__asm volatile
 800ff32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	607b      	str	r3, [r7, #4]
}
 800ff44:	bf00      	nop
 800ff46:	e7fe      	b.n	800ff46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff48:	4b0a      	ldr	r3, [pc, #40]	; (800ff74 <vPortExitCritical+0x50>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	4a09      	ldr	r2, [pc, #36]	; (800ff74 <vPortExitCritical+0x50>)
 800ff50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff52:	4b08      	ldr	r3, [pc, #32]	; (800ff74 <vPortExitCritical+0x50>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d105      	bne.n	800ff66 <vPortExitCritical+0x42>
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f383 8811 	msr	BASEPRI, r3
}
 800ff64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff66:	bf00      	nop
 800ff68:	370c      	adds	r7, #12
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	24000064 	.word	0x24000064
	...

0800ff80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff80:	f3ef 8009 	mrs	r0, PSP
 800ff84:	f3bf 8f6f 	isb	sy
 800ff88:	4b15      	ldr	r3, [pc, #84]	; (800ffe0 <pxCurrentTCBConst>)
 800ff8a:	681a      	ldr	r2, [r3, #0]
 800ff8c:	f01e 0f10 	tst.w	lr, #16
 800ff90:	bf08      	it	eq
 800ff92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9a:	6010      	str	r0, [r2, #0]
 800ff9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ffa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ffa4:	f380 8811 	msr	BASEPRI, r0
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	f3bf 8f6f 	isb	sy
 800ffb0:	f7fe ffc0 	bl	800ef34 <vTaskSwitchContext>
 800ffb4:	f04f 0000 	mov.w	r0, #0
 800ffb8:	f380 8811 	msr	BASEPRI, r0
 800ffbc:	bc09      	pop	{r0, r3}
 800ffbe:	6819      	ldr	r1, [r3, #0]
 800ffc0:	6808      	ldr	r0, [r1, #0]
 800ffc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc6:	f01e 0f10 	tst.w	lr, #16
 800ffca:	bf08      	it	eq
 800ffcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ffd0:	f380 8809 	msr	PSP, r0
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	4770      	bx	lr
 800ffda:	bf00      	nop
 800ffdc:	f3af 8000 	nop.w

0800ffe0 <pxCurrentTCBConst>:
 800ffe0:	240017dc 	.word	0x240017dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ffe4:	bf00      	nop
 800ffe6:	bf00      	nop

0800ffe8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
	__asm volatile
 800ffee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff2:	f383 8811 	msr	BASEPRI, r3
 800fff6:	f3bf 8f6f 	isb	sy
 800fffa:	f3bf 8f4f 	dsb	sy
 800fffe:	607b      	str	r3, [r7, #4]
}
 8010000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010002:	f7fe fedd 	bl	800edc0 <xTaskIncrementTick>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	d003      	beq.n	8010014 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801000c:	4b06      	ldr	r3, [pc, #24]	; (8010028 <xPortSysTickHandler+0x40>)
 801000e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010012:	601a      	str	r2, [r3, #0]
 8010014:	2300      	movs	r3, #0
 8010016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	f383 8811 	msr	BASEPRI, r3
}
 801001e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010020:	bf00      	nop
 8010022:	3708      	adds	r7, #8
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	e000ed04 	.word	0xe000ed04

0801002c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801002c:	b480      	push	{r7}
 801002e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010030:	4b0b      	ldr	r3, [pc, #44]	; (8010060 <vPortSetupTimerInterrupt+0x34>)
 8010032:	2200      	movs	r2, #0
 8010034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010036:	4b0b      	ldr	r3, [pc, #44]	; (8010064 <vPortSetupTimerInterrupt+0x38>)
 8010038:	2200      	movs	r2, #0
 801003a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801003c:	4b0a      	ldr	r3, [pc, #40]	; (8010068 <vPortSetupTimerInterrupt+0x3c>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a0a      	ldr	r2, [pc, #40]	; (801006c <vPortSetupTimerInterrupt+0x40>)
 8010042:	fba2 2303 	umull	r2, r3, r2, r3
 8010046:	099b      	lsrs	r3, r3, #6
 8010048:	4a09      	ldr	r2, [pc, #36]	; (8010070 <vPortSetupTimerInterrupt+0x44>)
 801004a:	3b01      	subs	r3, #1
 801004c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801004e:	4b04      	ldr	r3, [pc, #16]	; (8010060 <vPortSetupTimerInterrupt+0x34>)
 8010050:	2207      	movs	r2, #7
 8010052:	601a      	str	r2, [r3, #0]
}
 8010054:	bf00      	nop
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	e000e010 	.word	0xe000e010
 8010064:	e000e018 	.word	0xe000e018
 8010068:	24000010 	.word	0x24000010
 801006c:	10624dd3 	.word	0x10624dd3
 8010070:	e000e014 	.word	0xe000e014

08010074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010084 <vPortEnableVFP+0x10>
 8010078:	6801      	ldr	r1, [r0, #0]
 801007a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801007e:	6001      	str	r1, [r0, #0]
 8010080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010082:	bf00      	nop
 8010084:	e000ed88 	.word	0xe000ed88

08010088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010088:	b480      	push	{r7}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801008e:	f3ef 8305 	mrs	r3, IPSR
 8010092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2b0f      	cmp	r3, #15
 8010098:	d914      	bls.n	80100c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801009a:	4a17      	ldr	r2, [pc, #92]	; (80100f8 <vPortValidateInterruptPriority+0x70>)
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	4413      	add	r3, r2
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100a4:	4b15      	ldr	r3, [pc, #84]	; (80100fc <vPortValidateInterruptPriority+0x74>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	7afa      	ldrb	r2, [r7, #11]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d20a      	bcs.n	80100c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80100ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b2:	f383 8811 	msr	BASEPRI, r3
 80100b6:	f3bf 8f6f 	isb	sy
 80100ba:	f3bf 8f4f 	dsb	sy
 80100be:	607b      	str	r3, [r7, #4]
}
 80100c0:	bf00      	nop
 80100c2:	e7fe      	b.n	80100c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80100c4:	4b0e      	ldr	r3, [pc, #56]	; (8010100 <vPortValidateInterruptPriority+0x78>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80100cc:	4b0d      	ldr	r3, [pc, #52]	; (8010104 <vPortValidateInterruptPriority+0x7c>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d90a      	bls.n	80100ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	603b      	str	r3, [r7, #0]
}
 80100e6:	bf00      	nop
 80100e8:	e7fe      	b.n	80100e8 <vPortValidateInterruptPriority+0x60>
	}
 80100ea:	bf00      	nop
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop
 80100f8:	e000e3f0 	.word	0xe000e3f0
 80100fc:	24001e08 	.word	0x24001e08
 8010100:	e000ed0c 	.word	0xe000ed0c
 8010104:	24001e0c 	.word	0x24001e0c

08010108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b08a      	sub	sp, #40	; 0x28
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010110:	2300      	movs	r3, #0
 8010112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010114:	f7fe fd98 	bl	800ec48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010118:	4b5b      	ldr	r3, [pc, #364]	; (8010288 <pvPortMalloc+0x180>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010120:	f000 f920 	bl	8010364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010124:	4b59      	ldr	r3, [pc, #356]	; (801028c <pvPortMalloc+0x184>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	4013      	ands	r3, r2
 801012c:	2b00      	cmp	r3, #0
 801012e:	f040 8093 	bne.w	8010258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d01d      	beq.n	8010174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010138:	2208      	movs	r2, #8
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	4413      	add	r3, r2
 801013e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f003 0307 	and.w	r3, r3, #7
 8010146:	2b00      	cmp	r3, #0
 8010148:	d014      	beq.n	8010174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f023 0307 	bic.w	r3, r3, #7
 8010150:	3308      	adds	r3, #8
 8010152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f003 0307 	and.w	r3, r3, #7
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <pvPortMalloc+0x6c>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	617b      	str	r3, [r7, #20]
}
 8010170:	bf00      	nop
 8010172:	e7fe      	b.n	8010172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d06e      	beq.n	8010258 <pvPortMalloc+0x150>
 801017a:	4b45      	ldr	r3, [pc, #276]	; (8010290 <pvPortMalloc+0x188>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	429a      	cmp	r2, r3
 8010182:	d869      	bhi.n	8010258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010184:	4b43      	ldr	r3, [pc, #268]	; (8010294 <pvPortMalloc+0x18c>)
 8010186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010188:	4b42      	ldr	r3, [pc, #264]	; (8010294 <pvPortMalloc+0x18c>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801018e:	e004      	b.n	801019a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d903      	bls.n	80101ac <pvPortMalloc+0xa4>
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1f1      	bne.n	8010190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80101ac:	4b36      	ldr	r3, [pc, #216]	; (8010288 <pvPortMalloc+0x180>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d050      	beq.n	8010258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2208      	movs	r2, #8
 80101bc:	4413      	add	r3, r2
 80101be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	6a3b      	ldr	r3, [r7, #32]
 80101c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80101c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	1ad2      	subs	r2, r2, r3
 80101d0:	2308      	movs	r3, #8
 80101d2:	005b      	lsls	r3, r3, #1
 80101d4:	429a      	cmp	r2, r3
 80101d6:	d91f      	bls.n	8010218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80101d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	4413      	add	r3, r2
 80101de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	f003 0307 	and.w	r3, r3, #7
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d00a      	beq.n	8010200 <pvPortMalloc+0xf8>
	__asm volatile
 80101ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ee:	f383 8811 	msr	BASEPRI, r3
 80101f2:	f3bf 8f6f 	isb	sy
 80101f6:	f3bf 8f4f 	dsb	sy
 80101fa:	613b      	str	r3, [r7, #16]
}
 80101fc:	bf00      	nop
 80101fe:	e7fe      	b.n	80101fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	1ad2      	subs	r2, r2, r3
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010212:	69b8      	ldr	r0, [r7, #24]
 8010214:	f000 f908 	bl	8010428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010218:	4b1d      	ldr	r3, [pc, #116]	; (8010290 <pvPortMalloc+0x188>)
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	4a1b      	ldr	r2, [pc, #108]	; (8010290 <pvPortMalloc+0x188>)
 8010224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010226:	4b1a      	ldr	r3, [pc, #104]	; (8010290 <pvPortMalloc+0x188>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	4b1b      	ldr	r3, [pc, #108]	; (8010298 <pvPortMalloc+0x190>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	429a      	cmp	r2, r3
 8010230:	d203      	bcs.n	801023a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010232:	4b17      	ldr	r3, [pc, #92]	; (8010290 <pvPortMalloc+0x188>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4a18      	ldr	r2, [pc, #96]	; (8010298 <pvPortMalloc+0x190>)
 8010238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	4b13      	ldr	r3, [pc, #76]	; (801028c <pvPortMalloc+0x184>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	431a      	orrs	r2, r3
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024a:	2200      	movs	r2, #0
 801024c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801024e:	4b13      	ldr	r3, [pc, #76]	; (801029c <pvPortMalloc+0x194>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	4a11      	ldr	r2, [pc, #68]	; (801029c <pvPortMalloc+0x194>)
 8010256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010258:	f7fe fd04 	bl	800ec64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	f003 0307 	and.w	r3, r3, #7
 8010262:	2b00      	cmp	r3, #0
 8010264:	d00a      	beq.n	801027c <pvPortMalloc+0x174>
	__asm volatile
 8010266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801026a:	f383 8811 	msr	BASEPRI, r3
 801026e:	f3bf 8f6f 	isb	sy
 8010272:	f3bf 8f4f 	dsb	sy
 8010276:	60fb      	str	r3, [r7, #12]
}
 8010278:	bf00      	nop
 801027a:	e7fe      	b.n	801027a <pvPortMalloc+0x172>
	return pvReturn;
 801027c:	69fb      	ldr	r3, [r7, #28]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3728      	adds	r7, #40	; 0x28
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	24005a18 	.word	0x24005a18
 801028c:	24005a2c 	.word	0x24005a2c
 8010290:	24005a1c 	.word	0x24005a1c
 8010294:	24005a10 	.word	0x24005a10
 8010298:	24005a20 	.word	0x24005a20
 801029c:	24005a24 	.word	0x24005a24

080102a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d04d      	beq.n	801034e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80102b2:	2308      	movs	r3, #8
 80102b4:	425b      	negs	r3, r3
 80102b6:	697a      	ldr	r2, [r7, #20]
 80102b8:	4413      	add	r3, r2
 80102ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	685a      	ldr	r2, [r3, #4]
 80102c4:	4b24      	ldr	r3, [pc, #144]	; (8010358 <vPortFree+0xb8>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4013      	ands	r3, r2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d10a      	bne.n	80102e4 <vPortFree+0x44>
	__asm volatile
 80102ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d2:	f383 8811 	msr	BASEPRI, r3
 80102d6:	f3bf 8f6f 	isb	sy
 80102da:	f3bf 8f4f 	dsb	sy
 80102de:	60fb      	str	r3, [r7, #12]
}
 80102e0:	bf00      	nop
 80102e2:	e7fe      	b.n	80102e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00a      	beq.n	8010302 <vPortFree+0x62>
	__asm volatile
 80102ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f0:	f383 8811 	msr	BASEPRI, r3
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	f3bf 8f4f 	dsb	sy
 80102fc:	60bb      	str	r3, [r7, #8]
}
 80102fe:	bf00      	nop
 8010300:	e7fe      	b.n	8010300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	685a      	ldr	r2, [r3, #4]
 8010306:	4b14      	ldr	r3, [pc, #80]	; (8010358 <vPortFree+0xb8>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4013      	ands	r3, r2
 801030c:	2b00      	cmp	r3, #0
 801030e:	d01e      	beq.n	801034e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d11a      	bne.n	801034e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	4b0e      	ldr	r3, [pc, #56]	; (8010358 <vPortFree+0xb8>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	43db      	mvns	r3, r3
 8010322:	401a      	ands	r2, r3
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010328:	f7fe fc8e 	bl	800ec48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	685a      	ldr	r2, [r3, #4]
 8010330:	4b0a      	ldr	r3, [pc, #40]	; (801035c <vPortFree+0xbc>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4413      	add	r3, r2
 8010336:	4a09      	ldr	r2, [pc, #36]	; (801035c <vPortFree+0xbc>)
 8010338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801033a:	6938      	ldr	r0, [r7, #16]
 801033c:	f000 f874 	bl	8010428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010340:	4b07      	ldr	r3, [pc, #28]	; (8010360 <vPortFree+0xc0>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3301      	adds	r3, #1
 8010346:	4a06      	ldr	r2, [pc, #24]	; (8010360 <vPortFree+0xc0>)
 8010348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801034a:	f7fe fc8b 	bl	800ec64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801034e:	bf00      	nop
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
 8010356:	bf00      	nop
 8010358:	24005a2c 	.word	0x24005a2c
 801035c:	24005a1c 	.word	0x24005a1c
 8010360:	24005a28 	.word	0x24005a28

08010364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801036a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801036e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010370:	4b27      	ldr	r3, [pc, #156]	; (8010410 <prvHeapInit+0xac>)
 8010372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f003 0307 	and.w	r3, r3, #7
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00c      	beq.n	8010398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	3307      	adds	r3, #7
 8010382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f023 0307 	bic.w	r3, r3, #7
 801038a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	4a1f      	ldr	r2, [pc, #124]	; (8010410 <prvHeapInit+0xac>)
 8010394:	4413      	add	r3, r2
 8010396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801039c:	4a1d      	ldr	r2, [pc, #116]	; (8010414 <prvHeapInit+0xb0>)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103a2:	4b1c      	ldr	r3, [pc, #112]	; (8010414 <prvHeapInit+0xb0>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68ba      	ldr	r2, [r7, #8]
 80103ac:	4413      	add	r3, r2
 80103ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80103b0:	2208      	movs	r2, #8
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	1a9b      	subs	r3, r3, r2
 80103b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	f023 0307 	bic.w	r3, r3, #7
 80103be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	4a15      	ldr	r2, [pc, #84]	; (8010418 <prvHeapInit+0xb4>)
 80103c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80103c6:	4b14      	ldr	r3, [pc, #80]	; (8010418 <prvHeapInit+0xb4>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	2200      	movs	r2, #0
 80103cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80103ce:	4b12      	ldr	r3, [pc, #72]	; (8010418 <prvHeapInit+0xb4>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	2200      	movs	r2, #0
 80103d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	68fa      	ldr	r2, [r7, #12]
 80103de:	1ad2      	subs	r2, r2, r3
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80103e4:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <prvHeapInit+0xb4>)
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	4a0a      	ldr	r2, [pc, #40]	; (801041c <prvHeapInit+0xb8>)
 80103f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	4a09      	ldr	r2, [pc, #36]	; (8010420 <prvHeapInit+0xbc>)
 80103fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80103fc:	4b09      	ldr	r3, [pc, #36]	; (8010424 <prvHeapInit+0xc0>)
 80103fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010402:	601a      	str	r2, [r3, #0]
}
 8010404:	bf00      	nop
 8010406:	3714      	adds	r7, #20
 8010408:	46bd      	mov	sp, r7
 801040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040e:	4770      	bx	lr
 8010410:	24001e10 	.word	0x24001e10
 8010414:	24005a10 	.word	0x24005a10
 8010418:	24005a18 	.word	0x24005a18
 801041c:	24005a20 	.word	0x24005a20
 8010420:	24005a1c 	.word	0x24005a1c
 8010424:	24005a2c 	.word	0x24005a2c

08010428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010430:	4b28      	ldr	r3, [pc, #160]	; (80104d4 <prvInsertBlockIntoFreeList+0xac>)
 8010432:	60fb      	str	r3, [r7, #12]
 8010434:	e002      	b.n	801043c <prvInsertBlockIntoFreeList+0x14>
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	60fb      	str	r3, [r7, #12]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	429a      	cmp	r2, r3
 8010444:	d8f7      	bhi.n	8010436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	4413      	add	r3, r2
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	429a      	cmp	r2, r3
 8010456:	d108      	bne.n	801046a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	441a      	add	r2, r3
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	68ba      	ldr	r2, [r7, #8]
 8010474:	441a      	add	r2, r3
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	429a      	cmp	r2, r3
 801047c:	d118      	bne.n	80104b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	4b15      	ldr	r3, [pc, #84]	; (80104d8 <prvInsertBlockIntoFreeList+0xb0>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	429a      	cmp	r2, r3
 8010488:	d00d      	beq.n	80104a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	685a      	ldr	r2, [r3, #4]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	441a      	add	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	601a      	str	r2, [r3, #0]
 80104a4:	e008      	b.n	80104b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80104a6:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <prvInsertBlockIntoFreeList+0xb0>)
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	601a      	str	r2, [r3, #0]
 80104ae:	e003      	b.n	80104b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d002      	beq.n	80104c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80104c6:	bf00      	nop
 80104c8:	3714      	adds	r7, #20
 80104ca:	46bd      	mov	sp, r7
 80104cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d0:	4770      	bx	lr
 80104d2:	bf00      	nop
 80104d4:	24005a10 	.word	0x24005a10
 80104d8:	24005a18 	.word	0x24005a18

080104dc <srand>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4b10      	ldr	r3, [pc, #64]	; (8010520 <srand+0x44>)
 80104e0:	681d      	ldr	r5, [r3, #0]
 80104e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80104e4:	4604      	mov	r4, r0
 80104e6:	b9b3      	cbnz	r3, 8010516 <srand+0x3a>
 80104e8:	2018      	movs	r0, #24
 80104ea:	f000 fb57 	bl	8010b9c <malloc>
 80104ee:	4602      	mov	r2, r0
 80104f0:	6328      	str	r0, [r5, #48]	; 0x30
 80104f2:	b920      	cbnz	r0, 80104fe <srand+0x22>
 80104f4:	4b0b      	ldr	r3, [pc, #44]	; (8010524 <srand+0x48>)
 80104f6:	480c      	ldr	r0, [pc, #48]	; (8010528 <srand+0x4c>)
 80104f8:	2146      	movs	r1, #70	; 0x46
 80104fa:	f000 fae5 	bl	8010ac8 <__assert_func>
 80104fe:	490b      	ldr	r1, [pc, #44]	; (801052c <srand+0x50>)
 8010500:	4b0b      	ldr	r3, [pc, #44]	; (8010530 <srand+0x54>)
 8010502:	e9c0 1300 	strd	r1, r3, [r0]
 8010506:	4b0b      	ldr	r3, [pc, #44]	; (8010534 <srand+0x58>)
 8010508:	6083      	str	r3, [r0, #8]
 801050a:	230b      	movs	r3, #11
 801050c:	8183      	strh	r3, [r0, #12]
 801050e:	2100      	movs	r1, #0
 8010510:	2001      	movs	r0, #1
 8010512:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010516:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010518:	2200      	movs	r2, #0
 801051a:	611c      	str	r4, [r3, #16]
 801051c:	615a      	str	r2, [r3, #20]
 801051e:	bd38      	pop	{r3, r4, r5, pc}
 8010520:	240000c0 	.word	0x240000c0
 8010524:	080145c0 	.word	0x080145c0
 8010528:	080145d7 	.word	0x080145d7
 801052c:	abcd330e 	.word	0xabcd330e
 8010530:	e66d1234 	.word	0xe66d1234
 8010534:	0005deec 	.word	0x0005deec

08010538 <rand>:
 8010538:	4b16      	ldr	r3, [pc, #88]	; (8010594 <rand+0x5c>)
 801053a:	b510      	push	{r4, lr}
 801053c:	681c      	ldr	r4, [r3, #0]
 801053e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010540:	b9b3      	cbnz	r3, 8010570 <rand+0x38>
 8010542:	2018      	movs	r0, #24
 8010544:	f000 fb2a 	bl	8010b9c <malloc>
 8010548:	4602      	mov	r2, r0
 801054a:	6320      	str	r0, [r4, #48]	; 0x30
 801054c:	b920      	cbnz	r0, 8010558 <rand+0x20>
 801054e:	4b12      	ldr	r3, [pc, #72]	; (8010598 <rand+0x60>)
 8010550:	4812      	ldr	r0, [pc, #72]	; (801059c <rand+0x64>)
 8010552:	2152      	movs	r1, #82	; 0x52
 8010554:	f000 fab8 	bl	8010ac8 <__assert_func>
 8010558:	4911      	ldr	r1, [pc, #68]	; (80105a0 <rand+0x68>)
 801055a:	4b12      	ldr	r3, [pc, #72]	; (80105a4 <rand+0x6c>)
 801055c:	e9c0 1300 	strd	r1, r3, [r0]
 8010560:	4b11      	ldr	r3, [pc, #68]	; (80105a8 <rand+0x70>)
 8010562:	6083      	str	r3, [r0, #8]
 8010564:	230b      	movs	r3, #11
 8010566:	8183      	strh	r3, [r0, #12]
 8010568:	2100      	movs	r1, #0
 801056a:	2001      	movs	r0, #1
 801056c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010570:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010572:	480e      	ldr	r0, [pc, #56]	; (80105ac <rand+0x74>)
 8010574:	690b      	ldr	r3, [r1, #16]
 8010576:	694c      	ldr	r4, [r1, #20]
 8010578:	4a0d      	ldr	r2, [pc, #52]	; (80105b0 <rand+0x78>)
 801057a:	4358      	muls	r0, r3
 801057c:	fb02 0004 	mla	r0, r2, r4, r0
 8010580:	fba3 3202 	umull	r3, r2, r3, r2
 8010584:	3301      	adds	r3, #1
 8010586:	eb40 0002 	adc.w	r0, r0, r2
 801058a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801058e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010592:	bd10      	pop	{r4, pc}
 8010594:	240000c0 	.word	0x240000c0
 8010598:	080145c0 	.word	0x080145c0
 801059c:	080145d7 	.word	0x080145d7
 80105a0:	abcd330e 	.word	0xabcd330e
 80105a4:	e66d1234 	.word	0xe66d1234
 80105a8:	0005deec 	.word	0x0005deec
 80105ac:	5851f42d 	.word	0x5851f42d
 80105b0:	4c957f2d 	.word	0x4c957f2d

080105b4 <std>:
 80105b4:	2300      	movs	r3, #0
 80105b6:	b510      	push	{r4, lr}
 80105b8:	4604      	mov	r4, r0
 80105ba:	e9c0 3300 	strd	r3, r3, [r0]
 80105be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80105c2:	6083      	str	r3, [r0, #8]
 80105c4:	8181      	strh	r1, [r0, #12]
 80105c6:	6643      	str	r3, [r0, #100]	; 0x64
 80105c8:	81c2      	strh	r2, [r0, #14]
 80105ca:	6183      	str	r3, [r0, #24]
 80105cc:	4619      	mov	r1, r3
 80105ce:	2208      	movs	r2, #8
 80105d0:	305c      	adds	r0, #92	; 0x5c
 80105d2:	f000 f9c2 	bl	801095a <memset>
 80105d6:	4b0d      	ldr	r3, [pc, #52]	; (801060c <std+0x58>)
 80105d8:	6263      	str	r3, [r4, #36]	; 0x24
 80105da:	4b0d      	ldr	r3, [pc, #52]	; (8010610 <std+0x5c>)
 80105dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80105de:	4b0d      	ldr	r3, [pc, #52]	; (8010614 <std+0x60>)
 80105e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80105e2:	4b0d      	ldr	r3, [pc, #52]	; (8010618 <std+0x64>)
 80105e4:	6323      	str	r3, [r4, #48]	; 0x30
 80105e6:	4b0d      	ldr	r3, [pc, #52]	; (801061c <std+0x68>)
 80105e8:	6224      	str	r4, [r4, #32]
 80105ea:	429c      	cmp	r4, r3
 80105ec:	d006      	beq.n	80105fc <std+0x48>
 80105ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80105f2:	4294      	cmp	r4, r2
 80105f4:	d002      	beq.n	80105fc <std+0x48>
 80105f6:	33d0      	adds	r3, #208	; 0xd0
 80105f8:	429c      	cmp	r4, r3
 80105fa:	d105      	bne.n	8010608 <std+0x54>
 80105fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010604:	f000 ba4e 	b.w	8010aa4 <__retarget_lock_init_recursive>
 8010608:	bd10      	pop	{r4, pc}
 801060a:	bf00      	nop
 801060c:	080108d5 	.word	0x080108d5
 8010610:	080108f7 	.word	0x080108f7
 8010614:	0801092f 	.word	0x0801092f
 8010618:	08010953 	.word	0x08010953
 801061c:	24005a30 	.word	0x24005a30

08010620 <stdio_exit_handler>:
 8010620:	4a02      	ldr	r2, [pc, #8]	; (801062c <stdio_exit_handler+0xc>)
 8010622:	4903      	ldr	r1, [pc, #12]	; (8010630 <stdio_exit_handler+0x10>)
 8010624:	4803      	ldr	r0, [pc, #12]	; (8010634 <stdio_exit_handler+0x14>)
 8010626:	f000 b869 	b.w	80106fc <_fwalk_sglue>
 801062a:	bf00      	nop
 801062c:	24000068 	.word	0x24000068
 8010630:	080113e1 	.word	0x080113e1
 8010634:	24000074 	.word	0x24000074

08010638 <cleanup_stdio>:
 8010638:	6841      	ldr	r1, [r0, #4]
 801063a:	4b0c      	ldr	r3, [pc, #48]	; (801066c <cleanup_stdio+0x34>)
 801063c:	4299      	cmp	r1, r3
 801063e:	b510      	push	{r4, lr}
 8010640:	4604      	mov	r4, r0
 8010642:	d001      	beq.n	8010648 <cleanup_stdio+0x10>
 8010644:	f000 fecc 	bl	80113e0 <_fflush_r>
 8010648:	68a1      	ldr	r1, [r4, #8]
 801064a:	4b09      	ldr	r3, [pc, #36]	; (8010670 <cleanup_stdio+0x38>)
 801064c:	4299      	cmp	r1, r3
 801064e:	d002      	beq.n	8010656 <cleanup_stdio+0x1e>
 8010650:	4620      	mov	r0, r4
 8010652:	f000 fec5 	bl	80113e0 <_fflush_r>
 8010656:	68e1      	ldr	r1, [r4, #12]
 8010658:	4b06      	ldr	r3, [pc, #24]	; (8010674 <cleanup_stdio+0x3c>)
 801065a:	4299      	cmp	r1, r3
 801065c:	d004      	beq.n	8010668 <cleanup_stdio+0x30>
 801065e:	4620      	mov	r0, r4
 8010660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010664:	f000 bebc 	b.w	80113e0 <_fflush_r>
 8010668:	bd10      	pop	{r4, pc}
 801066a:	bf00      	nop
 801066c:	24005a30 	.word	0x24005a30
 8010670:	24005a98 	.word	0x24005a98
 8010674:	24005b00 	.word	0x24005b00

08010678 <global_stdio_init.part.0>:
 8010678:	b510      	push	{r4, lr}
 801067a:	4b0b      	ldr	r3, [pc, #44]	; (80106a8 <global_stdio_init.part.0+0x30>)
 801067c:	4c0b      	ldr	r4, [pc, #44]	; (80106ac <global_stdio_init.part.0+0x34>)
 801067e:	4a0c      	ldr	r2, [pc, #48]	; (80106b0 <global_stdio_init.part.0+0x38>)
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	4620      	mov	r0, r4
 8010684:	2200      	movs	r2, #0
 8010686:	2104      	movs	r1, #4
 8010688:	f7ff ff94 	bl	80105b4 <std>
 801068c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010690:	2201      	movs	r2, #1
 8010692:	2109      	movs	r1, #9
 8010694:	f7ff ff8e 	bl	80105b4 <std>
 8010698:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801069c:	2202      	movs	r2, #2
 801069e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106a2:	2112      	movs	r1, #18
 80106a4:	f7ff bf86 	b.w	80105b4 <std>
 80106a8:	24005b68 	.word	0x24005b68
 80106ac:	24005a30 	.word	0x24005a30
 80106b0:	08010621 	.word	0x08010621

080106b4 <__sfp_lock_acquire>:
 80106b4:	4801      	ldr	r0, [pc, #4]	; (80106bc <__sfp_lock_acquire+0x8>)
 80106b6:	f000 b9f6 	b.w	8010aa6 <__retarget_lock_acquire_recursive>
 80106ba:	bf00      	nop
 80106bc:	24005b71 	.word	0x24005b71

080106c0 <__sfp_lock_release>:
 80106c0:	4801      	ldr	r0, [pc, #4]	; (80106c8 <__sfp_lock_release+0x8>)
 80106c2:	f000 b9f1 	b.w	8010aa8 <__retarget_lock_release_recursive>
 80106c6:	bf00      	nop
 80106c8:	24005b71 	.word	0x24005b71

080106cc <__sinit>:
 80106cc:	b510      	push	{r4, lr}
 80106ce:	4604      	mov	r4, r0
 80106d0:	f7ff fff0 	bl	80106b4 <__sfp_lock_acquire>
 80106d4:	6a23      	ldr	r3, [r4, #32]
 80106d6:	b11b      	cbz	r3, 80106e0 <__sinit+0x14>
 80106d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106dc:	f7ff bff0 	b.w	80106c0 <__sfp_lock_release>
 80106e0:	4b04      	ldr	r3, [pc, #16]	; (80106f4 <__sinit+0x28>)
 80106e2:	6223      	str	r3, [r4, #32]
 80106e4:	4b04      	ldr	r3, [pc, #16]	; (80106f8 <__sinit+0x2c>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d1f5      	bne.n	80106d8 <__sinit+0xc>
 80106ec:	f7ff ffc4 	bl	8010678 <global_stdio_init.part.0>
 80106f0:	e7f2      	b.n	80106d8 <__sinit+0xc>
 80106f2:	bf00      	nop
 80106f4:	08010639 	.word	0x08010639
 80106f8:	24005b68 	.word	0x24005b68

080106fc <_fwalk_sglue>:
 80106fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010700:	4607      	mov	r7, r0
 8010702:	4688      	mov	r8, r1
 8010704:	4614      	mov	r4, r2
 8010706:	2600      	movs	r6, #0
 8010708:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801070c:	f1b9 0901 	subs.w	r9, r9, #1
 8010710:	d505      	bpl.n	801071e <_fwalk_sglue+0x22>
 8010712:	6824      	ldr	r4, [r4, #0]
 8010714:	2c00      	cmp	r4, #0
 8010716:	d1f7      	bne.n	8010708 <_fwalk_sglue+0xc>
 8010718:	4630      	mov	r0, r6
 801071a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801071e:	89ab      	ldrh	r3, [r5, #12]
 8010720:	2b01      	cmp	r3, #1
 8010722:	d907      	bls.n	8010734 <_fwalk_sglue+0x38>
 8010724:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010728:	3301      	adds	r3, #1
 801072a:	d003      	beq.n	8010734 <_fwalk_sglue+0x38>
 801072c:	4629      	mov	r1, r5
 801072e:	4638      	mov	r0, r7
 8010730:	47c0      	blx	r8
 8010732:	4306      	orrs	r6, r0
 8010734:	3568      	adds	r5, #104	; 0x68
 8010736:	e7e9      	b.n	801070c <_fwalk_sglue+0x10>

08010738 <setvbuf>:
 8010738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801073c:	461d      	mov	r5, r3
 801073e:	4b54      	ldr	r3, [pc, #336]	; (8010890 <setvbuf+0x158>)
 8010740:	681f      	ldr	r7, [r3, #0]
 8010742:	4604      	mov	r4, r0
 8010744:	460e      	mov	r6, r1
 8010746:	4690      	mov	r8, r2
 8010748:	b127      	cbz	r7, 8010754 <setvbuf+0x1c>
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	b913      	cbnz	r3, 8010754 <setvbuf+0x1c>
 801074e:	4638      	mov	r0, r7
 8010750:	f7ff ffbc 	bl	80106cc <__sinit>
 8010754:	f1b8 0f02 	cmp.w	r8, #2
 8010758:	d006      	beq.n	8010768 <setvbuf+0x30>
 801075a:	f1b8 0f01 	cmp.w	r8, #1
 801075e:	f200 8094 	bhi.w	801088a <setvbuf+0x152>
 8010762:	2d00      	cmp	r5, #0
 8010764:	f2c0 8091 	blt.w	801088a <setvbuf+0x152>
 8010768:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801076a:	07da      	lsls	r2, r3, #31
 801076c:	d405      	bmi.n	801077a <setvbuf+0x42>
 801076e:	89a3      	ldrh	r3, [r4, #12]
 8010770:	059b      	lsls	r3, r3, #22
 8010772:	d402      	bmi.n	801077a <setvbuf+0x42>
 8010774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010776:	f000 f996 	bl	8010aa6 <__retarget_lock_acquire_recursive>
 801077a:	4621      	mov	r1, r4
 801077c:	4638      	mov	r0, r7
 801077e:	f000 fe2f 	bl	80113e0 <_fflush_r>
 8010782:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010784:	b141      	cbz	r1, 8010798 <setvbuf+0x60>
 8010786:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801078a:	4299      	cmp	r1, r3
 801078c:	d002      	beq.n	8010794 <setvbuf+0x5c>
 801078e:	4638      	mov	r0, r7
 8010790:	f000 f9b8 	bl	8010b04 <_free_r>
 8010794:	2300      	movs	r3, #0
 8010796:	6363      	str	r3, [r4, #52]	; 0x34
 8010798:	2300      	movs	r3, #0
 801079a:	61a3      	str	r3, [r4, #24]
 801079c:	6063      	str	r3, [r4, #4]
 801079e:	89a3      	ldrh	r3, [r4, #12]
 80107a0:	0618      	lsls	r0, r3, #24
 80107a2:	d503      	bpl.n	80107ac <setvbuf+0x74>
 80107a4:	6921      	ldr	r1, [r4, #16]
 80107a6:	4638      	mov	r0, r7
 80107a8:	f000 f9ac 	bl	8010b04 <_free_r>
 80107ac:	89a3      	ldrh	r3, [r4, #12]
 80107ae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80107b2:	f023 0303 	bic.w	r3, r3, #3
 80107b6:	f1b8 0f02 	cmp.w	r8, #2
 80107ba:	81a3      	strh	r3, [r4, #12]
 80107bc:	d05f      	beq.n	801087e <setvbuf+0x146>
 80107be:	ab01      	add	r3, sp, #4
 80107c0:	466a      	mov	r2, sp
 80107c2:	4621      	mov	r1, r4
 80107c4:	4638      	mov	r0, r7
 80107c6:	f000 fe45 	bl	8011454 <__swhatbuf_r>
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	4318      	orrs	r0, r3
 80107ce:	81a0      	strh	r0, [r4, #12]
 80107d0:	bb2d      	cbnz	r5, 801081e <setvbuf+0xe6>
 80107d2:	9d00      	ldr	r5, [sp, #0]
 80107d4:	4628      	mov	r0, r5
 80107d6:	f000 f9e1 	bl	8010b9c <malloc>
 80107da:	4606      	mov	r6, r0
 80107dc:	2800      	cmp	r0, #0
 80107de:	d150      	bne.n	8010882 <setvbuf+0x14a>
 80107e0:	f8dd 9000 	ldr.w	r9, [sp]
 80107e4:	45a9      	cmp	r9, r5
 80107e6:	d13e      	bne.n	8010866 <setvbuf+0x12e>
 80107e8:	f04f 35ff 	mov.w	r5, #4294967295
 80107ec:	2200      	movs	r2, #0
 80107ee:	60a2      	str	r2, [r4, #8]
 80107f0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80107f4:	6022      	str	r2, [r4, #0]
 80107f6:	6122      	str	r2, [r4, #16]
 80107f8:	2201      	movs	r2, #1
 80107fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107fe:	6162      	str	r2, [r4, #20]
 8010800:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010802:	f043 0302 	orr.w	r3, r3, #2
 8010806:	07d1      	lsls	r1, r2, #31
 8010808:	81a3      	strh	r3, [r4, #12]
 801080a:	d404      	bmi.n	8010816 <setvbuf+0xde>
 801080c:	059b      	lsls	r3, r3, #22
 801080e:	d402      	bmi.n	8010816 <setvbuf+0xde>
 8010810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010812:	f000 f949 	bl	8010aa8 <__retarget_lock_release_recursive>
 8010816:	4628      	mov	r0, r5
 8010818:	b003      	add	sp, #12
 801081a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801081e:	2e00      	cmp	r6, #0
 8010820:	d0d8      	beq.n	80107d4 <setvbuf+0x9c>
 8010822:	6a3b      	ldr	r3, [r7, #32]
 8010824:	b913      	cbnz	r3, 801082c <setvbuf+0xf4>
 8010826:	4638      	mov	r0, r7
 8010828:	f7ff ff50 	bl	80106cc <__sinit>
 801082c:	f1b8 0f01 	cmp.w	r8, #1
 8010830:	bf08      	it	eq
 8010832:	89a3      	ldrheq	r3, [r4, #12]
 8010834:	6026      	str	r6, [r4, #0]
 8010836:	bf04      	itt	eq
 8010838:	f043 0301 	orreq.w	r3, r3, #1
 801083c:	81a3      	strheq	r3, [r4, #12]
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	f013 0208 	ands.w	r2, r3, #8
 8010844:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8010848:	d01d      	beq.n	8010886 <setvbuf+0x14e>
 801084a:	07da      	lsls	r2, r3, #31
 801084c:	bf41      	itttt	mi
 801084e:	2200      	movmi	r2, #0
 8010850:	426d      	negmi	r5, r5
 8010852:	60a2      	strmi	r2, [r4, #8]
 8010854:	61a5      	strmi	r5, [r4, #24]
 8010856:	bf58      	it	pl
 8010858:	60a5      	strpl	r5, [r4, #8]
 801085a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801085c:	f015 0501 	ands.w	r5, r5, #1
 8010860:	d0d4      	beq.n	801080c <setvbuf+0xd4>
 8010862:	2500      	movs	r5, #0
 8010864:	e7d7      	b.n	8010816 <setvbuf+0xde>
 8010866:	4648      	mov	r0, r9
 8010868:	f000 f998 	bl	8010b9c <malloc>
 801086c:	4606      	mov	r6, r0
 801086e:	2800      	cmp	r0, #0
 8010870:	d0ba      	beq.n	80107e8 <setvbuf+0xb0>
 8010872:	89a3      	ldrh	r3, [r4, #12]
 8010874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010878:	81a3      	strh	r3, [r4, #12]
 801087a:	464d      	mov	r5, r9
 801087c:	e7d1      	b.n	8010822 <setvbuf+0xea>
 801087e:	2500      	movs	r5, #0
 8010880:	e7b4      	b.n	80107ec <setvbuf+0xb4>
 8010882:	46a9      	mov	r9, r5
 8010884:	e7f5      	b.n	8010872 <setvbuf+0x13a>
 8010886:	60a2      	str	r2, [r4, #8]
 8010888:	e7e7      	b.n	801085a <setvbuf+0x122>
 801088a:	f04f 35ff 	mov.w	r5, #4294967295
 801088e:	e7c2      	b.n	8010816 <setvbuf+0xde>
 8010890:	240000c0 	.word	0x240000c0

08010894 <siprintf>:
 8010894:	b40e      	push	{r1, r2, r3}
 8010896:	b500      	push	{lr}
 8010898:	b09c      	sub	sp, #112	; 0x70
 801089a:	ab1d      	add	r3, sp, #116	; 0x74
 801089c:	9002      	str	r0, [sp, #8]
 801089e:	9006      	str	r0, [sp, #24]
 80108a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80108a4:	4809      	ldr	r0, [pc, #36]	; (80108cc <siprintf+0x38>)
 80108a6:	9107      	str	r1, [sp, #28]
 80108a8:	9104      	str	r1, [sp, #16]
 80108aa:	4909      	ldr	r1, [pc, #36]	; (80108d0 <siprintf+0x3c>)
 80108ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80108b0:	9105      	str	r1, [sp, #20]
 80108b2:	6800      	ldr	r0, [r0, #0]
 80108b4:	9301      	str	r3, [sp, #4]
 80108b6:	a902      	add	r1, sp, #8
 80108b8:	f000 fa7e 	bl	8010db8 <_svfiprintf_r>
 80108bc:	9b02      	ldr	r3, [sp, #8]
 80108be:	2200      	movs	r2, #0
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	b01c      	add	sp, #112	; 0x70
 80108c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108c8:	b003      	add	sp, #12
 80108ca:	4770      	bx	lr
 80108cc:	240000c0 	.word	0x240000c0
 80108d0:	ffff0208 	.word	0xffff0208

080108d4 <__sread>:
 80108d4:	b510      	push	{r4, lr}
 80108d6:	460c      	mov	r4, r1
 80108d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108dc:	f000 f894 	bl	8010a08 <_read_r>
 80108e0:	2800      	cmp	r0, #0
 80108e2:	bfab      	itete	ge
 80108e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108e6:	89a3      	ldrhlt	r3, [r4, #12]
 80108e8:	181b      	addge	r3, r3, r0
 80108ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80108ee:	bfac      	ite	ge
 80108f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80108f2:	81a3      	strhlt	r3, [r4, #12]
 80108f4:	bd10      	pop	{r4, pc}

080108f6 <__swrite>:
 80108f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fa:	461f      	mov	r7, r3
 80108fc:	898b      	ldrh	r3, [r1, #12]
 80108fe:	05db      	lsls	r3, r3, #23
 8010900:	4605      	mov	r5, r0
 8010902:	460c      	mov	r4, r1
 8010904:	4616      	mov	r6, r2
 8010906:	d505      	bpl.n	8010914 <__swrite+0x1e>
 8010908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801090c:	2302      	movs	r3, #2
 801090e:	2200      	movs	r2, #0
 8010910:	f000 f868 	bl	80109e4 <_lseek_r>
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801091a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	4632      	mov	r2, r6
 8010922:	463b      	mov	r3, r7
 8010924:	4628      	mov	r0, r5
 8010926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801092a:	f000 b87f 	b.w	8010a2c <_write_r>

0801092e <__sseek>:
 801092e:	b510      	push	{r4, lr}
 8010930:	460c      	mov	r4, r1
 8010932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010936:	f000 f855 	bl	80109e4 <_lseek_r>
 801093a:	1c43      	adds	r3, r0, #1
 801093c:	89a3      	ldrh	r3, [r4, #12]
 801093e:	bf15      	itete	ne
 8010940:	6560      	strne	r0, [r4, #84]	; 0x54
 8010942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801094a:	81a3      	strheq	r3, [r4, #12]
 801094c:	bf18      	it	ne
 801094e:	81a3      	strhne	r3, [r4, #12]
 8010950:	bd10      	pop	{r4, pc}

08010952 <__sclose>:
 8010952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010956:	f000 b823 	b.w	80109a0 <_close_r>

0801095a <memset>:
 801095a:	4402      	add	r2, r0
 801095c:	4603      	mov	r3, r0
 801095e:	4293      	cmp	r3, r2
 8010960:	d100      	bne.n	8010964 <memset+0xa>
 8010962:	4770      	bx	lr
 8010964:	f803 1b01 	strb.w	r1, [r3], #1
 8010968:	e7f9      	b.n	801095e <memset+0x4>
	...

0801096c <time>:
 801096c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801096e:	4b0b      	ldr	r3, [pc, #44]	; (801099c <time+0x30>)
 8010970:	2200      	movs	r2, #0
 8010972:	4669      	mov	r1, sp
 8010974:	4604      	mov	r4, r0
 8010976:	6818      	ldr	r0, [r3, #0]
 8010978:	f000 f822 	bl	80109c0 <_gettimeofday_r>
 801097c:	2800      	cmp	r0, #0
 801097e:	bfbe      	ittt	lt
 8010980:	f04f 32ff 	movlt.w	r2, #4294967295
 8010984:	f04f 33ff 	movlt.w	r3, #4294967295
 8010988:	e9cd 2300 	strdlt	r2, r3, [sp]
 801098c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010990:	b10c      	cbz	r4, 8010996 <time+0x2a>
 8010992:	e9c4 0100 	strd	r0, r1, [r4]
 8010996:	b004      	add	sp, #16
 8010998:	bd10      	pop	{r4, pc}
 801099a:	bf00      	nop
 801099c:	240000c0 	.word	0x240000c0

080109a0 <_close_r>:
 80109a0:	b538      	push	{r3, r4, r5, lr}
 80109a2:	4d06      	ldr	r5, [pc, #24]	; (80109bc <_close_r+0x1c>)
 80109a4:	2300      	movs	r3, #0
 80109a6:	4604      	mov	r4, r0
 80109a8:	4608      	mov	r0, r1
 80109aa:	602b      	str	r3, [r5, #0]
 80109ac:	f7f0 fa34 	bl	8000e18 <_close>
 80109b0:	1c43      	adds	r3, r0, #1
 80109b2:	d102      	bne.n	80109ba <_close_r+0x1a>
 80109b4:	682b      	ldr	r3, [r5, #0]
 80109b6:	b103      	cbz	r3, 80109ba <_close_r+0x1a>
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	bd38      	pop	{r3, r4, r5, pc}
 80109bc:	24005b6c 	.word	0x24005b6c

080109c0 <_gettimeofday_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	4d07      	ldr	r5, [pc, #28]	; (80109e0 <_gettimeofday_r+0x20>)
 80109c4:	2300      	movs	r3, #0
 80109c6:	4604      	mov	r4, r0
 80109c8:	4608      	mov	r0, r1
 80109ca:	4611      	mov	r1, r2
 80109cc:	602b      	str	r3, [r5, #0]
 80109ce:	f001 f84b 	bl	8011a68 <_gettimeofday>
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	d102      	bne.n	80109dc <_gettimeofday_r+0x1c>
 80109d6:	682b      	ldr	r3, [r5, #0]
 80109d8:	b103      	cbz	r3, 80109dc <_gettimeofday_r+0x1c>
 80109da:	6023      	str	r3, [r4, #0]
 80109dc:	bd38      	pop	{r3, r4, r5, pc}
 80109de:	bf00      	nop
 80109e0:	24005b6c 	.word	0x24005b6c

080109e4 <_lseek_r>:
 80109e4:	b538      	push	{r3, r4, r5, lr}
 80109e6:	4d07      	ldr	r5, [pc, #28]	; (8010a04 <_lseek_r+0x20>)
 80109e8:	4604      	mov	r4, r0
 80109ea:	4608      	mov	r0, r1
 80109ec:	4611      	mov	r1, r2
 80109ee:	2200      	movs	r2, #0
 80109f0:	602a      	str	r2, [r5, #0]
 80109f2:	461a      	mov	r2, r3
 80109f4:	f7f0 fa27 	bl	8000e46 <_lseek>
 80109f8:	1c43      	adds	r3, r0, #1
 80109fa:	d102      	bne.n	8010a02 <_lseek_r+0x1e>
 80109fc:	682b      	ldr	r3, [r5, #0]
 80109fe:	b103      	cbz	r3, 8010a02 <_lseek_r+0x1e>
 8010a00:	6023      	str	r3, [r4, #0]
 8010a02:	bd38      	pop	{r3, r4, r5, pc}
 8010a04:	24005b6c 	.word	0x24005b6c

08010a08 <_read_r>:
 8010a08:	b538      	push	{r3, r4, r5, lr}
 8010a0a:	4d07      	ldr	r5, [pc, #28]	; (8010a28 <_read_r+0x20>)
 8010a0c:	4604      	mov	r4, r0
 8010a0e:	4608      	mov	r0, r1
 8010a10:	4611      	mov	r1, r2
 8010a12:	2200      	movs	r2, #0
 8010a14:	602a      	str	r2, [r5, #0]
 8010a16:	461a      	mov	r2, r3
 8010a18:	f7f0 fa42 	bl	8000ea0 <_read>
 8010a1c:	1c43      	adds	r3, r0, #1
 8010a1e:	d102      	bne.n	8010a26 <_read_r+0x1e>
 8010a20:	682b      	ldr	r3, [r5, #0]
 8010a22:	b103      	cbz	r3, 8010a26 <_read_r+0x1e>
 8010a24:	6023      	str	r3, [r4, #0]
 8010a26:	bd38      	pop	{r3, r4, r5, pc}
 8010a28:	24005b6c 	.word	0x24005b6c

08010a2c <_write_r>:
 8010a2c:	b538      	push	{r3, r4, r5, lr}
 8010a2e:	4d07      	ldr	r5, [pc, #28]	; (8010a4c <_write_r+0x20>)
 8010a30:	4604      	mov	r4, r0
 8010a32:	4608      	mov	r0, r1
 8010a34:	4611      	mov	r1, r2
 8010a36:	2200      	movs	r2, #0
 8010a38:	602a      	str	r2, [r5, #0]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	f7f0 fa58 	bl	8000ef0 <_write>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d102      	bne.n	8010a4a <_write_r+0x1e>
 8010a44:	682b      	ldr	r3, [r5, #0]
 8010a46:	b103      	cbz	r3, 8010a4a <_write_r+0x1e>
 8010a48:	6023      	str	r3, [r4, #0]
 8010a4a:	bd38      	pop	{r3, r4, r5, pc}
 8010a4c:	24005b6c 	.word	0x24005b6c

08010a50 <__errno>:
 8010a50:	4b01      	ldr	r3, [pc, #4]	; (8010a58 <__errno+0x8>)
 8010a52:	6818      	ldr	r0, [r3, #0]
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	240000c0 	.word	0x240000c0

08010a5c <__libc_init_array>:
 8010a5c:	b570      	push	{r4, r5, r6, lr}
 8010a5e:	4d0d      	ldr	r5, [pc, #52]	; (8010a94 <__libc_init_array+0x38>)
 8010a60:	4c0d      	ldr	r4, [pc, #52]	; (8010a98 <__libc_init_array+0x3c>)
 8010a62:	1b64      	subs	r4, r4, r5
 8010a64:	10a4      	asrs	r4, r4, #2
 8010a66:	2600      	movs	r6, #0
 8010a68:	42a6      	cmp	r6, r4
 8010a6a:	d109      	bne.n	8010a80 <__libc_init_array+0x24>
 8010a6c:	4d0b      	ldr	r5, [pc, #44]	; (8010a9c <__libc_init_array+0x40>)
 8010a6e:	4c0c      	ldr	r4, [pc, #48]	; (8010aa0 <__libc_init_array+0x44>)
 8010a70:	f001 f802 	bl	8011a78 <_init>
 8010a74:	1b64      	subs	r4, r4, r5
 8010a76:	10a4      	asrs	r4, r4, #2
 8010a78:	2600      	movs	r6, #0
 8010a7a:	42a6      	cmp	r6, r4
 8010a7c:	d105      	bne.n	8010a8a <__libc_init_array+0x2e>
 8010a7e:	bd70      	pop	{r4, r5, r6, pc}
 8010a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a84:	4798      	blx	r3
 8010a86:	3601      	adds	r6, #1
 8010a88:	e7ee      	b.n	8010a68 <__libc_init_array+0xc>
 8010a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010a8e:	4798      	blx	r3
 8010a90:	3601      	adds	r6, #1
 8010a92:	e7f2      	b.n	8010a7a <__libc_init_array+0x1e>
 8010a94:	080146a8 	.word	0x080146a8
 8010a98:	080146a8 	.word	0x080146a8
 8010a9c:	080146a8 	.word	0x080146a8
 8010aa0:	080146ac 	.word	0x080146ac

08010aa4 <__retarget_lock_init_recursive>:
 8010aa4:	4770      	bx	lr

08010aa6 <__retarget_lock_acquire_recursive>:
 8010aa6:	4770      	bx	lr

08010aa8 <__retarget_lock_release_recursive>:
 8010aa8:	4770      	bx	lr

08010aaa <memcpy>:
 8010aaa:	440a      	add	r2, r1
 8010aac:	4291      	cmp	r1, r2
 8010aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ab2:	d100      	bne.n	8010ab6 <memcpy+0xc>
 8010ab4:	4770      	bx	lr
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010abc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ac0:	4291      	cmp	r1, r2
 8010ac2:	d1f9      	bne.n	8010ab8 <memcpy+0xe>
 8010ac4:	bd10      	pop	{r4, pc}
	...

08010ac8 <__assert_func>:
 8010ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aca:	4614      	mov	r4, r2
 8010acc:	461a      	mov	r2, r3
 8010ace:	4b09      	ldr	r3, [pc, #36]	; (8010af4 <__assert_func+0x2c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4605      	mov	r5, r0
 8010ad4:	68d8      	ldr	r0, [r3, #12]
 8010ad6:	b14c      	cbz	r4, 8010aec <__assert_func+0x24>
 8010ad8:	4b07      	ldr	r3, [pc, #28]	; (8010af8 <__assert_func+0x30>)
 8010ada:	9100      	str	r1, [sp, #0]
 8010adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ae0:	4906      	ldr	r1, [pc, #24]	; (8010afc <__assert_func+0x34>)
 8010ae2:	462b      	mov	r3, r5
 8010ae4:	f000 fca4 	bl	8011430 <fiprintf>
 8010ae8:	f000 fd62 	bl	80115b0 <abort>
 8010aec:	4b04      	ldr	r3, [pc, #16]	; (8010b00 <__assert_func+0x38>)
 8010aee:	461c      	mov	r4, r3
 8010af0:	e7f3      	b.n	8010ada <__assert_func+0x12>
 8010af2:	bf00      	nop
 8010af4:	240000c0 	.word	0x240000c0
 8010af8:	0801462f 	.word	0x0801462f
 8010afc:	0801463c 	.word	0x0801463c
 8010b00:	0801466a 	.word	0x0801466a

08010b04 <_free_r>:
 8010b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b06:	2900      	cmp	r1, #0
 8010b08:	d044      	beq.n	8010b94 <_free_r+0x90>
 8010b0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b0e:	9001      	str	r0, [sp, #4]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f1a1 0404 	sub.w	r4, r1, #4
 8010b16:	bfb8      	it	lt
 8010b18:	18e4      	addlt	r4, r4, r3
 8010b1a:	f000 f8e7 	bl	8010cec <__malloc_lock>
 8010b1e:	4a1e      	ldr	r2, [pc, #120]	; (8010b98 <_free_r+0x94>)
 8010b20:	9801      	ldr	r0, [sp, #4]
 8010b22:	6813      	ldr	r3, [r2, #0]
 8010b24:	b933      	cbnz	r3, 8010b34 <_free_r+0x30>
 8010b26:	6063      	str	r3, [r4, #4]
 8010b28:	6014      	str	r4, [r2, #0]
 8010b2a:	b003      	add	sp, #12
 8010b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b30:	f000 b8e2 	b.w	8010cf8 <__malloc_unlock>
 8010b34:	42a3      	cmp	r3, r4
 8010b36:	d908      	bls.n	8010b4a <_free_r+0x46>
 8010b38:	6825      	ldr	r5, [r4, #0]
 8010b3a:	1961      	adds	r1, r4, r5
 8010b3c:	428b      	cmp	r3, r1
 8010b3e:	bf01      	itttt	eq
 8010b40:	6819      	ldreq	r1, [r3, #0]
 8010b42:	685b      	ldreq	r3, [r3, #4]
 8010b44:	1949      	addeq	r1, r1, r5
 8010b46:	6021      	streq	r1, [r4, #0]
 8010b48:	e7ed      	b.n	8010b26 <_free_r+0x22>
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	b10b      	cbz	r3, 8010b54 <_free_r+0x50>
 8010b50:	42a3      	cmp	r3, r4
 8010b52:	d9fa      	bls.n	8010b4a <_free_r+0x46>
 8010b54:	6811      	ldr	r1, [r2, #0]
 8010b56:	1855      	adds	r5, r2, r1
 8010b58:	42a5      	cmp	r5, r4
 8010b5a:	d10b      	bne.n	8010b74 <_free_r+0x70>
 8010b5c:	6824      	ldr	r4, [r4, #0]
 8010b5e:	4421      	add	r1, r4
 8010b60:	1854      	adds	r4, r2, r1
 8010b62:	42a3      	cmp	r3, r4
 8010b64:	6011      	str	r1, [r2, #0]
 8010b66:	d1e0      	bne.n	8010b2a <_free_r+0x26>
 8010b68:	681c      	ldr	r4, [r3, #0]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	6053      	str	r3, [r2, #4]
 8010b6e:	440c      	add	r4, r1
 8010b70:	6014      	str	r4, [r2, #0]
 8010b72:	e7da      	b.n	8010b2a <_free_r+0x26>
 8010b74:	d902      	bls.n	8010b7c <_free_r+0x78>
 8010b76:	230c      	movs	r3, #12
 8010b78:	6003      	str	r3, [r0, #0]
 8010b7a:	e7d6      	b.n	8010b2a <_free_r+0x26>
 8010b7c:	6825      	ldr	r5, [r4, #0]
 8010b7e:	1961      	adds	r1, r4, r5
 8010b80:	428b      	cmp	r3, r1
 8010b82:	bf04      	itt	eq
 8010b84:	6819      	ldreq	r1, [r3, #0]
 8010b86:	685b      	ldreq	r3, [r3, #4]
 8010b88:	6063      	str	r3, [r4, #4]
 8010b8a:	bf04      	itt	eq
 8010b8c:	1949      	addeq	r1, r1, r5
 8010b8e:	6021      	streq	r1, [r4, #0]
 8010b90:	6054      	str	r4, [r2, #4]
 8010b92:	e7ca      	b.n	8010b2a <_free_r+0x26>
 8010b94:	b003      	add	sp, #12
 8010b96:	bd30      	pop	{r4, r5, pc}
 8010b98:	24005b74 	.word	0x24005b74

08010b9c <malloc>:
 8010b9c:	4b02      	ldr	r3, [pc, #8]	; (8010ba8 <malloc+0xc>)
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	6818      	ldr	r0, [r3, #0]
 8010ba2:	f000 b823 	b.w	8010bec <_malloc_r>
 8010ba6:	bf00      	nop
 8010ba8:	240000c0 	.word	0x240000c0

08010bac <sbrk_aligned>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	4e0e      	ldr	r6, [pc, #56]	; (8010be8 <sbrk_aligned+0x3c>)
 8010bb0:	460c      	mov	r4, r1
 8010bb2:	6831      	ldr	r1, [r6, #0]
 8010bb4:	4605      	mov	r5, r0
 8010bb6:	b911      	cbnz	r1, 8010bbe <sbrk_aligned+0x12>
 8010bb8:	f000 fcea 	bl	8011590 <_sbrk_r>
 8010bbc:	6030      	str	r0, [r6, #0]
 8010bbe:	4621      	mov	r1, r4
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f000 fce5 	bl	8011590 <_sbrk_r>
 8010bc6:	1c43      	adds	r3, r0, #1
 8010bc8:	d00a      	beq.n	8010be0 <sbrk_aligned+0x34>
 8010bca:	1cc4      	adds	r4, r0, #3
 8010bcc:	f024 0403 	bic.w	r4, r4, #3
 8010bd0:	42a0      	cmp	r0, r4
 8010bd2:	d007      	beq.n	8010be4 <sbrk_aligned+0x38>
 8010bd4:	1a21      	subs	r1, r4, r0
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f000 fcda 	bl	8011590 <_sbrk_r>
 8010bdc:	3001      	adds	r0, #1
 8010bde:	d101      	bne.n	8010be4 <sbrk_aligned+0x38>
 8010be0:	f04f 34ff 	mov.w	r4, #4294967295
 8010be4:	4620      	mov	r0, r4
 8010be6:	bd70      	pop	{r4, r5, r6, pc}
 8010be8:	24005b78 	.word	0x24005b78

08010bec <_malloc_r>:
 8010bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf0:	1ccd      	adds	r5, r1, #3
 8010bf2:	f025 0503 	bic.w	r5, r5, #3
 8010bf6:	3508      	adds	r5, #8
 8010bf8:	2d0c      	cmp	r5, #12
 8010bfa:	bf38      	it	cc
 8010bfc:	250c      	movcc	r5, #12
 8010bfe:	2d00      	cmp	r5, #0
 8010c00:	4607      	mov	r7, r0
 8010c02:	db01      	blt.n	8010c08 <_malloc_r+0x1c>
 8010c04:	42a9      	cmp	r1, r5
 8010c06:	d905      	bls.n	8010c14 <_malloc_r+0x28>
 8010c08:	230c      	movs	r3, #12
 8010c0a:	603b      	str	r3, [r7, #0]
 8010c0c:	2600      	movs	r6, #0
 8010c0e:	4630      	mov	r0, r6
 8010c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010ce8 <_malloc_r+0xfc>
 8010c18:	f000 f868 	bl	8010cec <__malloc_lock>
 8010c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8010c20:	461c      	mov	r4, r3
 8010c22:	bb5c      	cbnz	r4, 8010c7c <_malloc_r+0x90>
 8010c24:	4629      	mov	r1, r5
 8010c26:	4638      	mov	r0, r7
 8010c28:	f7ff ffc0 	bl	8010bac <sbrk_aligned>
 8010c2c:	1c43      	adds	r3, r0, #1
 8010c2e:	4604      	mov	r4, r0
 8010c30:	d155      	bne.n	8010cde <_malloc_r+0xf2>
 8010c32:	f8d8 4000 	ldr.w	r4, [r8]
 8010c36:	4626      	mov	r6, r4
 8010c38:	2e00      	cmp	r6, #0
 8010c3a:	d145      	bne.n	8010cc8 <_malloc_r+0xdc>
 8010c3c:	2c00      	cmp	r4, #0
 8010c3e:	d048      	beq.n	8010cd2 <_malloc_r+0xe6>
 8010c40:	6823      	ldr	r3, [r4, #0]
 8010c42:	4631      	mov	r1, r6
 8010c44:	4638      	mov	r0, r7
 8010c46:	eb04 0903 	add.w	r9, r4, r3
 8010c4a:	f000 fca1 	bl	8011590 <_sbrk_r>
 8010c4e:	4581      	cmp	r9, r0
 8010c50:	d13f      	bne.n	8010cd2 <_malloc_r+0xe6>
 8010c52:	6821      	ldr	r1, [r4, #0]
 8010c54:	1a6d      	subs	r5, r5, r1
 8010c56:	4629      	mov	r1, r5
 8010c58:	4638      	mov	r0, r7
 8010c5a:	f7ff ffa7 	bl	8010bac <sbrk_aligned>
 8010c5e:	3001      	adds	r0, #1
 8010c60:	d037      	beq.n	8010cd2 <_malloc_r+0xe6>
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	442b      	add	r3, r5
 8010c66:	6023      	str	r3, [r4, #0]
 8010c68:	f8d8 3000 	ldr.w	r3, [r8]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d038      	beq.n	8010ce2 <_malloc_r+0xf6>
 8010c70:	685a      	ldr	r2, [r3, #4]
 8010c72:	42a2      	cmp	r2, r4
 8010c74:	d12b      	bne.n	8010cce <_malloc_r+0xe2>
 8010c76:	2200      	movs	r2, #0
 8010c78:	605a      	str	r2, [r3, #4]
 8010c7a:	e00f      	b.n	8010c9c <_malloc_r+0xb0>
 8010c7c:	6822      	ldr	r2, [r4, #0]
 8010c7e:	1b52      	subs	r2, r2, r5
 8010c80:	d41f      	bmi.n	8010cc2 <_malloc_r+0xd6>
 8010c82:	2a0b      	cmp	r2, #11
 8010c84:	d917      	bls.n	8010cb6 <_malloc_r+0xca>
 8010c86:	1961      	adds	r1, r4, r5
 8010c88:	42a3      	cmp	r3, r4
 8010c8a:	6025      	str	r5, [r4, #0]
 8010c8c:	bf18      	it	ne
 8010c8e:	6059      	strne	r1, [r3, #4]
 8010c90:	6863      	ldr	r3, [r4, #4]
 8010c92:	bf08      	it	eq
 8010c94:	f8c8 1000 	streq.w	r1, [r8]
 8010c98:	5162      	str	r2, [r4, r5]
 8010c9a:	604b      	str	r3, [r1, #4]
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	f104 060b 	add.w	r6, r4, #11
 8010ca2:	f000 f829 	bl	8010cf8 <__malloc_unlock>
 8010ca6:	f026 0607 	bic.w	r6, r6, #7
 8010caa:	1d23      	adds	r3, r4, #4
 8010cac:	1af2      	subs	r2, r6, r3
 8010cae:	d0ae      	beq.n	8010c0e <_malloc_r+0x22>
 8010cb0:	1b9b      	subs	r3, r3, r6
 8010cb2:	50a3      	str	r3, [r4, r2]
 8010cb4:	e7ab      	b.n	8010c0e <_malloc_r+0x22>
 8010cb6:	42a3      	cmp	r3, r4
 8010cb8:	6862      	ldr	r2, [r4, #4]
 8010cba:	d1dd      	bne.n	8010c78 <_malloc_r+0x8c>
 8010cbc:	f8c8 2000 	str.w	r2, [r8]
 8010cc0:	e7ec      	b.n	8010c9c <_malloc_r+0xb0>
 8010cc2:	4623      	mov	r3, r4
 8010cc4:	6864      	ldr	r4, [r4, #4]
 8010cc6:	e7ac      	b.n	8010c22 <_malloc_r+0x36>
 8010cc8:	4634      	mov	r4, r6
 8010cca:	6876      	ldr	r6, [r6, #4]
 8010ccc:	e7b4      	b.n	8010c38 <_malloc_r+0x4c>
 8010cce:	4613      	mov	r3, r2
 8010cd0:	e7cc      	b.n	8010c6c <_malloc_r+0x80>
 8010cd2:	230c      	movs	r3, #12
 8010cd4:	603b      	str	r3, [r7, #0]
 8010cd6:	4638      	mov	r0, r7
 8010cd8:	f000 f80e 	bl	8010cf8 <__malloc_unlock>
 8010cdc:	e797      	b.n	8010c0e <_malloc_r+0x22>
 8010cde:	6025      	str	r5, [r4, #0]
 8010ce0:	e7dc      	b.n	8010c9c <_malloc_r+0xb0>
 8010ce2:	605b      	str	r3, [r3, #4]
 8010ce4:	deff      	udf	#255	; 0xff
 8010ce6:	bf00      	nop
 8010ce8:	24005b74 	.word	0x24005b74

08010cec <__malloc_lock>:
 8010cec:	4801      	ldr	r0, [pc, #4]	; (8010cf4 <__malloc_lock+0x8>)
 8010cee:	f7ff beda 	b.w	8010aa6 <__retarget_lock_acquire_recursive>
 8010cf2:	bf00      	nop
 8010cf4:	24005b70 	.word	0x24005b70

08010cf8 <__malloc_unlock>:
 8010cf8:	4801      	ldr	r0, [pc, #4]	; (8010d00 <__malloc_unlock+0x8>)
 8010cfa:	f7ff bed5 	b.w	8010aa8 <__retarget_lock_release_recursive>
 8010cfe:	bf00      	nop
 8010d00:	24005b70 	.word	0x24005b70

08010d04 <__ssputs_r>:
 8010d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d08:	688e      	ldr	r6, [r1, #8]
 8010d0a:	461f      	mov	r7, r3
 8010d0c:	42be      	cmp	r6, r7
 8010d0e:	680b      	ldr	r3, [r1, #0]
 8010d10:	4682      	mov	sl, r0
 8010d12:	460c      	mov	r4, r1
 8010d14:	4690      	mov	r8, r2
 8010d16:	d82c      	bhi.n	8010d72 <__ssputs_r+0x6e>
 8010d18:	898a      	ldrh	r2, [r1, #12]
 8010d1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d1e:	d026      	beq.n	8010d6e <__ssputs_r+0x6a>
 8010d20:	6965      	ldr	r5, [r4, #20]
 8010d22:	6909      	ldr	r1, [r1, #16]
 8010d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d28:	eba3 0901 	sub.w	r9, r3, r1
 8010d2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d30:	1c7b      	adds	r3, r7, #1
 8010d32:	444b      	add	r3, r9
 8010d34:	106d      	asrs	r5, r5, #1
 8010d36:	429d      	cmp	r5, r3
 8010d38:	bf38      	it	cc
 8010d3a:	461d      	movcc	r5, r3
 8010d3c:	0553      	lsls	r3, r2, #21
 8010d3e:	d527      	bpl.n	8010d90 <__ssputs_r+0x8c>
 8010d40:	4629      	mov	r1, r5
 8010d42:	f7ff ff53 	bl	8010bec <_malloc_r>
 8010d46:	4606      	mov	r6, r0
 8010d48:	b360      	cbz	r0, 8010da4 <__ssputs_r+0xa0>
 8010d4a:	6921      	ldr	r1, [r4, #16]
 8010d4c:	464a      	mov	r2, r9
 8010d4e:	f7ff feac 	bl	8010aaa <memcpy>
 8010d52:	89a3      	ldrh	r3, [r4, #12]
 8010d54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d5c:	81a3      	strh	r3, [r4, #12]
 8010d5e:	6126      	str	r6, [r4, #16]
 8010d60:	6165      	str	r5, [r4, #20]
 8010d62:	444e      	add	r6, r9
 8010d64:	eba5 0509 	sub.w	r5, r5, r9
 8010d68:	6026      	str	r6, [r4, #0]
 8010d6a:	60a5      	str	r5, [r4, #8]
 8010d6c:	463e      	mov	r6, r7
 8010d6e:	42be      	cmp	r6, r7
 8010d70:	d900      	bls.n	8010d74 <__ssputs_r+0x70>
 8010d72:	463e      	mov	r6, r7
 8010d74:	6820      	ldr	r0, [r4, #0]
 8010d76:	4632      	mov	r2, r6
 8010d78:	4641      	mov	r1, r8
 8010d7a:	f000 fbcd 	bl	8011518 <memmove>
 8010d7e:	68a3      	ldr	r3, [r4, #8]
 8010d80:	1b9b      	subs	r3, r3, r6
 8010d82:	60a3      	str	r3, [r4, #8]
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	4433      	add	r3, r6
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d90:	462a      	mov	r2, r5
 8010d92:	f000 fc14 	bl	80115be <_realloc_r>
 8010d96:	4606      	mov	r6, r0
 8010d98:	2800      	cmp	r0, #0
 8010d9a:	d1e0      	bne.n	8010d5e <__ssputs_r+0x5a>
 8010d9c:	6921      	ldr	r1, [r4, #16]
 8010d9e:	4650      	mov	r0, sl
 8010da0:	f7ff feb0 	bl	8010b04 <_free_r>
 8010da4:	230c      	movs	r3, #12
 8010da6:	f8ca 3000 	str.w	r3, [sl]
 8010daa:	89a3      	ldrh	r3, [r4, #12]
 8010dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010db0:	81a3      	strh	r3, [r4, #12]
 8010db2:	f04f 30ff 	mov.w	r0, #4294967295
 8010db6:	e7e9      	b.n	8010d8c <__ssputs_r+0x88>

08010db8 <_svfiprintf_r>:
 8010db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	4698      	mov	r8, r3
 8010dbe:	898b      	ldrh	r3, [r1, #12]
 8010dc0:	061b      	lsls	r3, r3, #24
 8010dc2:	b09d      	sub	sp, #116	; 0x74
 8010dc4:	4607      	mov	r7, r0
 8010dc6:	460d      	mov	r5, r1
 8010dc8:	4614      	mov	r4, r2
 8010dca:	d50e      	bpl.n	8010dea <_svfiprintf_r+0x32>
 8010dcc:	690b      	ldr	r3, [r1, #16]
 8010dce:	b963      	cbnz	r3, 8010dea <_svfiprintf_r+0x32>
 8010dd0:	2140      	movs	r1, #64	; 0x40
 8010dd2:	f7ff ff0b 	bl	8010bec <_malloc_r>
 8010dd6:	6028      	str	r0, [r5, #0]
 8010dd8:	6128      	str	r0, [r5, #16]
 8010dda:	b920      	cbnz	r0, 8010de6 <_svfiprintf_r+0x2e>
 8010ddc:	230c      	movs	r3, #12
 8010dde:	603b      	str	r3, [r7, #0]
 8010de0:	f04f 30ff 	mov.w	r0, #4294967295
 8010de4:	e0d0      	b.n	8010f88 <_svfiprintf_r+0x1d0>
 8010de6:	2340      	movs	r3, #64	; 0x40
 8010de8:	616b      	str	r3, [r5, #20]
 8010dea:	2300      	movs	r3, #0
 8010dec:	9309      	str	r3, [sp, #36]	; 0x24
 8010dee:	2320      	movs	r3, #32
 8010df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010df8:	2330      	movs	r3, #48	; 0x30
 8010dfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010fa0 <_svfiprintf_r+0x1e8>
 8010dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e02:	f04f 0901 	mov.w	r9, #1
 8010e06:	4623      	mov	r3, r4
 8010e08:	469a      	mov	sl, r3
 8010e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e0e:	b10a      	cbz	r2, 8010e14 <_svfiprintf_r+0x5c>
 8010e10:	2a25      	cmp	r2, #37	; 0x25
 8010e12:	d1f9      	bne.n	8010e08 <_svfiprintf_r+0x50>
 8010e14:	ebba 0b04 	subs.w	fp, sl, r4
 8010e18:	d00b      	beq.n	8010e32 <_svfiprintf_r+0x7a>
 8010e1a:	465b      	mov	r3, fp
 8010e1c:	4622      	mov	r2, r4
 8010e1e:	4629      	mov	r1, r5
 8010e20:	4638      	mov	r0, r7
 8010e22:	f7ff ff6f 	bl	8010d04 <__ssputs_r>
 8010e26:	3001      	adds	r0, #1
 8010e28:	f000 80a9 	beq.w	8010f7e <_svfiprintf_r+0x1c6>
 8010e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e2e:	445a      	add	r2, fp
 8010e30:	9209      	str	r2, [sp, #36]	; 0x24
 8010e32:	f89a 3000 	ldrb.w	r3, [sl]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f000 80a1 	beq.w	8010f7e <_svfiprintf_r+0x1c6>
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e46:	f10a 0a01 	add.w	sl, sl, #1
 8010e4a:	9304      	str	r3, [sp, #16]
 8010e4c:	9307      	str	r3, [sp, #28]
 8010e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e52:	931a      	str	r3, [sp, #104]	; 0x68
 8010e54:	4654      	mov	r4, sl
 8010e56:	2205      	movs	r2, #5
 8010e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5c:	4850      	ldr	r0, [pc, #320]	; (8010fa0 <_svfiprintf_r+0x1e8>)
 8010e5e:	f7ef fa3f 	bl	80002e0 <memchr>
 8010e62:	9a04      	ldr	r2, [sp, #16]
 8010e64:	b9d8      	cbnz	r0, 8010e9e <_svfiprintf_r+0xe6>
 8010e66:	06d0      	lsls	r0, r2, #27
 8010e68:	bf44      	itt	mi
 8010e6a:	2320      	movmi	r3, #32
 8010e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e70:	0711      	lsls	r1, r2, #28
 8010e72:	bf44      	itt	mi
 8010e74:	232b      	movmi	r3, #43	; 0x2b
 8010e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e80:	d015      	beq.n	8010eae <_svfiprintf_r+0xf6>
 8010e82:	9a07      	ldr	r2, [sp, #28]
 8010e84:	4654      	mov	r4, sl
 8010e86:	2000      	movs	r0, #0
 8010e88:	f04f 0c0a 	mov.w	ip, #10
 8010e8c:	4621      	mov	r1, r4
 8010e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e92:	3b30      	subs	r3, #48	; 0x30
 8010e94:	2b09      	cmp	r3, #9
 8010e96:	d94d      	bls.n	8010f34 <_svfiprintf_r+0x17c>
 8010e98:	b1b0      	cbz	r0, 8010ec8 <_svfiprintf_r+0x110>
 8010e9a:	9207      	str	r2, [sp, #28]
 8010e9c:	e014      	b.n	8010ec8 <_svfiprintf_r+0x110>
 8010e9e:	eba0 0308 	sub.w	r3, r0, r8
 8010ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8010ea6:	4313      	orrs	r3, r2
 8010ea8:	9304      	str	r3, [sp, #16]
 8010eaa:	46a2      	mov	sl, r4
 8010eac:	e7d2      	b.n	8010e54 <_svfiprintf_r+0x9c>
 8010eae:	9b03      	ldr	r3, [sp, #12]
 8010eb0:	1d19      	adds	r1, r3, #4
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	9103      	str	r1, [sp, #12]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	bfbb      	ittet	lt
 8010eba:	425b      	neglt	r3, r3
 8010ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8010ec0:	9307      	strge	r3, [sp, #28]
 8010ec2:	9307      	strlt	r3, [sp, #28]
 8010ec4:	bfb8      	it	lt
 8010ec6:	9204      	strlt	r2, [sp, #16]
 8010ec8:	7823      	ldrb	r3, [r4, #0]
 8010eca:	2b2e      	cmp	r3, #46	; 0x2e
 8010ecc:	d10c      	bne.n	8010ee8 <_svfiprintf_r+0x130>
 8010ece:	7863      	ldrb	r3, [r4, #1]
 8010ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8010ed2:	d134      	bne.n	8010f3e <_svfiprintf_r+0x186>
 8010ed4:	9b03      	ldr	r3, [sp, #12]
 8010ed6:	1d1a      	adds	r2, r3, #4
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	9203      	str	r2, [sp, #12]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	bfb8      	it	lt
 8010ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ee4:	3402      	adds	r4, #2
 8010ee6:	9305      	str	r3, [sp, #20]
 8010ee8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010fb0 <_svfiprintf_r+0x1f8>
 8010eec:	7821      	ldrb	r1, [r4, #0]
 8010eee:	2203      	movs	r2, #3
 8010ef0:	4650      	mov	r0, sl
 8010ef2:	f7ef f9f5 	bl	80002e0 <memchr>
 8010ef6:	b138      	cbz	r0, 8010f08 <_svfiprintf_r+0x150>
 8010ef8:	9b04      	ldr	r3, [sp, #16]
 8010efa:	eba0 000a 	sub.w	r0, r0, sl
 8010efe:	2240      	movs	r2, #64	; 0x40
 8010f00:	4082      	lsls	r2, r0
 8010f02:	4313      	orrs	r3, r2
 8010f04:	3401      	adds	r4, #1
 8010f06:	9304      	str	r3, [sp, #16]
 8010f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f0c:	4825      	ldr	r0, [pc, #148]	; (8010fa4 <_svfiprintf_r+0x1ec>)
 8010f0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f12:	2206      	movs	r2, #6
 8010f14:	f7ef f9e4 	bl	80002e0 <memchr>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d038      	beq.n	8010f8e <_svfiprintf_r+0x1d6>
 8010f1c:	4b22      	ldr	r3, [pc, #136]	; (8010fa8 <_svfiprintf_r+0x1f0>)
 8010f1e:	bb1b      	cbnz	r3, 8010f68 <_svfiprintf_r+0x1b0>
 8010f20:	9b03      	ldr	r3, [sp, #12]
 8010f22:	3307      	adds	r3, #7
 8010f24:	f023 0307 	bic.w	r3, r3, #7
 8010f28:	3308      	adds	r3, #8
 8010f2a:	9303      	str	r3, [sp, #12]
 8010f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f2e:	4433      	add	r3, r6
 8010f30:	9309      	str	r3, [sp, #36]	; 0x24
 8010f32:	e768      	b.n	8010e06 <_svfiprintf_r+0x4e>
 8010f34:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f38:	460c      	mov	r4, r1
 8010f3a:	2001      	movs	r0, #1
 8010f3c:	e7a6      	b.n	8010e8c <_svfiprintf_r+0xd4>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	3401      	adds	r4, #1
 8010f42:	9305      	str	r3, [sp, #20]
 8010f44:	4619      	mov	r1, r3
 8010f46:	f04f 0c0a 	mov.w	ip, #10
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f50:	3a30      	subs	r2, #48	; 0x30
 8010f52:	2a09      	cmp	r2, #9
 8010f54:	d903      	bls.n	8010f5e <_svfiprintf_r+0x1a6>
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0c6      	beq.n	8010ee8 <_svfiprintf_r+0x130>
 8010f5a:	9105      	str	r1, [sp, #20]
 8010f5c:	e7c4      	b.n	8010ee8 <_svfiprintf_r+0x130>
 8010f5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f62:	4604      	mov	r4, r0
 8010f64:	2301      	movs	r3, #1
 8010f66:	e7f0      	b.n	8010f4a <_svfiprintf_r+0x192>
 8010f68:	ab03      	add	r3, sp, #12
 8010f6a:	9300      	str	r3, [sp, #0]
 8010f6c:	462a      	mov	r2, r5
 8010f6e:	4b0f      	ldr	r3, [pc, #60]	; (8010fac <_svfiprintf_r+0x1f4>)
 8010f70:	a904      	add	r1, sp, #16
 8010f72:	4638      	mov	r0, r7
 8010f74:	f3af 8000 	nop.w
 8010f78:	1c42      	adds	r2, r0, #1
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	d1d6      	bne.n	8010f2c <_svfiprintf_r+0x174>
 8010f7e:	89ab      	ldrh	r3, [r5, #12]
 8010f80:	065b      	lsls	r3, r3, #25
 8010f82:	f53f af2d 	bmi.w	8010de0 <_svfiprintf_r+0x28>
 8010f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f88:	b01d      	add	sp, #116	; 0x74
 8010f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f8e:	ab03      	add	r3, sp, #12
 8010f90:	9300      	str	r3, [sp, #0]
 8010f92:	462a      	mov	r2, r5
 8010f94:	4b05      	ldr	r3, [pc, #20]	; (8010fac <_svfiprintf_r+0x1f4>)
 8010f96:	a904      	add	r1, sp, #16
 8010f98:	4638      	mov	r0, r7
 8010f9a:	f000 f879 	bl	8011090 <_printf_i>
 8010f9e:	e7eb      	b.n	8010f78 <_svfiprintf_r+0x1c0>
 8010fa0:	0801466b 	.word	0x0801466b
 8010fa4:	08014675 	.word	0x08014675
 8010fa8:	00000000 	.word	0x00000000
 8010fac:	08010d05 	.word	0x08010d05
 8010fb0:	08014671 	.word	0x08014671

08010fb4 <_printf_common>:
 8010fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb8:	4616      	mov	r6, r2
 8010fba:	4699      	mov	r9, r3
 8010fbc:	688a      	ldr	r2, [r1, #8]
 8010fbe:	690b      	ldr	r3, [r1, #16]
 8010fc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fc4:	4293      	cmp	r3, r2
 8010fc6:	bfb8      	it	lt
 8010fc8:	4613      	movlt	r3, r2
 8010fca:	6033      	str	r3, [r6, #0]
 8010fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010fd0:	4607      	mov	r7, r0
 8010fd2:	460c      	mov	r4, r1
 8010fd4:	b10a      	cbz	r2, 8010fda <_printf_common+0x26>
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	6033      	str	r3, [r6, #0]
 8010fda:	6823      	ldr	r3, [r4, #0]
 8010fdc:	0699      	lsls	r1, r3, #26
 8010fde:	bf42      	ittt	mi
 8010fe0:	6833      	ldrmi	r3, [r6, #0]
 8010fe2:	3302      	addmi	r3, #2
 8010fe4:	6033      	strmi	r3, [r6, #0]
 8010fe6:	6825      	ldr	r5, [r4, #0]
 8010fe8:	f015 0506 	ands.w	r5, r5, #6
 8010fec:	d106      	bne.n	8010ffc <_printf_common+0x48>
 8010fee:	f104 0a19 	add.w	sl, r4, #25
 8010ff2:	68e3      	ldr	r3, [r4, #12]
 8010ff4:	6832      	ldr	r2, [r6, #0]
 8010ff6:	1a9b      	subs	r3, r3, r2
 8010ff8:	42ab      	cmp	r3, r5
 8010ffa:	dc26      	bgt.n	801104a <_printf_common+0x96>
 8010ffc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011000:	1e13      	subs	r3, r2, #0
 8011002:	6822      	ldr	r2, [r4, #0]
 8011004:	bf18      	it	ne
 8011006:	2301      	movne	r3, #1
 8011008:	0692      	lsls	r2, r2, #26
 801100a:	d42b      	bmi.n	8011064 <_printf_common+0xb0>
 801100c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011010:	4649      	mov	r1, r9
 8011012:	4638      	mov	r0, r7
 8011014:	47c0      	blx	r8
 8011016:	3001      	adds	r0, #1
 8011018:	d01e      	beq.n	8011058 <_printf_common+0xa4>
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	6922      	ldr	r2, [r4, #16]
 801101e:	f003 0306 	and.w	r3, r3, #6
 8011022:	2b04      	cmp	r3, #4
 8011024:	bf02      	ittt	eq
 8011026:	68e5      	ldreq	r5, [r4, #12]
 8011028:	6833      	ldreq	r3, [r6, #0]
 801102a:	1aed      	subeq	r5, r5, r3
 801102c:	68a3      	ldr	r3, [r4, #8]
 801102e:	bf0c      	ite	eq
 8011030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011034:	2500      	movne	r5, #0
 8011036:	4293      	cmp	r3, r2
 8011038:	bfc4      	itt	gt
 801103a:	1a9b      	subgt	r3, r3, r2
 801103c:	18ed      	addgt	r5, r5, r3
 801103e:	2600      	movs	r6, #0
 8011040:	341a      	adds	r4, #26
 8011042:	42b5      	cmp	r5, r6
 8011044:	d11a      	bne.n	801107c <_printf_common+0xc8>
 8011046:	2000      	movs	r0, #0
 8011048:	e008      	b.n	801105c <_printf_common+0xa8>
 801104a:	2301      	movs	r3, #1
 801104c:	4652      	mov	r2, sl
 801104e:	4649      	mov	r1, r9
 8011050:	4638      	mov	r0, r7
 8011052:	47c0      	blx	r8
 8011054:	3001      	adds	r0, #1
 8011056:	d103      	bne.n	8011060 <_printf_common+0xac>
 8011058:	f04f 30ff 	mov.w	r0, #4294967295
 801105c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011060:	3501      	adds	r5, #1
 8011062:	e7c6      	b.n	8010ff2 <_printf_common+0x3e>
 8011064:	18e1      	adds	r1, r4, r3
 8011066:	1c5a      	adds	r2, r3, #1
 8011068:	2030      	movs	r0, #48	; 0x30
 801106a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801106e:	4422      	add	r2, r4
 8011070:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011074:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011078:	3302      	adds	r3, #2
 801107a:	e7c7      	b.n	801100c <_printf_common+0x58>
 801107c:	2301      	movs	r3, #1
 801107e:	4622      	mov	r2, r4
 8011080:	4649      	mov	r1, r9
 8011082:	4638      	mov	r0, r7
 8011084:	47c0      	blx	r8
 8011086:	3001      	adds	r0, #1
 8011088:	d0e6      	beq.n	8011058 <_printf_common+0xa4>
 801108a:	3601      	adds	r6, #1
 801108c:	e7d9      	b.n	8011042 <_printf_common+0x8e>
	...

08011090 <_printf_i>:
 8011090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011094:	7e0f      	ldrb	r7, [r1, #24]
 8011096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011098:	2f78      	cmp	r7, #120	; 0x78
 801109a:	4691      	mov	r9, r2
 801109c:	4680      	mov	r8, r0
 801109e:	460c      	mov	r4, r1
 80110a0:	469a      	mov	sl, r3
 80110a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80110a6:	d807      	bhi.n	80110b8 <_printf_i+0x28>
 80110a8:	2f62      	cmp	r7, #98	; 0x62
 80110aa:	d80a      	bhi.n	80110c2 <_printf_i+0x32>
 80110ac:	2f00      	cmp	r7, #0
 80110ae:	f000 80d4 	beq.w	801125a <_printf_i+0x1ca>
 80110b2:	2f58      	cmp	r7, #88	; 0x58
 80110b4:	f000 80c0 	beq.w	8011238 <_printf_i+0x1a8>
 80110b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80110c0:	e03a      	b.n	8011138 <_printf_i+0xa8>
 80110c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80110c6:	2b15      	cmp	r3, #21
 80110c8:	d8f6      	bhi.n	80110b8 <_printf_i+0x28>
 80110ca:	a101      	add	r1, pc, #4	; (adr r1, 80110d0 <_printf_i+0x40>)
 80110cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110d0:	08011129 	.word	0x08011129
 80110d4:	0801113d 	.word	0x0801113d
 80110d8:	080110b9 	.word	0x080110b9
 80110dc:	080110b9 	.word	0x080110b9
 80110e0:	080110b9 	.word	0x080110b9
 80110e4:	080110b9 	.word	0x080110b9
 80110e8:	0801113d 	.word	0x0801113d
 80110ec:	080110b9 	.word	0x080110b9
 80110f0:	080110b9 	.word	0x080110b9
 80110f4:	080110b9 	.word	0x080110b9
 80110f8:	080110b9 	.word	0x080110b9
 80110fc:	08011241 	.word	0x08011241
 8011100:	08011169 	.word	0x08011169
 8011104:	080111fb 	.word	0x080111fb
 8011108:	080110b9 	.word	0x080110b9
 801110c:	080110b9 	.word	0x080110b9
 8011110:	08011263 	.word	0x08011263
 8011114:	080110b9 	.word	0x080110b9
 8011118:	08011169 	.word	0x08011169
 801111c:	080110b9 	.word	0x080110b9
 8011120:	080110b9 	.word	0x080110b9
 8011124:	08011203 	.word	0x08011203
 8011128:	682b      	ldr	r3, [r5, #0]
 801112a:	1d1a      	adds	r2, r3, #4
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	602a      	str	r2, [r5, #0]
 8011130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011134:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011138:	2301      	movs	r3, #1
 801113a:	e09f      	b.n	801127c <_printf_i+0x1ec>
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	682b      	ldr	r3, [r5, #0]
 8011140:	0607      	lsls	r7, r0, #24
 8011142:	f103 0104 	add.w	r1, r3, #4
 8011146:	6029      	str	r1, [r5, #0]
 8011148:	d501      	bpl.n	801114e <_printf_i+0xbe>
 801114a:	681e      	ldr	r6, [r3, #0]
 801114c:	e003      	b.n	8011156 <_printf_i+0xc6>
 801114e:	0646      	lsls	r6, r0, #25
 8011150:	d5fb      	bpl.n	801114a <_printf_i+0xba>
 8011152:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011156:	2e00      	cmp	r6, #0
 8011158:	da03      	bge.n	8011162 <_printf_i+0xd2>
 801115a:	232d      	movs	r3, #45	; 0x2d
 801115c:	4276      	negs	r6, r6
 801115e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011162:	485a      	ldr	r0, [pc, #360]	; (80112cc <_printf_i+0x23c>)
 8011164:	230a      	movs	r3, #10
 8011166:	e012      	b.n	801118e <_printf_i+0xfe>
 8011168:	682b      	ldr	r3, [r5, #0]
 801116a:	6820      	ldr	r0, [r4, #0]
 801116c:	1d19      	adds	r1, r3, #4
 801116e:	6029      	str	r1, [r5, #0]
 8011170:	0605      	lsls	r5, r0, #24
 8011172:	d501      	bpl.n	8011178 <_printf_i+0xe8>
 8011174:	681e      	ldr	r6, [r3, #0]
 8011176:	e002      	b.n	801117e <_printf_i+0xee>
 8011178:	0641      	lsls	r1, r0, #25
 801117a:	d5fb      	bpl.n	8011174 <_printf_i+0xe4>
 801117c:	881e      	ldrh	r6, [r3, #0]
 801117e:	4853      	ldr	r0, [pc, #332]	; (80112cc <_printf_i+0x23c>)
 8011180:	2f6f      	cmp	r7, #111	; 0x6f
 8011182:	bf0c      	ite	eq
 8011184:	2308      	moveq	r3, #8
 8011186:	230a      	movne	r3, #10
 8011188:	2100      	movs	r1, #0
 801118a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801118e:	6865      	ldr	r5, [r4, #4]
 8011190:	60a5      	str	r5, [r4, #8]
 8011192:	2d00      	cmp	r5, #0
 8011194:	bfa2      	ittt	ge
 8011196:	6821      	ldrge	r1, [r4, #0]
 8011198:	f021 0104 	bicge.w	r1, r1, #4
 801119c:	6021      	strge	r1, [r4, #0]
 801119e:	b90e      	cbnz	r6, 80111a4 <_printf_i+0x114>
 80111a0:	2d00      	cmp	r5, #0
 80111a2:	d04b      	beq.n	801123c <_printf_i+0x1ac>
 80111a4:	4615      	mov	r5, r2
 80111a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80111aa:	fb03 6711 	mls	r7, r3, r1, r6
 80111ae:	5dc7      	ldrb	r7, [r0, r7]
 80111b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80111b4:	4637      	mov	r7, r6
 80111b6:	42bb      	cmp	r3, r7
 80111b8:	460e      	mov	r6, r1
 80111ba:	d9f4      	bls.n	80111a6 <_printf_i+0x116>
 80111bc:	2b08      	cmp	r3, #8
 80111be:	d10b      	bne.n	80111d8 <_printf_i+0x148>
 80111c0:	6823      	ldr	r3, [r4, #0]
 80111c2:	07de      	lsls	r6, r3, #31
 80111c4:	d508      	bpl.n	80111d8 <_printf_i+0x148>
 80111c6:	6923      	ldr	r3, [r4, #16]
 80111c8:	6861      	ldr	r1, [r4, #4]
 80111ca:	4299      	cmp	r1, r3
 80111cc:	bfde      	ittt	le
 80111ce:	2330      	movle	r3, #48	; 0x30
 80111d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80111d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80111d8:	1b52      	subs	r2, r2, r5
 80111da:	6122      	str	r2, [r4, #16]
 80111dc:	f8cd a000 	str.w	sl, [sp]
 80111e0:	464b      	mov	r3, r9
 80111e2:	aa03      	add	r2, sp, #12
 80111e4:	4621      	mov	r1, r4
 80111e6:	4640      	mov	r0, r8
 80111e8:	f7ff fee4 	bl	8010fb4 <_printf_common>
 80111ec:	3001      	adds	r0, #1
 80111ee:	d14a      	bne.n	8011286 <_printf_i+0x1f6>
 80111f0:	f04f 30ff 	mov.w	r0, #4294967295
 80111f4:	b004      	add	sp, #16
 80111f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111fa:	6823      	ldr	r3, [r4, #0]
 80111fc:	f043 0320 	orr.w	r3, r3, #32
 8011200:	6023      	str	r3, [r4, #0]
 8011202:	4833      	ldr	r0, [pc, #204]	; (80112d0 <_printf_i+0x240>)
 8011204:	2778      	movs	r7, #120	; 0x78
 8011206:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801120a:	6823      	ldr	r3, [r4, #0]
 801120c:	6829      	ldr	r1, [r5, #0]
 801120e:	061f      	lsls	r7, r3, #24
 8011210:	f851 6b04 	ldr.w	r6, [r1], #4
 8011214:	d402      	bmi.n	801121c <_printf_i+0x18c>
 8011216:	065f      	lsls	r7, r3, #25
 8011218:	bf48      	it	mi
 801121a:	b2b6      	uxthmi	r6, r6
 801121c:	07df      	lsls	r7, r3, #31
 801121e:	bf48      	it	mi
 8011220:	f043 0320 	orrmi.w	r3, r3, #32
 8011224:	6029      	str	r1, [r5, #0]
 8011226:	bf48      	it	mi
 8011228:	6023      	strmi	r3, [r4, #0]
 801122a:	b91e      	cbnz	r6, 8011234 <_printf_i+0x1a4>
 801122c:	6823      	ldr	r3, [r4, #0]
 801122e:	f023 0320 	bic.w	r3, r3, #32
 8011232:	6023      	str	r3, [r4, #0]
 8011234:	2310      	movs	r3, #16
 8011236:	e7a7      	b.n	8011188 <_printf_i+0xf8>
 8011238:	4824      	ldr	r0, [pc, #144]	; (80112cc <_printf_i+0x23c>)
 801123a:	e7e4      	b.n	8011206 <_printf_i+0x176>
 801123c:	4615      	mov	r5, r2
 801123e:	e7bd      	b.n	80111bc <_printf_i+0x12c>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	6826      	ldr	r6, [r4, #0]
 8011244:	6961      	ldr	r1, [r4, #20]
 8011246:	1d18      	adds	r0, r3, #4
 8011248:	6028      	str	r0, [r5, #0]
 801124a:	0635      	lsls	r5, r6, #24
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	d501      	bpl.n	8011254 <_printf_i+0x1c4>
 8011250:	6019      	str	r1, [r3, #0]
 8011252:	e002      	b.n	801125a <_printf_i+0x1ca>
 8011254:	0670      	lsls	r0, r6, #25
 8011256:	d5fb      	bpl.n	8011250 <_printf_i+0x1c0>
 8011258:	8019      	strh	r1, [r3, #0]
 801125a:	2300      	movs	r3, #0
 801125c:	6123      	str	r3, [r4, #16]
 801125e:	4615      	mov	r5, r2
 8011260:	e7bc      	b.n	80111dc <_printf_i+0x14c>
 8011262:	682b      	ldr	r3, [r5, #0]
 8011264:	1d1a      	adds	r2, r3, #4
 8011266:	602a      	str	r2, [r5, #0]
 8011268:	681d      	ldr	r5, [r3, #0]
 801126a:	6862      	ldr	r2, [r4, #4]
 801126c:	2100      	movs	r1, #0
 801126e:	4628      	mov	r0, r5
 8011270:	f7ef f836 	bl	80002e0 <memchr>
 8011274:	b108      	cbz	r0, 801127a <_printf_i+0x1ea>
 8011276:	1b40      	subs	r0, r0, r5
 8011278:	6060      	str	r0, [r4, #4]
 801127a:	6863      	ldr	r3, [r4, #4]
 801127c:	6123      	str	r3, [r4, #16]
 801127e:	2300      	movs	r3, #0
 8011280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011284:	e7aa      	b.n	80111dc <_printf_i+0x14c>
 8011286:	6923      	ldr	r3, [r4, #16]
 8011288:	462a      	mov	r2, r5
 801128a:	4649      	mov	r1, r9
 801128c:	4640      	mov	r0, r8
 801128e:	47d0      	blx	sl
 8011290:	3001      	adds	r0, #1
 8011292:	d0ad      	beq.n	80111f0 <_printf_i+0x160>
 8011294:	6823      	ldr	r3, [r4, #0]
 8011296:	079b      	lsls	r3, r3, #30
 8011298:	d413      	bmi.n	80112c2 <_printf_i+0x232>
 801129a:	68e0      	ldr	r0, [r4, #12]
 801129c:	9b03      	ldr	r3, [sp, #12]
 801129e:	4298      	cmp	r0, r3
 80112a0:	bfb8      	it	lt
 80112a2:	4618      	movlt	r0, r3
 80112a4:	e7a6      	b.n	80111f4 <_printf_i+0x164>
 80112a6:	2301      	movs	r3, #1
 80112a8:	4632      	mov	r2, r6
 80112aa:	4649      	mov	r1, r9
 80112ac:	4640      	mov	r0, r8
 80112ae:	47d0      	blx	sl
 80112b0:	3001      	adds	r0, #1
 80112b2:	d09d      	beq.n	80111f0 <_printf_i+0x160>
 80112b4:	3501      	adds	r5, #1
 80112b6:	68e3      	ldr	r3, [r4, #12]
 80112b8:	9903      	ldr	r1, [sp, #12]
 80112ba:	1a5b      	subs	r3, r3, r1
 80112bc:	42ab      	cmp	r3, r5
 80112be:	dcf2      	bgt.n	80112a6 <_printf_i+0x216>
 80112c0:	e7eb      	b.n	801129a <_printf_i+0x20a>
 80112c2:	2500      	movs	r5, #0
 80112c4:	f104 0619 	add.w	r6, r4, #25
 80112c8:	e7f5      	b.n	80112b6 <_printf_i+0x226>
 80112ca:	bf00      	nop
 80112cc:	0801467c 	.word	0x0801467c
 80112d0:	0801468d 	.word	0x0801468d

080112d4 <__sflush_r>:
 80112d4:	898a      	ldrh	r2, [r1, #12]
 80112d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112da:	4605      	mov	r5, r0
 80112dc:	0710      	lsls	r0, r2, #28
 80112de:	460c      	mov	r4, r1
 80112e0:	d458      	bmi.n	8011394 <__sflush_r+0xc0>
 80112e2:	684b      	ldr	r3, [r1, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	dc05      	bgt.n	80112f4 <__sflush_r+0x20>
 80112e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	dc02      	bgt.n	80112f4 <__sflush_r+0x20>
 80112ee:	2000      	movs	r0, #0
 80112f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112f6:	2e00      	cmp	r6, #0
 80112f8:	d0f9      	beq.n	80112ee <__sflush_r+0x1a>
 80112fa:	2300      	movs	r3, #0
 80112fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011300:	682f      	ldr	r7, [r5, #0]
 8011302:	6a21      	ldr	r1, [r4, #32]
 8011304:	602b      	str	r3, [r5, #0]
 8011306:	d032      	beq.n	801136e <__sflush_r+0x9a>
 8011308:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801130a:	89a3      	ldrh	r3, [r4, #12]
 801130c:	075a      	lsls	r2, r3, #29
 801130e:	d505      	bpl.n	801131c <__sflush_r+0x48>
 8011310:	6863      	ldr	r3, [r4, #4]
 8011312:	1ac0      	subs	r0, r0, r3
 8011314:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011316:	b10b      	cbz	r3, 801131c <__sflush_r+0x48>
 8011318:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801131a:	1ac0      	subs	r0, r0, r3
 801131c:	2300      	movs	r3, #0
 801131e:	4602      	mov	r2, r0
 8011320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011322:	6a21      	ldr	r1, [r4, #32]
 8011324:	4628      	mov	r0, r5
 8011326:	47b0      	blx	r6
 8011328:	1c43      	adds	r3, r0, #1
 801132a:	89a3      	ldrh	r3, [r4, #12]
 801132c:	d106      	bne.n	801133c <__sflush_r+0x68>
 801132e:	6829      	ldr	r1, [r5, #0]
 8011330:	291d      	cmp	r1, #29
 8011332:	d82b      	bhi.n	801138c <__sflush_r+0xb8>
 8011334:	4a29      	ldr	r2, [pc, #164]	; (80113dc <__sflush_r+0x108>)
 8011336:	410a      	asrs	r2, r1
 8011338:	07d6      	lsls	r6, r2, #31
 801133a:	d427      	bmi.n	801138c <__sflush_r+0xb8>
 801133c:	2200      	movs	r2, #0
 801133e:	6062      	str	r2, [r4, #4]
 8011340:	04d9      	lsls	r1, r3, #19
 8011342:	6922      	ldr	r2, [r4, #16]
 8011344:	6022      	str	r2, [r4, #0]
 8011346:	d504      	bpl.n	8011352 <__sflush_r+0x7e>
 8011348:	1c42      	adds	r2, r0, #1
 801134a:	d101      	bne.n	8011350 <__sflush_r+0x7c>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	b903      	cbnz	r3, 8011352 <__sflush_r+0x7e>
 8011350:	6560      	str	r0, [r4, #84]	; 0x54
 8011352:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011354:	602f      	str	r7, [r5, #0]
 8011356:	2900      	cmp	r1, #0
 8011358:	d0c9      	beq.n	80112ee <__sflush_r+0x1a>
 801135a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801135e:	4299      	cmp	r1, r3
 8011360:	d002      	beq.n	8011368 <__sflush_r+0x94>
 8011362:	4628      	mov	r0, r5
 8011364:	f7ff fbce 	bl	8010b04 <_free_r>
 8011368:	2000      	movs	r0, #0
 801136a:	6360      	str	r0, [r4, #52]	; 0x34
 801136c:	e7c0      	b.n	80112f0 <__sflush_r+0x1c>
 801136e:	2301      	movs	r3, #1
 8011370:	4628      	mov	r0, r5
 8011372:	47b0      	blx	r6
 8011374:	1c41      	adds	r1, r0, #1
 8011376:	d1c8      	bne.n	801130a <__sflush_r+0x36>
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d0c5      	beq.n	801130a <__sflush_r+0x36>
 801137e:	2b1d      	cmp	r3, #29
 8011380:	d001      	beq.n	8011386 <__sflush_r+0xb2>
 8011382:	2b16      	cmp	r3, #22
 8011384:	d101      	bne.n	801138a <__sflush_r+0xb6>
 8011386:	602f      	str	r7, [r5, #0]
 8011388:	e7b1      	b.n	80112ee <__sflush_r+0x1a>
 801138a:	89a3      	ldrh	r3, [r4, #12]
 801138c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011390:	81a3      	strh	r3, [r4, #12]
 8011392:	e7ad      	b.n	80112f0 <__sflush_r+0x1c>
 8011394:	690f      	ldr	r7, [r1, #16]
 8011396:	2f00      	cmp	r7, #0
 8011398:	d0a9      	beq.n	80112ee <__sflush_r+0x1a>
 801139a:	0793      	lsls	r3, r2, #30
 801139c:	680e      	ldr	r6, [r1, #0]
 801139e:	bf08      	it	eq
 80113a0:	694b      	ldreq	r3, [r1, #20]
 80113a2:	600f      	str	r7, [r1, #0]
 80113a4:	bf18      	it	ne
 80113a6:	2300      	movne	r3, #0
 80113a8:	eba6 0807 	sub.w	r8, r6, r7
 80113ac:	608b      	str	r3, [r1, #8]
 80113ae:	f1b8 0f00 	cmp.w	r8, #0
 80113b2:	dd9c      	ble.n	80112ee <__sflush_r+0x1a>
 80113b4:	6a21      	ldr	r1, [r4, #32]
 80113b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113b8:	4643      	mov	r3, r8
 80113ba:	463a      	mov	r2, r7
 80113bc:	4628      	mov	r0, r5
 80113be:	47b0      	blx	r6
 80113c0:	2800      	cmp	r0, #0
 80113c2:	dc06      	bgt.n	80113d2 <__sflush_r+0xfe>
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113ca:	81a3      	strh	r3, [r4, #12]
 80113cc:	f04f 30ff 	mov.w	r0, #4294967295
 80113d0:	e78e      	b.n	80112f0 <__sflush_r+0x1c>
 80113d2:	4407      	add	r7, r0
 80113d4:	eba8 0800 	sub.w	r8, r8, r0
 80113d8:	e7e9      	b.n	80113ae <__sflush_r+0xda>
 80113da:	bf00      	nop
 80113dc:	dfbffffe 	.word	0xdfbffffe

080113e0 <_fflush_r>:
 80113e0:	b538      	push	{r3, r4, r5, lr}
 80113e2:	690b      	ldr	r3, [r1, #16]
 80113e4:	4605      	mov	r5, r0
 80113e6:	460c      	mov	r4, r1
 80113e8:	b913      	cbnz	r3, 80113f0 <_fflush_r+0x10>
 80113ea:	2500      	movs	r5, #0
 80113ec:	4628      	mov	r0, r5
 80113ee:	bd38      	pop	{r3, r4, r5, pc}
 80113f0:	b118      	cbz	r0, 80113fa <_fflush_r+0x1a>
 80113f2:	6a03      	ldr	r3, [r0, #32]
 80113f4:	b90b      	cbnz	r3, 80113fa <_fflush_r+0x1a>
 80113f6:	f7ff f969 	bl	80106cc <__sinit>
 80113fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d0f3      	beq.n	80113ea <_fflush_r+0xa>
 8011402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011404:	07d0      	lsls	r0, r2, #31
 8011406:	d404      	bmi.n	8011412 <_fflush_r+0x32>
 8011408:	0599      	lsls	r1, r3, #22
 801140a:	d402      	bmi.n	8011412 <_fflush_r+0x32>
 801140c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801140e:	f7ff fb4a 	bl	8010aa6 <__retarget_lock_acquire_recursive>
 8011412:	4628      	mov	r0, r5
 8011414:	4621      	mov	r1, r4
 8011416:	f7ff ff5d 	bl	80112d4 <__sflush_r>
 801141a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801141c:	07da      	lsls	r2, r3, #31
 801141e:	4605      	mov	r5, r0
 8011420:	d4e4      	bmi.n	80113ec <_fflush_r+0xc>
 8011422:	89a3      	ldrh	r3, [r4, #12]
 8011424:	059b      	lsls	r3, r3, #22
 8011426:	d4e1      	bmi.n	80113ec <_fflush_r+0xc>
 8011428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801142a:	f7ff fb3d 	bl	8010aa8 <__retarget_lock_release_recursive>
 801142e:	e7dd      	b.n	80113ec <_fflush_r+0xc>

08011430 <fiprintf>:
 8011430:	b40e      	push	{r1, r2, r3}
 8011432:	b503      	push	{r0, r1, lr}
 8011434:	4601      	mov	r1, r0
 8011436:	ab03      	add	r3, sp, #12
 8011438:	4805      	ldr	r0, [pc, #20]	; (8011450 <fiprintf+0x20>)
 801143a:	f853 2b04 	ldr.w	r2, [r3], #4
 801143e:	6800      	ldr	r0, [r0, #0]
 8011440:	9301      	str	r3, [sp, #4]
 8011442:	f000 f915 	bl	8011670 <_vfiprintf_r>
 8011446:	b002      	add	sp, #8
 8011448:	f85d eb04 	ldr.w	lr, [sp], #4
 801144c:	b003      	add	sp, #12
 801144e:	4770      	bx	lr
 8011450:	240000c0 	.word	0x240000c0

08011454 <__swhatbuf_r>:
 8011454:	b570      	push	{r4, r5, r6, lr}
 8011456:	460c      	mov	r4, r1
 8011458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801145c:	2900      	cmp	r1, #0
 801145e:	b096      	sub	sp, #88	; 0x58
 8011460:	4615      	mov	r5, r2
 8011462:	461e      	mov	r6, r3
 8011464:	da0d      	bge.n	8011482 <__swhatbuf_r+0x2e>
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	f013 0f80 	tst.w	r3, #128	; 0x80
 801146c:	f04f 0100 	mov.w	r1, #0
 8011470:	bf0c      	ite	eq
 8011472:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011476:	2340      	movne	r3, #64	; 0x40
 8011478:	2000      	movs	r0, #0
 801147a:	6031      	str	r1, [r6, #0]
 801147c:	602b      	str	r3, [r5, #0]
 801147e:	b016      	add	sp, #88	; 0x58
 8011480:	bd70      	pop	{r4, r5, r6, pc}
 8011482:	466a      	mov	r2, sp
 8011484:	f000 f862 	bl	801154c <_fstat_r>
 8011488:	2800      	cmp	r0, #0
 801148a:	dbec      	blt.n	8011466 <__swhatbuf_r+0x12>
 801148c:	9901      	ldr	r1, [sp, #4]
 801148e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011492:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011496:	4259      	negs	r1, r3
 8011498:	4159      	adcs	r1, r3
 801149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801149e:	e7eb      	b.n	8011478 <__swhatbuf_r+0x24>

080114a0 <__smakebuf_r>:
 80114a0:	898b      	ldrh	r3, [r1, #12]
 80114a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114a4:	079d      	lsls	r5, r3, #30
 80114a6:	4606      	mov	r6, r0
 80114a8:	460c      	mov	r4, r1
 80114aa:	d507      	bpl.n	80114bc <__smakebuf_r+0x1c>
 80114ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114b0:	6023      	str	r3, [r4, #0]
 80114b2:	6123      	str	r3, [r4, #16]
 80114b4:	2301      	movs	r3, #1
 80114b6:	6163      	str	r3, [r4, #20]
 80114b8:	b002      	add	sp, #8
 80114ba:	bd70      	pop	{r4, r5, r6, pc}
 80114bc:	ab01      	add	r3, sp, #4
 80114be:	466a      	mov	r2, sp
 80114c0:	f7ff ffc8 	bl	8011454 <__swhatbuf_r>
 80114c4:	9900      	ldr	r1, [sp, #0]
 80114c6:	4605      	mov	r5, r0
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7ff fb8f 	bl	8010bec <_malloc_r>
 80114ce:	b948      	cbnz	r0, 80114e4 <__smakebuf_r+0x44>
 80114d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114d4:	059a      	lsls	r2, r3, #22
 80114d6:	d4ef      	bmi.n	80114b8 <__smakebuf_r+0x18>
 80114d8:	f023 0303 	bic.w	r3, r3, #3
 80114dc:	f043 0302 	orr.w	r3, r3, #2
 80114e0:	81a3      	strh	r3, [r4, #12]
 80114e2:	e7e3      	b.n	80114ac <__smakebuf_r+0xc>
 80114e4:	89a3      	ldrh	r3, [r4, #12]
 80114e6:	6020      	str	r0, [r4, #0]
 80114e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114ec:	81a3      	strh	r3, [r4, #12]
 80114ee:	9b00      	ldr	r3, [sp, #0]
 80114f0:	6163      	str	r3, [r4, #20]
 80114f2:	9b01      	ldr	r3, [sp, #4]
 80114f4:	6120      	str	r0, [r4, #16]
 80114f6:	b15b      	cbz	r3, 8011510 <__smakebuf_r+0x70>
 80114f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80114fc:	4630      	mov	r0, r6
 80114fe:	f000 f837 	bl	8011570 <_isatty_r>
 8011502:	b128      	cbz	r0, 8011510 <__smakebuf_r+0x70>
 8011504:	89a3      	ldrh	r3, [r4, #12]
 8011506:	f023 0303 	bic.w	r3, r3, #3
 801150a:	f043 0301 	orr.w	r3, r3, #1
 801150e:	81a3      	strh	r3, [r4, #12]
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	431d      	orrs	r5, r3
 8011514:	81a5      	strh	r5, [r4, #12]
 8011516:	e7cf      	b.n	80114b8 <__smakebuf_r+0x18>

08011518 <memmove>:
 8011518:	4288      	cmp	r0, r1
 801151a:	b510      	push	{r4, lr}
 801151c:	eb01 0402 	add.w	r4, r1, r2
 8011520:	d902      	bls.n	8011528 <memmove+0x10>
 8011522:	4284      	cmp	r4, r0
 8011524:	4623      	mov	r3, r4
 8011526:	d807      	bhi.n	8011538 <memmove+0x20>
 8011528:	1e43      	subs	r3, r0, #1
 801152a:	42a1      	cmp	r1, r4
 801152c:	d008      	beq.n	8011540 <memmove+0x28>
 801152e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011532:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011536:	e7f8      	b.n	801152a <memmove+0x12>
 8011538:	4402      	add	r2, r0
 801153a:	4601      	mov	r1, r0
 801153c:	428a      	cmp	r2, r1
 801153e:	d100      	bne.n	8011542 <memmove+0x2a>
 8011540:	bd10      	pop	{r4, pc}
 8011542:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011546:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801154a:	e7f7      	b.n	801153c <memmove+0x24>

0801154c <_fstat_r>:
 801154c:	b538      	push	{r3, r4, r5, lr}
 801154e:	4d07      	ldr	r5, [pc, #28]	; (801156c <_fstat_r+0x20>)
 8011550:	2300      	movs	r3, #0
 8011552:	4604      	mov	r4, r0
 8011554:	4608      	mov	r0, r1
 8011556:	4611      	mov	r1, r2
 8011558:	602b      	str	r3, [r5, #0]
 801155a:	f7ef fc85 	bl	8000e68 <_fstat>
 801155e:	1c43      	adds	r3, r0, #1
 8011560:	d102      	bne.n	8011568 <_fstat_r+0x1c>
 8011562:	682b      	ldr	r3, [r5, #0]
 8011564:	b103      	cbz	r3, 8011568 <_fstat_r+0x1c>
 8011566:	6023      	str	r3, [r4, #0]
 8011568:	bd38      	pop	{r3, r4, r5, pc}
 801156a:	bf00      	nop
 801156c:	24005b6c 	.word	0x24005b6c

08011570 <_isatty_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4d06      	ldr	r5, [pc, #24]	; (801158c <_isatty_r+0x1c>)
 8011574:	2300      	movs	r3, #0
 8011576:	4604      	mov	r4, r0
 8011578:	4608      	mov	r0, r1
 801157a:	602b      	str	r3, [r5, #0]
 801157c:	f7ef fc36 	bl	8000dec <_isatty>
 8011580:	1c43      	adds	r3, r0, #1
 8011582:	d102      	bne.n	801158a <_isatty_r+0x1a>
 8011584:	682b      	ldr	r3, [r5, #0]
 8011586:	b103      	cbz	r3, 801158a <_isatty_r+0x1a>
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	bd38      	pop	{r3, r4, r5, pc}
 801158c:	24005b6c 	.word	0x24005b6c

08011590 <_sbrk_r>:
 8011590:	b538      	push	{r3, r4, r5, lr}
 8011592:	4d06      	ldr	r5, [pc, #24]	; (80115ac <_sbrk_r+0x1c>)
 8011594:	2300      	movs	r3, #0
 8011596:	4604      	mov	r4, r0
 8011598:	4608      	mov	r0, r1
 801159a:	602b      	str	r3, [r5, #0]
 801159c:	f7f0 fb7a 	bl	8001c94 <_sbrk>
 80115a0:	1c43      	adds	r3, r0, #1
 80115a2:	d102      	bne.n	80115aa <_sbrk_r+0x1a>
 80115a4:	682b      	ldr	r3, [r5, #0]
 80115a6:	b103      	cbz	r3, 80115aa <_sbrk_r+0x1a>
 80115a8:	6023      	str	r3, [r4, #0]
 80115aa:	bd38      	pop	{r3, r4, r5, pc}
 80115ac:	24005b6c 	.word	0x24005b6c

080115b0 <abort>:
 80115b0:	b508      	push	{r3, lr}
 80115b2:	2006      	movs	r0, #6
 80115b4:	f000 fa34 	bl	8011a20 <raise>
 80115b8:	2001      	movs	r0, #1
 80115ba:	f7f0 fb60 	bl	8001c7e <_exit>

080115be <_realloc_r>:
 80115be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115c2:	4680      	mov	r8, r0
 80115c4:	4614      	mov	r4, r2
 80115c6:	460e      	mov	r6, r1
 80115c8:	b921      	cbnz	r1, 80115d4 <_realloc_r+0x16>
 80115ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115ce:	4611      	mov	r1, r2
 80115d0:	f7ff bb0c 	b.w	8010bec <_malloc_r>
 80115d4:	b92a      	cbnz	r2, 80115e2 <_realloc_r+0x24>
 80115d6:	f7ff fa95 	bl	8010b04 <_free_r>
 80115da:	4625      	mov	r5, r4
 80115dc:	4628      	mov	r0, r5
 80115de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115e2:	f000 fa39 	bl	8011a58 <_malloc_usable_size_r>
 80115e6:	4284      	cmp	r4, r0
 80115e8:	4607      	mov	r7, r0
 80115ea:	d802      	bhi.n	80115f2 <_realloc_r+0x34>
 80115ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80115f0:	d812      	bhi.n	8011618 <_realloc_r+0x5a>
 80115f2:	4621      	mov	r1, r4
 80115f4:	4640      	mov	r0, r8
 80115f6:	f7ff faf9 	bl	8010bec <_malloc_r>
 80115fa:	4605      	mov	r5, r0
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d0ed      	beq.n	80115dc <_realloc_r+0x1e>
 8011600:	42bc      	cmp	r4, r7
 8011602:	4622      	mov	r2, r4
 8011604:	4631      	mov	r1, r6
 8011606:	bf28      	it	cs
 8011608:	463a      	movcs	r2, r7
 801160a:	f7ff fa4e 	bl	8010aaa <memcpy>
 801160e:	4631      	mov	r1, r6
 8011610:	4640      	mov	r0, r8
 8011612:	f7ff fa77 	bl	8010b04 <_free_r>
 8011616:	e7e1      	b.n	80115dc <_realloc_r+0x1e>
 8011618:	4635      	mov	r5, r6
 801161a:	e7df      	b.n	80115dc <_realloc_r+0x1e>

0801161c <__sfputc_r>:
 801161c:	6893      	ldr	r3, [r2, #8]
 801161e:	3b01      	subs	r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	b410      	push	{r4}
 8011624:	6093      	str	r3, [r2, #8]
 8011626:	da08      	bge.n	801163a <__sfputc_r+0x1e>
 8011628:	6994      	ldr	r4, [r2, #24]
 801162a:	42a3      	cmp	r3, r4
 801162c:	db01      	blt.n	8011632 <__sfputc_r+0x16>
 801162e:	290a      	cmp	r1, #10
 8011630:	d103      	bne.n	801163a <__sfputc_r+0x1e>
 8011632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011636:	f000 b935 	b.w	80118a4 <__swbuf_r>
 801163a:	6813      	ldr	r3, [r2, #0]
 801163c:	1c58      	adds	r0, r3, #1
 801163e:	6010      	str	r0, [r2, #0]
 8011640:	7019      	strb	r1, [r3, #0]
 8011642:	4608      	mov	r0, r1
 8011644:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011648:	4770      	bx	lr

0801164a <__sfputs_r>:
 801164a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164c:	4606      	mov	r6, r0
 801164e:	460f      	mov	r7, r1
 8011650:	4614      	mov	r4, r2
 8011652:	18d5      	adds	r5, r2, r3
 8011654:	42ac      	cmp	r4, r5
 8011656:	d101      	bne.n	801165c <__sfputs_r+0x12>
 8011658:	2000      	movs	r0, #0
 801165a:	e007      	b.n	801166c <__sfputs_r+0x22>
 801165c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011660:	463a      	mov	r2, r7
 8011662:	4630      	mov	r0, r6
 8011664:	f7ff ffda 	bl	801161c <__sfputc_r>
 8011668:	1c43      	adds	r3, r0, #1
 801166a:	d1f3      	bne.n	8011654 <__sfputs_r+0xa>
 801166c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011670 <_vfiprintf_r>:
 8011670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011674:	460d      	mov	r5, r1
 8011676:	b09d      	sub	sp, #116	; 0x74
 8011678:	4614      	mov	r4, r2
 801167a:	4698      	mov	r8, r3
 801167c:	4606      	mov	r6, r0
 801167e:	b118      	cbz	r0, 8011688 <_vfiprintf_r+0x18>
 8011680:	6a03      	ldr	r3, [r0, #32]
 8011682:	b90b      	cbnz	r3, 8011688 <_vfiprintf_r+0x18>
 8011684:	f7ff f822 	bl	80106cc <__sinit>
 8011688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801168a:	07d9      	lsls	r1, r3, #31
 801168c:	d405      	bmi.n	801169a <_vfiprintf_r+0x2a>
 801168e:	89ab      	ldrh	r3, [r5, #12]
 8011690:	059a      	lsls	r2, r3, #22
 8011692:	d402      	bmi.n	801169a <_vfiprintf_r+0x2a>
 8011694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011696:	f7ff fa06 	bl	8010aa6 <__retarget_lock_acquire_recursive>
 801169a:	89ab      	ldrh	r3, [r5, #12]
 801169c:	071b      	lsls	r3, r3, #28
 801169e:	d501      	bpl.n	80116a4 <_vfiprintf_r+0x34>
 80116a0:	692b      	ldr	r3, [r5, #16]
 80116a2:	b99b      	cbnz	r3, 80116cc <_vfiprintf_r+0x5c>
 80116a4:	4629      	mov	r1, r5
 80116a6:	4630      	mov	r0, r6
 80116a8:	f000 f93a 	bl	8011920 <__swsetup_r>
 80116ac:	b170      	cbz	r0, 80116cc <_vfiprintf_r+0x5c>
 80116ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80116b0:	07dc      	lsls	r4, r3, #31
 80116b2:	d504      	bpl.n	80116be <_vfiprintf_r+0x4e>
 80116b4:	f04f 30ff 	mov.w	r0, #4294967295
 80116b8:	b01d      	add	sp, #116	; 0x74
 80116ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116be:	89ab      	ldrh	r3, [r5, #12]
 80116c0:	0598      	lsls	r0, r3, #22
 80116c2:	d4f7      	bmi.n	80116b4 <_vfiprintf_r+0x44>
 80116c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80116c6:	f7ff f9ef 	bl	8010aa8 <__retarget_lock_release_recursive>
 80116ca:	e7f3      	b.n	80116b4 <_vfiprintf_r+0x44>
 80116cc:	2300      	movs	r3, #0
 80116ce:	9309      	str	r3, [sp, #36]	; 0x24
 80116d0:	2320      	movs	r3, #32
 80116d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80116da:	2330      	movs	r3, #48	; 0x30
 80116dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011890 <_vfiprintf_r+0x220>
 80116e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116e4:	f04f 0901 	mov.w	r9, #1
 80116e8:	4623      	mov	r3, r4
 80116ea:	469a      	mov	sl, r3
 80116ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116f0:	b10a      	cbz	r2, 80116f6 <_vfiprintf_r+0x86>
 80116f2:	2a25      	cmp	r2, #37	; 0x25
 80116f4:	d1f9      	bne.n	80116ea <_vfiprintf_r+0x7a>
 80116f6:	ebba 0b04 	subs.w	fp, sl, r4
 80116fa:	d00b      	beq.n	8011714 <_vfiprintf_r+0xa4>
 80116fc:	465b      	mov	r3, fp
 80116fe:	4622      	mov	r2, r4
 8011700:	4629      	mov	r1, r5
 8011702:	4630      	mov	r0, r6
 8011704:	f7ff ffa1 	bl	801164a <__sfputs_r>
 8011708:	3001      	adds	r0, #1
 801170a:	f000 80a9 	beq.w	8011860 <_vfiprintf_r+0x1f0>
 801170e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011710:	445a      	add	r2, fp
 8011712:	9209      	str	r2, [sp, #36]	; 0x24
 8011714:	f89a 3000 	ldrb.w	r3, [sl]
 8011718:	2b00      	cmp	r3, #0
 801171a:	f000 80a1 	beq.w	8011860 <_vfiprintf_r+0x1f0>
 801171e:	2300      	movs	r3, #0
 8011720:	f04f 32ff 	mov.w	r2, #4294967295
 8011724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011728:	f10a 0a01 	add.w	sl, sl, #1
 801172c:	9304      	str	r3, [sp, #16]
 801172e:	9307      	str	r3, [sp, #28]
 8011730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011734:	931a      	str	r3, [sp, #104]	; 0x68
 8011736:	4654      	mov	r4, sl
 8011738:	2205      	movs	r2, #5
 801173a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801173e:	4854      	ldr	r0, [pc, #336]	; (8011890 <_vfiprintf_r+0x220>)
 8011740:	f7ee fdce 	bl	80002e0 <memchr>
 8011744:	9a04      	ldr	r2, [sp, #16]
 8011746:	b9d8      	cbnz	r0, 8011780 <_vfiprintf_r+0x110>
 8011748:	06d1      	lsls	r1, r2, #27
 801174a:	bf44      	itt	mi
 801174c:	2320      	movmi	r3, #32
 801174e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011752:	0713      	lsls	r3, r2, #28
 8011754:	bf44      	itt	mi
 8011756:	232b      	movmi	r3, #43	; 0x2b
 8011758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801175c:	f89a 3000 	ldrb.w	r3, [sl]
 8011760:	2b2a      	cmp	r3, #42	; 0x2a
 8011762:	d015      	beq.n	8011790 <_vfiprintf_r+0x120>
 8011764:	9a07      	ldr	r2, [sp, #28]
 8011766:	4654      	mov	r4, sl
 8011768:	2000      	movs	r0, #0
 801176a:	f04f 0c0a 	mov.w	ip, #10
 801176e:	4621      	mov	r1, r4
 8011770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011774:	3b30      	subs	r3, #48	; 0x30
 8011776:	2b09      	cmp	r3, #9
 8011778:	d94d      	bls.n	8011816 <_vfiprintf_r+0x1a6>
 801177a:	b1b0      	cbz	r0, 80117aa <_vfiprintf_r+0x13a>
 801177c:	9207      	str	r2, [sp, #28]
 801177e:	e014      	b.n	80117aa <_vfiprintf_r+0x13a>
 8011780:	eba0 0308 	sub.w	r3, r0, r8
 8011784:	fa09 f303 	lsl.w	r3, r9, r3
 8011788:	4313      	orrs	r3, r2
 801178a:	9304      	str	r3, [sp, #16]
 801178c:	46a2      	mov	sl, r4
 801178e:	e7d2      	b.n	8011736 <_vfiprintf_r+0xc6>
 8011790:	9b03      	ldr	r3, [sp, #12]
 8011792:	1d19      	adds	r1, r3, #4
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	9103      	str	r1, [sp, #12]
 8011798:	2b00      	cmp	r3, #0
 801179a:	bfbb      	ittet	lt
 801179c:	425b      	neglt	r3, r3
 801179e:	f042 0202 	orrlt.w	r2, r2, #2
 80117a2:	9307      	strge	r3, [sp, #28]
 80117a4:	9307      	strlt	r3, [sp, #28]
 80117a6:	bfb8      	it	lt
 80117a8:	9204      	strlt	r2, [sp, #16]
 80117aa:	7823      	ldrb	r3, [r4, #0]
 80117ac:	2b2e      	cmp	r3, #46	; 0x2e
 80117ae:	d10c      	bne.n	80117ca <_vfiprintf_r+0x15a>
 80117b0:	7863      	ldrb	r3, [r4, #1]
 80117b2:	2b2a      	cmp	r3, #42	; 0x2a
 80117b4:	d134      	bne.n	8011820 <_vfiprintf_r+0x1b0>
 80117b6:	9b03      	ldr	r3, [sp, #12]
 80117b8:	1d1a      	adds	r2, r3, #4
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	9203      	str	r2, [sp, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	bfb8      	it	lt
 80117c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80117c6:	3402      	adds	r4, #2
 80117c8:	9305      	str	r3, [sp, #20]
 80117ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80118a0 <_vfiprintf_r+0x230>
 80117ce:	7821      	ldrb	r1, [r4, #0]
 80117d0:	2203      	movs	r2, #3
 80117d2:	4650      	mov	r0, sl
 80117d4:	f7ee fd84 	bl	80002e0 <memchr>
 80117d8:	b138      	cbz	r0, 80117ea <_vfiprintf_r+0x17a>
 80117da:	9b04      	ldr	r3, [sp, #16]
 80117dc:	eba0 000a 	sub.w	r0, r0, sl
 80117e0:	2240      	movs	r2, #64	; 0x40
 80117e2:	4082      	lsls	r2, r0
 80117e4:	4313      	orrs	r3, r2
 80117e6:	3401      	adds	r4, #1
 80117e8:	9304      	str	r3, [sp, #16]
 80117ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117ee:	4829      	ldr	r0, [pc, #164]	; (8011894 <_vfiprintf_r+0x224>)
 80117f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117f4:	2206      	movs	r2, #6
 80117f6:	f7ee fd73 	bl	80002e0 <memchr>
 80117fa:	2800      	cmp	r0, #0
 80117fc:	d03f      	beq.n	801187e <_vfiprintf_r+0x20e>
 80117fe:	4b26      	ldr	r3, [pc, #152]	; (8011898 <_vfiprintf_r+0x228>)
 8011800:	bb1b      	cbnz	r3, 801184a <_vfiprintf_r+0x1da>
 8011802:	9b03      	ldr	r3, [sp, #12]
 8011804:	3307      	adds	r3, #7
 8011806:	f023 0307 	bic.w	r3, r3, #7
 801180a:	3308      	adds	r3, #8
 801180c:	9303      	str	r3, [sp, #12]
 801180e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011810:	443b      	add	r3, r7
 8011812:	9309      	str	r3, [sp, #36]	; 0x24
 8011814:	e768      	b.n	80116e8 <_vfiprintf_r+0x78>
 8011816:	fb0c 3202 	mla	r2, ip, r2, r3
 801181a:	460c      	mov	r4, r1
 801181c:	2001      	movs	r0, #1
 801181e:	e7a6      	b.n	801176e <_vfiprintf_r+0xfe>
 8011820:	2300      	movs	r3, #0
 8011822:	3401      	adds	r4, #1
 8011824:	9305      	str	r3, [sp, #20]
 8011826:	4619      	mov	r1, r3
 8011828:	f04f 0c0a 	mov.w	ip, #10
 801182c:	4620      	mov	r0, r4
 801182e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011832:	3a30      	subs	r2, #48	; 0x30
 8011834:	2a09      	cmp	r2, #9
 8011836:	d903      	bls.n	8011840 <_vfiprintf_r+0x1d0>
 8011838:	2b00      	cmp	r3, #0
 801183a:	d0c6      	beq.n	80117ca <_vfiprintf_r+0x15a>
 801183c:	9105      	str	r1, [sp, #20]
 801183e:	e7c4      	b.n	80117ca <_vfiprintf_r+0x15a>
 8011840:	fb0c 2101 	mla	r1, ip, r1, r2
 8011844:	4604      	mov	r4, r0
 8011846:	2301      	movs	r3, #1
 8011848:	e7f0      	b.n	801182c <_vfiprintf_r+0x1bc>
 801184a:	ab03      	add	r3, sp, #12
 801184c:	9300      	str	r3, [sp, #0]
 801184e:	462a      	mov	r2, r5
 8011850:	4b12      	ldr	r3, [pc, #72]	; (801189c <_vfiprintf_r+0x22c>)
 8011852:	a904      	add	r1, sp, #16
 8011854:	4630      	mov	r0, r6
 8011856:	f3af 8000 	nop.w
 801185a:	4607      	mov	r7, r0
 801185c:	1c78      	adds	r0, r7, #1
 801185e:	d1d6      	bne.n	801180e <_vfiprintf_r+0x19e>
 8011860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011862:	07d9      	lsls	r1, r3, #31
 8011864:	d405      	bmi.n	8011872 <_vfiprintf_r+0x202>
 8011866:	89ab      	ldrh	r3, [r5, #12]
 8011868:	059a      	lsls	r2, r3, #22
 801186a:	d402      	bmi.n	8011872 <_vfiprintf_r+0x202>
 801186c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801186e:	f7ff f91b 	bl	8010aa8 <__retarget_lock_release_recursive>
 8011872:	89ab      	ldrh	r3, [r5, #12]
 8011874:	065b      	lsls	r3, r3, #25
 8011876:	f53f af1d 	bmi.w	80116b4 <_vfiprintf_r+0x44>
 801187a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801187c:	e71c      	b.n	80116b8 <_vfiprintf_r+0x48>
 801187e:	ab03      	add	r3, sp, #12
 8011880:	9300      	str	r3, [sp, #0]
 8011882:	462a      	mov	r2, r5
 8011884:	4b05      	ldr	r3, [pc, #20]	; (801189c <_vfiprintf_r+0x22c>)
 8011886:	a904      	add	r1, sp, #16
 8011888:	4630      	mov	r0, r6
 801188a:	f7ff fc01 	bl	8011090 <_printf_i>
 801188e:	e7e4      	b.n	801185a <_vfiprintf_r+0x1ea>
 8011890:	0801466b 	.word	0x0801466b
 8011894:	08014675 	.word	0x08014675
 8011898:	00000000 	.word	0x00000000
 801189c:	0801164b 	.word	0x0801164b
 80118a0:	08014671 	.word	0x08014671

080118a4 <__swbuf_r>:
 80118a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118a6:	460e      	mov	r6, r1
 80118a8:	4614      	mov	r4, r2
 80118aa:	4605      	mov	r5, r0
 80118ac:	b118      	cbz	r0, 80118b6 <__swbuf_r+0x12>
 80118ae:	6a03      	ldr	r3, [r0, #32]
 80118b0:	b90b      	cbnz	r3, 80118b6 <__swbuf_r+0x12>
 80118b2:	f7fe ff0b 	bl	80106cc <__sinit>
 80118b6:	69a3      	ldr	r3, [r4, #24]
 80118b8:	60a3      	str	r3, [r4, #8]
 80118ba:	89a3      	ldrh	r3, [r4, #12]
 80118bc:	071a      	lsls	r2, r3, #28
 80118be:	d525      	bpl.n	801190c <__swbuf_r+0x68>
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	b31b      	cbz	r3, 801190c <__swbuf_r+0x68>
 80118c4:	6823      	ldr	r3, [r4, #0]
 80118c6:	6922      	ldr	r2, [r4, #16]
 80118c8:	1a98      	subs	r0, r3, r2
 80118ca:	6963      	ldr	r3, [r4, #20]
 80118cc:	b2f6      	uxtb	r6, r6
 80118ce:	4283      	cmp	r3, r0
 80118d0:	4637      	mov	r7, r6
 80118d2:	dc04      	bgt.n	80118de <__swbuf_r+0x3a>
 80118d4:	4621      	mov	r1, r4
 80118d6:	4628      	mov	r0, r5
 80118d8:	f7ff fd82 	bl	80113e0 <_fflush_r>
 80118dc:	b9e0      	cbnz	r0, 8011918 <__swbuf_r+0x74>
 80118de:	68a3      	ldr	r3, [r4, #8]
 80118e0:	3b01      	subs	r3, #1
 80118e2:	60a3      	str	r3, [r4, #8]
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	1c5a      	adds	r2, r3, #1
 80118e8:	6022      	str	r2, [r4, #0]
 80118ea:	701e      	strb	r6, [r3, #0]
 80118ec:	6962      	ldr	r2, [r4, #20]
 80118ee:	1c43      	adds	r3, r0, #1
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d004      	beq.n	80118fe <__swbuf_r+0x5a>
 80118f4:	89a3      	ldrh	r3, [r4, #12]
 80118f6:	07db      	lsls	r3, r3, #31
 80118f8:	d506      	bpl.n	8011908 <__swbuf_r+0x64>
 80118fa:	2e0a      	cmp	r6, #10
 80118fc:	d104      	bne.n	8011908 <__swbuf_r+0x64>
 80118fe:	4621      	mov	r1, r4
 8011900:	4628      	mov	r0, r5
 8011902:	f7ff fd6d 	bl	80113e0 <_fflush_r>
 8011906:	b938      	cbnz	r0, 8011918 <__swbuf_r+0x74>
 8011908:	4638      	mov	r0, r7
 801190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801190c:	4621      	mov	r1, r4
 801190e:	4628      	mov	r0, r5
 8011910:	f000 f806 	bl	8011920 <__swsetup_r>
 8011914:	2800      	cmp	r0, #0
 8011916:	d0d5      	beq.n	80118c4 <__swbuf_r+0x20>
 8011918:	f04f 37ff 	mov.w	r7, #4294967295
 801191c:	e7f4      	b.n	8011908 <__swbuf_r+0x64>
	...

08011920 <__swsetup_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	4b2a      	ldr	r3, [pc, #168]	; (80119cc <__swsetup_r+0xac>)
 8011924:	4605      	mov	r5, r0
 8011926:	6818      	ldr	r0, [r3, #0]
 8011928:	460c      	mov	r4, r1
 801192a:	b118      	cbz	r0, 8011934 <__swsetup_r+0x14>
 801192c:	6a03      	ldr	r3, [r0, #32]
 801192e:	b90b      	cbnz	r3, 8011934 <__swsetup_r+0x14>
 8011930:	f7fe fecc 	bl	80106cc <__sinit>
 8011934:	89a3      	ldrh	r3, [r4, #12]
 8011936:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801193a:	0718      	lsls	r0, r3, #28
 801193c:	d422      	bmi.n	8011984 <__swsetup_r+0x64>
 801193e:	06d9      	lsls	r1, r3, #27
 8011940:	d407      	bmi.n	8011952 <__swsetup_r+0x32>
 8011942:	2309      	movs	r3, #9
 8011944:	602b      	str	r3, [r5, #0]
 8011946:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801194a:	81a3      	strh	r3, [r4, #12]
 801194c:	f04f 30ff 	mov.w	r0, #4294967295
 8011950:	e034      	b.n	80119bc <__swsetup_r+0x9c>
 8011952:	0758      	lsls	r0, r3, #29
 8011954:	d512      	bpl.n	801197c <__swsetup_r+0x5c>
 8011956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011958:	b141      	cbz	r1, 801196c <__swsetup_r+0x4c>
 801195a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801195e:	4299      	cmp	r1, r3
 8011960:	d002      	beq.n	8011968 <__swsetup_r+0x48>
 8011962:	4628      	mov	r0, r5
 8011964:	f7ff f8ce 	bl	8010b04 <_free_r>
 8011968:	2300      	movs	r3, #0
 801196a:	6363      	str	r3, [r4, #52]	; 0x34
 801196c:	89a3      	ldrh	r3, [r4, #12]
 801196e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011972:	81a3      	strh	r3, [r4, #12]
 8011974:	2300      	movs	r3, #0
 8011976:	6063      	str	r3, [r4, #4]
 8011978:	6923      	ldr	r3, [r4, #16]
 801197a:	6023      	str	r3, [r4, #0]
 801197c:	89a3      	ldrh	r3, [r4, #12]
 801197e:	f043 0308 	orr.w	r3, r3, #8
 8011982:	81a3      	strh	r3, [r4, #12]
 8011984:	6923      	ldr	r3, [r4, #16]
 8011986:	b94b      	cbnz	r3, 801199c <__swsetup_r+0x7c>
 8011988:	89a3      	ldrh	r3, [r4, #12]
 801198a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801198e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011992:	d003      	beq.n	801199c <__swsetup_r+0x7c>
 8011994:	4621      	mov	r1, r4
 8011996:	4628      	mov	r0, r5
 8011998:	f7ff fd82 	bl	80114a0 <__smakebuf_r>
 801199c:	89a0      	ldrh	r0, [r4, #12]
 801199e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119a2:	f010 0301 	ands.w	r3, r0, #1
 80119a6:	d00a      	beq.n	80119be <__swsetup_r+0x9e>
 80119a8:	2300      	movs	r3, #0
 80119aa:	60a3      	str	r3, [r4, #8]
 80119ac:	6963      	ldr	r3, [r4, #20]
 80119ae:	425b      	negs	r3, r3
 80119b0:	61a3      	str	r3, [r4, #24]
 80119b2:	6923      	ldr	r3, [r4, #16]
 80119b4:	b943      	cbnz	r3, 80119c8 <__swsetup_r+0xa8>
 80119b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119ba:	d1c4      	bne.n	8011946 <__swsetup_r+0x26>
 80119bc:	bd38      	pop	{r3, r4, r5, pc}
 80119be:	0781      	lsls	r1, r0, #30
 80119c0:	bf58      	it	pl
 80119c2:	6963      	ldrpl	r3, [r4, #20]
 80119c4:	60a3      	str	r3, [r4, #8]
 80119c6:	e7f4      	b.n	80119b2 <__swsetup_r+0x92>
 80119c8:	2000      	movs	r0, #0
 80119ca:	e7f7      	b.n	80119bc <__swsetup_r+0x9c>
 80119cc:	240000c0 	.word	0x240000c0

080119d0 <_raise_r>:
 80119d0:	291f      	cmp	r1, #31
 80119d2:	b538      	push	{r3, r4, r5, lr}
 80119d4:	4604      	mov	r4, r0
 80119d6:	460d      	mov	r5, r1
 80119d8:	d904      	bls.n	80119e4 <_raise_r+0x14>
 80119da:	2316      	movs	r3, #22
 80119dc:	6003      	str	r3, [r0, #0]
 80119de:	f04f 30ff 	mov.w	r0, #4294967295
 80119e2:	bd38      	pop	{r3, r4, r5, pc}
 80119e4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80119e6:	b112      	cbz	r2, 80119ee <_raise_r+0x1e>
 80119e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119ec:	b94b      	cbnz	r3, 8011a02 <_raise_r+0x32>
 80119ee:	4620      	mov	r0, r4
 80119f0:	f000 f830 	bl	8011a54 <_getpid_r>
 80119f4:	462a      	mov	r2, r5
 80119f6:	4601      	mov	r1, r0
 80119f8:	4620      	mov	r0, r4
 80119fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119fe:	f000 b817 	b.w	8011a30 <_kill_r>
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d00a      	beq.n	8011a1c <_raise_r+0x4c>
 8011a06:	1c59      	adds	r1, r3, #1
 8011a08:	d103      	bne.n	8011a12 <_raise_r+0x42>
 8011a0a:	2316      	movs	r3, #22
 8011a0c:	6003      	str	r3, [r0, #0]
 8011a0e:	2001      	movs	r0, #1
 8011a10:	e7e7      	b.n	80119e2 <_raise_r+0x12>
 8011a12:	2400      	movs	r4, #0
 8011a14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a18:	4628      	mov	r0, r5
 8011a1a:	4798      	blx	r3
 8011a1c:	2000      	movs	r0, #0
 8011a1e:	e7e0      	b.n	80119e2 <_raise_r+0x12>

08011a20 <raise>:
 8011a20:	4b02      	ldr	r3, [pc, #8]	; (8011a2c <raise+0xc>)
 8011a22:	4601      	mov	r1, r0
 8011a24:	6818      	ldr	r0, [r3, #0]
 8011a26:	f7ff bfd3 	b.w	80119d0 <_raise_r>
 8011a2a:	bf00      	nop
 8011a2c:	240000c0 	.word	0x240000c0

08011a30 <_kill_r>:
 8011a30:	b538      	push	{r3, r4, r5, lr}
 8011a32:	4d07      	ldr	r5, [pc, #28]	; (8011a50 <_kill_r+0x20>)
 8011a34:	2300      	movs	r3, #0
 8011a36:	4604      	mov	r4, r0
 8011a38:	4608      	mov	r0, r1
 8011a3a:	4611      	mov	r1, r2
 8011a3c:	602b      	str	r3, [r5, #0]
 8011a3e:	f7f0 f90e 	bl	8001c5e <_kill>
 8011a42:	1c43      	adds	r3, r0, #1
 8011a44:	d102      	bne.n	8011a4c <_kill_r+0x1c>
 8011a46:	682b      	ldr	r3, [r5, #0]
 8011a48:	b103      	cbz	r3, 8011a4c <_kill_r+0x1c>
 8011a4a:	6023      	str	r3, [r4, #0]
 8011a4c:	bd38      	pop	{r3, r4, r5, pc}
 8011a4e:	bf00      	nop
 8011a50:	24005b6c 	.word	0x24005b6c

08011a54 <_getpid_r>:
 8011a54:	f7f0 b8fb 	b.w	8001c4e <_getpid>

08011a58 <_malloc_usable_size_r>:
 8011a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a5c:	1f18      	subs	r0, r3, #4
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	bfbc      	itt	lt
 8011a62:	580b      	ldrlt	r3, [r1, r0]
 8011a64:	18c0      	addlt	r0, r0, r3
 8011a66:	4770      	bx	lr

08011a68 <_gettimeofday>:
 8011a68:	4b02      	ldr	r3, [pc, #8]	; (8011a74 <_gettimeofday+0xc>)
 8011a6a:	2258      	movs	r2, #88	; 0x58
 8011a6c:	601a      	str	r2, [r3, #0]
 8011a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a72:	4770      	bx	lr
 8011a74:	24005b6c 	.word	0x24005b6c

08011a78 <_init>:
 8011a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a7a:	bf00      	nop
 8011a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a7e:	bc08      	pop	{r3}
 8011a80:	469e      	mov	lr, r3
 8011a82:	4770      	bx	lr

08011a84 <_fini>:
 8011a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a86:	bf00      	nop
 8011a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011a8a:	bc08      	pop	{r3}
 8011a8c:	469e      	mov	lr, r3
 8011a8e:	4770      	bx	lr
